{
	"scope": "source.ruby", 
 	"completions": 

 [ 
 	"ruby", 

 	{ "trigger": "ABAddressBookAddRecord", "contents": "ABAddressBookAddRecord(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef record}, ${3:CFErrorRef* error})" },  
    { "trigger": "ABAddressBookCopyArrayOfAllGroups", "contents": "ABAddressBookCopyArrayOfAllGroups(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookCopyArrayOfAllGroupsInSource", "contents": "ABAddressBookCopyArrayOfAllGroupsInSource(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef source})" },  
    { "trigger": "ABAddressBookCopyArrayOfAllPeople", "contents": "ABAddressBookCopyArrayOfAllPeople(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookCopyArrayOfAllPeopleInSource", "contents": "ABAddressBookCopyArrayOfAllPeopleInSource(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef source})" },  
    { "trigger": "ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering", "contents": "ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef source}, ${3:ABPersonSortOrdering sortOrdering})" },  
    { "trigger": "ABAddressBookCopyArrayOfAllSources", "contents": "ABAddressBookCopyArrayOfAllSources(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookCopyDefaultSource", "contents": "ABAddressBookCopyDefaultSource(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookCopyLocalizedLabel", "contents": "ABAddressBookCopyLocalizedLabel(${1:CFStringRef label})" },  
    { "trigger": "ABAddressBookCopyPeopleWithName", "contents": "ABAddressBookCopyPeopleWithName(${1:ABAddressBookRef addressBook}, ${2:CFStringRef name})" },  
    { "trigger": "ABAddressBookCreate" },  
    { "trigger": "ABAddressBookErrorDomain (CFStringRef)" },  
    { "trigger": "ABAddressBookGetGroupCount", "contents": "ABAddressBookGetGroupCount(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookGetGroupWithRecordID", "contents": "ABAddressBookGetGroupWithRecordID(${1:ABAddressBookRef addressBook}, ${2:ABRecordID recordID})" },  
    { "trigger": "ABAddressBookGetPersonCount", "contents": "ABAddressBookGetPersonCount(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookGetPersonWithRecordID", "contents": "ABAddressBookGetPersonWithRecordID(${1:ABAddressBookRef addressBook}, ${2:ABRecordID recordID})" },  
    { "trigger": "ABAddressBookGetSourceWithRecordID", "contents": "ABAddressBookGetSourceWithRecordID(${1:ABAddressBookRef addressBook}, ${2:ABRecordID sourceID})" },  
    { "trigger": "ABAddressBookHasUnsavedChanges", "contents": "ABAddressBookHasUnsavedChanges(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookRegisterExternalChangeCallback", "contents": "ABAddressBookRegisterExternalChangeCallback(${1:ABAddressBookRef addressBook}, ${2:ABExternalChangeCallback callback}, ${3:void* context})" },  
    { "trigger": "ABAddressBookRemoveRecord", "contents": "ABAddressBookRemoveRecord(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef record}, ${3:CFErrorRef* error})" },  
    { "trigger": "ABAddressBookRevert", "contents": "ABAddressBookRevert(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABAddressBookSave", "contents": "ABAddressBookSave(${1:ABAddressBookRef addressBook}, ${2:CFErrorRef* error})" },  
    { "trigger": "ABAddressBookUnregisterExternalChangeCallback", "contents": "ABAddressBookUnregisterExternalChangeCallback(${1:ABAddressBookRef addressBook}, ${2:ABExternalChangeCallback callback}, ${3:void* context})" },  
    { "trigger": "ABCreateStringWithAddressDictionary", "contents": "ABCreateStringWithAddressDictionary(${1:NSDictionary* address}, ${2:BOOL addCountryName})" },  
    { "trigger": "ABGroupAddMember", "contents": "ABGroupAddMember(${1:ABRecordRef group}, ${2:ABRecordRef person}, ${3:CFErrorRef* error})" },  
    { "trigger": "ABGroupCopyArrayOfAllMembers", "contents": "ABGroupCopyArrayOfAllMembers(${1:ABRecordRef group})" },  
    { "trigger": "ABGroupCopyArrayOfAllMembersWithSortOrdering", "contents": "ABGroupCopyArrayOfAllMembersWithSortOrdering(${1:ABRecordRef group}, ${2:ABPersonSortOrdering sortOrdering})" },  
    { "trigger": "ABGroupCopySource", "contents": "ABGroupCopySource(${1:ABRecordRef group})" },  
    { "trigger": "ABGroupCreate" },  
    { "trigger": "ABGroupCreateInSource", "contents": "ABGroupCreateInSource(${1:ABRecordRef source})" },  
    { "trigger": "ABGroupRemoveMember", "contents": "ABGroupRemoveMember(${1:ABRecordRef group}, ${2:ABRecordRef member}, ${3:CFErrorRef* error})" },  
    { "trigger": "ABMultiValueAddValueAndLabel", "contents": "ABMultiValueAddValueAndLabel(${1:ABMutableMultiValueRef multiValue}, ${2:CFTypeRef value}, ${3:CFStringRef label}, ${4:ABMultiValueIdentifier* outIdentifier})" },  
    { "trigger": "ABMultiValueCopyArrayOfAllValues", "contents": "ABMultiValueCopyArrayOfAllValues(${1:ABMultiValueRef multiValue})" },  
    { "trigger": "ABMultiValueCopyLabelAtIndex", "contents": "ABMultiValueCopyLabelAtIndex(${1:ABMultiValueRef multiValue}, ${2:CFIndex index})" },  
    { "trigger": "ABMultiValueCopyValueAtIndex", "contents": "ABMultiValueCopyValueAtIndex(${1:ABMultiValueRef multiValue}, ${2:CFIndex index})" },  
    { "trigger": "ABMultiValueCreateMutable", "contents": "ABMultiValueCreateMutable(${1:ABPropertyType type})" },  
    { "trigger": "ABMultiValueCreateMutableCopy", "contents": "ABMultiValueCreateMutableCopy(${1:ABMultiValueRef multiValue})" },  
    { "trigger": "ABMultiValueGetCount", "contents": "ABMultiValueGetCount(${1:ABMultiValueRef multiValue})" },  
    { "trigger": "ABMultiValueGetFirstIndexOfValue", "contents": "ABMultiValueGetFirstIndexOfValue(${1:ABMultiValueRef multiValue}, ${2:CFTypeRef value})" },  
    { "trigger": "ABMultiValueGetIdentifierAtIndex", "contents": "ABMultiValueGetIdentifierAtIndex(${1:ABMultiValueRef multiValue}, ${2:CFIndex index})" },  
    { "trigger": "ABMultiValueGetIndexForIdentifier", "contents": "ABMultiValueGetIndexForIdentifier(${1:ABMultiValueRef multiValue}, ${2:ABMultiValueIdentifier identifier})" },  
    { "trigger": "ABMultiValueGetPropertyType", "contents": "ABMultiValueGetPropertyType(${1:ABMultiValueRef multiValue})" },  
    { "trigger": "ABMultiValueInsertValueAndLabelAtIndex", "contents": "ABMultiValueInsertValueAndLabelAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFTypeRef value}, ${3:CFStringRef label}, ${4:CFIndex index}, ${5:ABMultiValueIdentifier* outIdentifier})" },  
    { "trigger": "ABMultiValueRemoveValueAndLabelAtIndex", "contents": "ABMultiValueRemoveValueAndLabelAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFIndex index})" },  
    { "trigger": "ABMultiValueReplaceLabelAtIndex", "contents": "ABMultiValueReplaceLabelAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFStringRef label}, ${3:CFIndex index})" },  
    { "trigger": "ABMultiValueReplaceValueAtIndex", "contents": "ABMultiValueReplaceValueAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFTypeRef value}, ${3:CFIndex index})" },  
    { "trigger": "ABNewPersonViewController" },  
    { "trigger": "ABNewPersonViewControllerDelegate" },  
    { "trigger": "ABPeoplePickerNavigationController" },  
    { "trigger": "ABPeoplePickerNavigationControllerDelegate" },  
    { "trigger": "ABPersonComparePeopleByName", "contents": "ABPersonComparePeopleByName(${1:ABRecordRef person1}, ${2:ABRecordRef person2}, ${3:ABPersonSortOrdering ordering})" },  
    { "trigger": "ABPersonCopyArrayOfAllLinkedPeople", "contents": "ABPersonCopyArrayOfAllLinkedPeople(${1:ABRecordRef person})" },  
    { "trigger": "ABPersonCopyImageData", "contents": "ABPersonCopyImageData(${1:ABRecordRef person})" },  
    { "trigger": "ABPersonCopyImageDataWithFormat", "contents": "ABPersonCopyImageDataWithFormat(${1:ABRecordRef person}, ${2:ABPersonImageFormat format})" },  
    { "trigger": "ABPersonCopyLocalizedPropertyName", "contents": "ABPersonCopyLocalizedPropertyName(${1:ABPropertyID property})" },  
    { "trigger": "ABPersonCopySource", "contents": "ABPersonCopySource(${1:ABRecordRef person})" },  
    { "trigger": "ABPersonCreate" },  
    { "trigger": "ABPersonCreateInSource", "contents": "ABPersonCreateInSource(${1:ABRecordRef source})" },  
    { "trigger": "ABPersonCreatePeopleInSourceWithVCardRepresentation", "contents": "ABPersonCreatePeopleInSourceWithVCardRepresentation(${1:ABRecordRef source}, ${2:CFDataRef vCardData})" },  
    { "trigger": "ABPersonCreateVCardRepresentationWithPeople", "contents": "ABPersonCreateVCardRepresentationWithPeople(${1:CFArrayRef people})" },  
    { "trigger": "ABPersonGetCompositeNameFormat" },  
    { "trigger": "ABPersonGetSortOrdering" },  
    { "trigger": "ABPersonGetTypeOfProperty", "contents": "ABPersonGetTypeOfProperty(${1:ABPropertyID property})" },  
    { "trigger": "ABPersonHasImageData", "contents": "ABPersonHasImageData(${1:ABRecordRef person})" },  
    { "trigger": "ABPersonRemoveImageData", "contents": "ABPersonRemoveImageData(${1:ABRecordRef person}, ${2:CFErrorRef* error})" },  
    { "trigger": "ABPersonSetImageData", "contents": "ABPersonSetImageData(${1:ABRecordRef person}, ${2:CFDataRef imageData}, ${3:CFErrorRef* error})" },  
    { "trigger": "ABPersonViewController" },  
    { "trigger": "ABPersonViewControllerDelegate" },  
    { "trigger": "ABRecordCopyCompositeName", "contents": "ABRecordCopyCompositeName(${1:ABRecordRef record})" },  
    { "trigger": "ABRecordCopyValue", "contents": "ABRecordCopyValue(${1:ABRecordRef record}, ${2:ABPropertyID property})" },  
    { "trigger": "ABRecordGetRecordID", "contents": "ABRecordGetRecordID(${1:ABRecordRef record})" },  
    { "trigger": "ABRecordGetRecordType", "contents": "ABRecordGetRecordType(${1:ABRecordRef record})" },  
    { "trigger": "ABRecordRemoveValue", "contents": "ABRecordRemoveValue(${1:ABRecordRef record}, ${2:ABPropertyID property}, ${3:CFErrorRef* error})" },  
    { "trigger": "ABRecordSetValue", "contents": "ABRecordSetValue(${1:ABRecordRef record}, ${2:ABPropertyID property}, ${3:CFTypeRef value}, ${4:CFErrorRef* error})" },  
    { "trigger": "ABRecordWithAddressBook:", "contents": "ABRecordWithAddressBook:(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "ABUnknownPersonViewController" },  
    { "trigger": "ABUnknownPersonViewControllerDelegate" },  
    { "trigger": "ACAccount" },  
    { "trigger": "ACAccountCredential" },  
    { "trigger": "ACAccountStore" },  
    { "trigger": "ACAccountStoreDidChangeNotification (NSString*)" },  
    { "trigger": "ACAccountType" },  
    { "trigger": "ACAccountTypeIdentifierTwitter (NSString*)" },  
    { "trigger": "ACErrorAccountAlreadyExists (5)" },  
    { "trigger": "ACErrorAccountAuthenticationFailed (3)" },  
    { "trigger": "ACErrorAccountMissingRequiredProperty (2)" },  
    { "trigger": "ACErrorAccountNotFound (6)" },  
    { "trigger": "ACErrorAccountTypeInvalid (4)" },  
    { "trigger": "ACErrorDomain (NSString*)" },  
    { "trigger": "ACErrorPermissionDenied (7)" },  
    { "trigger": "ACErrorUnknown (1)" },  
    { "trigger": "ADBannerContentSizeIdentifier320x50 (NSString*)" },  
    { "trigger": "ADBannerContentSizeIdentifier480x32 (NSString*)" },  
    { "trigger": "ADBannerContentSizeIdentifierLandscape (NSString*)" },  
    { "trigger": "ADBannerContentSizeIdentifierPortrait (NSString*)" },  
    { "trigger": "ADBannerView" },  
    { "trigger": "ADBannerViewDelegate" },  
    { "trigger": "ADBannerView.sizeFromBannerContentSizeIdentifier:", "contents": "ADBannerView.sizeFromBannerContentSizeIdentifier:(${1:NSString* contentSizeIdentifier})" },  
    { "trigger": "ADErrorApplicationInactive (6)" },  
    { "trigger": "ADErrorBannerVisibleWithoutContent (5)" },  
    { "trigger": "ADErrorConfigurationError (4)" },  
    { "trigger": "ADErrorDomain (NSString*)" },  
    { "trigger": "ADErrorInventoryUnavailable (3)" },  
    { "trigger": "ADErrorLoadingThrottled (2)" },  
    { "trigger": "ADErrorServerFailure (1)" },  
    { "trigger": "ADErrorUnknown (0)" },  
    { "trigger": "ADInterstitialAd" },  
    { "trigger": "ADInterstitialAdDelegate" },  
    { "trigger": "ALAsset" },  
    { "trigger": "ALAssetOrientationDown (1)" },  
    { "trigger": "ALAssetOrientationDownMirrored (5)" },  
    { "trigger": "ALAssetOrientationLeft (2)" },  
    { "trigger": "ALAssetOrientationLeftMirrored (6)" },  
    { "trigger": "ALAssetOrientationRight (3)" },  
    { "trigger": "ALAssetOrientationRightMirrored (7)" },  
    { "trigger": "ALAssetOrientationUp (0)" },  
    { "trigger": "ALAssetOrientationUpMirrored (4)" },  
    { "trigger": "ALAssetPropertyDate (NSString*)" },  
    { "trigger": "ALAssetPropertyDuration (NSString*)" },  
    { "trigger": "ALAssetPropertyLocation (NSString*)" },  
    { "trigger": "ALAssetPropertyOrientation (NSString*)" },  
    { "trigger": "ALAssetPropertyRepresentations (NSString*)" },  
    { "trigger": "ALAssetPropertyType (NSString*)" },  
    { "trigger": "ALAssetPropertyURLs (NSString*)" },  
    { "trigger": "ALAssetRepresentation" },  
    { "trigger": "ALAssetTypePhoto (NSString*)" },  
    { "trigger": "ALAssetTypeUnknown (NSString*)" },  
    { "trigger": "ALAssetTypeVideo (NSString*)" },  
    { "trigger": "ALAssetsFilter" },  
    { "trigger": "ALAssetsFilter.allAssets" },  
    { "trigger": "ALAssetsFilter.allPhotos" },  
    { "trigger": "ALAssetsFilter.allVideos" },  
    { "trigger": "ALAssetsGroup" },  
    { "trigger": "ALAssetsGroupAlbum (2)" },  
    { "trigger": "ALAssetsGroupAll (4294967295)" },  
    { "trigger": "ALAssetsGroupEvent (4)" },  
    { "trigger": "ALAssetsGroupFaces (8)" },  
    { "trigger": "ALAssetsGroupLibrary (1)" },  
    { "trigger": "ALAssetsGroupPhotoStream (32)" },  
    { "trigger": "ALAssetsGroupPropertyName (NSString*)" },  
    { "trigger": "ALAssetsGroupPropertyPersistentID (NSString*)" },  
    { "trigger": "ALAssetsGroupPropertyType (NSString*)" },  
    { "trigger": "ALAssetsGroupPropertyURL (NSString*)" },  
    { "trigger": "ALAssetsGroupSavedPhotos (16)" },  
    { "trigger": "ALAssetsLibrary" },  
    { "trigger": "ALAssetsLibraryAccessGloballyDeniedError (-3312)" },  
    { "trigger": "ALAssetsLibraryAccessUserDeniedError (-3311)" },  
    { "trigger": "ALAssetsLibraryChangedNotification (NSString*)" },  
    { "trigger": "ALAssetsLibraryDataUnavailableError (-3310)" },  
    { "trigger": "ALAssetsLibraryErrorDomain (NSString*)" },  
    { "trigger": "ALAssetsLibraryUnknownError (-1)" },  
    { "trigger": "ALAssetsLibraryWriteBusyError (-3301)" },  
    { "trigger": "ALAssetsLibraryWriteDataEncodingError (-3304)" },  
    { "trigger": "ALAssetsLibraryWriteDiskSpaceError (-3305)" },  
    { "trigger": "ALAssetsLibraryWriteFailedError (-3300)" },  
    { "trigger": "ALAssetsLibraryWriteIncompatibleDataError (-3303)" },  
    { "trigger": "ALAssetsLibraryWriteInvalidDataError (-3302)" },  
    { "trigger": "ALC_ALL_ATTRIBUTES (4099)" },  
    { "trigger": "ALC_ALL_DEVICES_SPECIFIER (4115)" },  
    { "trigger": "ALC_ASA_OBSTRUCTION (1868723060)" },  
    { "trigger": "ALC_ASA_OCCLUSION (1868784492)" },  
    { "trigger": "ALC_ASA_REVERB_EQ_BANDWITH (1920361826)" },  
    { "trigger": "ALC_ASA_REVERB_EQ_FREQ (1920361830)" },  
    { "trigger": "ALC_ASA_REVERB_EQ_GAIN (1920361831)" },  
    { "trigger": "ALC_ASA_REVERB_GLOBAL_LEVEL (1920362348)" },  
    { "trigger": "ALC_ASA_REVERB_ON (1920364398)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE (1920365172)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_Cathedral (8)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeChamber (7)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeHall (4)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeHall2 (12)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeRoom (2)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeRoom2 (9)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumChamber (6)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall (3)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall2 (10)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall3 (11)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumRoom (1)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_Plate (5)" },  
    { "trigger": "ALC_ASA_REVERB_ROOM_TYPE_SmallRoom (0)" },  
    { "trigger": "ALC_ASA_REVERB_SEND_LEVEL (1920365420)" },  
    { "trigger": "ALC_ATTRIBUTES_SIZE (4098)" },  
    { "trigger": "ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER (785)" },  
    { "trigger": "ALC_CAPTURE_DEVICE_SPECIFIER (784)" },  
    { "trigger": "ALC_CAPTURE_SAMPLES (786)" },  
    { "trigger": "ALC_DEFAULT_ALL_DEVICES_SPECIFIER (4114)" },  
    { "trigger": "ALC_DEFAULT_DEVICE_SPECIFIER (4100)" },  
    { "trigger": "ALC_DEVICE_SPECIFIER (4101)" },  
    { "trigger": "ALC_EXTENSIONS (4102)" },  
    { "trigger": "ALC_FALSE (0)" },  
    { "trigger": "ALC_FREQUENCY (4103)" },  
    { "trigger": "ALC_INVALID (0)" },  
    { "trigger": "ALC_INVALID_CONTEXT (40962)" },  
    { "trigger": "ALC_INVALID_DEVICE (40961)" },  
    { "trigger": "ALC_INVALID_ENUM (40963)" },  
    { "trigger": "ALC_INVALID_VALUE (40964)" },  
    { "trigger": "ALC_IPHONE_SPATIAL_RENDERING_QUALITY_HEADPHONES (1751412840)" },  
    { "trigger": "ALC_MAC_OSX_RENDER_CHANNEL_COUNT_STEREO (1919120244)" },  
    { "trigger": "ALC_MAC_OSX_SPATIAL_RENDERING_QUALITY_HIGH (1920034921)" },  
    { "trigger": "ALC_MAC_OSX_SPATIAL_RENDERING_QUALITY_LOW (1919183983)" },  
    { "trigger": "ALC_MAJOR_VERSION (4096)" },  
    { "trigger": "ALC_MINOR_VERSION (4097)" },  
    { "trigger": "ALC_MONO_SOURCES (4112)" },  
    { "trigger": "ALC_NO_ERROR (0)" },  
    { "trigger": "ALC_OUT_OF_MEMORY (40965)" },  
    { "trigger": "ALC_REFRESH (4104)" },  
    { "trigger": "ALC_STEREO_SOURCES (4113)" },  
    { "trigger": "ALC_SYNC (4105)" },  
    { "trigger": "ALC_TRUE (1)" },  
    { "trigger": "ALC_VERSION_0_1 (1)" },  
    { "trigger": "ALErrorInvalidProperty (NSString*)" },  
    { "trigger": "AL_BITS (8194)" },  
    { "trigger": "AL_BUFFER (4105)" },  
    { "trigger": "AL_BUFFERS_PROCESSED (4118)" },  
    { "trigger": "AL_BUFFERS_QUEUED (4117)" },  
    { "trigger": "AL_BYTE_OFFSET (4134)" },  
    { "trigger": "AL_CHANNELS (8195)" },  
    { "trigger": "AL_CONE_INNER_ANGLE (4097)" },  
    { "trigger": "AL_CONE_OUTER_ANGLE (4098)" },  
    { "trigger": "AL_CONE_OUTER_GAIN (4130)" },  
    { "trigger": "AL_DIRECTION (4101)" },  
    { "trigger": "AL_DISTANCE_MODEL (53248)" },  
    { "trigger": "AL_DOPPLER_FACTOR (49152)" },  
    { "trigger": "AL_DOPPLER_VELOCITY (49153)" },  
    { "trigger": "AL_EXPONENT_DISTANCE (53253)" },  
    { "trigger": "AL_EXPONENT_DISTANCE_CLAMPED (53254)" },  
    { "trigger": "AL_EXTENSIONS (45060)" },  
    { "trigger": "AL_FALSE (0)" },  
    { "trigger": "AL_FORMAT_MONO16 (4353)" },  
    { "trigger": "AL_FORMAT_MONO8 (4352)" },  
    { "trigger": "AL_FORMAT_STEREO16 (4355)" },  
    { "trigger": "AL_FORMAT_STEREO8 (4354)" },  
    { "trigger": "AL_FREQUENCY (8193)" },  
    { "trigger": "AL_GAIN (4106)" },  
    { "trigger": "AL_GAMEKIT (1735095154)" },  
    { "trigger": "AL_ILLEGAL_COMMAND (40964)" },  
    { "trigger": "AL_ILLEGAL_ENUM (40962)" },  
    { "trigger": "AL_INITIAL (4113)" },  
    { "trigger": "AL_INVALID (-1)" },  
    { "trigger": "AL_INVALID_ENUM (40962)" },  
    { "trigger": "AL_INVALID_NAME (40961)" },  
    { "trigger": "AL_INVALID_OPERATION (40964)" },  
    { "trigger": "AL_INVALID_VALUE (40963)" },  
    { "trigger": "AL_INVERSE_DISTANCE (53249)" },  
    { "trigger": "AL_INVERSE_DISTANCE_CLAMPED (53250)" },  
    { "trigger": "AL_LINEAR_DISTANCE (53251)" },  
    { "trigger": "AL_LINEAR_DISTANCE_CLAMPED (53252)" },  
    { "trigger": "AL_LOOPING (4103)" },  
    { "trigger": "AL_MAX_DISTANCE (4131)" },  
    { "trigger": "AL_MAX_GAIN (4110)" },  
    { "trigger": "AL_MIN_GAIN (4109)" },  
    { "trigger": "AL_NONE (0)" },  
    { "trigger": "AL_NO_ERROR (0)" },  
    { "trigger": "AL_ORIENTATION (4111)" },  
    { "trigger": "AL_OUT_OF_MEMORY (40965)" },  
    { "trigger": "AL_PAUSED (4115)" },  
    { "trigger": "AL_PENDING (8209)" },  
    { "trigger": "AL_PITCH (4099)" },  
    { "trigger": "AL_PLAYING (4114)" },  
    { "trigger": "AL_POSITION (4100)" },  
    { "trigger": "AL_PROCESSED (8210)" },  
    { "trigger": "AL_QUEUE_HAS_LOOPED (36864)" },  
    { "trigger": "AL_REFERENCE_DISTANCE (4128)" },  
    { "trigger": "AL_RENDERER (45059)" },  
    { "trigger": "AL_ROLLOFF_FACTOR (4129)" },  
    { "trigger": "AL_SAMPLE_OFFSET (4133)" },  
    { "trigger": "AL_SEC_OFFSET (4132)" },  
    { "trigger": "AL_SIZE (8196)" },  
    { "trigger": "AL_SOURCE_RELATIVE (514)" },  
    { "trigger": "AL_SOURCE_STATE (4112)" },  
    { "trigger": "AL_SOURCE_TYPE (4135)" },  
    { "trigger": "AL_SPEED_OF_SOUND (49155)" },  
    { "trigger": "AL_STATIC (4136)" },  
    { "trigger": "AL_STOPPED (4116)" },  
    { "trigger": "AL_STREAMING (4137)" },  
    { "trigger": "AL_TRUE (1)" },  
    { "trigger": "AL_UNDETERMINED (4144)" },  
    { "trigger": "AL_UNUSED (8208)" },  
    { "trigger": "AL_VELOCITY (4102)" },  
    { "trigger": "AL_VENDOR (45057)" },  
    { "trigger": "AL_VERSION (45058)" },  
    { "trigger": "AMSymbol" },  
    { "trigger": "API" },  
    { "trigger": "AUDIO_TOOLBOX_VERSION (1060)" },  
    { "trigger": "AUGraphAddNode", "contents": "AUGraphAddNode(${1:AUGraph inGraph}, ${2:AudioComponentDescription* inDescription}, ${3:AUNode* outNode})" },  
    { "trigger": "AUGraphAddRenderNotify", "contents": "AUGraphAddRenderNotify(${1:AUGraph inGraph}, ${2:AURenderCallback inCallback}, ${3:void* inRefCon})" },  
    { "trigger": "AUGraphClearConnections", "contents": "AUGraphClearConnections(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphClose", "contents": "AUGraphClose(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphConnectNodeInput", "contents": "AUGraphConnectNodeInput(${1:AUGraph inGraph}, ${2:AUNode inSourceNode}, ${3:UInt32 inSourceOutputNumber}, ${4:AUNode inDestNode}, ${5:UInt32 inDestInputNumber})" },  
    { "trigger": "AUGraphCountNodeInteractions", "contents": "AUGraphCountNodeInteractions(${1:AUGraph inGraph}, ${2:AUNode inNode}, ${3:UInt32* outNumInteractions})" },  
    { "trigger": "AUGraphDisconnectNodeInput", "contents": "AUGraphDisconnectNodeInput(${1:AUGraph inGraph}, ${2:AUNode inDestNode}, ${3:UInt32 inDestInputNumber})" },  
    { "trigger": "AUGraphGetCPULoad", "contents": "AUGraphGetCPULoad(${1:AUGraph inGraph}, ${2:Float32* outAverageCPULoad})" },  
    { "trigger": "AUGraphGetIndNode", "contents": "AUGraphGetIndNode(${1:AUGraph inGraph}, ${2:UInt32 inIndex}, ${3:AUNode* outNode})" },  
    { "trigger": "AUGraphGetInteractionInfo", "contents": "AUGraphGetInteractionInfo(${1:AUGraph inGraph}, ${2:UInt32 inInteractionIndex}, ${3:AUNodeInteraction* outInteraction})" },  
    { "trigger": "AUGraphGetMaxCPULoad", "contents": "AUGraphGetMaxCPULoad(${1:AUGraph inGraph}, ${2:Float32* outMaxLoad})" },  
    { "trigger": "AUGraphGetNodeCount", "contents": "AUGraphGetNodeCount(${1:AUGraph inGraph}, ${2:UInt32* outNumberOfNodes})" },  
    { "trigger": "AUGraphGetNodeInteractions", "contents": "AUGraphGetNodeInteractions(${1:AUGraph inGraph}, ${2:AUNode inNode}, ${3:UInt32* ioNumInteractions}, ${4:AUNodeInteraction* outInteractions})" },  
    { "trigger": "AUGraphGetNumberOfInteractions", "contents": "AUGraphGetNumberOfInteractions(${1:AUGraph inGraph}, ${2:UInt32* outNumInteractions})" },  
    { "trigger": "AUGraphInitialize", "contents": "AUGraphInitialize(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphIsInitialized", "contents": "AUGraphIsInitialized(${1:AUGraph inGraph}, ${2:Boolean* outIsInitialized})" },  
    { "trigger": "AUGraphIsOpen", "contents": "AUGraphIsOpen(${1:AUGraph inGraph}, ${2:Boolean* outIsOpen})" },  
    { "trigger": "AUGraphIsRunning", "contents": "AUGraphIsRunning(${1:AUGraph inGraph}, ${2:Boolean* outIsRunning})" },  
    { "trigger": "AUGraphNodeInfo", "contents": "AUGraphNodeInfo(${1:AUGraph inGraph}, ${2:AUNode inNode}, ${3:AudioComponentDescription* outDescription}, ${4:AudioUnit* outAudioUnit})" },  
    { "trigger": "AUGraphOpen", "contents": "AUGraphOpen(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphRemoveNode", "contents": "AUGraphRemoveNode(${1:AUGraph inGraph}, ${2:AUNode inNode})" },  
    { "trigger": "AUGraphRemoveRenderNotify", "contents": "AUGraphRemoveRenderNotify(${1:AUGraph inGraph}, ${2:AURenderCallback inCallback}, ${3:void* inRefCon})" },  
    { "trigger": "AUGraphSetNodeInputCallback", "contents": "AUGraphSetNodeInputCallback(${1:AUGraph inGraph}, ${2:AUNode inDestNode}, ${3:UInt32 inDestInputNumber}, ${4:AURenderCallbackStruct* inInputCallback})" },  
    { "trigger": "AUGraphStart", "contents": "AUGraphStart(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphStop", "contents": "AUGraphStop(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphUninitialize", "contents": "AUGraphUninitialize(${1:AUGraph inGraph})" },  
    { "trigger": "AUGraphUpdate", "contents": "AUGraphUpdate(${1:AUGraph inGraph}, ${2:Boolean* outIsUpdated})" },  
    { "trigger": "AVAsset" },  
    { "trigger": "AVAssetExportPreset1280x720 (NSString*)" },  
    { "trigger": "AVAssetExportPreset1920x1080 (NSString*)" },  
    { "trigger": "AVAssetExportPreset640x480 (NSString*)" },  
    { "trigger": "AVAssetExportPreset960x540 (NSString*)" },  
    { "trigger": "AVAssetExportPresetAppleM4A (NSString*)" },  
    { "trigger": "AVAssetExportPresetHighestQuality (NSString*)" },  
    { "trigger": "AVAssetExportPresetLowQuality (NSString*)" },  
    { "trigger": "AVAssetExportPresetMediumQuality (NSString*)" },  
    { "trigger": "AVAssetExportPresetPassthrough (NSString*)" },  
    { "trigger": "AVAssetExportSession" },  
    { "trigger": "AVAssetExportSessionStatusCancelled (5)" },  
    { "trigger": "AVAssetExportSessionStatusCompleted (3)" },  
    { "trigger": "AVAssetExportSessionStatusExporting (2)" },  
    { "trigger": "AVAssetExportSessionStatusFailed (4)" },  
    { "trigger": "AVAssetExportSessionStatusUnknown (0)" },  
    { "trigger": "AVAssetExportSessionStatusWaiting (1)" },  
    { "trigger": "AVAssetExportSession.allExportPresets" },  
    { "trigger": "AVAssetExportSession.exportPresetsCompatibleWithAsset:", "contents": "AVAssetExportSession.exportPresetsCompatibleWithAsset:(${1:AVAsset* asset})" },  
    { "trigger": "AVAssetExportSession.exportSessionWithAsset:presetName:", "contents": "AVAssetExportSession.exportSessionWithAsset:presetName:(${1:AVAsset* asset}, presetName:${2:NSString* presetName})" },  
    { "trigger": "AVAssetImageGenerator" },  
    { "trigger": "AVAssetImageGeneratorApertureModeCleanAperture (NSString*)" },  
    { "trigger": "AVAssetImageGeneratorApertureModeEncodedPixels (NSString*)" },  
    { "trigger": "AVAssetImageGeneratorApertureModeProductionAperture (NSString*)" },  
    { "trigger": "AVAssetImageGeneratorCancelled (2)" },  
    { "trigger": "AVAssetImageGeneratorFailed (1)" },  
    { "trigger": "AVAssetImageGeneratorSucceeded (0)" },  
    { "trigger": "AVAssetImageGenerator.assetImageGeneratorWithAsset:", "contents": "AVAssetImageGenerator.assetImageGeneratorWithAsset:(${1:AVAsset* asset})" },  
    { "trigger": "AVAssetReader" },  
    { "trigger": "AVAssetReaderAudioMixOutput" },  
    { "trigger": "AVAssetReaderAudioMixOutput.assetReaderAudioMixOutputWithAudioTracks:audioSettings:", "contents": "AVAssetReaderAudioMixOutput.assetReaderAudioMixOutputWithAudioTracks:audioSettings:(${1:NSArray* audioTracks}, audioSettings:${2:NSDictionary* audioSettings})" },  
    { "trigger": "AVAssetReaderOutput" },  
    { "trigger": "AVAssetReaderStatusCancelled (4)" },  
    { "trigger": "AVAssetReaderStatusCompleted (2)" },  
    { "trigger": "AVAssetReaderStatusFailed (3)" },  
    { "trigger": "AVAssetReaderStatusReading (1)" },  
    { "trigger": "AVAssetReaderStatusUnknown (0)" },  
    { "trigger": "AVAssetReaderTrackOutput" },  
    { "trigger": "AVAssetReaderTrackOutput.assetReaderTrackOutputWithTrack:outputSettings:", "contents": "AVAssetReaderTrackOutput.assetReaderTrackOutputWithTrack:outputSettings:(${1:AVAssetTrack* track}, outputSettings:${2:NSDictionary* outputSettings})" },  
    { "trigger": "AVAssetReaderVideoCompositionOutput" },  
    { "trigger": "AVAssetReaderVideoCompositionOutput.assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:", "contents": "AVAssetReaderVideoCompositionOutput.assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:(${1:NSArray* videoTracks}, videoSettings:${2:NSDictionary* videoSettings})" },  
    { "trigger": "AVAssetReader.assetReaderWithAsset:error:", "contents": "AVAssetReader.assetReaderWithAsset:error:(${1:AVAsset* asset}, error:${2:NSError** outError})" },  
    { "trigger": "AVAssetReferenceRestrictionForbidAll (65535)" },  
    { "trigger": "AVAssetReferenceRestrictionForbidCrossSiteReference (4)" },  
    { "trigger": "AVAssetReferenceRestrictionForbidLocalReferenceToLocal (8)" },  
    { "trigger": "AVAssetReferenceRestrictionForbidLocalReferenceToRemote (2)" },  
    { "trigger": "AVAssetReferenceRestrictionForbidNone (0)" },  
    { "trigger": "AVAssetReferenceRestrictionForbidRemoteReferenceToLocal (1)" },  
    { "trigger": "AVAssetTrack" },  
    { "trigger": "AVAssetTrackSegment" },  
    { "trigger": "AVAssetWriter" },  
    { "trigger": "AVAssetWriterInput" },  
    { "trigger": "AVAssetWriterInputPixelBufferAdaptor" },  
    { "trigger": "AVAssetWriterInputPixelBufferAdaptor.assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:", "contents": "AVAssetWriterInputPixelBufferAdaptor.assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:(${1:AVAssetWriterInput* input}, sourcePixelBufferAttributes:${2:NSDictionary* sourcePixelBufferAttributes})" },  
    { "trigger": "AVAssetWriterInput.assetWriterInputWithMediaType:outputSettings:", "contents": "AVAssetWriterInput.assetWriterInputWithMediaType:outputSettings:(${1:NSString* mediaType}, outputSettings:${2:NSDictionary* outputSettings})" },  
    { "trigger": "AVAssetWriterStatusCancelled (4)" },  
    { "trigger": "AVAssetWriterStatusCompleted (2)" },  
    { "trigger": "AVAssetWriterStatusFailed (3)" },  
    { "trigger": "AVAssetWriterStatusUnknown (0)" },  
    { "trigger": "AVAssetWriterStatusWriting (1)" },  
    { "trigger": "AVAssetWriter.assetWriterWithURL:fileType:error:", "contents": "AVAssetWriter.assetWriterWithURL:fileType:error:(${1:NSURL* outputURL}, fileType:${2:NSString* outputFileType}, error:${3:NSError** outError})" },  
    { "trigger": "AVAsset.assetWithURL:", "contents": "AVAsset.assetWithURL:(${1:NSURL* URL})" },  
    { "trigger": "AVAsynchronousKeyValueLoading" },  
    { "trigger": "AVAudioMix" },  
    { "trigger": "AVAudioMixInputParameters" },  
    { "trigger": "AVAudioPlayer" },  
    { "trigger": "AVAudioPlayerDelegate" },  
    { "trigger": "AVAudioQualityHigh (96)" },  
    { "trigger": "AVAudioQualityLow (32)" },  
    { "trigger": "AVAudioQualityMax (127)" },  
    { "trigger": "AVAudioQualityMedium (64)" },  
    { "trigger": "AVAudioQualityMin (0)" },  
    { "trigger": "AVAudioRecorder" },  
    { "trigger": "AVAudioRecorderDelegate" },  
    { "trigger": "AVAudioSession" },  
    { "trigger": "AVAudioSessionCategoryAmbient (NSString*)" },  
    { "trigger": "AVAudioSessionCategoryAudioProcessing (NSString*)" },  
    { "trigger": "AVAudioSessionCategoryPlayAndRecord (NSString*)" },  
    { "trigger": "AVAudioSessionCategoryPlayback (NSString*)" },  
    { "trigger": "AVAudioSessionCategoryRecord (NSString*)" },  
    { "trigger": "AVAudioSessionCategorySoloAmbient (NSString*)" },  
    { "trigger": "AVAudioSessionDelegate" },  
    { "trigger": "AVAudioSessionInterruptionFlags_ShouldResume (1)" },  
    { "trigger": "AVAudioSessionModeDefault (NSString*)" },  
    { "trigger": "AVAudioSessionModeGameChat (NSString*)" },  
    { "trigger": "AVAudioSessionModeMeasurement (NSString*)" },  
    { "trigger": "AVAudioSessionModeVideoRecording (NSString*)" },  
    { "trigger": "AVAudioSessionModeVoiceChat (NSString*)" },  
    { "trigger": "AVAudioSessionSetActiveFlags_NotifyOthersOnDeactivation (1)" },  
    { "trigger": "AVAudioSession.sharedInstance" },  
    { "trigger": "AVCaptureAudioChannel" },  
    { "trigger": "AVCaptureAudioDataOutput" },  
    { "trigger": "AVCaptureAudioDataOutputSampleBufferDelegate" },  
    { "trigger": "AVCaptureConnection" },  
    { "trigger": "AVCaptureDevice" },  
    { "trigger": "AVCaptureDeviceInput" },  
    { "trigger": "AVCaptureDeviceInput.deviceInputWithDevice:error:", "contents": "AVCaptureDeviceInput.deviceInputWithDevice:error:(${1:AVCaptureDevice* device}, error:${2:NSError** outError})" },  
    { "trigger": "AVCaptureDevicePositionBack (1)" },  
    { "trigger": "AVCaptureDevicePositionFront (2)" },  
    { "trigger": "AVCaptureDeviceSubjectAreaDidChangeNotification (NSString*)" },  
    { "trigger": "AVCaptureDeviceWasConnectedNotification (NSString*)" },  
    { "trigger": "AVCaptureDeviceWasDisconnectedNotification (NSString*)" },  
    { "trigger": "AVCaptureDevice.defaultDeviceWithMediaType:", "contents": "AVCaptureDevice.defaultDeviceWithMediaType:(${1:NSString* mediaType})" },  
    { "trigger": "AVCaptureDevice.deviceWithUniqueID:", "contents": "AVCaptureDevice.deviceWithUniqueID:(${1:NSString* deviceUniqueID})" },  
    { "trigger": "AVCaptureDevice.devices" },  
    { "trigger": "AVCaptureDevice.devicesWithMediaType:", "contents": "AVCaptureDevice.devicesWithMediaType:(${1:NSString* mediaType})" },  
    { "trigger": "AVCaptureExposureModeAutoExpose (1)" },  
    { "trigger": "AVCaptureExposureModeContinuousAutoExposure (2)" },  
    { "trigger": "AVCaptureExposureModeLocked (0)" },  
    { "trigger": "AVCaptureFileOutput" },  
    { "trigger": "AVCaptureFileOutputRecordingDelegate" },  
    { "trigger": "AVCaptureFlashModeAuto (2)" },  
    { "trigger": "AVCaptureFlashModeOff (0)" },  
    { "trigger": "AVCaptureFlashModeOn (1)" },  
    { "trigger": "AVCaptureFocusModeAutoFocus (1)" },  
    { "trigger": "AVCaptureFocusModeContinuousAutoFocus (2)" },  
    { "trigger": "AVCaptureFocusModeLocked (0)" },  
    { "trigger": "AVCaptureInput" },  
    { "trigger": "AVCaptureInputPort" },  
    { "trigger": "AVCaptureInputPortFormatDescriptionDidChangeNotification (NSString*)" },  
    { "trigger": "AVCaptureMovieFileOutput" },  
    { "trigger": "AVCaptureOutput" },  
    { "trigger": "AVCaptureSession" },  
    { "trigger": "AVCaptureSessionDidStartRunningNotification (NSString*)" },  
    { "trigger": "AVCaptureSessionDidStopRunningNotification (NSString*)" },  
    { "trigger": "AVCaptureSessionErrorKey (NSString*)" },  
    { "trigger": "AVCaptureSessionInterruptionEndedNotification (NSString*)" },  
    { "trigger": "AVCaptureSessionPreset1280x720 (NSString*)" },  
    { "trigger": "AVCaptureSessionPreset1920x1080 (NSString*)" },  
    { "trigger": "AVCaptureSessionPreset352x288 (NSString*)" },  
    { "trigger": "AVCaptureSessionPreset640x480 (NSString*)" },  
    { "trigger": "AVCaptureSessionPresetHigh (NSString*)" },  
    { "trigger": "AVCaptureSessionPresetLow (NSString*)" },  
    { "trigger": "AVCaptureSessionPresetMedium (NSString*)" },  
    { "trigger": "AVCaptureSessionPresetPhoto (NSString*)" },  
    { "trigger": "AVCaptureSessionPresetiFrame1280x720 (NSString*)" },  
    { "trigger": "AVCaptureSessionPresetiFrame960x540 (NSString*)" },  
    { "trigger": "AVCaptureSessionRuntimeErrorNotification (NSString*)" },  
    { "trigger": "AVCaptureSessionWasInterruptedNotification (NSString*)" },  
    { "trigger": "AVCaptureStillImageOutput" },  
    { "trigger": "AVCaptureStillImageOutput.jpegStillImageNSDataRepresentation:", "contents": "AVCaptureStillImageOutput.jpegStillImageNSDataRepresentation:(${1:CMSampleBufferRef jpegSampleBuffer})" },  
    { "trigger": "AVCaptureTorchModeAuto (2)" },  
    { "trigger": "AVCaptureTorchModeOff (0)" },  
    { "trigger": "AVCaptureTorchModeOn (1)" },  
    { "trigger": "AVCaptureVideoDataOutput" },  
    { "trigger": "AVCaptureVideoDataOutputSampleBufferDelegate" },  
    { "trigger": "AVCaptureVideoOrientationLandscapeLeft (4)" },  
    { "trigger": "AVCaptureVideoOrientationLandscapeRight (3)" },  
    { "trigger": "AVCaptureVideoOrientationPortrait (1)" },  
    { "trigger": "AVCaptureVideoOrientationPortraitUpsideDown (2)" },  
    { "trigger": "AVCaptureVideoPreviewLayer" },  
    { "trigger": "AVCaptureVideoPreviewLayer.layerWithSession:", "contents": "AVCaptureVideoPreviewLayer.layerWithSession:(${1:AVCaptureSession* session})" },  
    { "trigger": "AVCaptureWhiteBalanceModeAutoWhiteBalance (1)" },  
    { "trigger": "AVCaptureWhiteBalanceModeContinuousAutoWhiteBalance (2)" },  
    { "trigger": "AVCaptureWhiteBalanceModeLocked (0)" },  
    { "trigger": "AVChannelLayoutKey (NSString*)" },  
    { "trigger": "AVComposition" },  
    { "trigger": "AVCompositionTrack" },  
    { "trigger": "AVCompositionTrackSegment" },  
    { "trigger": "AVCompositionTrackSegment.compositionTrackSegmentWithTimeRange:", "contents": "AVCompositionTrackSegment.compositionTrackSegmentWithTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "AVCompositionTrackSegment.compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:", "contents": "AVCompositionTrackSegment.compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:(${1:NSURL* URL}, trackID:${2:CMPersistentTrackID trackID}, sourceTimeRange:${3:CMTimeRange sourceTimeRange}, targetTimeRange:${4:CMTimeRange targetTimeRange})" },  
    { "trigger": "AVCoreAnimationBeginTimeAtZero (CFTimeInterval)" },  
    { "trigger": "AVEncoderAudioQualityKey (NSString*)" },  
    { "trigger": "AVEncoderBitDepthHintKey (NSString*)" },  
    { "trigger": "AVEncoderBitRateKey (NSString*)" },  
    { "trigger": "AVEncoderBitRatePerChannelKey (NSString*)" },  
    { "trigger": "AVErrorApplicationIsNotAuthorized (-11836)" },  
    { "trigger": "AVErrorCompositionTrackSegmentsNotContiguous (-11824)" },  
    { "trigger": "AVErrorContentIsNotAuthorized (-11835)" },  
    { "trigger": "AVErrorContentIsProtected (-11831)" },  
    { "trigger": "AVErrorDecodeFailed (-11821)" },  
    { "trigger": "AVErrorDecoderNotFound (-11833)" },  
    { "trigger": "AVErrorDecoderTemporarilyUnavailable (-11839)" },  
    { "trigger": "AVErrorDeviceAlreadyUsedByAnotherSession (-11804)" },  
    { "trigger": "AVErrorDeviceInUseByAnotherApplication (-11815)" },  
    { "trigger": "AVErrorDeviceIsNotAvailableInBackground (-11837)" },  
    { "trigger": "AVErrorDeviceKey (NSString*)" },  
    { "trigger": "AVErrorDeviceLockedForConfigurationByAnotherProcess (-11817)" },  
    { "trigger": "AVErrorDeviceNotConnected (-11814)" },  
    { "trigger": "AVErrorDeviceWasDisconnected (-11808)" },  
    { "trigger": "AVErrorDiskFull (-11807)" },  
    { "trigger": "AVErrorEncoderNotFound (-11834)" },  
    { "trigger": "AVErrorEncoderTemporarilyUnavailable (-11840)" },  
    { "trigger": "AVErrorExportFailed (-11820)" },  
    { "trigger": "AVErrorFileAlreadyExists (-11823)" },  
    { "trigger": "AVErrorFileFailedToParse (-11829)" },  
    { "trigger": "AVErrorFileFormatNotRecognized (-11828)" },  
    { "trigger": "AVErrorFileSizeKey (NSString*)" },  
    { "trigger": "AVErrorInvalidCompositionTrackSegmentDuration (-11825)" },  
    { "trigger": "AVErrorInvalidCompositionTrackSegmentSourceDuration (-11827)" },  
    { "trigger": "AVErrorInvalidCompositionTrackSegmentSourceStartTime (-11826)" },  
    { "trigger": "AVErrorInvalidOutputURLPathExtension (-11843)" },  
    { "trigger": "AVErrorInvalidSourceMedia (-11822)" },  
    { "trigger": "AVErrorInvalidVideoComposition (-11841)" },  
    { "trigger": "AVErrorMaximumDurationReached (-11810)" },  
    { "trigger": "AVErrorMaximumFileSizeReached (-11811)" },  
    { "trigger": "AVErrorMaximumNumberOfSamplesForFileFormatReached (-11813)" },  
    { "trigger": "AVErrorMaximumStillImageCaptureRequestsExceeded (-11830)" },  
    { "trigger": "AVErrorMediaChanged (-11809)" },  
    { "trigger": "AVErrorMediaDiscontinuity (-11812)" },  
    { "trigger": "AVErrorMediaServicesWereReset (-11819)" },  
    { "trigger": "AVErrorMediaSubTypeKey (NSString*)" },  
    { "trigger": "AVErrorMediaTypeKey (NSString*)" },  
    { "trigger": "AVErrorNoDataCaptured (-11805)" },  
    { "trigger": "AVErrorNoImageAtTime (-11832)" },  
    { "trigger": "AVErrorOperationNotSupportedForAsset (-11838)" },  
    { "trigger": "AVErrorOutOfMemory (-11801)" },  
    { "trigger": "AVErrorPIDKey (NSString*)" },  
    { "trigger": "AVErrorRecordingSuccessfullyFinishedKey (NSString*)" },  
    { "trigger": "AVErrorReferenceForbiddenByReferencePolicy (-11842)" },  
    { "trigger": "AVErrorSessionConfigurationChanged (-11806)" },  
    { "trigger": "AVErrorSessionNotRunning (-11803)" },  
    { "trigger": "AVErrorSessionWasInterrupted (-11818)" },  
    { "trigger": "AVErrorTimeKey (NSString*)" },  
    { "trigger": "AVErrorUnknown (-11800)" },  
    { "trigger": "AVFileType3GPP (NSString*)" },  
    { "trigger": "AVFileTypeAIFC (NSString*)" },  
    { "trigger": "AVFileTypeAIFF (NSString*)" },  
    { "trigger": "AVFileTypeAMR (NSString*)" },  
    { "trigger": "AVFileTypeAppleM4A (NSString*)" },  
    { "trigger": "AVFileTypeAppleM4V (NSString*)" },  
    { "trigger": "AVFileTypeCoreAudioFormat (NSString*)" },  
    { "trigger": "AVFileTypeMPEG4 (NSString*)" },  
    { "trigger": "AVFileTypeQuickTimeMovie (NSString*)" },  
    { "trigger": "AVFileTypeWAVE (NSString*)" },  
    { "trigger": "AVFormatIDKey (NSString*)" },  
    { "trigger": "AVFoundationErrorDomain (NSString*)" },  
    { "trigger": "AVKeyValueStatusCancelled (4)" },  
    { "trigger": "AVKeyValueStatusFailed (3)" },  
    { "trigger": "AVKeyValueStatusLoaded (2)" },  
    { "trigger": "AVKeyValueStatusLoading (1)" },  
    { "trigger": "AVKeyValueStatusUnknown (0)" },  
    { "trigger": "AVLayerVideoGravityResize (NSString*)" },  
    { "trigger": "AVLayerVideoGravityResizeAspect (NSString*)" },  
    { "trigger": "AVLayerVideoGravityResizeAspectFill (NSString*)" },  
    { "trigger": "AVLinearPCMBitDepthKey (NSString*)" },  
    { "trigger": "AVLinearPCMIsBigEndianKey (NSString*)" },  
    { "trigger": "AVLinearPCMIsFloatKey (NSString*)" },  
    { "trigger": "AVLinearPCMIsNonInterleaved (NSString*)" },  
    { "trigger": "AVMakeRectWithAspectRatioInsideRect", "contents": "AVMakeRectWithAspectRatioInsideRect(${1:CGSize aspectRatio}, ${2:CGRect boundingRect})" },  
    { "trigger": "AVMediaCharacteristicAudible (NSString*)" },  
    { "trigger": "AVMediaCharacteristicContainsOnlyForcedSubtitles (NSString*)" },  
    { "trigger": "AVMediaCharacteristicDescribesMusicAndSoundForAccessibility (NSString*)" },  
    { "trigger": "AVMediaCharacteristicDescribesVideoForAccessibility (NSString*)" },  
    { "trigger": "AVMediaCharacteristicFrameBased (NSString*)" },  
    { "trigger": "AVMediaCharacteristicIsAuxiliaryContent (NSString*)" },  
    { "trigger": "AVMediaCharacteristicIsMainProgramContent (NSString*)" },  
    { "trigger": "AVMediaCharacteristicLegible (NSString*)" },  
    { "trigger": "AVMediaCharacteristicTranscribesSpokenDialogForAccessibility (NSString*)" },  
    { "trigger": "AVMediaCharacteristicVisual (NSString*)" },  
    { "trigger": "AVMediaSelectionGroup" },  
    { "trigger": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withLocale:", "contents": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withLocale:(${1:NSArray* array}, withLocale:${2:NSLocale* locale})" },  
    { "trigger": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withMediaCharacteristics:", "contents": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withMediaCharacteristics:(${1:NSArray* array}, withMediaCharacteristics:${2:NSArray* mediaCharacteristics})" },  
    { "trigger": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withoutMediaCharacteristics:", "contents": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withoutMediaCharacteristics:(${1:NSArray* array}, withoutMediaCharacteristics:${2:NSArray* mediaCharacteristics})" },  
    { "trigger": "AVMediaSelectionGroup.playableMediaSelectionOptionsFromArray:", "contents": "AVMediaSelectionGroup.playableMediaSelectionOptionsFromArray:(${1:NSArray* array})" },  
    { "trigger": "AVMediaSelectionOption" },  
    { "trigger": "AVMediaTypeAudio (NSString*)" },  
    { "trigger": "AVMediaTypeClosedCaption (NSString*)" },  
    { "trigger": "AVMediaTypeMuxed (NSString*)" },  
    { "trigger": "AVMediaTypeSubtitle (NSString*)" },  
    { "trigger": "AVMediaTypeText (NSString*)" },  
    { "trigger": "AVMediaTypeTimecode (NSString*)" },  
    { "trigger": "AVMediaTypeTimedMetadata (NSString*)" },  
    { "trigger": "AVMediaTypeVideo (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyAuthor (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyCopyright (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyDescription (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyGenre (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyLocation (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyPerformer (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyRecordingYear (NSString*)" },  
    { "trigger": "AVMetadata3GPUserDataKeyTitle (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyAlbumName (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyArtist (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyArtwork (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyAuthor (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyContributor (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyCopyrights (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyCreationDate (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyCreator (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyDescription (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyFormat (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyIdentifier (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyLanguage (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyLastModifiedDate (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyLocation (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyMake (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyModel (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyPublisher (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyRelation (NSString*)" },  
    { "trigger": "AVMetadataCommonKeySoftware (NSString*)" },  
    { "trigger": "AVMetadataCommonKeySource (NSString*)" },  
    { "trigger": "AVMetadataCommonKeySubject (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyTitle (NSString*)" },  
    { "trigger": "AVMetadataCommonKeyType (NSString*)" },  
    { "trigger": "AVMetadataFormatID3Metadata (NSString*)" },  
    { "trigger": "AVMetadataFormatQuickTimeMetadata (NSString*)" },  
    { "trigger": "AVMetadataFormatQuickTimeUserData (NSString*)" },  
    { "trigger": "AVMetadataFormatiTunesMetadata (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyAlbumSortOrder (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyAlbumTitle (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyAttachedPicture (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyAudioEncryption (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyAudioSeekPointIndex (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyBand (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyBeatsPerMinute (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyComments (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyCommercialInformation (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyCommerical (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyComposer (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyConductor (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyContentGroupDescription (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyContentType (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyCopyright (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyCopyrightInformation (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyDate (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEncodedBy (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEncodedWith (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEncodingTime (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEncryption (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEqualization (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEqualization2 (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyEventTimingCodes (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyFileOwner (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyFileType (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyGeneralEncapsulatedObject (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyGroupIdentifier (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyInitialKey (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyInternationalStandardRecordingCode (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyInternetRadioStationName (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyInternetRadioStationOwner (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyInvolvedPeopleList_v23 (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyInvolvedPeopleList_v24 (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyLanguage (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyLeadPerformer (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyLength (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyLink (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyLyricist (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyMPEGLocationLookupTable (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyMediaType (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyModifiedBy (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyMood (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyMusicCDIdentifier (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyMusicianCreditsList (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOfficialArtistWebpage (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOfficialAudioFileWebpage (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOfficialAudioSourceWebpage (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOfficialInternetRadioStationHomepage (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOfficialPublisherWebpage (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOriginalAlbumTitle (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOriginalArtist (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOriginalFilename (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOriginalLyricist (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOriginalReleaseTime (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOriginalReleaseYear (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyOwnership (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPartOfASet (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPayment (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPerformerSortOrder (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPlayCounter (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPlaylistDelay (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPopularimeter (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPositionSynchronization (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPrivate (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyProducedNotice (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyPublisher (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyRecommendedBufferSize (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyRecordingDates (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyRecordingTime (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyRelativeVolumeAdjustment (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyRelativeVolumeAdjustment2 (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyReleaseTime (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyReverb (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySeek (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySetSubtitle (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySignature (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySize (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySubTitle (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySynchronizedLyric (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeySynchronizedTempoCodes (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyTaggingTime (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyTermsOfUse (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyTime (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyTitleDescription (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyTitleSortOrder (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyTrackNumber (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyUniqueFileIdentifier (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyUnsynchronizedLyric (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyUserText (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyUserURL (NSString*)" },  
    { "trigger": "AVMetadataID3MetadataKeyYear (NSString*)" },  
    { "trigger": "AVMetadataISOUserDataKeyCopyright (NSString*)" },  
    { "trigger": "AVMetadataItem" },  
    { "trigger": "AVMetadataItem.metadataItemsFromArray:withKey:keySpace:", "contents": "AVMetadataItem.metadataItemsFromArray:withKey:keySpace:(${1:NSArray* array}, withKey:${2:id key}, keySpace:${3:NSString* keySpace})" },  
    { "trigger": "AVMetadataItem.metadataItemsFromArray:withLocale:", "contents": "AVMetadataItem.metadataItemsFromArray:withLocale:(${1:NSArray* array}, withLocale:${2:NSLocale* locale})" },  
    { "trigger": "AVMetadataKeySpaceCommon (NSString*)" },  
    { "trigger": "AVMetadataKeySpaceID3 (NSString*)" },  
    { "trigger": "AVMetadataKeySpaceQuickTimeMetadata (NSString*)" },  
    { "trigger": "AVMetadataKeySpaceQuickTimeUserData (NSString*)" },  
    { "trigger": "AVMetadataKeySpaceiTunes (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyAlbum (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyArranger (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyArtist (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyArtwork (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyAuthor (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyCameraFrameReadoutTime (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyCameraIdentifier (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyCollectionUser (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyComment (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyComposer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyCopyright (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyCreationDate (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyCredits (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyDescription (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyDirectionFacing (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyDirectionMotion (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyDirector (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyDisplayName (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyEncodedBy (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyGenre (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyInformation (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyKeywords (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyLocationBody (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyLocationDate (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyLocationISO6709 (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyLocationName (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyLocationNote (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyLocationRole (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyMake (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyModel (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyOriginalArtist (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyPerformer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyPhonogramRights (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyProducer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyPublisher (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyRatingUser (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeySoftware (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyTitle (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyYear (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeMetadataKeyiXML (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyAlbum (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyArranger (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyArtist (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyAuthor (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyChapter (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyComment (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyComposer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyCopyright (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyCreationDate (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyCredits (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyDescription (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyDirector (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyDisclaimer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyEncodedBy (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyFullName (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyGenre (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyHostComputer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyInformation (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyKeywords (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyLocationISO6709 (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyMake (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyModel (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyOriginalArtist (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyOriginalFormat (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyOriginalSource (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyPerformers (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyPhonogramRights (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyProducer (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyProduct (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyPublisher (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeySoftware (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeySpecialPlaybackRequirements (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyTaggedCharacteristic (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyTrack (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyTrackName (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyURLLink (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyWarning (NSString*)" },  
    { "trigger": "AVMetadataQuickTimeUserDataKeyWriter (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyAccountKind (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyAcknowledgement (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyAlbum (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyAlbumArtist (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyAppleID (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyArranger (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyArtDirector (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyArtist (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyArtistID (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyAuthor (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyBeatsPerMin (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyComposer (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyConductor (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyContentRating (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyCopyright (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyCoverArt (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyCredits (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyDescription (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyDirector (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyDiscCompilation (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyDiscNumber (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyEQ (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyEncodedBy (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyEncodingTool (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyExecProducer (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyGenreID (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyGrouping (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyLinerNotes (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyLyrics (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyOnlineExtras (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyOriginalArtist (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyPerformer (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyPhonogramRights (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyPlaylistID (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyPredefinedGenre (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyProducer (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyPublisher (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyRecordCompany (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyReleaseDate (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeySoloist (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeySongID (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeySongName (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeySoundEngineer (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyThanks (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyTrackNumber (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyTrackSubTitle (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyUserComment (NSString*)" },  
    { "trigger": "AVMetadataiTunesMetadataKeyUserGenre (NSString*)" },  
    { "trigger": "AVMutableAudioMix" },  
    { "trigger": "AVMutableAudioMixInputParameters" },  
    { "trigger": "AVMutableAudioMixInputParameters.audioMixInputParameters" },  
    { "trigger": "AVMutableAudioMixInputParameters.audioMixInputParametersWithTrack:", "contents": "AVMutableAudioMixInputParameters.audioMixInputParametersWithTrack:(${1:AVAssetTrack* track})" },  
    { "trigger": "AVMutableAudioMix.audioMix" },  
    { "trigger": "AVMutableComposition" },  
    { "trigger": "AVMutableCompositionTrack" },  
    { "trigger": "AVMutableComposition.composition" },  
    { "trigger": "AVMutableMetadataItem" },  
    { "trigger": "AVMutableMetadataItem.metadataItem" },  
    { "trigger": "AVMutableTimedMetadataGroup" },  
    { "trigger": "AVMutableVideoComposition" },  
    { "trigger": "AVMutableVideoCompositionInstruction" },  
    { "trigger": "AVMutableVideoCompositionInstruction.videoCompositionInstruction" },  
    { "trigger": "AVMutableVideoCompositionLayerInstruction" },  
    { "trigger": "AVMutableVideoCompositionLayerInstruction.videoCompositionLayerInstruction" },  
    { "trigger": "AVMutableVideoCompositionLayerInstruction.videoCompositionLayerInstructionWithAssetTrack:", "contents": "AVMutableVideoCompositionLayerInstruction.videoCompositionLayerInstructionWithAssetTrack:(${1:AVAssetTrack* track})" },  
    { "trigger": "AVMutableVideoComposition.videoComposition" },  
    { "trigger": "AVNumberOfChannelsKey (NSString*)" },  
    { "trigger": "AVPlayer" },  
    { "trigger": "AVPlayerActionAtItemEndAdvance (0)" },  
    { "trigger": "AVPlayerActionAtItemEndNone (2)" },  
    { "trigger": "AVPlayerActionAtItemEndPause (1)" },  
    { "trigger": "AVPlayerItem" },  
    { "trigger": "AVPlayerItemAccessLog" },  
    { "trigger": "AVPlayerItemAccessLogEvent" },  
    { "trigger": "AVPlayerItemDidPlayToEndTimeNotification (NSString*)" },  
    { "trigger": "AVPlayerItemErrorLog" },  
    { "trigger": "AVPlayerItemErrorLogEvent" },  
    { "trigger": "AVPlayerItemFailedToPlayToEndTimeErrorKey (NSString*)" },  
    { "trigger": "AVPlayerItemFailedToPlayToEndTimeNotification (NSString*)" },  
    { "trigger": "AVPlayerItemStatusFailed (2)" },  
    { "trigger": "AVPlayerItemStatusReadyToPlay (1)" },  
    { "trigger": "AVPlayerItemStatusUnknown (0)" },  
    { "trigger": "AVPlayerItemTimeJumpedNotification (NSString*)" },  
    { "trigger": "AVPlayerItemTrack" },  
    { "trigger": "AVPlayerItem.playerItemWithAsset:", "contents": "AVPlayerItem.playerItemWithAsset:(${1:AVAsset* asset})" },  
    { "trigger": "AVPlayerItem.playerItemWithURL:", "contents": "AVPlayerItem.playerItemWithURL:(${1:NSURL* URL})" },  
    { "trigger": "AVPlayerLayer" },  
    { "trigger": "AVPlayerLayer.playerLayerWithPlayer:", "contents": "AVPlayerLayer.playerLayerWithPlayer:(${1:AVPlayer* player})" },  
    { "trigger": "AVPlayerStatusFailed (2)" },  
    { "trigger": "AVPlayerStatusReadyToPlay (1)" },  
    { "trigger": "AVPlayerStatusUnknown (0)" },  
    { "trigger": "AVPlayer.playerWithPlayerItem:", "contents": "AVPlayer.playerWithPlayerItem:(${1:AVPlayerItem* item})" },  
    { "trigger": "AVPlayer.playerWithURL:", "contents": "AVPlayer.playerWithURL:(${1:NSURL* URL})" },  
    { "trigger": "AVQueuePlayer" },  
    { "trigger": "AVQueuePlayer.queuePlayerWithItems:", "contents": "AVQueuePlayer.queuePlayerWithItems:(${1:NSArray* items})" },  
    { "trigger": "AVSampleRateConverterAudioQualityKey (NSString*)" },  
    { "trigger": "AVSampleRateKey (NSString*)" },  
    { "trigger": "AVSynchronizedLayer" },  
    { "trigger": "AVSynchronizedLayer.synchronizedLayerWithPlayerItem:", "contents": "AVSynchronizedLayer.synchronizedLayerWithPlayerItem:(${1:AVPlayerItem* playerItem})" },  
    { "trigger": "AVTimedMetadataGroup" },  
    { "trigger": "AVURLAsset" },  
    { "trigger": "AVURLAssetPreferPreciseDurationAndTimingKey (NSString*)" },  
    { "trigger": "AVURLAssetReferenceRestrictionsKey (NSString*)" },  
    { "trigger": "AVURLAsset.URLAssetWithURL:options:", "contents": "AVURLAsset.URLAssetWithURL:options:(${1:NSURL* URL}, options:${2:NSDictionary* options})" },  
    { "trigger": "AVURLAsset.audiovisualMIMETypes" },  
    { "trigger": "AVURLAsset.audiovisualTypes" },  
    { "trigger": "AVURLAsset.isPlayableExtendedMIMEType:", "contents": "AVURLAsset.isPlayableExtendedMIMEType:(${1:NSString* extendedMIMEType})" },  
    { "trigger": "AVVideoAverageBitRateKey (NSString*)" },  
    { "trigger": "AVVideoCleanApertureHeightKey (NSString*)" },  
    { "trigger": "AVVideoCleanApertureHorizontalOffsetKey (NSString*)" },  
    { "trigger": "AVVideoCleanApertureKey (NSString*)" },  
    { "trigger": "AVVideoCleanApertureVerticalOffsetKey (NSString*)" },  
    { "trigger": "AVVideoCleanApertureWidthKey (NSString*)" },  
    { "trigger": "AVVideoCodecH264 (NSString*)" },  
    { "trigger": "AVVideoCodecJPEG (NSString*)" },  
    { "trigger": "AVVideoCodecKey (NSString*)" },  
    { "trigger": "AVVideoComposition" },  
    { "trigger": "AVVideoCompositionCoreAnimationTool" },  
    { "trigger": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:", "contents": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:(${1:CALayer* layer}, asTrackID:${2:CMPersistentTrackID trackID})" },  
    { "trigger": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:", "contents": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:(${1:CALayer* videoLayer}, inLayer:${2:CALayer* animationLayer})" },  
    { "trigger": "AVVideoCompositionInstruction" },  
    { "trigger": "AVVideoCompositionLayerInstruction" },  
    { "trigger": "AVVideoCompositionValidationHandling" },  
    { "trigger": "AVVideoCompressionPropertiesKey (NSString*)" },  
    { "trigger": "AVVideoHeightKey (NSString*)" },  
    { "trigger": "AVVideoMaxKeyFrameIntervalKey (NSString*)" },  
    { "trigger": "AVVideoPixelAspectRatioHorizontalSpacingKey (NSString*)" },  
    { "trigger": "AVVideoPixelAspectRatioKey (NSString*)" },  
    { "trigger": "AVVideoPixelAspectRatioVerticalSpacingKey (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Baseline30 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Baseline31 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Baseline41 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Main30 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Main31 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Main32 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelH264Main41 (NSString*)" },  
    { "trigger": "AVVideoProfileLevelKey (NSString*)" },  
    { "trigger": "AVVideoQualityKey (NSString*)" },  
    { "trigger": "AVVideoScalingModeFit (NSString*)" },  
    { "trigger": "AVVideoScalingModeKey (NSString*)" },  
    { "trigger": "AVVideoScalingModeResize (NSString*)" },  
    { "trigger": "AVVideoScalingModeResizeAspect (NSString*)" },  
    { "trigger": "AVVideoScalingModeResizeAspectFill (NSString*)" },  
    { "trigger": "AVVideoWidthKey (NSString*)" },  
    { "trigger": "AudioConverterConvertBuffer", "contents": "AudioConverterConvertBuffer(${1:AudioConverterRef inAudioConverter}, ${2:UInt32 inInputDataSize}, ${3:void* inInputData}, ${4:UInt32* ioOutputDataSize}, ${5:void* outOutputData})" },  
    { "trigger": "AudioConverterConvertComplexBuffer", "contents": "AudioConverterConvertComplexBuffer(${1:AudioConverterRef inAudioConverter}, ${2:UInt32 inNumberPCMFrames}, ${3:AudioBufferList* inInputData}, ${4:AudioBufferList* outOutputData})" },  
    { "trigger": "AudioConverterDispose", "contents": "AudioConverterDispose(${1:AudioConverterRef inAudioConverter})" },  
    { "trigger": "AudioConverterFillComplexBuffer", "contents": "AudioConverterFillComplexBuffer(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterComplexInputDataProc inInputDataProc}, ${3:void* inInputDataProcUserData}, ${4:UInt32* ioOutputDataPacketSize}, ${5:AudioBufferList* outOutputData}, ${6:AudioStreamPacketDescription* outPacketDescription})" },  
    { "trigger": "AudioConverterGetProperty", "contents": "AudioConverterGetProperty(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterPropertyID inPropertyID}, ${3:UInt32* ioPropertyDataSize}, ${4:void* outPropertyData})" },  
    { "trigger": "AudioConverterGetPropertyInfo", "contents": "AudioConverterGetPropertyInfo(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterPropertyID inPropertyID}, ${3:UInt32* outSize}, ${4:Boolean* outWritable})" },  
    { "trigger": "AudioConverterNew", "contents": "AudioConverterNew(${1:AudioStreamBasicDescription* inSourceFormat}, ${2:AudioStreamBasicDescription* inDestinationFormat}, ${3:AudioConverterRef* outAudioConverter})" },  
    { "trigger": "AudioConverterNewSpecific", "contents": "AudioConverterNewSpecific(${1:AudioStreamBasicDescription* inSourceFormat}, ${2:AudioStreamBasicDescription* inDestinationFormat}, ${3:UInt32 inNumberClassDescriptions}, ${4:AudioClassDescription* inClassDescriptions}, ${5:AudioConverterRef* outAudioConverter})" },  
    { "trigger": "AudioConverterReset", "contents": "AudioConverterReset(${1:AudioConverterRef inAudioConverter})" },  
    { "trigger": "AudioConverterSetProperty", "contents": "AudioConverterSetProperty(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterPropertyID inPropertyID}, ${3:UInt32 inPropertyDataSize}, ${4:void* inPropertyData})" },  
    { "trigger": "AudioFileClose", "contents": "AudioFileClose(${1:AudioFileID inAudioFile})" },  
    { "trigger": "AudioFileCountUserData", "contents": "AudioFileCountUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32* outNumberItems})" },  
    { "trigger": "AudioFileCreateWithURL", "contents": "AudioFileCreateWithURL(${1:CFURLRef inFileRef}, ${2:AudioFileTypeID inFileType}, ${3:AudioStreamBasicDescription* inFormat}, ${4:UInt32 inFlags}, ${5:AudioFileID* outAudioFile})" },  
    { "trigger": "AudioFileGetGlobalInfo", "contents": "AudioFileGetGlobalInfo(${1:AudioFilePropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* ioDataSize}, ${5:void* outPropertyData})" },  
    { "trigger": "AudioFileGetGlobalInfoSize", "contents": "AudioFileGetGlobalInfoSize(${1:AudioFilePropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* outDataSize})" },  
    { "trigger": "AudioFileGetProperty", "contents": "AudioFileGetProperty(${1:AudioFileID inAudioFile}, ${2:AudioFilePropertyID inPropertyID}, ${3:UInt32* ioDataSize}, ${4:void* outPropertyData})" },  
    { "trigger": "AudioFileGetPropertyInfo", "contents": "AudioFileGetPropertyInfo(${1:AudioFileID inAudioFile}, ${2:AudioFilePropertyID inPropertyID}, ${3:UInt32* outDataSize}, ${4:UInt32* isWritable})" },  
    { "trigger": "AudioFileGetUserData", "contents": "AudioFileGetUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex}, ${4:UInt32* ioUserDataSize}, ${5:void* outUserData})" },  
    { "trigger": "AudioFileGetUserDataSize", "contents": "AudioFileGetUserDataSize(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex}, ${4:UInt32* outUserDataSize})" },  
    { "trigger": "AudioFileInitializeWithCallbacks", "contents": "AudioFileInitializeWithCallbacks(${1:void* inClientData}, ${2:AudioFile_ReadProc inReadFunc}, ${3:AudioFile_WriteProc inWriteFunc}, ${4:AudioFile_GetSizeProc inGetSizeFunc}, ${5:AudioFile_SetSizeProc inSetSizeFunc}, ${6:AudioFileTypeID inFileType}, ${7:AudioStreamBasicDescription* inFormat}, ${8:UInt32 inFlags}, ${9:AudioFileID* outAudioFile})" },  
    { "trigger": "AudioFileOpenURL", "contents": "AudioFileOpenURL(${1:CFURLRef inFileRef}, ${2:SInt8 inPermissions}, ${3:AudioFileTypeID inFileTypeHint}, ${4:AudioFileID* outAudioFile})" },  
    { "trigger": "AudioFileOpenWithCallbacks", "contents": "AudioFileOpenWithCallbacks(${1:void* inClientData}, ${2:AudioFile_ReadProc inReadFunc}, ${3:AudioFile_WriteProc inWriteFunc}, ${4:AudioFile_GetSizeProc inGetSizeFunc}, ${5:AudioFile_SetSizeProc inSetSizeFunc}, ${6:AudioFileTypeID inFileTypeHint}, ${7:AudioFileID* outAudioFile})" },  
    { "trigger": "AudioFileOptimize", "contents": "AudioFileOptimize(${1:AudioFileID inAudioFile})" },  
    { "trigger": "AudioFileReadBytes", "contents": "AudioFileReadBytes(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:SInt64 inStartingByte}, ${4:UInt32* ioNumBytes}, ${5:void* outBuffer})" },  
    { "trigger": "AudioFileReadPacketData", "contents": "AudioFileReadPacketData(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:UInt32* ioNumBytes}, ${4:AudioStreamPacketDescription* outPacketDescriptions}, ${5:SInt64 inStartingPacket}, ${6:UInt32* ioNumPackets}, ${7:void* outBuffer})" },  
    { "trigger": "AudioFileReadPackets", "contents": "AudioFileReadPackets(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:UInt32* outNumBytes}, ${4:AudioStreamPacketDescription* outPacketDescriptions}, ${5:SInt64 inStartingPacket}, ${6:UInt32* ioNumPackets}, ${7:void* outBuffer})" },  
    { "trigger": "AudioFileRemoveUserData", "contents": "AudioFileRemoveUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex})" },  
    { "trigger": "AudioFileSetProperty", "contents": "AudioFileSetProperty(${1:AudioFileID inAudioFile}, ${2:AudioFilePropertyID inPropertyID}, ${3:UInt32 inDataSize}, ${4:void* inPropertyData})" },  
    { "trigger": "AudioFileSetUserData", "contents": "AudioFileSetUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex}, ${4:UInt32 inUserDataSize}, ${5:void* inUserData})" },  
    { "trigger": "AudioFileStreamClose", "contents": "AudioFileStreamClose(${1:AudioFileStreamID inAudioFileStream})" },  
    { "trigger": "AudioFileStreamGetProperty", "contents": "AudioFileStreamGetProperty(${1:AudioFileStreamID inAudioFileStream}, ${2:AudioFileStreamPropertyID inPropertyID}, ${3:UInt32* ioPropertyDataSize}, ${4:void* outPropertyData})" },  
    { "trigger": "AudioFileStreamGetPropertyInfo", "contents": "AudioFileStreamGetPropertyInfo(${1:AudioFileStreamID inAudioFileStream}, ${2:AudioFileStreamPropertyID inPropertyID}, ${3:UInt32* outPropertyDataSize}, ${4:Boolean* outWritable})" },  
    { "trigger": "AudioFileStreamOpen", "contents": "AudioFileStreamOpen(${1:void* inClientData}, ${2:AudioFileStream_PropertyListenerProc inPropertyListenerProc}, ${3:AudioFileStream_PacketsProc inPacketsProc}, ${4:AudioFileTypeID inFileTypeHint}, ${5:AudioFileStreamID* outAudioFileStream})" },  
    { "trigger": "AudioFileStreamParseBytes", "contents": "AudioFileStreamParseBytes(${1:AudioFileStreamID inAudioFileStream}, ${2:UInt32 inDataByteSize}, ${3:void* inData}, ${4:UInt32 inFlags})" },  
    { "trigger": "AudioFileStreamSeek", "contents": "AudioFileStreamSeek(${1:AudioFileStreamID inAudioFileStream}, ${2:SInt64 inPacketOffset}, ${3:SInt64* outDataByteOffset}, ${4:UInt32* ioFlags})" },  
    { "trigger": "AudioFileStreamSetProperty", "contents": "AudioFileStreamSetProperty(${1:AudioFileStreamID inAudioFileStream}, ${2:AudioFileStreamPropertyID inPropertyID}, ${3:UInt32 inPropertyDataSize}, ${4:void* inPropertyData})" },  
    { "trigger": "AudioFileWriteBytes", "contents": "AudioFileWriteBytes(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:SInt64 inStartingByte}, ${4:UInt32* ioNumBytes}, ${5:void* inBuffer})" },  
    { "trigger": "AudioFileWritePackets", "contents": "AudioFileWritePackets(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:UInt32 inNumBytes}, ${4:AudioStreamPacketDescription* inPacketDescriptions}, ${5:SInt64 inStartingPacket}, ${6:UInt32* ioNumPackets}, ${7:void* inBuffer})" },  
    { "trigger": "AudioFormatGetProperty", "contents": "AudioFormatGetProperty(${1:AudioFormatPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* ioPropertyDataSize}, ${5:void* outPropertyData})" },  
    { "trigger": "AudioFormatGetPropertyInfo", "contents": "AudioFormatGetPropertyInfo(${1:AudioFormatPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* outPropertyDataSize})" },  
    { "trigger": "AudioQueueAddPropertyListener", "contents": "AudioQueueAddPropertyListener(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:AudioQueuePropertyListenerProc inProc}, ${4:void* inUserData})" },  
    { "trigger": "AudioQueueAllocateBuffer", "contents": "AudioQueueAllocateBuffer(${1:AudioQueueRef inAQ}, ${2:UInt32 inBufferByteSize}, ${3:AudioQueueBufferRef* outBuffer})" },  
    { "trigger": "AudioQueueAllocateBufferWithPacketDescriptions", "contents": "AudioQueueAllocateBufferWithPacketDescriptions(${1:AudioQueueRef inAQ}, ${2:UInt32 inBufferByteSize}, ${3:UInt32 inNumberPacketDescriptions}, ${4:AudioQueueBufferRef* outBuffer})" },  
    { "trigger": "AudioQueueCreateTimeline", "contents": "AudioQueueCreateTimeline(${1:AudioQueueRef inAQ}, ${2:AudioQueueTimelineRef* outTimeline})" },  
    { "trigger": "AudioQueueDeviceGetCurrentTime", "contents": "AudioQueueDeviceGetCurrentTime(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* outTimeStamp})" },  
    { "trigger": "AudioQueueDeviceGetNearestStartTime", "contents": "AudioQueueDeviceGetNearestStartTime(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* ioRequestedStartTime}, ${3:UInt32 inFlags})" },  
    { "trigger": "AudioQueueDeviceTranslateTime", "contents": "AudioQueueDeviceTranslateTime(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* inTime}, ${3:AudioTimeStamp* outTime})" },  
    { "trigger": "AudioQueueDispose", "contents": "AudioQueueDispose(${1:AudioQueueRef inAQ}, ${2:Boolean inImmediate})" },  
    { "trigger": "AudioQueueDisposeTimeline", "contents": "AudioQueueDisposeTimeline(${1:AudioQueueRef inAQ}, ${2:AudioQueueTimelineRef inTimeline})" },  
    { "trigger": "AudioQueueEnqueueBuffer", "contents": "AudioQueueEnqueueBuffer(${1:AudioQueueRef inAQ}, ${2:AudioQueueBufferRef inBuffer}, ${3:UInt32 inNumPacketDescs}, ${4:AudioStreamPacketDescription* inPacketDescs})" },  
    { "trigger": "AudioQueueEnqueueBufferWithParameters", "contents": "AudioQueueEnqueueBufferWithParameters(${1:AudioQueueRef inAQ}, ${2:AudioQueueBufferRef inBuffer}, ${3:UInt32 inNumPacketDescs}, ${4:AudioStreamPacketDescription* inPacketDescs}, ${5:UInt32 inTrimFramesAtStart}, ${6:UInt32 inTrimFramesAtEnd}, ${7:UInt32 inNumParamValues}, ${8:AudioQueueParameterEvent* inParamValues}, ${9:AudioTimeStamp* inStartTime}, ${10:AudioTimeStamp* outActualStartTime})" },  
    { "trigger": "AudioQueueFlush", "contents": "AudioQueueFlush(${1:AudioQueueRef inAQ})" },  
    { "trigger": "AudioQueueFreeBuffer", "contents": "AudioQueueFreeBuffer(${1:AudioQueueRef inAQ}, ${2:AudioQueueBufferRef inBuffer})" },  
    { "trigger": "AudioQueueGetCurrentTime", "contents": "AudioQueueGetCurrentTime(${1:AudioQueueRef inAQ}, ${2:AudioQueueTimelineRef inTimeline}, ${3:AudioTimeStamp* outTimeStamp}, ${4:Boolean* outTimelineDiscontinuity})" },  
    { "trigger": "AudioQueueGetParameter", "contents": "AudioQueueGetParameter(${1:AudioQueueRef inAQ}, ${2:AudioQueueParameterID inParamID}, ${3:AudioQueueParameterValue* outValue})" },  
    { "trigger": "AudioQueueGetProperty", "contents": "AudioQueueGetProperty(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:void* outData}, ${4:UInt32* ioDataSize})" },  
    { "trigger": "AudioQueueGetPropertySize", "contents": "AudioQueueGetPropertySize(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:UInt32* outDataSize})" },  
    { "trigger": "AudioQueueNewInput", "contents": "AudioQueueNewInput(${1:AudioStreamBasicDescription* inFormat}, ${2:AudioQueueInputCallback inCallbackProc}, ${3:void* inUserData}, ${4:CFRunLoopRef inCallbackRunLoop}, ${5:CFStringRef inCallbackRunLoopMode}, ${6:UInt32 inFlags}, ${7:AudioQueueRef* outAQ})" },  
    { "trigger": "AudioQueueNewOutput", "contents": "AudioQueueNewOutput(${1:AudioStreamBasicDescription* inFormat}, ${2:AudioQueueOutputCallback inCallbackProc}, ${3:void* inUserData}, ${4:CFRunLoopRef inCallbackRunLoop}, ${5:CFStringRef inCallbackRunLoopMode}, ${6:UInt32 inFlags}, ${7:AudioQueueRef* outAQ})" },  
    { "trigger": "AudioQueueOfflineRender", "contents": "AudioQueueOfflineRender(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* inTimestamp}, ${3:AudioQueueBufferRef ioBuffer}, ${4:UInt32 inNumberFrames})" },  
    { "trigger": "AudioQueuePause", "contents": "AudioQueuePause(${1:AudioQueueRef inAQ})" },  
    { "trigger": "AudioQueuePrime", "contents": "AudioQueuePrime(${1:AudioQueueRef inAQ}, ${2:UInt32 inNumberOfFramesToPrepare}, ${3:UInt32* outNumberOfFramesPrepared})" },  
    { "trigger": "AudioQueueRemovePropertyListener", "contents": "AudioQueueRemovePropertyListener(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:AudioQueuePropertyListenerProc inProc}, ${4:void* inUserData})" },  
    { "trigger": "AudioQueueReset", "contents": "AudioQueueReset(${1:AudioQueueRef inAQ})" },  
    { "trigger": "AudioQueueSetOfflineRenderFormat", "contents": "AudioQueueSetOfflineRenderFormat(${1:AudioQueueRef inAQ}, ${2:AudioStreamBasicDescription* inFormat}, ${3:AudioChannelLayout* inLayout})" },  
    { "trigger": "AudioQueueSetParameter", "contents": "AudioQueueSetParameter(${1:AudioQueueRef inAQ}, ${2:AudioQueueParameterID inParamID}, ${3:AudioQueueParameterValue inValue})" },  
    { "trigger": "AudioQueueSetProperty", "contents": "AudioQueueSetProperty(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:void* inData}, ${4:UInt32 inDataSize})" },  
    { "trigger": "AudioQueueStart", "contents": "AudioQueueStart(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* inStartTime})" },  
    { "trigger": "AudioQueueStop", "contents": "AudioQueueStop(${1:AudioQueueRef inAQ}, ${2:Boolean inImmediate})" },  
    { "trigger": "AudioServicesAddSystemSoundCompletion", "contents": "AudioServicesAddSystemSoundCompletion(${1:SystemSoundID inSystemSoundID}, ${2:CFRunLoopRef inRunLoop}, ${3:CFStringRef inRunLoopMode}, ${4:AudioServicesSystemSoundCompletionProc inCompletionRoutine}, ${5:void* inClientData})" },  
    { "trigger": "AudioServicesCreateSystemSoundID", "contents": "AudioServicesCreateSystemSoundID(${1:CFURLRef inFileURL}, ${2:SystemSoundID* outSystemSoundID})" },  
    { "trigger": "AudioServicesDisposeSystemSoundID", "contents": "AudioServicesDisposeSystemSoundID(${1:SystemSoundID inSystemSoundID})" },  
    { "trigger": "AudioServicesGetProperty", "contents": "AudioServicesGetProperty(${1:AudioServicesPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* ioPropertyDataSize}, ${5:void* outPropertyData})" },  
    { "trigger": "AudioServicesGetPropertyInfo", "contents": "AudioServicesGetPropertyInfo(${1:AudioServicesPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* outPropertyDataSize}, ${5:Boolean* outWritable})" },  
    { "trigger": "AudioServicesPlayAlertSound", "contents": "AudioServicesPlayAlertSound(${1:SystemSoundID inSystemSoundID})" },  
    { "trigger": "AudioServicesPlaySystemSound", "contents": "AudioServicesPlaySystemSound(${1:SystemSoundID inSystemSoundID})" },  
    { "trigger": "AudioServicesRemoveSystemSoundCompletion", "contents": "AudioServicesRemoveSystemSoundCompletion(${1:SystemSoundID inSystemSoundID})" },  
    { "trigger": "AudioServicesSetProperty", "contents": "AudioServicesSetProperty(${1:AudioServicesPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32 inPropertyDataSize}, ${5:void* inPropertyData})" },  
    { "trigger": "AudioSessionAddPropertyListener", "contents": "AudioSessionAddPropertyListener(${1:AudioSessionPropertyID inID}, ${2:AudioSessionPropertyListener inProc}, ${3:void* inClientData})" },  
    { "trigger": "AudioSessionGetProperty", "contents": "AudioSessionGetProperty(${1:AudioSessionPropertyID inID}, ${2:UInt32* ioDataSize}, ${3:void* outData})" },  
    { "trigger": "AudioSessionGetPropertySize", "contents": "AudioSessionGetPropertySize(${1:AudioSessionPropertyID inID}, ${2:UInt32* outDataSize})" },  
    { "trigger": "AudioSessionInitialize", "contents": "AudioSessionInitialize(${1:CFRunLoopRef inRunLoop}, ${2:CFStringRef inRunLoopMode}, ${3:AudioSessionInterruptionListener inInterruptionListener}, ${4:void* inClientData})" },  
    { "trigger": "AudioSessionRemovePropertyListener", "contents": "AudioSessionRemovePropertyListener(${1:AudioSessionPropertyID inID})" },  
    { "trigger": "AudioSessionRemovePropertyListenerWithUserData", "contents": "AudioSessionRemovePropertyListenerWithUserData(${1:AudioSessionPropertyID inID}, ${2:AudioSessionPropertyListener inProc}, ${3:void* inClientData})" },  
    { "trigger": "AudioSessionSetActive", "contents": "AudioSessionSetActive(${1:Boolean active})" },  
    { "trigger": "AudioSessionSetActiveWithFlags", "contents": "AudioSessionSetActiveWithFlags(${1:Boolean active}, ${2:UInt32 inFlags})" },  
    { "trigger": "AudioSessionSetProperty", "contents": "AudioSessionSetProperty(${1:AudioSessionPropertyID inID}, ${2:UInt32 inDataSize}, ${3:void* inData})" },  
    { "trigger": "CAAction" },  
    { "trigger": "CAAnimation" },  
    { "trigger": "CAAnimationDelegate" },  
    { "trigger": "CAAnimationGroup" },  
    { "trigger": "CAAnimation.animation" },  
    { "trigger": "CAAnimation.defaultValueForKey:", "contents": "CAAnimation.defaultValueForKey:(${1:NSString* key})" },  
    { "trigger": "CABasicAnimation" },  
    { "trigger": "CACurrentMediaTime" },  
    { "trigger": "CADisplayLink" },  
    { "trigger": "CADisplayLink.displayLinkWithTarget:selector:", "contents": "CADisplayLink.displayLinkWithTarget:selector:(${1:id target}, selector:${2:SEL sel})" },  
    { "trigger": "CAEmitterCell" },  
    { "trigger": "CAEmitterCell.defaultValueForKey:", "contents": "CAEmitterCell.defaultValueForKey:(${1:NSString* key})" },  
    { "trigger": "CAEmitterCell.emitterCell" },  
    { "trigger": "CAEmitterLayer" },  
    { "trigger": "CAGradientLayer" },  
    { "trigger": "CAKeyframeAnimation" },  
    { "trigger": "CALayer" },  
    { "trigger": "CALayerDelegate" },  
    { "trigger": "CALayer.defaultActionForKey:", "contents": "CALayer.defaultActionForKey:(${1:NSString* event})" },  
    { "trigger": "CALayer.defaultValueForKey:", "contents": "CALayer.defaultValueForKey:(${1:NSString* key})" },  
    { "trigger": "CALayer.layer" },  
    { "trigger": "CALayer.needsDisplayForKey:", "contents": "CALayer.needsDisplayForKey:(${1:NSString* key})" },  
    { "trigger": "CAMediaTiming" },  
    { "trigger": "CAMediaTimingFunction" },  
    { "trigger": "CAMediaTimingFunction.functionWithControlPoints::::", "contents": "CAMediaTimingFunction.functionWithControlPoints::::(${1:float c1x}, ${2:float c1y}, ${3:float c2x}, ${4:float c2y})" },  
    { "trigger": "CAMediaTimingFunction.functionWithName:", "contents": "CAMediaTimingFunction.functionWithName:(${1:NSString* name})" },  
    { "trigger": "CAPropertyAnimation" },  
    { "trigger": "CAPropertyAnimation.animationWithKeyPath:", "contents": "CAPropertyAnimation.animationWithKeyPath:(${1:NSString* path})" },  
    { "trigger": "CAReplicatorLayer" },  
    { "trigger": "CAScrollLayer" },  
    { "trigger": "CAShapeLayer" },  
    { "trigger": "CAShow", "contents": "CAShow(${1:void* inObject})" },  
    { "trigger": "CAShowFile", "contents": "CAShowFile(${1:void* inObject}, ${2:FILE* inFile})" },  
    { "trigger": "CATextLayer" },  
    { "trigger": "CATiledLayer" },  
    { "trigger": "CATiledLayer.fadeDuration" },  
    { "trigger": "CATransaction" },  
    { "trigger": "CATransaction.animationDuration" },  
    { "trigger": "CATransaction.animationTimingFunction" },  
    { "trigger": "CATransaction.begin" },  
    { "trigger": "CATransaction.commit" },  
    { "trigger": "CATransaction.completionBlock" },  
    { "trigger": "CATransaction.disableActions" },  
    { "trigger": "CATransaction.flush" },  
    { "trigger": "CATransaction.lock" },  
    { "trigger": "CATransaction.setAnimationDuration:", "contents": "CATransaction.setAnimationDuration:(${1:CFTimeInterval dur})" },  
    { "trigger": "CATransaction.setAnimationTimingFunction:", "contents": "CATransaction.setAnimationTimingFunction:(${1:CAMediaTimingFunction* function})" },  
    { "trigger": "CATransaction.setCompletionBlock:", "contents": "CATransaction.setCompletionBlock:(${1:void (^)(void) block})" },  
    { "trigger": "CATransaction.setDisableActions:", "contents": "CATransaction.setDisableActions:(${1:BOOL flag})" },  
    { "trigger": "CATransaction.setValue:forKey:", "contents": "CATransaction.setValue:forKey:(${1:id anObject}, forKey:${2:NSString* key})" },  
    { "trigger": "CATransaction.unlock" },  
    { "trigger": "CATransaction.valueForKey:", "contents": "CATransaction.valueForKey:(${1:NSString* key})" },  
    { "trigger": "CATransform3DConcat", "contents": "CATransform3DConcat(${1:CATransform3D a}, ${2:CATransform3D b})" },  
    { "trigger": "CATransform3DEqualToTransform", "contents": "CATransform3DEqualToTransform(${1:CATransform3D a}, ${2:CATransform3D b})" },  
    { "trigger": "CATransform3DGetAffineTransform", "contents": "CATransform3DGetAffineTransform(${1:CATransform3D t})" },  
    { "trigger": "CATransform3DIdentity (CATransform3D)" },  
    { "trigger": "CATransform3DInvert", "contents": "CATransform3DInvert(${1:CATransform3D t})" },  
    { "trigger": "CATransform3DIsAffine", "contents": "CATransform3DIsAffine(${1:CATransform3D t})" },  
    { "trigger": "CATransform3DIsIdentity", "contents": "CATransform3DIsIdentity(${1:CATransform3D t})" },  
    { "trigger": "CATransform3DMakeAffineTransform", "contents": "CATransform3DMakeAffineTransform(${1:CGAffineTransform m})" },  
    { "trigger": "CATransform3DMakeRotation", "contents": "CATransform3DMakeRotation(${1:CGFloat angle}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:CGFloat z})" },  
    { "trigger": "CATransform3DMakeScale", "contents": "CATransform3DMakeScale(${1:CGFloat sx}, ${2:CGFloat sy}, ${3:CGFloat sz})" },  
    { "trigger": "CATransform3DMakeTranslation", "contents": "CATransform3DMakeTranslation(${1:CGFloat tx}, ${2:CGFloat ty}, ${3:CGFloat tz})" },  
    { "trigger": "CATransform3DRotate", "contents": "CATransform3DRotate(${1:CATransform3D t}, ${2:CGFloat angle}, ${3:CGFloat x}, ${4:CGFloat y}, ${5:CGFloat z})" },  
    { "trigger": "CATransform3DScale", "contents": "CATransform3DScale(${1:CATransform3D t}, ${2:CGFloat sx}, ${3:CGFloat sy}, ${4:CGFloat sz})" },  
    { "trigger": "CATransform3DTranslate", "contents": "CATransform3DTranslate(${1:CATransform3D t}, ${2:CGFloat tx}, ${3:CGFloat ty}, ${4:CGFloat tz})" },  
    { "trigger": "CATransform3DValue" },  
    { "trigger": "CATransition" },  
    { "trigger": "CAValueFunction" },  
    { "trigger": "CAValueFunction.functionWithName:", "contents": "CAValueFunction.functionWithName:(${1:NSString* name})" },  
    { "trigger": "CA_WARN_DEPRECATED (1)" },  
    { "trigger": "CBATTErrorAttributeNotFound (10)" },  
    { "trigger": "CBATTErrorAttributeNotLong (11)" },  
    { "trigger": "CBATTErrorDomain (NSString*)" },  
    { "trigger": "CBATTErrorInsufficientAuthentication (5)" },  
    { "trigger": "CBATTErrorInsufficientAuthorization (8)" },  
    { "trigger": "CBATTErrorInsufficientEncryption (15)" },  
    { "trigger": "CBATTErrorInsufficientEncryptionKeySize (12)" },  
    { "trigger": "CBATTErrorInsufficientResources (17)" },  
    { "trigger": "CBATTErrorInvalidAttributeValueLength (13)" },  
    { "trigger": "CBATTErrorInvalidHandle (1)" },  
    { "trigger": "CBATTErrorInvalidOffset (7)" },  
    { "trigger": "CBATTErrorInvalidPdu (4)" },  
    { "trigger": "CBATTErrorPrepareQueueFull (9)" },  
    { "trigger": "CBATTErrorReadNotPermitted (2)" },  
    { "trigger": "CBATTErrorRequestNotSupported (6)" },  
    { "trigger": "CBATTErrorUnlikelyError (14)" },  
    { "trigger": "CBATTErrorUnsupportedGroupType (16)" },  
    { "trigger": "CBATTErrorWriteNotPermitted (3)" },  
    { "trigger": "CBAdvertisementDataLocalNameKey (NSString*)" },  
    { "trigger": "CBAdvertisementDataManufacturerDataKey (NSString*)" },  
    { "trigger": "CBAdvertisementDataServiceDataKey (NSString*)" },  
    { "trigger": "CBAdvertisementDataServiceUUIDsKey (NSString*)" },  
    { "trigger": "CBAdvertisementDataTxPowerLevelKey (NSString*)" },  
    { "trigger": "CBCentralManager" },  
    { "trigger": "CBCentralManagerDelegate" },  
    { "trigger": "CBCentralManagerScanOptionAllowDuplicatesKey (NSString*)" },  
    { "trigger": "CBCentralManagerStatePoweredOff (4)" },  
    { "trigger": "CBCentralManagerStatePoweredOn (5)" },  
    { "trigger": "CBCentralManagerStateResetting (1)" },  
    { "trigger": "CBCentralManagerStateUnauthorized (3)" },  
    { "trigger": "CBCentralManagerStateUnknown (0)" },  
    { "trigger": "CBCentralManagerStateUnsupported (2)" },  
    { "trigger": "CBCharacteristic" },  
    { "trigger": "CBCharacteristicPropertyAuthenticatedSignedWrites (64)" },  
    { "trigger": "CBCharacteristicPropertyBroadcast (1)" },  
    { "trigger": "CBCharacteristicPropertyExtendedProperties (128)" },  
    { "trigger": "CBCharacteristicPropertyIndicate (32)" },  
    { "trigger": "CBCharacteristicPropertyNotify (16)" },  
    { "trigger": "CBCharacteristicPropertyRead (2)" },  
    { "trigger": "CBCharacteristicPropertyWrite (8)" },  
    { "trigger": "CBCharacteristicPropertyWriteWithoutResponse (4)" },  
    { "trigger": "CBCharacteristicWriteWithResponse (0)" },  
    { "trigger": "CBCharacteristicWriteWithoutResponse (1)" },  
    { "trigger": "CBConnectPeripheralOptionNotifyOnDisconnectionKey (NSString*)" },  
    { "trigger": "CBDescriptor" },  
    { "trigger": "CBErrorDomain (NSString*)" },  
    { "trigger": "CBErrorUnknown (0)" },  
    { "trigger": "CBPeripheral" },  
    { "trigger": "CBPeripheralDelegate" },  
    { "trigger": "CBService" },  
    { "trigger": "CBUUID" },  
    { "trigger": "CBUUIDAppearanceString (NSString*)" },  
    { "trigger": "CBUUIDCharacteristicAggregateFormatString (NSString*)" },  
    { "trigger": "CBUUIDCharacteristicExtendedPropertiesString (NSString*)" },  
    { "trigger": "CBUUIDCharacteristicFormatString (NSString*)" },  
    { "trigger": "CBUUIDCharacteristicUserDescriptionString (NSString*)" },  
    { "trigger": "CBUUIDClientCharacteristicConfigurationString (NSString*)" },  
    { "trigger": "CBUUIDDeviceNameString (NSString*)" },  
    { "trigger": "CBUUIDGenericAccessProfileString (NSString*)" },  
    { "trigger": "CBUUIDGenericAttributeProfileString (NSString*)" },  
    { "trigger": "CBUUIDPeripheralPreferredConnectionParametersString (NSString*)" },  
    { "trigger": "CBUUIDPeripheralPrivacyFlagString (NSString*)" },  
    { "trigger": "CBUUIDReconnectionAddressString (NSString*)" },  
    { "trigger": "CBUUIDServerCharacteristicConfigurationString (NSString*)" },  
    { "trigger": "CBUUIDServiceChangedString (NSString*)" },  
    { "trigger": "CBUUID.UUIDWithCFUUID:", "contents": "CBUUID.UUIDWithCFUUID:(${1:CFUUIDRef theUUID})" },  
    { "trigger": "CBUUID.UUIDWithData:", "contents": "CBUUID.UUIDWithData:(${1:NSData* theData})" },  
    { "trigger": "CBUUID.UUIDWithString:", "contents": "CBUUID.UUIDWithString:(${1:NSString* theString})" },  
    { "trigger": "CFAbsoluteTimeAddGregorianUnits", "contents": "CFAbsoluteTimeAddGregorianUnits(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz}, ${3:CFGregorianUnits units})" },  
    { "trigger": "CFAbsoluteTimeGetCurrent" },  
    { "trigger": "CFAbsoluteTimeGetDayOfWeek", "contents": "CFAbsoluteTimeGetDayOfWeek(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})" },  
    { "trigger": "CFAbsoluteTimeGetDayOfYear", "contents": "CFAbsoluteTimeGetDayOfYear(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})" },  
    { "trigger": "CFAbsoluteTimeGetDifferenceAsGregorianUnits", "contents": "CFAbsoluteTimeGetDifferenceAsGregorianUnits(${1:CFAbsoluteTime at1}, ${2:CFAbsoluteTime at2}, ${3:CFTimeZoneRef tz}, ${4:CFOptionFlags unitFlags})" },  
    { "trigger": "CFAbsoluteTimeGetGregorianDate", "contents": "CFAbsoluteTimeGetGregorianDate(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})" },  
    { "trigger": "CFAbsoluteTimeGetWeekOfYear", "contents": "CFAbsoluteTimeGetWeekOfYear(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})" },  
    { "trigger": "CFAllocatorAllocate", "contents": "CFAllocatorAllocate(${1:CFAllocatorRef allocator}, ${2:CFIndex size}, ${3:CFOptionFlags hint})" },  
    { "trigger": "CFAllocatorCreate", "contents": "CFAllocatorCreate(${1:CFAllocatorRef allocator}, ${2:CFAllocatorContext* context})" },  
    { "trigger": "CFAllocatorDeallocate", "contents": "CFAllocatorDeallocate(${1:CFAllocatorRef allocator}, ${2:void* ptr})" },  
    { "trigger": "CFAllocatorGetContext", "contents": "CFAllocatorGetContext(${1:CFAllocatorRef allocator}, ${2:CFAllocatorContext* context})" },  
    { "trigger": "CFAllocatorGetDefault" },  
    { "trigger": "CFAllocatorGetPreferredSizeForSize", "contents": "CFAllocatorGetPreferredSizeForSize(${1:CFAllocatorRef allocator}, ${2:CFIndex size}, ${3:CFOptionFlags hint})" },  
    { "trigger": "CFAllocatorGetTypeID" },  
    { "trigger": "CFAllocatorReallocate", "contents": "CFAllocatorReallocate(${1:CFAllocatorRef allocator}, ${2:void* ptr}, ${3:CFIndex newsize}, ${4:CFOptionFlags hint})" },  
    { "trigger": "CFAllocatorSetDefault", "contents": "CFAllocatorSetDefault(${1:CFAllocatorRef allocator})" },  
    { "trigger": "CFArrayAppendArray", "contents": "CFArrayAppendArray(${1:CFMutableArrayRef theArray}, ${2:CFArrayRef otherArray}, ${3:CFRange otherRange})" },  
    { "trigger": "CFArrayAppendValue", "contents": "CFArrayAppendValue(${1:CFMutableArrayRef theArray}, ${2:void* value})" },  
    { "trigger": "CFArrayApplyFunction", "contents": "CFArrayApplyFunction(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:CFArrayApplierFunction applier}, ${4:void* context})" },  
    { "trigger": "CFArrayBSearchValues", "contents": "CFArrayBSearchValues(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value}, ${4:CFComparatorFunction comparator}, ${5:void* context})" },  
    { "trigger": "CFArrayContainsValue", "contents": "CFArrayContainsValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})" },  
    { "trigger": "CFArrayCreate", "contents": "CFArrayCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFArrayCallBacks* callBacks})" },  
    { "trigger": "CFArrayCreateCopy", "contents": "CFArrayCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFArrayRef theArray})" },  
    { "trigger": "CFArrayCreateMutable", "contents": "CFArrayCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFArrayCallBacks* callBacks})" },  
    { "trigger": "CFArrayCreateMutableCopy", "contents": "CFArrayCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFArrayRef theArray})" },  
    { "trigger": "CFArrayExchangeValuesAtIndices", "contents": "CFArrayExchangeValuesAtIndices(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx1}, ${3:CFIndex idx2})" },  
    { "trigger": "CFArrayGetCount", "contents": "CFArrayGetCount(${1:CFArrayRef theArray})" },  
    { "trigger": "CFArrayGetCountOfValue", "contents": "CFArrayGetCountOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})" },  
    { "trigger": "CFArrayGetFirstIndexOfValue", "contents": "CFArrayGetFirstIndexOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})" },  
    { "trigger": "CFArrayGetLastIndexOfValue", "contents": "CFArrayGetLastIndexOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})" },  
    { "trigger": "CFArrayGetTypeID" },  
    { "trigger": "CFArrayGetValueAtIndex", "contents": "CFArrayGetValueAtIndex(${1:CFArrayRef theArray}, ${2:CFIndex idx})" },  
    { "trigger": "CFArrayGetValues", "contents": "CFArrayGetValues(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void** values})" },  
    { "trigger": "CFArrayInsertValueAtIndex", "contents": "CFArrayInsertValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx}, ${3:void* value})" },  
    { "trigger": "CFArrayRemoveAllValues", "contents": "CFArrayRemoveAllValues(${1:CFMutableArrayRef theArray})" },  
    { "trigger": "CFArrayRemoveValueAtIndex", "contents": "CFArrayRemoveValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx})" },  
    { "trigger": "CFArrayReplaceValues", "contents": "CFArrayReplaceValues(${1:CFMutableArrayRef theArray}, ${2:CFRange range}, ${3:void** newValues}, ${4:CFIndex newCount})" },  
    { "trigger": "CFArraySetValueAtIndex", "contents": "CFArraySetValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx}, ${3:void* value})" },  
    { "trigger": "CFArraySortValues", "contents": "CFArraySortValues(${1:CFMutableArrayRef theArray}, ${2:CFRange range}, ${3:CFComparatorFunction comparator}, ${4:void* context})" },  
    { "trigger": "CFAttributedStringBeginEditing", "contents": "CFAttributedStringBeginEditing(${1:CFMutableAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringCreate", "contents": "CFAttributedStringCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef str}, ${3:CFDictionaryRef attributes})" },  
    { "trigger": "CFAttributedStringCreateCopy", "contents": "CFAttributedStringCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringCreateMutable", "contents": "CFAttributedStringCreateMutable(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength})" },  
    { "trigger": "CFAttributedStringCreateMutableCopy", "contents": "CFAttributedStringCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength}, ${3:CFAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringCreateWithSubstring", "contents": "CFAttributedStringCreateWithSubstring(${1:CFAllocatorRef alloc}, ${2:CFAttributedStringRef aStr}, ${3:CFRange range})" },  
    { "trigger": "CFAttributedStringEndEditing", "contents": "CFAttributedStringEndEditing(${1:CFMutableAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringGetAttribute", "contents": "CFAttributedStringGetAttribute(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFStringRef attrName}, ${4:CFRange* effectiveRange})" },  
    { "trigger": "CFAttributedStringGetAttributeAndLongestEffectiveRange", "contents": "CFAttributedStringGetAttributeAndLongestEffectiveRange(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFStringRef attrName}, ${4:CFRange inRange}, ${5:CFRange* longestEffectiveRange})" },  
    { "trigger": "CFAttributedStringGetAttributes", "contents": "CFAttributedStringGetAttributes(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFRange* effectiveRange})" },  
    { "trigger": "CFAttributedStringGetAttributesAndLongestEffectiveRange", "contents": "CFAttributedStringGetAttributesAndLongestEffectiveRange(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFRange inRange}, ${4:CFRange* longestEffectiveRange})" },  
    { "trigger": "CFAttributedStringGetLength", "contents": "CFAttributedStringGetLength(${1:CFAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringGetMutableString", "contents": "CFAttributedStringGetMutableString(${1:CFMutableAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringGetString", "contents": "CFAttributedStringGetString(${1:CFAttributedStringRef aStr})" },  
    { "trigger": "CFAttributedStringGetTypeID" },  
    { "trigger": "CFAttributedStringRemoveAttribute", "contents": "CFAttributedStringRemoveAttribute(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef attrName})" },  
    { "trigger": "CFAttributedStringReplaceAttributedString", "contents": "CFAttributedStringReplaceAttributedString(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFAttributedStringRef replacement})" },  
    { "trigger": "CFAttributedStringReplaceString", "contents": "CFAttributedStringReplaceString(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef replacement})" },  
    { "trigger": "CFAttributedStringSetAttribute", "contents": "CFAttributedStringSetAttribute(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef attrName}, ${4:CFTypeRef value})" },  
    { "trigger": "CFAttributedStringSetAttributes", "contents": "CFAttributedStringSetAttributes(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFDictionaryRef replacement}, ${4:Boolean clearOtherAttributes})" },  
    { "trigger": "CFBagAddValue", "contents": "CFBagAddValue(${1:CFMutableBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBagApplyFunction", "contents": "CFBagApplyFunction(${1:CFBagRef theBag}, ${2:CFBagApplierFunction applier}, ${3:void* context})" },  
    { "trigger": "CFBagContainsValue", "contents": "CFBagContainsValue(${1:CFBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBagCreate", "contents": "CFBagCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFBagCallBacks* callBacks})" },  
    { "trigger": "CFBagCreateCopy", "contents": "CFBagCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFBagRef theBag})" },  
    { "trigger": "CFBagCreateMutable", "contents": "CFBagCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBagCallBacks* callBacks})" },  
    { "trigger": "CFBagCreateMutableCopy", "contents": "CFBagCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBagRef theBag})" },  
    { "trigger": "CFBagGetCount", "contents": "CFBagGetCount(${1:CFBagRef theBag})" },  
    { "trigger": "CFBagGetCountOfValue", "contents": "CFBagGetCountOfValue(${1:CFBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBagGetTypeID" },  
    { "trigger": "CFBagGetValue", "contents": "CFBagGetValue(${1:CFBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBagGetValueIfPresent", "contents": "CFBagGetValueIfPresent(${1:CFBagRef theBag}, ${2:void* candidate}, ${3:void** value})" },  
    { "trigger": "CFBagGetValues", "contents": "CFBagGetValues(${1:CFBagRef theBag}, ${2:void** values})" },  
    { "trigger": "CFBagRemoveAllValues", "contents": "CFBagRemoveAllValues(${1:CFMutableBagRef theBag})" },  
    { "trigger": "CFBagRemoveValue", "contents": "CFBagRemoveValue(${1:CFMutableBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBagReplaceValue", "contents": "CFBagReplaceValue(${1:CFMutableBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBagSetValue", "contents": "CFBagSetValue(${1:CFMutableBagRef theBag}, ${2:void* value})" },  
    { "trigger": "CFBinaryHeapAddValue", "contents": "CFBinaryHeapAddValue(${1:CFBinaryHeapRef heap}, ${2:void* value})" },  
    { "trigger": "CFBinaryHeapApplyFunction", "contents": "CFBinaryHeapApplyFunction(${1:CFBinaryHeapRef heap}, ${2:CFBinaryHeapApplierFunction applier}, ${3:void* context})" },  
    { "trigger": "CFBinaryHeapContainsValue", "contents": "CFBinaryHeapContainsValue(${1:CFBinaryHeapRef heap}, ${2:void* value})" },  
    { "trigger": "CFBinaryHeapCreate", "contents": "CFBinaryHeapCreate(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBinaryHeapCallBacks* callBacks}, ${4:CFBinaryHeapCompareContext* compareContext})" },  
    { "trigger": "CFBinaryHeapCreateCopy", "contents": "CFBinaryHeapCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBinaryHeapRef heap})" },  
    { "trigger": "CFBinaryHeapGetCount", "contents": "CFBinaryHeapGetCount(${1:CFBinaryHeapRef heap})" },  
    { "trigger": "CFBinaryHeapGetCountOfValue", "contents": "CFBinaryHeapGetCountOfValue(${1:CFBinaryHeapRef heap}, ${2:void* value})" },  
    { "trigger": "CFBinaryHeapGetMinimum", "contents": "CFBinaryHeapGetMinimum(${1:CFBinaryHeapRef heap})" },  
    { "trigger": "CFBinaryHeapGetMinimumIfPresent", "contents": "CFBinaryHeapGetMinimumIfPresent(${1:CFBinaryHeapRef heap}, ${2:void** value})" },  
    { "trigger": "CFBinaryHeapGetTypeID" },  
    { "trigger": "CFBinaryHeapGetValues", "contents": "CFBinaryHeapGetValues(${1:CFBinaryHeapRef heap}, ${2:void** values})" },  
    { "trigger": "CFBinaryHeapRemoveAllValues", "contents": "CFBinaryHeapRemoveAllValues(${1:CFBinaryHeapRef heap})" },  
    { "trigger": "CFBinaryHeapRemoveMinimumValue", "contents": "CFBinaryHeapRemoveMinimumValue(${1:CFBinaryHeapRef heap})" },  
    { "trigger": "CFBitVectorContainsBit", "contents": "CFBitVectorContainsBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})" },  
    { "trigger": "CFBitVectorCreate", "contents": "CFBitVectorCreate(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex numBits})" },  
    { "trigger": "CFBitVectorCreateCopy", "contents": "CFBitVectorCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFBitVectorRef bv})" },  
    { "trigger": "CFBitVectorCreateMutable", "contents": "CFBitVectorCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity})" },  
    { "trigger": "CFBitVectorCreateMutableCopy", "contents": "CFBitVectorCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBitVectorRef bv})" },  
    { "trigger": "CFBitVectorFlipBitAtIndex", "contents": "CFBitVectorFlipBitAtIndex(${1:CFMutableBitVectorRef bv}, ${2:CFIndex idx})" },  
    { "trigger": "CFBitVectorFlipBits", "contents": "CFBitVectorFlipBits(${1:CFMutableBitVectorRef bv}, ${2:CFRange range})" },  
    { "trigger": "CFBitVectorGetBitAtIndex", "contents": "CFBitVectorGetBitAtIndex(${1:CFBitVectorRef bv}, ${2:CFIndex idx})" },  
    { "trigger": "CFBitVectorGetBits", "contents": "CFBitVectorGetBits(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:UInt8* bytes})" },  
    { "trigger": "CFBitVectorGetCount", "contents": "CFBitVectorGetCount(${1:CFBitVectorRef bv})" },  
    { "trigger": "CFBitVectorGetCountOfBit", "contents": "CFBitVectorGetCountOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})" },  
    { "trigger": "CFBitVectorGetFirstIndexOfBit", "contents": "CFBitVectorGetFirstIndexOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})" },  
    { "trigger": "CFBitVectorGetLastIndexOfBit", "contents": "CFBitVectorGetLastIndexOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})" },  
    { "trigger": "CFBitVectorGetTypeID" },  
    { "trigger": "CFBitVectorSetAllBits", "contents": "CFBitVectorSetAllBits(${1:CFMutableBitVectorRef bv}, ${2:CFBit value})" },  
    { "trigger": "CFBitVectorSetBitAtIndex", "contents": "CFBitVectorSetBitAtIndex(${1:CFMutableBitVectorRef bv}, ${2:CFIndex idx}, ${3:CFBit value})" },  
    { "trigger": "CFBitVectorSetBits", "contents": "CFBitVectorSetBits(${1:CFMutableBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})" },  
    { "trigger": "CFBitVectorSetCount", "contents": "CFBitVectorSetCount(${1:CFMutableBitVectorRef bv}, ${2:CFIndex count})" },  
    { "trigger": "CFBooleanGetTypeID" },  
    { "trigger": "CFBooleanGetValue", "contents": "CFBooleanGetValue(${1:CFBooleanRef boolean})" },  
    { "trigger": "CFBridgingRelease", "contents": "CFBridgingRelease(${1:CFTypeRef X})" },  
    { "trigger": "CFBridgingRetain", "contents": "CFBridgingRetain(${1:id X})" },  
    { "trigger": "CFBundleCloseBundleResourceMap", "contents": "CFBundleCloseBundleResourceMap(${1:CFBundleRef bundle}, ${2:CFBundleRefNum refNum})" },  
    { "trigger": "CFBundleCopyAuxiliaryExecutableURL", "contents": "CFBundleCopyAuxiliaryExecutableURL(${1:CFBundleRef bundle}, ${2:CFStringRef executableName})" },  
    { "trigger": "CFBundleCopyBuiltInPlugInsURL", "contents": "CFBundleCopyBuiltInPlugInsURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopyBundleLocalizations", "contents": "CFBundleCopyBundleLocalizations(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopyBundleURL", "contents": "CFBundleCopyBundleURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopyExecutableArchitectures", "contents": "CFBundleCopyExecutableArchitectures(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopyExecutableArchitecturesForURL", "contents": "CFBundleCopyExecutableArchitecturesForURL(${1:CFURLRef url})" },  
    { "trigger": "CFBundleCopyExecutableURL", "contents": "CFBundleCopyExecutableURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopyInfoDictionaryForURL", "contents": "CFBundleCopyInfoDictionaryForURL(${1:CFURLRef url})" },  
    { "trigger": "CFBundleCopyInfoDictionaryInDirectory", "contents": "CFBundleCopyInfoDictionaryInDirectory(${1:CFURLRef bundleURL})" },  
    { "trigger": "CFBundleCopyLocalizationsForPreferences", "contents": "CFBundleCopyLocalizationsForPreferences(${1:CFArrayRef locArray}, ${2:CFArrayRef prefArray})" },  
    { "trigger": "CFBundleCopyLocalizationsForURL", "contents": "CFBundleCopyLocalizationsForURL(${1:CFURLRef url})" },  
    { "trigger": "CFBundleCopyLocalizedString", "contents": "CFBundleCopyLocalizedString(${1:CFBundleRef bundle}, ${2:CFStringRef key}, ${3:CFStringRef value}, ${4:CFStringRef tableName})" },  
    { "trigger": "CFBundleCopyPreferredLocalizationsFromArray", "contents": "CFBundleCopyPreferredLocalizationsFromArray(${1:CFArrayRef locArray})" },  
    { "trigger": "CFBundleCopyPrivateFrameworksURL", "contents": "CFBundleCopyPrivateFrameworksURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopyResourceURL", "contents": "CFBundleCopyResourceURL(${1:CFBundleRef bundle}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName})" },  
    { "trigger": "CFBundleCopyResourceURLForLocalization", "contents": "CFBundleCopyResourceURLForLocalization(${1:CFBundleRef bundle}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName}, ${5:CFStringRef localizationName})" },  
    { "trigger": "CFBundleCopyResourceURLInDirectory", "contents": "CFBundleCopyResourceURLInDirectory(${1:CFURLRef bundleURL}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName})" },  
    { "trigger": "CFBundleCopyResourceURLsOfType", "contents": "CFBundleCopyResourceURLsOfType(${1:CFBundleRef bundle}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName})" },  
    { "trigger": "CFBundleCopyResourceURLsOfTypeForLocalization", "contents": "CFBundleCopyResourceURLsOfTypeForLocalization(${1:CFBundleRef bundle}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName}, ${4:CFStringRef localizationName})" },  
    { "trigger": "CFBundleCopyResourceURLsOfTypeInDirectory", "contents": "CFBundleCopyResourceURLsOfTypeInDirectory(${1:CFURLRef bundleURL}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName})" },  
    { "trigger": "CFBundleCopyResourcesDirectoryURL", "contents": "CFBundleCopyResourcesDirectoryURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopySharedFrameworksURL", "contents": "CFBundleCopySharedFrameworksURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopySharedSupportURL", "contents": "CFBundleCopySharedSupportURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCopySupportFilesDirectoryURL", "contents": "CFBundleCopySupportFilesDirectoryURL(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleCreate", "contents": "CFBundleCreate(${1:CFAllocatorRef allocator}, ${2:CFURLRef bundleURL})" },  
    { "trigger": "CFBundleCreateBundlesFromDirectory", "contents": "CFBundleCreateBundlesFromDirectory(${1:CFAllocatorRef allocator}, ${2:CFURLRef directoryURL}, ${3:CFStringRef bundleType})" },  
    { "trigger": "CFBundleGetAllBundles" },  
    { "trigger": "CFBundleGetBundleWithIdentifier", "contents": "CFBundleGetBundleWithIdentifier(${1:CFStringRef bundleID})" },  
    { "trigger": "CFBundleGetDataPointerForName", "contents": "CFBundleGetDataPointerForName(${1:CFBundleRef bundle}, ${2:CFStringRef symbolName})" },  
    { "trigger": "CFBundleGetDataPointersForNames", "contents": "CFBundleGetDataPointersForNames(${1:CFBundleRef bundle}, ${2:CFArrayRef symbolNames}, ${3:void** stbl})" },  
    { "trigger": "CFBundleGetDevelopmentRegion", "contents": "CFBundleGetDevelopmentRegion(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleGetFunctionPointerForName", "contents": "CFBundleGetFunctionPointerForName(${1:CFBundleRef bundle}, ${2:CFStringRef functionName})" },  
    { "trigger": "CFBundleGetFunctionPointersForNames", "contents": "CFBundleGetFunctionPointersForNames(${1:CFBundleRef bundle}, ${2:CFArrayRef functionNames}, ${3:void** ftbl})" },  
    { "trigger": "CFBundleGetIdentifier", "contents": "CFBundleGetIdentifier(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleGetInfoDictionary", "contents": "CFBundleGetInfoDictionary(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleGetLocalInfoDictionary", "contents": "CFBundleGetLocalInfoDictionary(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleGetMainBundle" },  
    { "trigger": "CFBundleGetPackageInfo", "contents": "CFBundleGetPackageInfo(${1:CFBundleRef bundle}, ${2:UInt32* packageType}, ${3:UInt32* packageCreator})" },  
    { "trigger": "CFBundleGetPackageInfoInDirectory", "contents": "CFBundleGetPackageInfoInDirectory(${1:CFURLRef url}, ${2:UInt32* packageType}, ${3:UInt32* packageCreator})" },  
    { "trigger": "CFBundleGetPlugIn", "contents": "CFBundleGetPlugIn(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleGetTypeID" },  
    { "trigger": "CFBundleGetValueForInfoDictionaryKey", "contents": "CFBundleGetValueForInfoDictionaryKey(${1:CFBundleRef bundle}, ${2:CFStringRef key})" },  
    { "trigger": "CFBundleGetVersionNumber", "contents": "CFBundleGetVersionNumber(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleIsExecutableLoaded", "contents": "CFBundleIsExecutableLoaded(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleLoadExecutable", "contents": "CFBundleLoadExecutable(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundleLoadExecutableAndReturnError", "contents": "CFBundleLoadExecutableAndReturnError(${1:CFBundleRef bundle}, ${2:CFErrorRef* error})" },  
    { "trigger": "CFBundleOpenBundleResourceFiles", "contents": "CFBundleOpenBundleResourceFiles(${1:CFBundleRef bundle}, ${2:CFBundleRefNum* refNum}, ${3:CFBundleRefNum* localizedRefNum})" },  
    { "trigger": "CFBundleOpenBundleResourceMap", "contents": "CFBundleOpenBundleResourceMap(${1:CFBundleRef bundle})" },  
    { "trigger": "CFBundlePreflightExecutable", "contents": "CFBundlePreflightExecutable(${1:CFBundleRef bundle}, ${2:CFErrorRef* error})" },  
    { "trigger": "CFBundleUnloadExecutable", "contents": "CFBundleUnloadExecutable(${1:CFBundleRef bundle})" },  
    { "trigger": "CFByteOrderBigEndian (2)" },  
    { "trigger": "CFByteOrderGetCurrent" },  
    { "trigger": "CFByteOrderLittleEndian (1)" },  
    { "trigger": "CFByteOrderUnknown (0)" },  
    { "trigger": "CFCalendarAddComponents", "contents": "CFCalendarAddComponents(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime* at}, ${3:CFOptionFlags options}, ${4:char* componentDesc})" },  
    { "trigger": "CFCalendarComposeAbsoluteTime", "contents": "CFCalendarComposeAbsoluteTime(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime* at}, ${3:char* componentDesc})" },  
    { "trigger": "CFCalendarCopyCurrent" },  
    { "trigger": "CFCalendarCopyLocale", "contents": "CFCalendarCopyLocale(${1:CFCalendarRef calendar})" },  
    { "trigger": "CFCalendarCopyTimeZone", "contents": "CFCalendarCopyTimeZone(${1:CFCalendarRef calendar})" },  
    { "trigger": "CFCalendarCreateWithIdentifier", "contents": "CFCalendarCreateWithIdentifier(${1:CFAllocatorRef allocator}, ${2:CFStringRef identifier})" },  
    { "trigger": "CFCalendarDecomposeAbsoluteTime", "contents": "CFCalendarDecomposeAbsoluteTime(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime at}, ${3:char* componentDesc})" },  
    { "trigger": "CFCalendarGetComponentDifference", "contents": "CFCalendarGetComponentDifference(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime startingAT}, ${3:CFAbsoluteTime resultAT}, ${4:CFOptionFlags options}, ${5:char* componentDesc})" },  
    { "trigger": "CFCalendarGetFirstWeekday", "contents": "CFCalendarGetFirstWeekday(${1:CFCalendarRef calendar})" },  
    { "trigger": "CFCalendarGetIdentifier", "contents": "CFCalendarGetIdentifier(${1:CFCalendarRef calendar})" },  
    { "trigger": "CFCalendarGetMaximumRangeOfUnit", "contents": "CFCalendarGetMaximumRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit})" },  
    { "trigger": "CFCalendarGetMinimumDaysInFirstWeek", "contents": "CFCalendarGetMinimumDaysInFirstWeek(${1:CFCalendarRef calendar})" },  
    { "trigger": "CFCalendarGetMinimumRangeOfUnit", "contents": "CFCalendarGetMinimumRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit})" },  
    { "trigger": "CFCalendarGetOrdinalityOfUnit", "contents": "CFCalendarGetOrdinalityOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit smallerUnit}, ${3:CFCalendarUnit biggerUnit}, ${4:CFAbsoluteTime at})" },  
    { "trigger": "CFCalendarGetRangeOfUnit", "contents": "CFCalendarGetRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit smallerUnit}, ${3:CFCalendarUnit biggerUnit}, ${4:CFAbsoluteTime at})" },  
    { "trigger": "CFCalendarGetTimeRangeOfUnit", "contents": "CFCalendarGetTimeRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit}, ${3:CFAbsoluteTime at}, ${4:CFAbsoluteTime* startp}, ${5:CFTimeInterval* tip})" },  
    { "trigger": "CFCalendarGetTypeID" },  
    { "trigger": "CFCalendarSetFirstWeekday", "contents": "CFCalendarSetFirstWeekday(${1:CFCalendarRef calendar}, ${2:CFIndex wkdy})" },  
    { "trigger": "CFCalendarSetLocale", "contents": "CFCalendarSetLocale(${1:CFCalendarRef calendar}, ${2:CFLocaleRef locale})" },  
    { "trigger": "CFCalendarSetMinimumDaysInFirstWeek", "contents": "CFCalendarSetMinimumDaysInFirstWeek(${1:CFCalendarRef calendar}, ${2:CFIndex mwd})" },  
    { "trigger": "CFCalendarSetTimeZone", "contents": "CFCalendarSetTimeZone(${1:CFCalendarRef calendar}, ${2:CFTimeZoneRef tz})" },  
    { "trigger": "CFCharacterSetAddCharactersInRange", "contents": "CFCharacterSetAddCharactersInRange(${1:CFMutableCharacterSetRef theSet}, ${2:CFRange theRange})" },  
    { "trigger": "CFCharacterSetAddCharactersInString", "contents": "CFCharacterSetAddCharactersInString(${1:CFMutableCharacterSetRef theSet}, ${2:CFStringRef theString})" },  
    { "trigger": "CFCharacterSetCreateBitmapRepresentation", "contents": "CFCharacterSetCreateBitmapRepresentation(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})" },  
    { "trigger": "CFCharacterSetCreateCopy", "contents": "CFCharacterSetCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})" },  
    { "trigger": "CFCharacterSetCreateInvertedSet", "contents": "CFCharacterSetCreateInvertedSet(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})" },  
    { "trigger": "CFCharacterSetCreateMutable", "contents": "CFCharacterSetCreateMutable(${1:CFAllocatorRef alloc})" },  
    { "trigger": "CFCharacterSetCreateMutableCopy", "contents": "CFCharacterSetCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})" },  
    { "trigger": "CFCharacterSetCreateWithBitmapRepresentation", "contents": "CFCharacterSetCreateWithBitmapRepresentation(${1:CFAllocatorRef alloc}, ${2:CFDataRef theData})" },  
    { "trigger": "CFCharacterSetCreateWithCharactersInRange", "contents": "CFCharacterSetCreateWithCharactersInRange(${1:CFAllocatorRef alloc}, ${2:CFRange theRange})" },  
    { "trigger": "CFCharacterSetCreateWithCharactersInString", "contents": "CFCharacterSetCreateWithCharactersInString(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString})" },  
    { "trigger": "CFCharacterSetGetPredefined", "contents": "CFCharacterSetGetPredefined(${1:CFCharacterSetPredefinedSet theSetIdentifier})" },  
    { "trigger": "CFCharacterSetGetTypeID" },  
    { "trigger": "CFCharacterSetHasMemberInPlane", "contents": "CFCharacterSetHasMemberInPlane(${1:CFCharacterSetRef theSet}, ${2:CFIndex thePlane})" },  
    { "trigger": "CFCharacterSetIntersect", "contents": "CFCharacterSetIntersect(${1:CFMutableCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherSet})" },  
    { "trigger": "CFCharacterSetInvert", "contents": "CFCharacterSetInvert(${1:CFMutableCharacterSetRef theSet})" },  
    { "trigger": "CFCharacterSetIsCharacterMember", "contents": "CFCharacterSetIsCharacterMember(${1:CFCharacterSetRef theSet}, ${2:UniChar theChar})" },  
    { "trigger": "CFCharacterSetIsLongCharacterMember", "contents": "CFCharacterSetIsLongCharacterMember(${1:CFCharacterSetRef theSet}, ${2:UTF32Char theChar})" },  
    { "trigger": "CFCharacterSetIsSupersetOfSet", "contents": "CFCharacterSetIsSupersetOfSet(${1:CFCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherset})" },  
    { "trigger": "CFCharacterSetRemoveCharactersInRange", "contents": "CFCharacterSetRemoveCharactersInRange(${1:CFMutableCharacterSetRef theSet}, ${2:CFRange theRange})" },  
    { "trigger": "CFCharacterSetRemoveCharactersInString", "contents": "CFCharacterSetRemoveCharactersInString(${1:CFMutableCharacterSetRef theSet}, ${2:CFStringRef theString})" },  
    { "trigger": "CFCharacterSetUnion", "contents": "CFCharacterSetUnion(${1:CFMutableCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherSet})" },  
    { "trigger": "CFConvertDoubleHostToSwapped", "contents": "CFConvertDoubleHostToSwapped(${1:double arg})" },  
    { "trigger": "CFConvertDoubleSwappedToHost", "contents": "CFConvertDoubleSwappedToHost(${1:CFSwappedFloat64 arg})" },  
    { "trigger": "CFConvertFloat32HostToSwapped", "contents": "CFConvertFloat32HostToSwapped(${1:Float32 arg})" },  
    { "trigger": "CFConvertFloat32SwappedToHost", "contents": "CFConvertFloat32SwappedToHost(${1:CFSwappedFloat32 arg})" },  
    { "trigger": "CFConvertFloat64HostToSwapped", "contents": "CFConvertFloat64HostToSwapped(${1:Float64 arg})" },  
    { "trigger": "CFConvertFloat64SwappedToHost", "contents": "CFConvertFloat64SwappedToHost(${1:CFSwappedFloat64 arg})" },  
    { "trigger": "CFConvertFloatHostToSwapped", "contents": "CFConvertFloatHostToSwapped(${1:float arg})" },  
    { "trigger": "CFConvertFloatSwappedToHost", "contents": "CFConvertFloatSwappedToHost(${1:CFSwappedFloat32 arg})" },  
    { "trigger": "CFCopyDescription", "contents": "CFCopyDescription(${1:CFTypeRef cf})" },  
    { "trigger": "CFCopyHomeDirectoryURL" },  
    { "trigger": "CFCopyTypeIDDescription", "contents": "CFCopyTypeIDDescription(${1:CFTypeID type_id})" },  
    { "trigger": "CFDataAppendBytes", "contents": "CFDataAppendBytes(${1:CFMutableDataRef theData}, ${2:UInt8* bytes}, ${3:CFIndex length})" },  
    { "trigger": "CFDataCreate", "contents": "CFDataCreate(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex length})" },  
    { "trigger": "CFDataCreateCopy", "contents": "CFDataCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFDataRef theData})" },  
    { "trigger": "CFDataCreateMutable", "contents": "CFDataCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity})" },  
    { "trigger": "CFDataCreateMutableCopy", "contents": "CFDataCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDataRef theData})" },  
    { "trigger": "CFDataCreateWithBytesNoCopy", "contents": "CFDataCreateWithBytesNoCopy(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex length}, ${4:CFAllocatorRef bytesDeallocator})" },  
    { "trigger": "CFDataDeleteBytes", "contents": "CFDataDeleteBytes(${1:CFMutableDataRef theData}, ${2:CFRange range})" },  
    { "trigger": "CFDataFind", "contents": "CFDataFind(${1:CFDataRef theData}, ${2:CFDataRef dataToFind}, ${3:CFRange searchRange}, ${4:CFDataSearchFlags compareOptions})" },  
    { "trigger": "CFDataGetBytePtr", "contents": "CFDataGetBytePtr(${1:CFDataRef theData})" },  
    { "trigger": "CFDataGetBytes", "contents": "CFDataGetBytes(${1:CFDataRef theData}, ${2:CFRange range}, ${3:UInt8* buffer})" },  
    { "trigger": "CFDataGetLength", "contents": "CFDataGetLength(${1:CFDataRef theData})" },  
    { "trigger": "CFDataGetMutableBytePtr", "contents": "CFDataGetMutableBytePtr(${1:CFMutableDataRef theData})" },  
    { "trigger": "CFDataGetTypeID" },  
    { "trigger": "CFDataIncreaseLength", "contents": "CFDataIncreaseLength(${1:CFMutableDataRef theData}, ${2:CFIndex extraLength})" },  
    { "trigger": "CFDataReplaceBytes", "contents": "CFDataReplaceBytes(${1:CFMutableDataRef theData}, ${2:CFRange range}, ${3:UInt8* newBytes}, ${4:CFIndex newLength})" },  
    { "trigger": "CFDataSetLength", "contents": "CFDataSetLength(${1:CFMutableDataRef theData}, ${2:CFIndex length})" },  
    { "trigger": "CFDateCompare", "contents": "CFDateCompare(${1:CFDateRef theDate}, ${2:CFDateRef otherDate}, ${3:void* context})" },  
    { "trigger": "CFDateCreate", "contents": "CFDateCreate(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime at})" },  
    { "trigger": "CFDateFormatterCopyProperty", "contents": "CFDateFormatterCopyProperty(${1:CFDateFormatterRef formatter}, ${2:CFStringRef key})" },  
    { "trigger": "CFDateFormatterCreate", "contents": "CFDateFormatterCreate(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale}, ${3:CFDateFormatterStyle dateStyle}, ${4:CFDateFormatterStyle timeStyle})" },  
    { "trigger": "CFDateFormatterCreateDateFormatFromTemplate", "contents": "CFDateFormatterCreateDateFormatFromTemplate(${1:CFAllocatorRef allocator}, ${2:CFStringRef tmplate}, ${3:CFOptionFlags options}, ${4:CFLocaleRef locale})" },  
    { "trigger": "CFDateFormatterCreateDateFromString", "contents": "CFDateFormatterCreateDateFromString(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFStringRef string}, ${4:CFRange* rangep})" },  
    { "trigger": "CFDateFormatterCreateStringWithAbsoluteTime", "contents": "CFDateFormatterCreateStringWithAbsoluteTime(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFAbsoluteTime at})" },  
    { "trigger": "CFDateFormatterCreateStringWithDate", "contents": "CFDateFormatterCreateStringWithDate(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFDateRef date})" },  
    { "trigger": "CFDateFormatterGetAbsoluteTimeFromString", "contents": "CFDateFormatterGetAbsoluteTimeFromString(${1:CFDateFormatterRef formatter}, ${2:CFStringRef string}, ${3:CFRange* rangep}, ${4:CFAbsoluteTime* atp})" },  
    { "trigger": "CFDateFormatterGetDateStyle", "contents": "CFDateFormatterGetDateStyle(${1:CFDateFormatterRef formatter})" },  
    { "trigger": "CFDateFormatterGetFormat", "contents": "CFDateFormatterGetFormat(${1:CFDateFormatterRef formatter})" },  
    { "trigger": "CFDateFormatterGetLocale", "contents": "CFDateFormatterGetLocale(${1:CFDateFormatterRef formatter})" },  
    { "trigger": "CFDateFormatterGetTimeStyle", "contents": "CFDateFormatterGetTimeStyle(${1:CFDateFormatterRef formatter})" },  
    { "trigger": "CFDateFormatterGetTypeID" },  
    { "trigger": "CFDateFormatterSetFormat", "contents": "CFDateFormatterSetFormat(${1:CFDateFormatterRef formatter}, ${2:CFStringRef formatString})" },  
    { "trigger": "CFDateFormatterSetProperty", "contents": "CFDateFormatterSetProperty(${1:CFDateFormatterRef formatter}, ${2:CFStringRef key}, ${3:CFTypeRef value})" },  
    { "trigger": "CFDateGetAbsoluteTime", "contents": "CFDateGetAbsoluteTime(${1:CFDateRef theDate})" },  
    { "trigger": "CFDateGetTimeIntervalSinceDate", "contents": "CFDateGetTimeIntervalSinceDate(${1:CFDateRef theDate}, ${2:CFDateRef otherDate})" },  
    { "trigger": "CFDateGetTypeID" },  
    { "trigger": "CFDictionaryAddValue", "contents": "CFDictionaryAddValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})" },  
    { "trigger": "CFDictionaryApplyFunction", "contents": "CFDictionaryApplyFunction(${1:CFDictionaryRef theDict}, ${2:CFDictionaryApplierFunction applier}, ${3:void* context})" },  
    { "trigger": "CFDictionaryContainsKey", "contents": "CFDictionaryContainsKey(${1:CFDictionaryRef theDict}, ${2:void* key})" },  
    { "trigger": "CFDictionaryContainsValue", "contents": "CFDictionaryContainsValue(${1:CFDictionaryRef theDict}, ${2:void* value})" },  
    { "trigger": "CFDictionaryCreate", "contents": "CFDictionaryCreate(${1:CFAllocatorRef allocator}, ${2:void** keys}, ${3:void** values}, ${4:CFIndex numValues}, ${5:CFDictionaryKeyCallBacks* keyCallBacks}, ${6:CFDictionaryValueCallBacks* valueCallBacks})" },  
    { "trigger": "CFDictionaryCreateCopy", "contents": "CFDictionaryCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef theDict})" },  
    { "trigger": "CFDictionaryCreateMutable", "contents": "CFDictionaryCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDictionaryKeyCallBacks* keyCallBacks}, ${4:CFDictionaryValueCallBacks* valueCallBacks})" },  
    { "trigger": "CFDictionaryCreateMutableCopy", "contents": "CFDictionaryCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDictionaryRef theDict})" },  
    { "trigger": "CFDictionaryGetCount", "contents": "CFDictionaryGetCount(${1:CFDictionaryRef theDict})" },  
    { "trigger": "CFDictionaryGetCountOfKey", "contents": "CFDictionaryGetCountOfKey(${1:CFDictionaryRef theDict}, ${2:void* key})" },  
    { "trigger": "CFDictionaryGetCountOfValue", "contents": "CFDictionaryGetCountOfValue(${1:CFDictionaryRef theDict}, ${2:void* value})" },  
    { "trigger": "CFDictionaryGetKeysAndValues", "contents": "CFDictionaryGetKeysAndValues(${1:CFDictionaryRef theDict}, ${2:void** keys}, ${3:void** values})" },  
    { "trigger": "CFDictionaryGetTypeID" },  
    { "trigger": "CFDictionaryGetValue", "contents": "CFDictionaryGetValue(${1:CFDictionaryRef theDict}, ${2:void* key})" },  
    { "trigger": "CFDictionaryGetValueIfPresent", "contents": "CFDictionaryGetValueIfPresent(${1:CFDictionaryRef theDict}, ${2:void* key}, ${3:void** value})" },  
    { "trigger": "CFDictionaryRemoveAllValues", "contents": "CFDictionaryRemoveAllValues(${1:CFMutableDictionaryRef theDict})" },  
    { "trigger": "CFDictionaryRemoveValue", "contents": "CFDictionaryRemoveValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key})" },  
    { "trigger": "CFDictionaryReplaceValue", "contents": "CFDictionaryReplaceValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})" },  
    { "trigger": "CFDictionarySetValue", "contents": "CFDictionarySetValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})" },  
    { "trigger": "CFEqual", "contents": "CFEqual(${1:CFTypeRef cf1}, ${2:CFTypeRef cf2})" },  
    { "trigger": "CFErrorCopyDescription", "contents": "CFErrorCopyDescription(${1:CFErrorRef err})" },  
    { "trigger": "CFErrorCopyFailureReason", "contents": "CFErrorCopyFailureReason(${1:CFErrorRef err})" },  
    { "trigger": "CFErrorCopyRecoverySuggestion", "contents": "CFErrorCopyRecoverySuggestion(${1:CFErrorRef err})" },  
    { "trigger": "CFErrorCopyUserInfo", "contents": "CFErrorCopyUserInfo(${1:CFErrorRef err})" },  
    { "trigger": "CFErrorCreate", "contents": "CFErrorCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef domain}, ${3:CFIndex code}, ${4:CFDictionaryRef userInfo})" },  
    { "trigger": "CFErrorCreateWithUserInfoKeysAndValues", "contents": "CFErrorCreateWithUserInfoKeysAndValues(${1:CFAllocatorRef allocator}, ${2:CFStringRef domain}, ${3:CFIndex code}, ${4:void ** userInfoKeys}, ${5:void ** userInfoValues}, ${6:CFIndex numUserInfoValues})" },  
    { "trigger": "CFErrorGetCode", "contents": "CFErrorGetCode(${1:CFErrorRef err})" },  
    { "trigger": "CFErrorGetDomain", "contents": "CFErrorGetDomain(${1:CFErrorRef err})" },  
    { "trigger": "CFErrorGetTypeID" },  
    { "trigger": "CFFileDescriptorCreate", "contents": "CFFileDescriptorCreate(${1:CFAllocatorRef allocator}, ${2:CFFileDescriptorNativeDescriptor fd}, ${3:Boolean closeOnInvalidate}, ${4:CFFileDescriptorCallBack callout}, ${5:CFFileDescriptorContext* context})" },  
    { "trigger": "CFFileDescriptorCreateRunLoopSource", "contents": "CFFileDescriptorCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFFileDescriptorRef f}, ${3:CFIndex order})" },  
    { "trigger": "CFFileDescriptorDisableCallBacks", "contents": "CFFileDescriptorDisableCallBacks(${1:CFFileDescriptorRef f}, ${2:CFOptionFlags callBackTypes})" },  
    { "trigger": "CFFileDescriptorEnableCallBacks", "contents": "CFFileDescriptorEnableCallBacks(${1:CFFileDescriptorRef f}, ${2:CFOptionFlags callBackTypes})" },  
    { "trigger": "CFFileDescriptorGetContext", "contents": "CFFileDescriptorGetContext(${1:CFFileDescriptorRef f}, ${2:CFFileDescriptorContext* context})" },  
    { "trigger": "CFFileDescriptorGetNativeDescriptor", "contents": "CFFileDescriptorGetNativeDescriptor(${1:CFFileDescriptorRef f})" },  
    { "trigger": "CFFileDescriptorGetTypeID" },  
    { "trigger": "CFFileDescriptorInvalidate", "contents": "CFFileDescriptorInvalidate(${1:CFFileDescriptorRef f})" },  
    { "trigger": "CFFileDescriptorIsValid", "contents": "CFFileDescriptorIsValid(${1:CFFileDescriptorRef f})" },  
    { "trigger": "CFFileSecurityCopyAccessControlList", "contents": "CFFileSecurityCopyAccessControlList(${1:CFFileSecurityRef fileSec}, ${2:acl_t* accessControlList})" },  
    { "trigger": "CFFileSecurityCopyGroupUUID", "contents": "CFFileSecurityCopyGroupUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef* groupUUID})" },  
    { "trigger": "CFFileSecurityCopyOwnerUUID", "contents": "CFFileSecurityCopyOwnerUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef* ownerUUID})" },  
    { "trigger": "CFFileSecurityCreate", "contents": "CFFileSecurityCreate(${1:CFAllocatorRef allocator})" },  
    { "trigger": "CFFileSecurityCreateCopy", "contents": "CFFileSecurityCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFFileSecurityRef fileSec})" },  
    { "trigger": "CFFileSecurityGetGroup", "contents": "CFFileSecurityGetGroup(${1:CFFileSecurityRef fileSec}, ${2:gid_t* group})" },  
    { "trigger": "CFFileSecurityGetMode", "contents": "CFFileSecurityGetMode(${1:CFFileSecurityRef fileSec}, ${2:mode_t* mode})" },  
    { "trigger": "CFFileSecurityGetOwner", "contents": "CFFileSecurityGetOwner(${1:CFFileSecurityRef fileSec}, ${2:uid_t* owner})" },  
    { "trigger": "CFFileSecurityGetTypeID" },  
    { "trigger": "CFFileSecuritySetAccessControlList", "contents": "CFFileSecuritySetAccessControlList(${1:CFFileSecurityRef fileSec}, ${2:acl_t accessControlList})" },  
    { "trigger": "CFFileSecuritySetGroup", "contents": "CFFileSecuritySetGroup(${1:CFFileSecurityRef fileSec}, ${2:gid_t group})" },  
    { "trigger": "CFFileSecuritySetGroupUUID", "contents": "CFFileSecuritySetGroupUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef groupUUID})" },  
    { "trigger": "CFFileSecuritySetMode", "contents": "CFFileSecuritySetMode(${1:CFFileSecurityRef fileSec}, ${2:mode_t mode})" },  
    { "trigger": "CFFileSecuritySetOwner", "contents": "CFFileSecuritySetOwner(${1:CFFileSecurityRef fileSec}, ${2:uid_t owner})" },  
    { "trigger": "CFFileSecuritySetOwnerUUID", "contents": "CFFileSecuritySetOwnerUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef ownerUUID})" },  
    { "trigger": "CFGetAllocator", "contents": "CFGetAllocator(${1:CFTypeRef cf})" },  
    { "trigger": "CFGetRetainCount", "contents": "CFGetRetainCount(${1:CFTypeRef cf})" },  
    { "trigger": "CFGetTypeID", "contents": "CFGetTypeID(${1:CFTypeRef cf})" },  
    { "trigger": "CFGregorianDateGetAbsoluteTime", "contents": "CFGregorianDateGetAbsoluteTime(${1:CFGregorianDate gdate}, ${2:CFTimeZoneRef tz})" },  
    { "trigger": "CFGregorianDateIsValid", "contents": "CFGregorianDateIsValid(${1:CFGregorianDate gdate}, ${2:CFOptionFlags unitFlags})" },  
    { "trigger": "CFHash", "contents": "CFHash(${1:CFTypeRef cf})" },  
    { "trigger": "CFLocaleCopyAvailableLocaleIdentifiers" },  
    { "trigger": "CFLocaleCopyCommonISOCurrencyCodes" },  
    { "trigger": "CFLocaleCopyCurrent" },  
    { "trigger": "CFLocaleCopyDisplayNameForPropertyValue", "contents": "CFLocaleCopyDisplayNameForPropertyValue(${1:CFLocaleRef displayLocale}, ${2:CFStringRef key}, ${3:CFStringRef value})" },  
    { "trigger": "CFLocaleCopyISOCountryCodes" },  
    { "trigger": "CFLocaleCopyISOCurrencyCodes" },  
    { "trigger": "CFLocaleCopyISOLanguageCodes" },  
    { "trigger": "CFLocaleCopyPreferredLanguages" },  
    { "trigger": "CFLocaleCreate", "contents": "CFLocaleCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})" },  
    { "trigger": "CFLocaleCreateCanonicalLanguageIdentifierFromString", "contents": "CFLocaleCreateCanonicalLanguageIdentifierFromString(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})" },  
    { "trigger": "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes", "contents": "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(${1:CFAllocatorRef allocator}, ${2:LangCode lcode}, ${3:RegionCode rcode})" },  
    { "trigger": "CFLocaleCreateCanonicalLocaleIdentifierFromString", "contents": "CFLocaleCreateCanonicalLocaleIdentifierFromString(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})" },  
    { "trigger": "CFLocaleCreateComponentsFromLocaleIdentifier", "contents": "CFLocaleCreateComponentsFromLocaleIdentifier(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeID})" },  
    { "trigger": "CFLocaleCreateCopy", "contents": "CFLocaleCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale})" },  
    { "trigger": "CFLocaleCreateLocaleIdentifierFromComponents", "contents": "CFLocaleCreateLocaleIdentifierFromComponents(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef dictionary})" },  
    { "trigger": "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode", "contents": "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(${1:CFAllocatorRef allocator}, ${2:uint32_t lcid})" },  
    { "trigger": "CFLocaleGetIdentifier", "contents": "CFLocaleGetIdentifier(${1:CFLocaleRef locale})" },  
    { "trigger": "CFLocaleGetLanguageCharacterDirection", "contents": "CFLocaleGetLanguageCharacterDirection(${1:CFStringRef isoLangCode})" },  
    { "trigger": "CFLocaleGetLanguageLineDirection", "contents": "CFLocaleGetLanguageLineDirection(${1:CFStringRef isoLangCode})" },  
    { "trigger": "CFLocaleGetSystem" },  
    { "trigger": "CFLocaleGetTypeID" },  
    { "trigger": "CFLocaleGetValue", "contents": "CFLocaleGetValue(${1:CFLocaleRef locale}, ${2:CFStringRef key})" },  
    { "trigger": "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier", "contents": "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(${1:CFStringRef localeIdentifier})" },  
    { "trigger": "CFMachPortCreate", "contents": "CFMachPortCreate(${1:CFAllocatorRef allocator}, ${2:CFMachPortCallBack callout}, ${3:CFMachPortContext* context}, ${4:Boolean* shouldFreeInfo})" },  
    { "trigger": "CFMachPortCreateRunLoopSource", "contents": "CFMachPortCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFMachPortRef port}, ${3:CFIndex order})" },  
    { "trigger": "CFMachPortCreateWithPort", "contents": "CFMachPortCreateWithPort(${1:CFAllocatorRef allocator}, ${2:mach_port_t portNum}, ${3:CFMachPortCallBack callout}, ${4:CFMachPortContext* context}, ${5:Boolean* shouldFreeInfo})" },  
    { "trigger": "CFMachPortGetContext", "contents": "CFMachPortGetContext(${1:CFMachPortRef port}, ${2:CFMachPortContext* context})" },  
    { "trigger": "CFMachPortGetInvalidationCallBack", "contents": "CFMachPortGetInvalidationCallBack(${1:CFMachPortRef port})" },  
    { "trigger": "CFMachPortGetPort", "contents": "CFMachPortGetPort(${1:CFMachPortRef port})" },  
    { "trigger": "CFMachPortGetTypeID" },  
    { "trigger": "CFMachPortInvalidate", "contents": "CFMachPortInvalidate(${1:CFMachPortRef port})" },  
    { "trigger": "CFMachPortIsValid", "contents": "CFMachPortIsValid(${1:CFMachPortRef port})" },  
    { "trigger": "CFMachPortSetInvalidationCallBack", "contents": "CFMachPortSetInvalidationCallBack(${1:CFMachPortRef port}, ${2:CFMachPortInvalidationCallBack callout})" },  
    { "trigger": "CFMakeCollectable", "contents": "CFMakeCollectable(${1:CFTypeRef cf})" },  
    { "trigger": "CFMessagePortCreateLocal", "contents": "CFMessagePortCreateLocal(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:CFMessagePortCallBack callout}, ${4:CFMessagePortContext* context}, ${5:Boolean* shouldFreeInfo})" },  
    { "trigger": "CFMessagePortCreateRemote", "contents": "CFMessagePortCreateRemote(${1:CFAllocatorRef allocator}, ${2:CFStringRef name})" },  
    { "trigger": "CFMessagePortCreateRunLoopSource", "contents": "CFMessagePortCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFMessagePortRef local}, ${3:CFIndex order})" },  
    { "trigger": "CFMessagePortGetContext", "contents": "CFMessagePortGetContext(${1:CFMessagePortRef ms}, ${2:CFMessagePortContext* context})" },  
    { "trigger": "CFMessagePortGetInvalidationCallBack", "contents": "CFMessagePortGetInvalidationCallBack(${1:CFMessagePortRef ms})" },  
    { "trigger": "CFMessagePortGetName", "contents": "CFMessagePortGetName(${1:CFMessagePortRef ms})" },  
    { "trigger": "CFMessagePortGetTypeID" },  
    { "trigger": "CFMessagePortInvalidate", "contents": "CFMessagePortInvalidate(${1:CFMessagePortRef ms})" },  
    { "trigger": "CFMessagePortIsRemote", "contents": "CFMessagePortIsRemote(${1:CFMessagePortRef ms})" },  
    { "trigger": "CFMessagePortIsValid", "contents": "CFMessagePortIsValid(${1:CFMessagePortRef ms})" },  
    { "trigger": "CFMessagePortSendRequest", "contents": "CFMessagePortSendRequest(${1:CFMessagePortRef remote}, ${2:SInt32 msgid}, ${3:CFDataRef data}, ${4:CFTimeInterval sendTimeout}, ${5:CFTimeInterval rcvTimeout}, ${6:CFStringRef replyMode}, ${7:CFDataRef* returnData})" },  
    { "trigger": "CFMessagePortSetDispatchQueue", "contents": "CFMessagePortSetDispatchQueue(${1:CFMessagePortRef ms}, ${2:dispatch_queue_t queue})" },  
    { "trigger": "CFMessagePortSetInvalidationCallBack", "contents": "CFMessagePortSetInvalidationCallBack(${1:CFMessagePortRef ms}, ${2:CFMessagePortInvalidationCallBack callout})" },  
    { "trigger": "CFMessagePortSetName", "contents": "CFMessagePortSetName(${1:CFMessagePortRef ms}, ${2:CFStringRef newName})" },  
    { "trigger": "CFNotificationCenterAddObserver", "contents": "CFNotificationCenterAddObserver(${1:CFNotificationCenterRef center}, ${2:void* observer}, ${3:CFNotificationCallback callBack}, ${4:CFStringRef name}, ${5:void* object}, ${6:CFNotificationSuspensionBehavior suspensionBehavior})" },  
    { "trigger": "CFNotificationCenterGetDarwinNotifyCenter" },  
    { "trigger": "CFNotificationCenterGetLocalCenter" },  
    { "trigger": "CFNotificationCenterGetTypeID" },  
    { "trigger": "CFNotificationCenterPostNotification", "contents": "CFNotificationCenterPostNotification(${1:CFNotificationCenterRef center}, ${2:CFStringRef name}, ${3:void* object}, ${4:CFDictionaryRef userInfo}, ${5:Boolean deliverImmediately})" },  
    { "trigger": "CFNotificationCenterPostNotificationWithOptions", "contents": "CFNotificationCenterPostNotificationWithOptions(${1:CFNotificationCenterRef center}, ${2:CFStringRef name}, ${3:void* object}, ${4:CFDictionaryRef userInfo}, ${5:CFOptionFlags options})" },  
    { "trigger": "CFNotificationCenterRemoveEveryObserver", "contents": "CFNotificationCenterRemoveEveryObserver(${1:CFNotificationCenterRef center}, ${2:void* observer})" },  
    { "trigger": "CFNotificationCenterRemoveObserver", "contents": "CFNotificationCenterRemoveObserver(${1:CFNotificationCenterRef center}, ${2:void* observer}, ${3:CFStringRef name}, ${4:void* object})" },  
    { "trigger": "CFNotificationSuspensionBehaviorCoalesce (2)" },  
    { "trigger": "CFNotificationSuspensionBehaviorDeliverImmediately (4)" },  
    { "trigger": "CFNotificationSuspensionBehaviorDrop (1)" },  
    { "trigger": "CFNotificationSuspensionBehaviorHold (3)" },  
    { "trigger": "CFNullGetTypeID" },  
    { "trigger": "CFNumberCompare", "contents": "CFNumberCompare(${1:CFNumberRef number}, ${2:CFNumberRef otherNumber}, ${3:void* context})" },  
    { "trigger": "CFNumberCreate", "contents": "CFNumberCreate(${1:CFAllocatorRef allocator}, ${2:CFNumberType theType}, ${3:void* valuePtr})" },  
    { "trigger": "CFNumberFormatterCopyProperty", "contents": "CFNumberFormatterCopyProperty(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef key})" },  
    { "trigger": "CFNumberFormatterCreate", "contents": "CFNumberFormatterCreate(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale}, ${3:CFNumberFormatterStyle style})" },  
    { "trigger": "CFNumberFormatterCreateNumberFromString", "contents": "CFNumberFormatterCreateNumberFromString(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFStringRef string}, ${4:CFRange* rangep}, ${5:CFOptionFlags options})" },  
    { "trigger": "CFNumberFormatterCreateStringWithNumber", "contents": "CFNumberFormatterCreateStringWithNumber(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFNumberRef number})" },  
    { "trigger": "CFNumberFormatterCreateStringWithValue", "contents": "CFNumberFormatterCreateStringWithValue(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFNumberType numberType}, ${4:void* valuePtr})" },  
    { "trigger": "CFNumberFormatterGetDecimalInfoForCurrencyCode", "contents": "CFNumberFormatterGetDecimalInfoForCurrencyCode(${1:CFStringRef currencyCode}, ${2:int32_t* defaultFractionDigits}, ${3:double* roundingIncrement})" },  
    { "trigger": "CFNumberFormatterGetFormat", "contents": "CFNumberFormatterGetFormat(${1:CFNumberFormatterRef formatter})" },  
    { "trigger": "CFNumberFormatterGetLocale", "contents": "CFNumberFormatterGetLocale(${1:CFNumberFormatterRef formatter})" },  
    { "trigger": "CFNumberFormatterGetStyle", "contents": "CFNumberFormatterGetStyle(${1:CFNumberFormatterRef formatter})" },  
    { "trigger": "CFNumberFormatterGetTypeID" },  
    { "trigger": "CFNumberFormatterGetValueFromString", "contents": "CFNumberFormatterGetValueFromString(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef string}, ${3:CFRange* rangep}, ${4:CFNumberType numberType}, ${5:void* valuePtr})" },  
    { "trigger": "CFNumberFormatterSetFormat", "contents": "CFNumberFormatterSetFormat(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef formatString})" },  
    { "trigger": "CFNumberFormatterSetProperty", "contents": "CFNumberFormatterSetProperty(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef key}, ${3:CFTypeRef value})" },  
    { "trigger": "CFNumberGetByteSize", "contents": "CFNumberGetByteSize(${1:CFNumberRef number})" },  
    { "trigger": "CFNumberGetType", "contents": "CFNumberGetType(${1:CFNumberRef number})" },  
    { "trigger": "CFNumberGetTypeID" },  
    { "trigger": "CFNumberGetValue", "contents": "CFNumberGetValue(${1:CFNumberRef number}, ${2:CFNumberType theType}, ${3:void* valuePtr})" },  
    { "trigger": "CFNumberIsFloatType", "contents": "CFNumberIsFloatType(${1:CFNumberRef number})" },  
    { "trigger": "CFPlugInAddInstanceForFactory", "contents": "CFPlugInAddInstanceForFactory(${1:CFUUIDRef factoryID})" },  
    { "trigger": "CFPlugInCreate", "contents": "CFPlugInCreate(${1:CFAllocatorRef allocator}, ${2:CFURLRef plugInURL})" },  
    { "trigger": "CFPlugInFindFactoriesForPlugInType", "contents": "CFPlugInFindFactoriesForPlugInType(${1:CFUUIDRef typeUUID})" },  
    { "trigger": "CFPlugInFindFactoriesForPlugInTypeInPlugIn", "contents": "CFPlugInFindFactoriesForPlugInTypeInPlugIn(${1:CFUUIDRef typeUUID}, ${2:CFPlugInRef plugIn})" },  
    { "trigger": "CFPlugInGetBundle", "contents": "CFPlugInGetBundle(${1:CFPlugInRef plugIn})" },  
    { "trigger": "CFPlugInGetTypeID" },  
    { "trigger": "CFPlugInInstanceCreate", "contents": "CFPlugInInstanceCreate(${1:CFAllocatorRef allocator}, ${2:CFUUIDRef factoryUUID}, ${3:CFUUIDRef typeUUID})" },  
    { "trigger": "CFPlugInInstanceCreateWithInstanceDataSize", "contents": "CFPlugInInstanceCreateWithInstanceDataSize(${1:CFAllocatorRef allocator}, ${2:CFIndex instanceDataSize}, ${3:CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction}, ${4:CFStringRef factoryName}, ${5:CFPlugInInstanceGetInterfaceFunction getInterfaceFunction})" },  
    { "trigger": "CFPlugInInstanceGetFactoryName", "contents": "CFPlugInInstanceGetFactoryName(${1:CFPlugInInstanceRef instance})" },  
    { "trigger": "CFPlugInInstanceGetInstanceData", "contents": "CFPlugInInstanceGetInstanceData(${1:CFPlugInInstanceRef instance})" },  
    { "trigger": "CFPlugInInstanceGetInterfaceFunctionTable", "contents": "CFPlugInInstanceGetInterfaceFunctionTable(${1:CFPlugInInstanceRef instance}, ${2:CFStringRef interfaceName}, ${3:void** ftbl})" },  
    { "trigger": "CFPlugInInstanceGetTypeID" },  
    { "trigger": "CFPlugInIsLoadOnDemand", "contents": "CFPlugInIsLoadOnDemand(${1:CFPlugInRef plugIn})" },  
    { "trigger": "CFPlugInRegisterFactoryFunction", "contents": "CFPlugInRegisterFactoryFunction(${1:CFUUIDRef factoryUUID}, ${2:CFPlugInFactoryFunction func})" },  
    { "trigger": "CFPlugInRegisterFactoryFunctionByName", "contents": "CFPlugInRegisterFactoryFunctionByName(${1:CFUUIDRef factoryUUID}, ${2:CFPlugInRef plugIn}, ${3:CFStringRef functionName})" },  
    { "trigger": "CFPlugInRegisterPlugInType", "contents": "CFPlugInRegisterPlugInType(${1:CFUUIDRef factoryUUID}, ${2:CFUUIDRef typeUUID})" },  
    { "trigger": "CFPlugInRemoveInstanceForFactory", "contents": "CFPlugInRemoveInstanceForFactory(${1:CFUUIDRef factoryID})" },  
    { "trigger": "CFPlugInSetLoadOnDemand", "contents": "CFPlugInSetLoadOnDemand(${1:CFPlugInRef plugIn}, ${2:Boolean flag})" },  
    { "trigger": "CFPlugInUnregisterFactory", "contents": "CFPlugInUnregisterFactory(${1:CFUUIDRef factoryUUID})" },  
    { "trigger": "CFPlugInUnregisterPlugInType", "contents": "CFPlugInUnregisterPlugInType(${1:CFUUIDRef factoryUUID}, ${2:CFUUIDRef typeUUID})" },  
    { "trigger": "CFPreferencesAddSuitePreferencesToApp", "contents": "CFPreferencesAddSuitePreferencesToApp(${1:CFStringRef applicationID}, ${2:CFStringRef suiteID})" },  
    { "trigger": "CFPreferencesAppSynchronize", "contents": "CFPreferencesAppSynchronize(${1:CFStringRef applicationID})" },  
    { "trigger": "CFPreferencesAppValueIsForced", "contents": "CFPreferencesAppValueIsForced(${1:CFStringRef key}, ${2:CFStringRef applicationID})" },  
    { "trigger": "CFPreferencesCopyAppValue", "contents": "CFPreferencesCopyAppValue(${1:CFStringRef key}, ${2:CFStringRef applicationID})" },  
    { "trigger": "CFPreferencesCopyApplicationList", "contents": "CFPreferencesCopyApplicationList(${1:CFStringRef userName}, ${2:CFStringRef hostName})" },  
    { "trigger": "CFPreferencesCopyKeyList", "contents": "CFPreferencesCopyKeyList(${1:CFStringRef applicationID}, ${2:CFStringRef userName}, ${3:CFStringRef hostName})" },  
    { "trigger": "CFPreferencesCopyMultiple", "contents": "CFPreferencesCopyMultiple(${1:CFArrayRef keysToFetch}, ${2:CFStringRef applicationID}, ${3:CFStringRef userName}, ${4:CFStringRef hostName})" },  
    { "trigger": "CFPreferencesCopyValue", "contents": "CFPreferencesCopyValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:CFStringRef userName}, ${4:CFStringRef hostName})" },  
    { "trigger": "CFPreferencesGetAppBooleanValue", "contents": "CFPreferencesGetAppBooleanValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:Boolean* keyExistsAndHasValidFormat})" },  
    { "trigger": "CFPreferencesGetAppIntegerValue", "contents": "CFPreferencesGetAppIntegerValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:Boolean* keyExistsAndHasValidFormat})" },  
    { "trigger": "CFPreferencesRemoveSuitePreferencesFromApp", "contents": "CFPreferencesRemoveSuitePreferencesFromApp(${1:CFStringRef applicationID}, ${2:CFStringRef suiteID})" },  
    { "trigger": "CFPreferencesSetAppValue", "contents": "CFPreferencesSetAppValue(${1:CFStringRef key}, ${2:CFPropertyListRef value}, ${3:CFStringRef applicationID})" },  
    { "trigger": "CFPreferencesSetMultiple", "contents": "CFPreferencesSetMultiple(${1:CFDictionaryRef keysToSet}, ${2:CFArrayRef keysToRemove}, ${3:CFStringRef applicationID}, ${4:CFStringRef userName}, ${5:CFStringRef hostName})" },  
    { "trigger": "CFPreferencesSetValue", "contents": "CFPreferencesSetValue(${1:CFStringRef key}, ${2:CFPropertyListRef value}, ${3:CFStringRef applicationID}, ${4:CFStringRef userName}, ${5:CFStringRef hostName})" },  
    { "trigger": "CFPreferencesSynchronize", "contents": "CFPreferencesSynchronize(${1:CFStringRef applicationID}, ${2:CFStringRef userName}, ${3:CFStringRef hostName})" },  
    { "trigger": "CFPropertyListCreateData", "contents": "CFPropertyListCreateData(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList}, ${3:CFPropertyListFormat format}, ${4:CFOptionFlags options}, ${5:CFErrorRef* error})" },  
    { "trigger": "CFPropertyListCreateDeepCopy", "contents": "CFPropertyListCreateDeepCopy(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList}, ${3:CFOptionFlags mutabilityOption})" },  
    { "trigger": "CFPropertyListCreateFromStream", "contents": "CFPropertyListCreateFromStream(${1:CFAllocatorRef allocator}, ${2:CFReadStreamRef stream}, ${3:CFIndex streamLength}, ${4:CFOptionFlags mutabilityOption}, ${5:CFPropertyListFormat* format}, ${6:CFStringRef* errorString})" },  
    { "trigger": "CFPropertyListCreateFromXMLData", "contents": "CFPropertyListCreateFromXMLData(${1:CFAllocatorRef allocator}, ${2:CFDataRef xmlData}, ${3:CFOptionFlags mutabilityOption}, ${4:CFStringRef* errorString})" },  
    { "trigger": "CFPropertyListCreateWithData", "contents": "CFPropertyListCreateWithData(${1:CFAllocatorRef allocator}, ${2:CFDataRef data}, ${3:CFOptionFlags options}, ${4:CFPropertyListFormat* format}, ${5:CFErrorRef* error})" },  
    { "trigger": "CFPropertyListCreateWithStream", "contents": "CFPropertyListCreateWithStream(${1:CFAllocatorRef allocator}, ${2:CFReadStreamRef stream}, ${3:CFIndex streamLength}, ${4:CFOptionFlags options}, ${5:CFPropertyListFormat* format}, ${6:CFErrorRef* error})" },  
    { "trigger": "CFPropertyListCreateXMLData", "contents": "CFPropertyListCreateXMLData(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList})" },  
    { "trigger": "CFPropertyListIsValid", "contents": "CFPropertyListIsValid(${1:CFPropertyListRef plist}, ${2:CFPropertyListFormat format})" },  
    { "trigger": "CFPropertyListWrite", "contents": "CFPropertyListWrite(${1:CFPropertyListRef propertyList}, ${2:CFWriteStreamRef stream}, ${3:CFPropertyListFormat format}, ${4:CFOptionFlags options}, ${5:CFErrorRef* error})" },  
    { "trigger": "CFPropertyListWriteToStream", "contents": "CFPropertyListWriteToStream(${1:CFPropertyListRef propertyList}, ${2:CFWriteStreamRef stream}, ${3:CFPropertyListFormat format}, ${4:CFStringRef* errorString})" },  
    { "trigger": "CFRangeMake", "contents": "CFRangeMake(${1:CFIndex loc}, ${2:CFIndex len})" },  
    { "trigger": "CFReadStreamClose", "contents": "CFReadStreamClose(${1:CFReadStreamRef stream})" },  
    { "trigger": "CFReadStreamCopyError", "contents": "CFReadStreamCopyError(${1:CFReadStreamRef stream})" },  
    { "trigger": "CFReadStreamCopyProperty", "contents": "CFReadStreamCopyProperty(${1:CFReadStreamRef stream}, ${2:CFStringRef propertyName})" },  
    { "trigger": "CFReadStreamCreateWithBytesNoCopy", "contents": "CFReadStreamCreateWithBytesNoCopy(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex length}, ${4:CFAllocatorRef bytesDeallocator})" },  
    { "trigger": "CFReadStreamCreateWithFile", "contents": "CFReadStreamCreateWithFile(${1:CFAllocatorRef alloc}, ${2:CFURLRef fileURL})" },  
    { "trigger": "CFReadStreamGetBuffer", "contents": "CFReadStreamGetBuffer(${1:CFReadStreamRef stream}, ${2:CFIndex maxBytesToRead}, ${3:CFIndex* numBytesRead})" },  
    { "trigger": "CFReadStreamGetError", "contents": "CFReadStreamGetError(${1:CFReadStreamRef stream})" },  
    { "trigger": "CFReadStreamGetStatus", "contents": "CFReadStreamGetStatus(${1:CFReadStreamRef stream})" },  
    { "trigger": "CFReadStreamGetTypeID" },  
    { "trigger": "CFReadStreamHasBytesAvailable", "contents": "CFReadStreamHasBytesAvailable(${1:CFReadStreamRef stream})" },  
    { "trigger": "CFReadStreamOpen", "contents": "CFReadStreamOpen(${1:CFReadStreamRef stream})" },  
    { "trigger": "CFReadStreamRead", "contents": "CFReadStreamRead(${1:CFReadStreamRef stream}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})" },  
    { "trigger": "CFReadStreamScheduleWithRunLoop", "contents": "CFReadStreamScheduleWithRunLoop(${1:CFReadStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})" },  
    { "trigger": "CFReadStreamSetClient", "contents": "CFReadStreamSetClient(${1:CFReadStreamRef stream}, ${2:CFOptionFlags streamEvents}, ${3:CFReadStreamClientCallBack clientCB}, ${4:CFStreamClientContext* clientContext})" },  
    { "trigger": "CFReadStreamSetProperty", "contents": "CFReadStreamSetProperty(${1:CFReadStreamRef stream}, ${2:CFStringRef propertyName}, ${3:CFTypeRef propertyValue})" },  
    { "trigger": "CFReadStreamUnscheduleFromRunLoop", "contents": "CFReadStreamUnscheduleFromRunLoop(${1:CFReadStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})" },  
    { "trigger": "CFRelease", "contents": "CFRelease(${1:CFTypeRef cf})" },  
    { "trigger": "CFRetain", "contents": "CFRetain(${1:CFTypeRef cf})" },  
    { "trigger": "CFRunLoopAddCommonMode", "contents": "CFRunLoopAddCommonMode(${1:CFRunLoopRef rl}, ${2:CFStringRef mode})" },  
    { "trigger": "CFRunLoopAddObserver", "contents": "CFRunLoopAddObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopAddSource", "contents": "CFRunLoopAddSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopAddTimer", "contents": "CFRunLoopAddTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopContainsObserver", "contents": "CFRunLoopContainsObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopContainsSource", "contents": "CFRunLoopContainsSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopContainsTimer", "contents": "CFRunLoopContainsTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopCopyAllModes", "contents": "CFRunLoopCopyAllModes(${1:CFRunLoopRef rl})" },  
    { "trigger": "CFRunLoopCopyCurrentMode", "contents": "CFRunLoopCopyCurrentMode(${1:CFRunLoopRef rl})" },  
    { "trigger": "CFRunLoopGetCurrent" },  
    { "trigger": "CFRunLoopGetMain" },  
    { "trigger": "CFRunLoopGetNextTimerFireDate", "contents": "CFRunLoopGetNextTimerFireDate(${1:CFRunLoopRef rl}, ${2:CFStringRef mode})" },  
    { "trigger": "CFRunLoopGetTypeID" },  
    { "trigger": "CFRunLoopIsWaiting", "contents": "CFRunLoopIsWaiting(${1:CFRunLoopRef rl})" },  
    { "trigger": "CFRunLoopObserverCreate", "contents": "CFRunLoopObserverCreate(${1:CFAllocatorRef allocator}, ${2:CFOptionFlags activities}, ${3:Boolean repeats}, ${4:CFIndex order}, ${5:CFRunLoopObserverCallBack callout}, ${6:CFRunLoopObserverContext* context})" },  
    { "trigger": "CFRunLoopObserverCreateWithHandler", "contents": "CFRunLoopObserverCreateWithHandler(${1:CFAllocatorRef allocator}, ${2:CFOptionFlags activities}, ${3:Boolean repeats}, ${4:CFIndex order}, ${5:void (^)(CFRunLoopObserverRef, CFRunLoopActivity) block})" },  
    { "trigger": "CFRunLoopObserverDoesRepeat", "contents": "CFRunLoopObserverDoesRepeat(${1:CFRunLoopObserverRef observer})" },  
    { "trigger": "CFRunLoopObserverGetActivities", "contents": "CFRunLoopObserverGetActivities(${1:CFRunLoopObserverRef observer})" },  
    { "trigger": "CFRunLoopObserverGetContext", "contents": "CFRunLoopObserverGetContext(${1:CFRunLoopObserverRef observer}, ${2:CFRunLoopObserverContext* context})" },  
    { "trigger": "CFRunLoopObserverGetOrder", "contents": "CFRunLoopObserverGetOrder(${1:CFRunLoopObserverRef observer})" },  
    { "trigger": "CFRunLoopObserverGetTypeID" },  
    { "trigger": "CFRunLoopObserverInvalidate", "contents": "CFRunLoopObserverInvalidate(${1:CFRunLoopObserverRef observer})" },  
    { "trigger": "CFRunLoopObserverIsValid", "contents": "CFRunLoopObserverIsValid(${1:CFRunLoopObserverRef observer})" },  
    { "trigger": "CFRunLoopPerformBlock", "contents": "CFRunLoopPerformBlock(${1:CFRunLoopRef rl}, ${2:CFTypeRef mode}, ${3:void (^)(void) block})" },  
    { "trigger": "CFRunLoopRemoveObserver", "contents": "CFRunLoopRemoveObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopRemoveSource", "contents": "CFRunLoopRemoveSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopRemoveTimer", "contents": "CFRunLoopRemoveTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})" },  
    { "trigger": "CFRunLoopRun" },  
    { "trigger": "CFRunLoopRunInMode", "contents": "CFRunLoopRunInMode(${1:CFStringRef mode}, ${2:CFTimeInterval seconds}, ${3:Boolean returnAfterSourceHandled})" },  
    { "trigger": "CFRunLoopSourceCreate", "contents": "CFRunLoopSourceCreate(${1:CFAllocatorRef allocator}, ${2:CFIndex order}, ${3:CFRunLoopSourceContext* context})" },  
    { "trigger": "CFRunLoopSourceGetContext", "contents": "CFRunLoopSourceGetContext(${1:CFRunLoopSourceRef source}, ${2:CFRunLoopSourceContext* context})" },  
    { "trigger": "CFRunLoopSourceGetOrder", "contents": "CFRunLoopSourceGetOrder(${1:CFRunLoopSourceRef source})" },  
    { "trigger": "CFRunLoopSourceGetTypeID" },  
    { "trigger": "CFRunLoopSourceInvalidate", "contents": "CFRunLoopSourceInvalidate(${1:CFRunLoopSourceRef source})" },  
    { "trigger": "CFRunLoopSourceIsValid", "contents": "CFRunLoopSourceIsValid(${1:CFRunLoopSourceRef source})" },  
    { "trigger": "CFRunLoopSourceSignal", "contents": "CFRunLoopSourceSignal(${1:CFRunLoopSourceRef source})" },  
    { "trigger": "CFRunLoopStop", "contents": "CFRunLoopStop(${1:CFRunLoopRef rl})" },  
    { "trigger": "CFRunLoopTimerCreate", "contents": "CFRunLoopTimerCreate(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime fireDate}, ${3:CFTimeInterval interval}, ${4:CFOptionFlags flags}, ${5:CFIndex order}, ${6:CFRunLoopTimerCallBack callout}, ${7:CFRunLoopTimerContext* context})" },  
    { "trigger": "CFRunLoopTimerCreateWithHandler", "contents": "CFRunLoopTimerCreateWithHandler(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime fireDate}, ${3:CFTimeInterval interval}, ${4:CFOptionFlags flags}, ${5:CFIndex order}, ${6:void (^)(CFRunLoopTimerRef) block})" },  
    { "trigger": "CFRunLoopTimerDoesRepeat", "contents": "CFRunLoopTimerDoesRepeat(${1:CFRunLoopTimerRef timer})" },  
    { "trigger": "CFRunLoopTimerGetContext", "contents": "CFRunLoopTimerGetContext(${1:CFRunLoopTimerRef timer}, ${2:CFRunLoopTimerContext* context})" },  
    { "trigger": "CFRunLoopTimerGetInterval", "contents": "CFRunLoopTimerGetInterval(${1:CFRunLoopTimerRef timer})" },  
    { "trigger": "CFRunLoopTimerGetNextFireDate", "contents": "CFRunLoopTimerGetNextFireDate(${1:CFRunLoopTimerRef timer})" },  
    { "trigger": "CFRunLoopTimerGetOrder", "contents": "CFRunLoopTimerGetOrder(${1:CFRunLoopTimerRef timer})" },  
    { "trigger": "CFRunLoopTimerGetTypeID" },  
    { "trigger": "CFRunLoopTimerInvalidate", "contents": "CFRunLoopTimerInvalidate(${1:CFRunLoopTimerRef timer})" },  
    { "trigger": "CFRunLoopTimerIsValid", "contents": "CFRunLoopTimerIsValid(${1:CFRunLoopTimerRef timer})" },  
    { "trigger": "CFRunLoopTimerSetNextFireDate", "contents": "CFRunLoopTimerSetNextFireDate(${1:CFRunLoopTimerRef timer}, ${2:CFAbsoluteTime fireDate})" },  
    { "trigger": "CFRunLoopWakeUp", "contents": "CFRunLoopWakeUp(${1:CFRunLoopRef rl})" },  
    { "trigger": "CFSetAddValue", "contents": "CFSetAddValue(${1:CFMutableSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFSetApplyFunction", "contents": "CFSetApplyFunction(${1:CFSetRef theSet}, ${2:CFSetApplierFunction applier}, ${3:void* context})" },  
    { "trigger": "CFSetContainsValue", "contents": "CFSetContainsValue(${1:CFSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFSetCreate", "contents": "CFSetCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFSetCallBacks* callBacks})" },  
    { "trigger": "CFSetCreateCopy", "contents": "CFSetCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFSetRef theSet})" },  
    { "trigger": "CFSetCreateMutable", "contents": "CFSetCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFSetCallBacks* callBacks})" },  
    { "trigger": "CFSetCreateMutableCopy", "contents": "CFSetCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFSetRef theSet})" },  
    { "trigger": "CFSetGetCount", "contents": "CFSetGetCount(${1:CFSetRef theSet})" },  
    { "trigger": "CFSetGetCountOfValue", "contents": "CFSetGetCountOfValue(${1:CFSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFSetGetTypeID" },  
    { "trigger": "CFSetGetValue", "contents": "CFSetGetValue(${1:CFSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFSetGetValueIfPresent", "contents": "CFSetGetValueIfPresent(${1:CFSetRef theSet}, ${2:void* candidate}, ${3:void** value})" },  
    { "trigger": "CFSetGetValues", "contents": "CFSetGetValues(${1:CFSetRef theSet}, ${2:void** values})" },  
    { "trigger": "CFSetRemoveAllValues", "contents": "CFSetRemoveAllValues(${1:CFMutableSetRef theSet})" },  
    { "trigger": "CFSetRemoveValue", "contents": "CFSetRemoveValue(${1:CFMutableSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFSetReplaceValue", "contents": "CFSetReplaceValue(${1:CFMutableSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFSetSetValue", "contents": "CFSetSetValue(${1:CFMutableSetRef theSet}, ${2:void* value})" },  
    { "trigger": "CFShow", "contents": "CFShow(${1:CFTypeRef obj})" },  
    { "trigger": "CFShowStr", "contents": "CFShowStr(${1:CFStringRef str})" },  
    { "trigger": "CFSocketConnectToAddress", "contents": "CFSocketConnectToAddress(${1:CFSocketRef s}, ${2:CFDataRef address}, ${3:CFTimeInterval timeout})" },  
    { "trigger": "CFSocketCopyAddress", "contents": "CFSocketCopyAddress(${1:CFSocketRef s})" },  
    { "trigger": "CFSocketCopyPeerAddress", "contents": "CFSocketCopyPeerAddress(${1:CFSocketRef s})" },  
    { "trigger": "CFSocketCopyRegisteredSocketSignature", "contents": "CFSocketCopyRegisteredSocketSignature(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFSocketSignature* signature}, ${5:CFDataRef* nameServerAddress})" },  
    { "trigger": "CFSocketCopyRegisteredValue", "contents": "CFSocketCopyRegisteredValue(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFPropertyListRef* value}, ${5:CFDataRef* nameServerAddress})" },  
    { "trigger": "CFSocketCreate", "contents": "CFSocketCreate(${1:CFAllocatorRef allocator}, ${2:SInt32 protocolFamily}, ${3:SInt32 socketType}, ${4:SInt32 protocol}, ${5:CFOptionFlags callBackTypes}, ${6:CFSocketCallBack callout}, ${7:CFSocketContext* context})" },  
    { "trigger": "CFSocketCreateConnectedToSocketSignature", "contents": "CFSocketCreateConnectedToSocketSignature(${1:CFAllocatorRef allocator}, ${2:CFSocketSignature* signature}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context}, ${6:CFTimeInterval timeout})" },  
    { "trigger": "CFSocketCreateRunLoopSource", "contents": "CFSocketCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFSocketRef s}, ${3:CFIndex order})" },  
    { "trigger": "CFSocketCreateWithNative", "contents": "CFSocketCreateWithNative(${1:CFAllocatorRef allocator}, ${2:CFSocketNativeHandle sock}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context})" },  
    { "trigger": "CFSocketCreateWithSocketSignature", "contents": "CFSocketCreateWithSocketSignature(${1:CFAllocatorRef allocator}, ${2:CFSocketSignature* signature}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context})" },  
    { "trigger": "CFSocketDisableCallBacks", "contents": "CFSocketDisableCallBacks(${1:CFSocketRef s}, ${2:CFOptionFlags callBackTypes})" },  
    { "trigger": "CFSocketEnableCallBacks", "contents": "CFSocketEnableCallBacks(${1:CFSocketRef s}, ${2:CFOptionFlags callBackTypes})" },  
    { "trigger": "CFSocketGetContext", "contents": "CFSocketGetContext(${1:CFSocketRef s}, ${2:CFSocketContext* context})" },  
    { "trigger": "CFSocketGetDefaultNameRegistryPortNumber" },  
    { "trigger": "CFSocketGetNative", "contents": "CFSocketGetNative(${1:CFSocketRef s})" },  
    { "trigger": "CFSocketGetSocketFlags", "contents": "CFSocketGetSocketFlags(${1:CFSocketRef s})" },  
    { "trigger": "CFSocketGetTypeID" },  
    { "trigger": "CFSocketInvalidate", "contents": "CFSocketInvalidate(${1:CFSocketRef s})" },  
    { "trigger": "CFSocketIsValid", "contents": "CFSocketIsValid(${1:CFSocketRef s})" },  
    { "trigger": "CFSocketRegisterSocketSignature", "contents": "CFSocketRegisterSocketSignature(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFSocketSignature* signature})" },  
    { "trigger": "CFSocketRegisterValue", "contents": "CFSocketRegisterValue(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFPropertyListRef value})" },  
    { "trigger": "CFSocketSendData", "contents": "CFSocketSendData(${1:CFSocketRef s}, ${2:CFDataRef address}, ${3:CFDataRef data}, ${4:CFTimeInterval timeout})" },  
    { "trigger": "CFSocketSetAddress", "contents": "CFSocketSetAddress(${1:CFSocketRef s}, ${2:CFDataRef address})" },  
    { "trigger": "CFSocketSetDefaultNameRegistryPortNumber", "contents": "CFSocketSetDefaultNameRegistryPortNumber(${1:UInt16 port})" },  
    { "trigger": "CFSocketSetSocketFlags", "contents": "CFSocketSetSocketFlags(${1:CFSocketRef s}, ${2:CFOptionFlags flags})" },  
    { "trigger": "CFSocketUnregister", "contents": "CFSocketUnregister(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name})" },  
    { "trigger": "CFStreamCreateBoundPair", "contents": "CFStreamCreateBoundPair(${1:CFAllocatorRef alloc}, ${2:CFReadStreamRef* readStream}, ${3:CFWriteStreamRef* writeStream}, ${4:CFIndex transferBufferSize})" },  
    { "trigger": "CFStreamCreatePairWithPeerSocketSignature", "contents": "CFStreamCreatePairWithPeerSocketSignature(${1:CFAllocatorRef alloc}, ${2:CFSocketSignature* signature}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})" },  
    { "trigger": "CFStreamCreatePairWithSocket", "contents": "CFStreamCreatePairWithSocket(${1:CFAllocatorRef alloc}, ${2:CFSocketNativeHandle sock}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})" },  
    { "trigger": "CFStreamCreatePairWithSocketToHost", "contents": "CFStreamCreatePairWithSocketToHost(${1:CFAllocatorRef alloc}, ${2:CFStringRef host}, ${3:UInt32 port}, ${4:CFReadStreamRef* readStream}, ${5:CFWriteStreamRef* writeStream})" },  
    { "trigger": "CFStringAppend", "contents": "CFStringAppend(${1:CFMutableStringRef theString}, ${2:CFStringRef appendedString})" },  
    { "trigger": "CFStringAppendCString", "contents": "CFStringAppendCString(${1:CFMutableStringRef theString}, ${2:char* cStr}, ${3:CFStringEncoding encoding})" },  
    { "trigger": "CFStringAppendCharacters", "contents": "CFStringAppendCharacters(${1:CFMutableStringRef theString}, ${2:UniChar* chars}, ${3:CFIndex numChars})" },  
    { "trigger": "CFStringAppendFormat", "contents": "CFStringAppendFormat(${1:CFMutableStringRef theString}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format})" },  
    { "trigger": "CFStringAppendFormatAndArguments", "contents": "CFStringAppendFormatAndArguments(${1:CFMutableStringRef theString}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format}, ${4:va_list arguments})" },  
    { "trigger": "CFStringAppendPascalString", "contents": "CFStringAppendPascalString(${1:CFMutableStringRef theString}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding})" },  
    { "trigger": "CFStringCapitalize", "contents": "CFStringCapitalize(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})" },  
    { "trigger": "CFStringCompare", "contents": "CFStringCompare(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFStringCompareFlags compareOptions})" },  
    { "trigger": "CFStringCompareWithOptions", "contents": "CFStringCompareWithOptions(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFRange rangeToCompare}, ${4:CFStringCompareFlags compareOptions})" },  
    { "trigger": "CFStringCompareWithOptionsAndLocale", "contents": "CFStringCompareWithOptionsAndLocale(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFRange rangeToCompare}, ${4:CFStringCompareFlags compareOptions}, ${5:CFLocaleRef locale})" },  
    { "trigger": "CFStringConvertEncodingToIANACharSetName", "contents": "CFStringConvertEncodingToIANACharSetName(${1:CFStringEncoding encoding})" },  
    { "trigger": "CFStringConvertEncodingToNSStringEncoding", "contents": "CFStringConvertEncodingToNSStringEncoding(${1:CFStringEncoding encoding})" },  
    { "trigger": "CFStringConvertEncodingToWindowsCodepage", "contents": "CFStringConvertEncodingToWindowsCodepage(${1:CFStringEncoding encoding})" },  
    { "trigger": "CFStringConvertIANACharSetNameToEncoding", "contents": "CFStringConvertIANACharSetNameToEncoding(${1:CFStringRef theString})" },  
    { "trigger": "CFStringConvertNSStringEncodingToEncoding", "contents": "CFStringConvertNSStringEncodingToEncoding(${1:unsigned long encoding})" },  
    { "trigger": "CFStringConvertWindowsCodepageToEncoding", "contents": "CFStringConvertWindowsCodepageToEncoding(${1:UInt32 codepage})" },  
    { "trigger": "CFStringCreateArrayBySeparatingStrings", "contents": "CFStringCreateArrayBySeparatingStrings(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringRef separatorString})" },  
    { "trigger": "CFStringCreateArrayWithFindResults", "contents": "CFStringCreateArrayWithFindResults(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringRef stringToFind}, ${4:CFRange rangeToSearch}, ${5:CFStringCompareFlags compareOptions})" },  
    { "trigger": "CFStringCreateByCombiningStrings", "contents": "CFStringCreateByCombiningStrings(${1:CFAllocatorRef alloc}, ${2:CFArrayRef theArray}, ${3:CFStringRef separatorString})" },  
    { "trigger": "CFStringCreateCopy", "contents": "CFStringCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString})" },  
    { "trigger": "CFStringCreateExternalRepresentation", "contents": "CFStringCreateExternalRepresentation(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringEncoding encoding}, ${4:UInt8 lossByte})" },  
    { "trigger": "CFStringCreateFromExternalRepresentation", "contents": "CFStringCreateFromExternalRepresentation(${1:CFAllocatorRef alloc}, ${2:CFDataRef data}, ${3:CFStringEncoding encoding})" },  
    { "trigger": "CFStringCreateMutable", "contents": "CFStringCreateMutable(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength})" },  
    { "trigger": "CFStringCreateMutableCopy", "contents": "CFStringCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength}, ${3:CFStringRef theString})" },  
    { "trigger": "CFStringCreateMutableWithExternalCharactersNoCopy", "contents": "CFStringCreateMutableWithExternalCharactersNoCopy(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars}, ${4:CFIndex capacity}, ${5:CFAllocatorRef externalCharactersAllocator})" },  
    { "trigger": "CFStringCreateWithBytes", "contents": "CFStringCreateWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex numBytes}, ${4:CFStringEncoding encoding}, ${5:Boolean isExternalRepresentation})" },  
    { "trigger": "CFStringCreateWithBytesNoCopy", "contents": "CFStringCreateWithBytesNoCopy(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex numBytes}, ${4:CFStringEncoding encoding}, ${5:Boolean isExternalRepresentation}, ${6:CFAllocatorRef contentsDeallocator})" },  
    { "trigger": "CFStringCreateWithCString", "contents": "CFStringCreateWithCString(${1:CFAllocatorRef alloc}, ${2:char* cStr}, ${3:CFStringEncoding encoding})" },  
    { "trigger": "CFStringCreateWithCStringNoCopy", "contents": "CFStringCreateWithCStringNoCopy(${1:CFAllocatorRef alloc}, ${2:char* cStr}, ${3:CFStringEncoding encoding}, ${4:CFAllocatorRef contentsDeallocator})" },  
    { "trigger": "CFStringCreateWithCharacters", "contents": "CFStringCreateWithCharacters(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars})" },  
    { "trigger": "CFStringCreateWithCharactersNoCopy", "contents": "CFStringCreateWithCharactersNoCopy(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars}, ${4:CFAllocatorRef contentsDeallocator})" },  
    { "trigger": "CFStringCreateWithFileSystemRepresentation", "contents": "CFStringCreateWithFileSystemRepresentation(${1:CFAllocatorRef alloc}, ${2:char* buffer})" },  
    { "trigger": "CFStringCreateWithFormat", "contents": "CFStringCreateWithFormat(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format})" },  
    { "trigger": "CFStringCreateWithFormatAndArguments", "contents": "CFStringCreateWithFormatAndArguments(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format}, ${4:va_list arguments})" },  
    { "trigger": "CFStringCreateWithPascalString", "contents": "CFStringCreateWithPascalString(${1:CFAllocatorRef alloc}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding})" },  
    { "trigger": "CFStringCreateWithPascalStringNoCopy", "contents": "CFStringCreateWithPascalStringNoCopy(${1:CFAllocatorRef alloc}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding}, ${4:CFAllocatorRef contentsDeallocator})" },  
    { "trigger": "CFStringCreateWithSubstring", "contents": "CFStringCreateWithSubstring(${1:CFAllocatorRef alloc}, ${2:CFStringRef str}, ${3:CFRange range})" },  
    { "trigger": "CFStringDelete", "contents": "CFStringDelete(${1:CFMutableStringRef theString}, ${2:CFRange range})" },  
    { "trigger": "CFStringFind", "contents": "CFStringFind(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFStringCompareFlags compareOptions})" },  
    { "trigger": "CFStringFindAndReplace", "contents": "CFStringFindAndReplace(${1:CFMutableStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFStringRef replacementString}, ${4:CFRange rangeToSearch}, ${5:CFStringCompareFlags compareOptions})" },  
    { "trigger": "CFStringFindCharacterFromSet", "contents": "CFStringFindCharacterFromSet(${1:CFStringRef theString}, ${2:CFCharacterSetRef theSet}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFRange* result})" },  
    { "trigger": "CFStringFindWithOptions", "contents": "CFStringFindWithOptions(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFRange* result})" },  
    { "trigger": "CFStringFindWithOptionsAndLocale", "contents": "CFStringFindWithOptionsAndLocale(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFLocaleRef locale}, ${6:CFRange* result})" },  
    { "trigger": "CFStringFold", "contents": "CFStringFold(${1:CFMutableStringRef theString}, ${2:CFOptionFlags theFlags}, ${3:CFLocaleRef theLocale})" },  
    { "trigger": "CFStringGetBytes", "contents": "CFStringGetBytes(${1:CFStringRef theString}, ${2:CFRange range}, ${3:CFStringEncoding encoding}, ${4:UInt8 lossByte}, ${5:Boolean isExternalRepresentation}, ${6:UInt8* buffer}, ${7:CFIndex maxBufLen}, ${8:CFIndex* usedBufLen})" },  
    { "trigger": "CFStringGetCString", "contents": "CFStringGetCString(${1:CFStringRef theString}, ${2:char* buffer}, ${3:CFIndex bufferSize}, ${4:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetCStringPtr", "contents": "CFStringGetCStringPtr(${1:CFStringRef theString}, ${2:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetCharacterAtIndex", "contents": "CFStringGetCharacterAtIndex(${1:CFStringRef theString}, ${2:CFIndex idx})" },  
    { "trigger": "CFStringGetCharacterFromInlineBuffer", "contents": "CFStringGetCharacterFromInlineBuffer(${1:CFStringInlineBuffer* buf}, ${2:CFIndex idx})" },  
    { "trigger": "CFStringGetCharacters", "contents": "CFStringGetCharacters(${1:CFStringRef theString}, ${2:CFRange range}, ${3:UniChar* buffer})" },  
    { "trigger": "CFStringGetCharactersPtr", "contents": "CFStringGetCharactersPtr(${1:CFStringRef theString})" },  
    { "trigger": "CFStringGetDoubleValue", "contents": "CFStringGetDoubleValue(${1:CFStringRef str})" },  
    { "trigger": "CFStringGetFastestEncoding", "contents": "CFStringGetFastestEncoding(${1:CFStringRef theString})" },  
    { "trigger": "CFStringGetFileSystemRepresentation", "contents": "CFStringGetFileSystemRepresentation(${1:CFStringRef string}, ${2:char* buffer}, ${3:CFIndex maxBufLen})" },  
    { "trigger": "CFStringGetHyphenationLocationBeforeIndex", "contents": "CFStringGetHyphenationLocationBeforeIndex(${1:CFStringRef string}, ${2:CFIndex location}, ${3:CFRange limitRange}, ${4:CFOptionFlags options}, ${5:CFLocaleRef locale}, ${6:UTF32Char* character})" },  
    { "trigger": "CFStringGetIntValue", "contents": "CFStringGetIntValue(${1:CFStringRef str})" },  
    { "trigger": "CFStringGetLength", "contents": "CFStringGetLength(${1:CFStringRef theString})" },  
    { "trigger": "CFStringGetLineBounds", "contents": "CFStringGetLineBounds(${1:CFStringRef theString}, ${2:CFRange range}, ${3:CFIndex* lineBeginIndex}, ${4:CFIndex* lineEndIndex}, ${5:CFIndex* contentsEndIndex})" },  
    { "trigger": "CFStringGetListOfAvailableEncodings" },  
    { "trigger": "CFStringGetLongCharacterForSurrogatePair", "contents": "CFStringGetLongCharacterForSurrogatePair(${1:UniChar surrogateHigh}, ${2:UniChar surrogateLow})" },  
    { "trigger": "CFStringGetMaximumSizeForEncoding", "contents": "CFStringGetMaximumSizeForEncoding(${1:CFIndex length}, ${2:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetMaximumSizeOfFileSystemRepresentation", "contents": "CFStringGetMaximumSizeOfFileSystemRepresentation(${1:CFStringRef string})" },  
    { "trigger": "CFStringGetMostCompatibleMacStringEncoding", "contents": "CFStringGetMostCompatibleMacStringEncoding(${1:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetNameOfEncoding", "contents": "CFStringGetNameOfEncoding(${1:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetParagraphBounds", "contents": "CFStringGetParagraphBounds(${1:CFStringRef string}, ${2:CFRange range}, ${3:CFIndex* parBeginIndex}, ${4:CFIndex* parEndIndex}, ${5:CFIndex* contentsEndIndex})" },  
    { "trigger": "CFStringGetPascalString", "contents": "CFStringGetPascalString(${1:CFStringRef theString}, ${2:StringPtr buffer}, ${3:CFIndex bufferSize}, ${4:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetPascalStringPtr", "contents": "CFStringGetPascalStringPtr(${1:CFStringRef theString}, ${2:CFStringEncoding encoding})" },  
    { "trigger": "CFStringGetRangeOfComposedCharactersAtIndex", "contents": "CFStringGetRangeOfComposedCharactersAtIndex(${1:CFStringRef theString}, ${2:CFIndex theIndex})" },  
    { "trigger": "CFStringGetSmallestEncoding", "contents": "CFStringGetSmallestEncoding(${1:CFStringRef theString})" },  
    { "trigger": "CFStringGetSurrogatePairForLongCharacter", "contents": "CFStringGetSurrogatePairForLongCharacter(${1:UTF32Char character}, ${2:UniChar* surrogates})" },  
    { "trigger": "CFStringGetSystemEncoding" },  
    { "trigger": "CFStringGetTypeID" },  
    { "trigger": "CFStringHasPrefix", "contents": "CFStringHasPrefix(${1:CFStringRef theString}, ${2:CFStringRef prefix})" },  
    { "trigger": "CFStringHasSuffix", "contents": "CFStringHasSuffix(${1:CFStringRef theString}, ${2:CFStringRef suffix})" },  
    { "trigger": "CFStringInitInlineBuffer", "contents": "CFStringInitInlineBuffer(${1:CFStringRef str}, ${2:CFStringInlineBuffer* buf}, ${3:CFRange range})" },  
    { "trigger": "CFStringInsert", "contents": "CFStringInsert(${1:CFMutableStringRef str}, ${2:CFIndex idx}, ${3:CFStringRef insertedStr})" },  
    { "trigger": "CFStringIsEncodingAvailable", "contents": "CFStringIsEncodingAvailable(${1:CFStringEncoding encoding})" },  
    { "trigger": "CFStringIsHyphenationAvailableForLocale", "contents": "CFStringIsHyphenationAvailableForLocale(${1:CFLocaleRef locale})" },  
    { "trigger": "CFStringIsSurrogateHighCharacter", "contents": "CFStringIsSurrogateHighCharacter(${1:UniChar character})" },  
    { "trigger": "CFStringIsSurrogateLowCharacter", "contents": "CFStringIsSurrogateLowCharacter(${1:UniChar character})" },  
    { "trigger": "CFStringLowercase", "contents": "CFStringLowercase(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})" },  
    { "trigger": "CFStringNormalize", "contents": "CFStringNormalize(${1:CFMutableStringRef theString}, ${2:CFStringNormalizationForm theForm})" },  
    { "trigger": "CFStringPad", "contents": "CFStringPad(${1:CFMutableStringRef theString}, ${2:CFStringRef padString}, ${3:CFIndex length}, ${4:CFIndex indexIntoPad})" },  
    { "trigger": "CFStringReplace", "contents": "CFStringReplace(${1:CFMutableStringRef theString}, ${2:CFRange range}, ${3:CFStringRef replacement})" },  
    { "trigger": "CFStringReplaceAll", "contents": "CFStringReplaceAll(${1:CFMutableStringRef theString}, ${2:CFStringRef replacement})" },  
    { "trigger": "CFStringSetExternalCharactersNoCopy", "contents": "CFStringSetExternalCharactersNoCopy(${1:CFMutableStringRef theString}, ${2:UniChar* chars}, ${3:CFIndex length}, ${4:CFIndex capacity})" },  
    { "trigger": "CFStringTokenizerAdvanceToNextToken", "contents": "CFStringTokenizerAdvanceToNextToken(${1:CFStringTokenizerRef tokenizer})" },  
    { "trigger": "CFStringTokenizerCopyBestStringLanguage", "contents": "CFStringTokenizerCopyBestStringLanguage(${1:CFStringRef string}, ${2:CFRange range})" },  
    { "trigger": "CFStringTokenizerCopyCurrentTokenAttribute", "contents": "CFStringTokenizerCopyCurrentTokenAttribute(${1:CFStringTokenizerRef tokenizer}, ${2:CFOptionFlags attribute})" },  
    { "trigger": "CFStringTokenizerCreate", "contents": "CFStringTokenizerCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef string}, ${3:CFRange range}, ${4:CFOptionFlags options}, ${5:CFLocaleRef locale})" },  
    { "trigger": "CFStringTokenizerGetCurrentSubTokens", "contents": "CFStringTokenizerGetCurrentSubTokens(${1:CFStringTokenizerRef tokenizer}, ${2:CFRange* ranges}, ${3:CFIndex maxRangeLength}, ${4:CFMutableArrayRef derivedSubTokens})" },  
    { "trigger": "CFStringTokenizerGetCurrentTokenRange", "contents": "CFStringTokenizerGetCurrentTokenRange(${1:CFStringTokenizerRef tokenizer})" },  
    { "trigger": "CFStringTokenizerGetTypeID" },  
    { "trigger": "CFStringTokenizerGoToTokenAtIndex", "contents": "CFStringTokenizerGoToTokenAtIndex(${1:CFStringTokenizerRef tokenizer}, ${2:CFIndex index})" },  
    { "trigger": "CFStringTokenizerSetString", "contents": "CFStringTokenizerSetString(${1:CFStringTokenizerRef tokenizer}, ${2:CFStringRef string}, ${3:CFRange range})" },  
    { "trigger": "CFStringTransform", "contents": "CFStringTransform(${1:CFMutableStringRef string}, ${2:CFRange* range}, ${3:CFStringRef transform}, ${4:Boolean reverse})" },  
    { "trigger": "CFStringTrim", "contents": "CFStringTrim(${1:CFMutableStringRef theString}, ${2:CFStringRef trimString})" },  
    { "trigger": "CFStringTrimWhitespace", "contents": "CFStringTrimWhitespace(${1:CFMutableStringRef theString})" },  
    { "trigger": "CFStringUppercase", "contents": "CFStringUppercase(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})" },  
    { "trigger": "CFSwapInt16", "contents": "CFSwapInt16(${1:uint16_t arg})" },  
    { "trigger": "CFSwapInt16BigToHost", "contents": "CFSwapInt16BigToHost(${1:uint16_t arg})" },  
    { "trigger": "CFSwapInt16HostToBig", "contents": "CFSwapInt16HostToBig(${1:uint16_t arg})" },  
    { "trigger": "CFSwapInt16HostToLittle", "contents": "CFSwapInt16HostToLittle(${1:uint16_t arg})" },  
    { "trigger": "CFSwapInt16LittleToHost", "contents": "CFSwapInt16LittleToHost(${1:uint16_t arg})" },  
    { "trigger": "CFSwapInt32", "contents": "CFSwapInt32(${1:uint32_t arg})" },  
    { "trigger": "CFSwapInt32BigToHost", "contents": "CFSwapInt32BigToHost(${1:uint32_t arg})" },  
    { "trigger": "CFSwapInt32HostToBig", "contents": "CFSwapInt32HostToBig(${1:uint32_t arg})" },  
    { "trigger": "CFSwapInt32HostToLittle", "contents": "CFSwapInt32HostToLittle(${1:uint32_t arg})" },  
    { "trigger": "CFSwapInt32LittleToHost", "contents": "CFSwapInt32LittleToHost(${1:uint32_t arg})" },  
    { "trigger": "CFSwapInt64", "contents": "CFSwapInt64(${1:uint64_t arg})" },  
    { "trigger": "CFSwapInt64BigToHost", "contents": "CFSwapInt64BigToHost(${1:uint64_t arg})" },  
    { "trigger": "CFSwapInt64HostToBig", "contents": "CFSwapInt64HostToBig(${1:uint64_t arg})" },  
    { "trigger": "CFSwapInt64HostToLittle", "contents": "CFSwapInt64HostToLittle(${1:uint64_t arg})" },  
    { "trigger": "CFSwapInt64LittleToHost", "contents": "CFSwapInt64LittleToHost(${1:uint64_t arg})" },  
    { "trigger": "CFTimeZoneCopyAbbreviation", "contents": "CFTimeZoneCopyAbbreviation(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})" },  
    { "trigger": "CFTimeZoneCopyAbbreviationDictionary" },  
    { "trigger": "CFTimeZoneCopyDefault" },  
    { "trigger": "CFTimeZoneCopyKnownNames" },  
    { "trigger": "CFTimeZoneCopyLocalizedName", "contents": "CFTimeZoneCopyLocalizedName(${1:CFTimeZoneRef tz}, ${2:CFTimeZoneNameStyle style}, ${3:CFLocaleRef locale})" },  
    { "trigger": "CFTimeZoneCopySystem" },  
    { "trigger": "CFTimeZoneCreate", "contents": "CFTimeZoneCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:CFDataRef data})" },  
    { "trigger": "CFTimeZoneCreateWithName", "contents": "CFTimeZoneCreateWithName(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:Boolean tryAbbrev})" },  
    { "trigger": "CFTimeZoneCreateWithTimeIntervalFromGMT", "contents": "CFTimeZoneCreateWithTimeIntervalFromGMT(${1:CFAllocatorRef allocator}, ${2:CFTimeInterval ti})" },  
    { "trigger": "CFTimeZoneGetData", "contents": "CFTimeZoneGetData(${1:CFTimeZoneRef tz})" },  
    { "trigger": "CFTimeZoneGetDaylightSavingTimeOffset", "contents": "CFTimeZoneGetDaylightSavingTimeOffset(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})" },  
    { "trigger": "CFTimeZoneGetName", "contents": "CFTimeZoneGetName(${1:CFTimeZoneRef tz})" },  
    { "trigger": "CFTimeZoneGetNextDaylightSavingTimeTransition", "contents": "CFTimeZoneGetNextDaylightSavingTimeTransition(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})" },  
    { "trigger": "CFTimeZoneGetSecondsFromGMT", "contents": "CFTimeZoneGetSecondsFromGMT(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})" },  
    { "trigger": "CFTimeZoneGetTypeID" },  
    { "trigger": "CFTimeZoneIsDaylightSavingTime", "contents": "CFTimeZoneIsDaylightSavingTime(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})" },  
    { "trigger": "CFTimeZoneResetSystem" },  
    { "trigger": "CFTimeZoneSetAbbreviationDictionary", "contents": "CFTimeZoneSetAbbreviationDictionary(${1:CFDictionaryRef dict})" },  
    { "trigger": "CFTimeZoneSetDefault", "contents": "CFTimeZoneSetDefault(${1:CFTimeZoneRef tz})" },  
    { "trigger": "CFTreeAppendChild", "contents": "CFTreeAppendChild(${1:CFTreeRef tree}, ${2:CFTreeRef newChild})" },  
    { "trigger": "CFTreeApplyFunctionToChildren", "contents": "CFTreeApplyFunctionToChildren(${1:CFTreeRef tree}, ${2:CFTreeApplierFunction applier}, ${3:void* context})" },  
    { "trigger": "CFTreeCreate", "contents": "CFTreeCreate(${1:CFAllocatorRef allocator}, ${2:CFTreeContext* context})" },  
    { "trigger": "CFTreeFindRoot", "contents": "CFTreeFindRoot(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeGetChildAtIndex", "contents": "CFTreeGetChildAtIndex(${1:CFTreeRef tree}, ${2:CFIndex idx})" },  
    { "trigger": "CFTreeGetChildCount", "contents": "CFTreeGetChildCount(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeGetChildren", "contents": "CFTreeGetChildren(${1:CFTreeRef tree}, ${2:CFTreeRef* children})" },  
    { "trigger": "CFTreeGetContext", "contents": "CFTreeGetContext(${1:CFTreeRef tree}, ${2:CFTreeContext* context})" },  
    { "trigger": "CFTreeGetFirstChild", "contents": "CFTreeGetFirstChild(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeGetNextSibling", "contents": "CFTreeGetNextSibling(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeGetParent", "contents": "CFTreeGetParent(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeGetTypeID" },  
    { "trigger": "CFTreeInsertSibling", "contents": "CFTreeInsertSibling(${1:CFTreeRef tree}, ${2:CFTreeRef newSibling})" },  
    { "trigger": "CFTreePrependChild", "contents": "CFTreePrependChild(${1:CFTreeRef tree}, ${2:CFTreeRef newChild})" },  
    { "trigger": "CFTreeRemove", "contents": "CFTreeRemove(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeRemoveAllChildren", "contents": "CFTreeRemoveAllChildren(${1:CFTreeRef tree})" },  
    { "trigger": "CFTreeSetContext", "contents": "CFTreeSetContext(${1:CFTreeRef tree}, ${2:CFTreeContext* context})" },  
    { "trigger": "CFTreeSortChildren", "contents": "CFTreeSortChildren(${1:CFTreeRef tree}, ${2:CFComparatorFunction comparator}, ${3:void* context})" },  
    { "trigger": "CFURLCanBeDecomposed", "contents": "CFURLCanBeDecomposed(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLClearResourcePropertyCache", "contents": "CFURLClearResourcePropertyCache(${1:CFURLRef url})" },  
    { "trigger": "CFURLClearResourcePropertyCacheForKey", "contents": "CFURLClearResourcePropertyCacheForKey(${1:CFURLRef url}, ${2:CFStringRef key})" },  
    { "trigger": "CFURLCopyAbsoluteURL", "contents": "CFURLCopyAbsoluteURL(${1:CFURLRef relativeURL})" },  
    { "trigger": "CFURLCopyFileSystemPath", "contents": "CFURLCopyFileSystemPath(${1:CFURLRef anURL}, ${2:CFURLPathStyle pathStyle})" },  
    { "trigger": "CFURLCopyFragment", "contents": "CFURLCopyFragment(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})" },  
    { "trigger": "CFURLCopyHostName", "contents": "CFURLCopyHostName(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCopyLastPathComponent", "contents": "CFURLCopyLastPathComponent(${1:CFURLRef url})" },  
    { "trigger": "CFURLCopyNetLocation", "contents": "CFURLCopyNetLocation(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCopyParameterString", "contents": "CFURLCopyParameterString(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})" },  
    { "trigger": "CFURLCopyPassword", "contents": "CFURLCopyPassword(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCopyPath", "contents": "CFURLCopyPath(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCopyPathExtension", "contents": "CFURLCopyPathExtension(${1:CFURLRef url})" },  
    { "trigger": "CFURLCopyQueryString", "contents": "CFURLCopyQueryString(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})" },  
    { "trigger": "CFURLCopyResourcePropertiesForKeys", "contents": "CFURLCopyResourcePropertiesForKeys(${1:CFURLRef url}, ${2:CFArrayRef keys}, ${3:CFErrorRef* error})" },  
    { "trigger": "CFURLCopyResourcePropertyForKey", "contents": "CFURLCopyResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:void* propertyValueTypeRefPtr}, ${4:CFErrorRef* error})" },  
    { "trigger": "CFURLCopyResourceSpecifier", "contents": "CFURLCopyResourceSpecifier(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCopyScheme", "contents": "CFURLCopyScheme(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCopyStrictPath", "contents": "CFURLCopyStrictPath(${1:CFURLRef anURL}, ${2:Boolean* isAbsolute})" },  
    { "trigger": "CFURLCopyUserName", "contents": "CFURLCopyUserName(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLCreateAbsoluteURLWithBytes", "contents": "CFURLCreateAbsoluteURLWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8* relativeURLBytes}, ${3:CFIndex length}, ${4:CFStringEncoding encoding}, ${5:CFURLRef baseURL}, ${6:Boolean useCompatibilityMode})" },  
    { "trigger": "CFURLCreateBookmarkData", "contents": "CFURLCreateBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFURLBookmarkCreationOptions options}, ${4:CFArrayRef resourcePropertiesToInclude}, ${5:CFURLRef relativeToURL}, ${6:CFErrorRef* error})" },  
    { "trigger": "CFURLCreateBookmarkDataFromFile", "contents": "CFURLCreateBookmarkDataFromFile(${1:CFAllocatorRef allocator}, ${2:CFURLRef fileURL}, ${3:CFErrorRef* errorRef})" },  
    { "trigger": "CFURLCreateByResolvingBookmarkData", "contents": "CFURLCreateByResolvingBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFDataRef bookmark}, ${3:CFURLBookmarkResolutionOptions options}, ${4:CFURLRef relativeToURL}, ${5:CFArrayRef resourcePropertiesToInclude}, ${6:Boolean* isStale}, ${7:CFErrorRef* error})" },  
    { "trigger": "CFURLCreateCopyAppendingPathComponent", "contents": "CFURLCreateCopyAppendingPathComponent(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringRef pathComponent}, ${4:Boolean isDirectory})" },  
    { "trigger": "CFURLCreateCopyAppendingPathExtension", "contents": "CFURLCreateCopyAppendingPathExtension(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringRef extension})" },  
    { "trigger": "CFURLCreateCopyDeletingLastPathComponent", "contents": "CFURLCreateCopyDeletingLastPathComponent(${1:CFAllocatorRef allocator}, ${2:CFURLRef url})" },  
    { "trigger": "CFURLCreateCopyDeletingPathExtension", "contents": "CFURLCreateCopyDeletingPathExtension(${1:CFAllocatorRef allocator}, ${2:CFURLRef url})" },  
    { "trigger": "CFURLCreateData", "contents": "CFURLCreateData(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringEncoding encoding}, ${4:Boolean escapeWhitespace})" },  
    { "trigger": "CFURLCreateDataAndPropertiesFromResource", "contents": "CFURLCreateDataAndPropertiesFromResource(${1:CFAllocatorRef alloc}, ${2:CFURLRef url}, ${3:CFDataRef* resourceData}, ${4:CFDictionaryRef* properties}, ${5:CFArrayRef desiredProperties}, ${6:SInt32* errorCode})" },  
    { "trigger": "CFURLCreateFilePathURL", "contents": "CFURLCreateFilePathURL(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFErrorRef* error})" },  
    { "trigger": "CFURLCreateFileReferenceURL", "contents": "CFURLCreateFileReferenceURL(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFErrorRef* error})" },  
    { "trigger": "CFURLCreateFromFSRef", "contents": "CFURLCreateFromFSRef(${1:CFAllocatorRef allocator}, ${2:struct FSRef* fsRef})" },  
    { "trigger": "CFURLCreateFromFileSystemRepresentation", "contents": "CFURLCreateFromFileSystemRepresentation(${1:CFAllocatorRef allocator}, ${2:UInt8* buffer}, ${3:CFIndex bufLen}, ${4:Boolean isDirectory})" },  
    { "trigger": "CFURLCreateFromFileSystemRepresentationRelativeToBase", "contents": "CFURLCreateFromFileSystemRepresentationRelativeToBase(${1:CFAllocatorRef allocator}, ${2:UInt8* buffer}, ${3:CFIndex bufLen}, ${4:Boolean isDirectory}, ${5:CFURLRef baseURL})" },  
    { "trigger": "CFURLCreatePropertyFromResource", "contents": "CFURLCreatePropertyFromResource(${1:CFAllocatorRef alloc}, ${2:CFURLRef url}, ${3:CFStringRef property}, ${4:SInt32* errorCode})" },  
    { "trigger": "CFURLCreateResourcePropertiesForKeysFromBookmarkData", "contents": "CFURLCreateResourcePropertiesForKeysFromBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFArrayRef resourcePropertiesToReturn}, ${3:CFDataRef bookmark})" },  
    { "trigger": "CFURLCreateResourcePropertyForKeyFromBookmarkData", "contents": "CFURLCreateResourcePropertyForKeyFromBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFStringRef resourcePropertyKey}, ${3:CFDataRef bookmark})" },  
    { "trigger": "CFURLCreateStringByAddingPercentEscapes", "contents": "CFURLCreateStringByAddingPercentEscapes(${1:CFAllocatorRef allocator}, ${2:CFStringRef originalString}, ${3:CFStringRef charactersToLeaveUnescaped}, ${4:CFStringRef legalURLCharactersToBeEscaped}, ${5:CFStringEncoding encoding})" },  
    { "trigger": "CFURLCreateStringByReplacingPercentEscapes", "contents": "CFURLCreateStringByReplacingPercentEscapes(${1:CFAllocatorRef allocator}, ${2:CFStringRef originalString}, ${3:CFStringRef charactersToLeaveEscaped})" },  
    { "trigger": "CFURLCreateStringByReplacingPercentEscapesUsingEncoding", "contents": "CFURLCreateStringByReplacingPercentEscapesUsingEncoding(${1:CFAllocatorRef allocator}, ${2:CFStringRef origString}, ${3:CFStringRef charsToLeaveEscaped}, ${4:CFStringEncoding encoding})" },  
    { "trigger": "CFURLCreateWithBytes", "contents": "CFURLCreateWithBytes(${1:CFAllocatorRef allocator}, ${2:UInt8* URLBytes}, ${3:CFIndex length}, ${4:CFStringEncoding encoding}, ${5:CFURLRef baseURL})" },  
    { "trigger": "CFURLCreateWithFileSystemPath", "contents": "CFURLCreateWithFileSystemPath(${1:CFAllocatorRef allocator}, ${2:CFStringRef filePath}, ${3:CFURLPathStyle pathStyle}, ${4:Boolean isDirectory})" },  
    { "trigger": "CFURLCreateWithFileSystemPathRelativeToBase", "contents": "CFURLCreateWithFileSystemPathRelativeToBase(${1:CFAllocatorRef allocator}, ${2:CFStringRef filePath}, ${3:CFURLPathStyle pathStyle}, ${4:Boolean isDirectory}, ${5:CFURLRef baseURL})" },  
    { "trigger": "CFURLCreateWithString", "contents": "CFURLCreateWithString(${1:CFAllocatorRef allocator}, ${2:CFStringRef URLString}, ${3:CFURLRef baseURL})" },  
    { "trigger": "CFURLDestroyResource", "contents": "CFURLDestroyResource(${1:CFURLRef url}, ${2:SInt32* errorCode})" },  
    { "trigger": "CFURLEnumeratorCreateForDirectoryURL", "contents": "CFURLEnumeratorCreateForDirectoryURL(${1:CFAllocatorRef alloc}, ${2:CFURLRef directoryURL}, ${3:CFURLEnumeratorOptions option}, ${4:CFArrayRef propertyKeys})" },  
    { "trigger": "CFURLEnumeratorCreateForMountedVolumes", "contents": "CFURLEnumeratorCreateForMountedVolumes(${1:CFAllocatorRef alloc}, ${2:CFURLEnumeratorOptions option}, ${3:CFArrayRef propertyKeys})" },  
    { "trigger": "CFURLEnumeratorGetDescendentLevel", "contents": "CFURLEnumeratorGetDescendentLevel(${1:CFURLEnumeratorRef enumerator})" },  
    { "trigger": "CFURLEnumeratorGetNextURL", "contents": "CFURLEnumeratorGetNextURL(${1:CFURLEnumeratorRef enumerator}, ${2:CFURLRef* url}, ${3:CFErrorRef* error})" },  
    { "trigger": "CFURLEnumeratorGetSourceDidChange", "contents": "CFURLEnumeratorGetSourceDidChange(${1:CFURLEnumeratorRef enumerator})" },  
    { "trigger": "CFURLEnumeratorGetTypeID" },  
    { "trigger": "CFURLEnumeratorSkipDescendents", "contents": "CFURLEnumeratorSkipDescendents(${1:CFURLEnumeratorRef enumerator})" },  
    { "trigger": "CFURLGetBaseURL", "contents": "CFURLGetBaseURL(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLGetByteRangeForComponent", "contents": "CFURLGetByteRangeForComponent(${1:CFURLRef url}, ${2:CFURLComponentType component}, ${3:CFRange* rangeIncludingSeparators})" },  
    { "trigger": "CFURLGetBytes", "contents": "CFURLGetBytes(${1:CFURLRef url}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})" },  
    { "trigger": "CFURLGetFSRef", "contents": "CFURLGetFSRef(${1:CFURLRef url}, ${2:struct FSRef* fsRef})" },  
    { "trigger": "CFURLGetFileSystemRepresentation", "contents": "CFURLGetFileSystemRepresentation(${1:CFURLRef url}, ${2:Boolean resolveAgainstBase}, ${3:UInt8* buffer}, ${4:CFIndex maxBufLen})" },  
    { "trigger": "CFURLGetPortNumber", "contents": "CFURLGetPortNumber(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLGetString", "contents": "CFURLGetString(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLGetTypeID" },  
    { "trigger": "CFURLHasDirectoryPath", "contents": "CFURLHasDirectoryPath(${1:CFURLRef anURL})" },  
    { "trigger": "CFURLResourceIsReachable", "contents": "CFURLResourceIsReachable(${1:CFURLRef url}, ${2:CFErrorRef* error})" },  
    { "trigger": "CFURLSetResourcePropertiesForKeys", "contents": "CFURLSetResourcePropertiesForKeys(${1:CFURLRef url}, ${2:CFDictionaryRef keyedPropertyValues}, ${3:CFErrorRef* error})" },  
    { "trigger": "CFURLSetResourcePropertyForKey", "contents": "CFURLSetResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:CFTypeRef propertyValue}, ${4:CFErrorRef* error})" },  
    { "trigger": "CFURLSetTemporaryResourcePropertyForKey", "contents": "CFURLSetTemporaryResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:CFTypeRef propertyValue})" },  
    { "trigger": "CFURLWriteBookmarkDataToFile", "contents": "CFURLWriteBookmarkDataToFile(${1:CFDataRef bookmarkRef}, ${2:CFURLRef fileURL}, ${3:CFURLBookmarkFileCreationOptions options}, ${4:CFErrorRef* errorRef})" },  
    { "trigger": "CFURLWriteDataAndPropertiesToResource", "contents": "CFURLWriteDataAndPropertiesToResource(${1:CFURLRef url}, ${2:CFDataRef dataToWrite}, ${3:CFDictionaryRef propertiesToWrite}, ${4:SInt32* errorCode})" },  
    { "trigger": "CFUUIDCreate", "contents": "CFUUIDCreate(${1:CFAllocatorRef alloc})" },  
    { "trigger": "CFUUIDCreateFromString", "contents": "CFUUIDCreateFromString(${1:CFAllocatorRef alloc}, ${2:CFStringRef uuidStr})" },  
    { "trigger": "CFUUIDCreateFromUUIDBytes", "contents": "CFUUIDCreateFromUUIDBytes(${1:CFAllocatorRef alloc}, ${2:CFUUIDBytes bytes})" },  
    { "trigger": "CFUUIDCreateString", "contents": "CFUUIDCreateString(${1:CFAllocatorRef alloc}, ${2:CFUUIDRef uuid})" },  
    { "trigger": "CFUUIDCreateWithBytes", "contents": "CFUUIDCreateWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8 byte0}, ${3:UInt8 byte1}, ${4:UInt8 byte2}, ${5:UInt8 byte3}, ${6:UInt8 byte4}, ${7:UInt8 byte5}, ${8:UInt8 byte6}, ${9:UInt8 byte7}, ${10:UInt8 byte8}, ${11:UInt8 byte9}, ${12:UInt8 byte10}, ${13:UInt8 byte11}, ${14:UInt8 byte12}, ${15:UInt8 byte13}, ${16:UInt8 byte14}, ${17:UInt8 byte15})" },  
    { "trigger": "CFUUIDGetConstantUUIDWithBytes", "contents": "CFUUIDGetConstantUUIDWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8 byte0}, ${3:UInt8 byte1}, ${4:UInt8 byte2}, ${5:UInt8 byte3}, ${6:UInt8 byte4}, ${7:UInt8 byte5}, ${8:UInt8 byte6}, ${9:UInt8 byte7}, ${10:UInt8 byte8}, ${11:UInt8 byte9}, ${12:UInt8 byte10}, ${13:UInt8 byte11}, ${14:UInt8 byte12}, ${15:UInt8 byte13}, ${16:UInt8 byte14}, ${17:UInt8 byte15})" },  
    { "trigger": "CFUUIDGetTypeID" },  
    { "trigger": "CFUUIDGetUUIDBytes", "contents": "CFUUIDGetUUIDBytes(${1:CFUUIDRef uuid})" },  
    { "trigger": "CFWriteStreamCanAcceptBytes", "contents": "CFWriteStreamCanAcceptBytes(${1:CFWriteStreamRef stream})" },  
    { "trigger": "CFWriteStreamClose", "contents": "CFWriteStreamClose(${1:CFWriteStreamRef stream})" },  
    { "trigger": "CFWriteStreamCopyError", "contents": "CFWriteStreamCopyError(${1:CFWriteStreamRef stream})" },  
    { "trigger": "CFWriteStreamCopyProperty", "contents": "CFWriteStreamCopyProperty(${1:CFWriteStreamRef stream}, ${2:CFStringRef propertyName})" },  
    { "trigger": "CFWriteStreamCreateWithAllocatedBuffers", "contents": "CFWriteStreamCreateWithAllocatedBuffers(${1:CFAllocatorRef alloc}, ${2:CFAllocatorRef bufferAllocator})" },  
    { "trigger": "CFWriteStreamCreateWithBuffer", "contents": "CFWriteStreamCreateWithBuffer(${1:CFAllocatorRef alloc}, ${2:UInt8* buffer}, ${3:CFIndex bufferCapacity})" },  
    { "trigger": "CFWriteStreamCreateWithFile", "contents": "CFWriteStreamCreateWithFile(${1:CFAllocatorRef alloc}, ${2:CFURLRef fileURL})" },  
    { "trigger": "CFWriteStreamGetError", "contents": "CFWriteStreamGetError(${1:CFWriteStreamRef stream})" },  
    { "trigger": "CFWriteStreamGetStatus", "contents": "CFWriteStreamGetStatus(${1:CFWriteStreamRef stream})" },  
    { "trigger": "CFWriteStreamGetTypeID" },  
    { "trigger": "CFWriteStreamOpen", "contents": "CFWriteStreamOpen(${1:CFWriteStreamRef stream})" },  
    { "trigger": "CFWriteStreamScheduleWithRunLoop", "contents": "CFWriteStreamScheduleWithRunLoop(${1:CFWriteStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})" },  
    { "trigger": "CFWriteStreamSetClient", "contents": "CFWriteStreamSetClient(${1:CFWriteStreamRef stream}, ${2:CFOptionFlags streamEvents}, ${3:CFWriteStreamClientCallBack clientCB}, ${4:CFStreamClientContext* clientContext})" },  
    { "trigger": "CFWriteStreamSetProperty", "contents": "CFWriteStreamSetProperty(${1:CFWriteStreamRef stream}, ${2:CFStringRef propertyName}, ${3:CFTypeRef propertyValue})" },  
    { "trigger": "CFWriteStreamUnscheduleFromRunLoop", "contents": "CFWriteStreamUnscheduleFromRunLoop(${1:CFWriteStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})" },  
    { "trigger": "CFWriteStreamWrite", "contents": "CFWriteStreamWrite(${1:CFWriteStreamRef stream}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})" },  
    { "trigger": "CF_USE_OSBYTEORDER_H (1)" },  
    { "trigger": "CGAffineTransformConcat", "contents": "CGAffineTransformConcat(${1:CGAffineTransform t1}, ${2:CGAffineTransform t2})" },  
    { "trigger": "CGAffineTransformEqualToTransform", "contents": "CGAffineTransformEqualToTransform(${1:CGAffineTransform t1}, ${2:CGAffineTransform t2})" },  
    { "trigger": "CGAffineTransformFromString", "contents": "CGAffineTransformFromString(${1:NSString* string})" },  
    { "trigger": "CGAffineTransformIdentity (CGAffineTransform)" },  
    { "trigger": "CGAffineTransformInvert", "contents": "CGAffineTransformInvert(${1:CGAffineTransform t})" },  
    { "trigger": "CGAffineTransformIsIdentity", "contents": "CGAffineTransformIsIdentity(${1:CGAffineTransform t})" },  
    { "trigger": "CGAffineTransformMake", "contents": "CGAffineTransformMake(${1:CGFloat a}, ${2:CGFloat b}, ${3:CGFloat c}, ${4:CGFloat d}, ${5:CGFloat tx}, ${6:CGFloat ty})" },  
    { "trigger": "CGAffineTransformMakeRotation", "contents": "CGAffineTransformMakeRotation(${1:CGFloat angle})" },  
    { "trigger": "CGAffineTransformMakeScale", "contents": "CGAffineTransformMakeScale(${1:CGFloat sx}, ${2:CGFloat sy})" },  
    { "trigger": "CGAffineTransformMakeTranslation", "contents": "CGAffineTransformMakeTranslation(${1:CGFloat tx}, ${2:CGFloat ty})" },  
    { "trigger": "CGAffineTransformRotate", "contents": "CGAffineTransformRotate(${1:CGAffineTransform t}, ${2:CGFloat angle})" },  
    { "trigger": "CGAffineTransformScale", "contents": "CGAffineTransformScale(${1:CGAffineTransform t}, ${2:CGFloat sx}, ${3:CGFloat sy})" },  
    { "trigger": "CGAffineTransformTranslate", "contents": "CGAffineTransformTranslate(${1:CGAffineTransform t}, ${2:CGFloat tx}, ${3:CGFloat ty})" },  
    { "trigger": "CGAffineTransformValue" },  
    { "trigger": "CGAffineTransformValue" },  
    { "trigger": "CGBitmapContextCreate", "contents": "CGBitmapContextCreate(${1:void* data}, ${2:size_t width}, ${3:size_t height}, ${4:size_t bitsPerComponent}, ${5:size_t bytesPerRow}, ${6:CGColorSpaceRef space}, ${7:CGBitmapInfo bitmapInfo})" },  
    { "trigger": "CGBitmapContextCreateImage", "contents": "CGBitmapContextCreateImage(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextCreateWithData", "contents": "CGBitmapContextCreateWithData(${1:void* data}, ${2:size_t width}, ${3:size_t height}, ${4:size_t bitsPerComponent}, ${5:size_t bytesPerRow}, ${6:CGColorSpaceRef space}, ${7:CGBitmapInfo bitmapInfo}, ${8:CGBitmapContextReleaseDataCallback releaseCallback}, ${9:void* releaseInfo})" },  
    { "trigger": "CGBitmapContextGetAlphaInfo", "contents": "CGBitmapContextGetAlphaInfo(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetBitmapInfo", "contents": "CGBitmapContextGetBitmapInfo(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetBitsPerComponent", "contents": "CGBitmapContextGetBitsPerComponent(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetBitsPerPixel", "contents": "CGBitmapContextGetBitsPerPixel(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetBytesPerRow", "contents": "CGBitmapContextGetBytesPerRow(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetColorSpace", "contents": "CGBitmapContextGetColorSpace(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetData", "contents": "CGBitmapContextGetData(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetHeight", "contents": "CGBitmapContextGetHeight(${1:CGContextRef context})" },  
    { "trigger": "CGBitmapContextGetWidth", "contents": "CGBitmapContextGetWidth(${1:CGContextRef context})" },  
    { "trigger": "CGColor" },  
    { "trigger": "CGColor" },  
    { "trigger": "CGColorCreate", "contents": "CGColorCreate(${1:CGColorSpaceRef space}, ${2:CGFloat* components})" },  
    { "trigger": "CGColorCreateCopy", "contents": "CGColorCreateCopy(${1:CGColorRef color})" },  
    { "trigger": "CGColorCreateCopyWithAlpha", "contents": "CGColorCreateCopyWithAlpha(${1:CGColorRef color}, ${2:CGFloat alpha})" },  
    { "trigger": "CGColorCreateWithPattern", "contents": "CGColorCreateWithPattern(${1:CGColorSpaceRef space}, ${2:CGPatternRef pattern}, ${3:CGFloat* components})" },  
    { "trigger": "CGColorEqualToColor", "contents": "CGColorEqualToColor(${1:CGColorRef color1}, ${2:CGColorRef color2})" },  
    { "trigger": "CGColorGetAlpha", "contents": "CGColorGetAlpha(${1:CGColorRef color})" },  
    { "trigger": "CGColorGetColorSpace", "contents": "CGColorGetColorSpace(${1:CGColorRef color})" },  
    { "trigger": "CGColorGetComponents", "contents": "CGColorGetComponents(${1:CGColorRef color})" },  
    { "trigger": "CGColorGetNumberOfComponents", "contents": "CGColorGetNumberOfComponents(${1:CGColorRef color})" },  
    { "trigger": "CGColorGetPattern", "contents": "CGColorGetPattern(${1:CGColorRef color})" },  
    { "trigger": "CGColorGetTypeID" },  
    { "trigger": "CGColorRelease", "contents": "CGColorRelease(${1:CGColorRef color})" },  
    { "trigger": "CGColorRetain", "contents": "CGColorRetain(${1:CGColorRef color})" },  
    { "trigger": "CGColorSpaceCreateCalibratedGray", "contents": "CGColorSpaceCreateCalibratedGray(${1:CGFloat* whitePoint}, ${2:CGFloat* blackPoint}, ${3:CGFloat gamma})" },  
    { "trigger": "CGColorSpaceCreateCalibratedRGB", "contents": "CGColorSpaceCreateCalibratedRGB(${1:CGFloat* whitePoint}, ${2:CGFloat* blackPoint}, ${3:CGFloat* gamma}, ${4:CGFloat* matrix})" },  
    { "trigger": "CGColorSpaceCreateDeviceCMYK" },  
    { "trigger": "CGColorSpaceCreateDeviceGray" },  
    { "trigger": "CGColorSpaceCreateDeviceRGB" },  
    { "trigger": "CGColorSpaceCreateICCBased", "contents": "CGColorSpaceCreateICCBased(${1:size_t nComponents}, ${2:CGFloat* range}, ${3:CGDataProviderRef profile}, ${4:CGColorSpaceRef alternate})" },  
    { "trigger": "CGColorSpaceCreateIndexed", "contents": "CGColorSpaceCreateIndexed(${1:CGColorSpaceRef baseSpace}, ${2:size_t lastIndex}, ${3:unsigned char* colorTable})" },  
    { "trigger": "CGColorSpaceCreateLab", "contents": "CGColorSpaceCreateLab(${1:CGFloat* whitePoint}, ${2:CGFloat* blackPoint}, ${3:CGFloat* range})" },  
    { "trigger": "CGColorSpaceCreatePattern", "contents": "CGColorSpaceCreatePattern(${1:CGColorSpaceRef baseSpace})" },  
    { "trigger": "CGColorSpaceCreateWithICCProfile", "contents": "CGColorSpaceCreateWithICCProfile(${1:CFDataRef data})" },  
    { "trigger": "CGColorSpaceCreateWithName", "contents": "CGColorSpaceCreateWithName(${1:CFStringRef name})" },  
    { "trigger": "CGColorSpaceGetBaseColorSpace", "contents": "CGColorSpaceGetBaseColorSpace(${1:CGColorSpaceRef space})" },  
    { "trigger": "CGColorSpaceGetColorTable", "contents": "CGColorSpaceGetColorTable(${1:CGColorSpaceRef space}, ${2:uint8_t* table})" },  
    { "trigger": "CGColorSpaceGetColorTableCount", "contents": "CGColorSpaceGetColorTableCount(${1:CGColorSpaceRef space})" },  
    { "trigger": "CGColorSpaceGetModel", "contents": "CGColorSpaceGetModel(${1:CGColorSpaceRef space})" },  
    { "trigger": "CGColorSpaceGetNumberOfComponents", "contents": "CGColorSpaceGetNumberOfComponents(${1:CGColorSpaceRef space})" },  
    { "trigger": "CGColorSpaceGetTypeID" },  
    { "trigger": "CGColorSpaceRelease", "contents": "CGColorSpaceRelease(${1:CGColorSpaceRef space})" },  
    { "trigger": "CGColorSpaceRetain", "contents": "CGColorSpaceRetain(${1:CGColorSpaceRef space})" },  
    { "trigger": "CGContextAddArc", "contents": "CGContextAddArc(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:CGFloat radius}, ${5:CGFloat startAngle}, ${6:CGFloat endAngle}, ${7:int clockwise})" },  
    { "trigger": "CGContextAddArcToPoint", "contents": "CGContextAddArcToPoint(${1:CGContextRef c}, ${2:CGFloat x1}, ${3:CGFloat y1}, ${4:CGFloat x2}, ${5:CGFloat y2}, ${6:CGFloat radius})" },  
    { "trigger": "CGContextAddCurveToPoint", "contents": "CGContextAddCurveToPoint(${1:CGContextRef c}, ${2:CGFloat cp1x}, ${3:CGFloat cp1y}, ${4:CGFloat cp2x}, ${5:CGFloat cp2y}, ${6:CGFloat x}, ${7:CGFloat y})" },  
    { "trigger": "CGContextAddEllipseInRect", "contents": "CGContextAddEllipseInRect(${1:CGContextRef context}, ${2:CGRect rect})" },  
    { "trigger": "CGContextAddLineToPoint", "contents": "CGContextAddLineToPoint(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y})" },  
    { "trigger": "CGContextAddLines", "contents": "CGContextAddLines(${1:CGContextRef c}, ${2:CGPoint* points}, ${3:size_t count})" },  
    { "trigger": "CGContextAddPath", "contents": "CGContextAddPath(${1:CGContextRef context}, ${2:CGPathRef path})" },  
    { "trigger": "CGContextAddQuadCurveToPoint", "contents": "CGContextAddQuadCurveToPoint(${1:CGContextRef c}, ${2:CGFloat cpx}, ${3:CGFloat cpy}, ${4:CGFloat x}, ${5:CGFloat y})" },  
    { "trigger": "CGContextAddRect", "contents": "CGContextAddRect(${1:CGContextRef c}, ${2:CGRect rect})" },  
    { "trigger": "CGContextAddRects", "contents": "CGContextAddRects(${1:CGContextRef c}, ${2:CGRect* rects}, ${3:size_t count})" },  
    { "trigger": "CGContextBeginPage", "contents": "CGContextBeginPage(${1:CGContextRef c}, ${2:CGRect* mediaBox})" },  
    { "trigger": "CGContextBeginPath", "contents": "CGContextBeginPath(${1:CGContextRef c})" },  
    { "trigger": "CGContextBeginTransparencyLayer", "contents": "CGContextBeginTransparencyLayer(${1:CGContextRef context}, ${2:CFDictionaryRef auxiliaryInfo})" },  
    { "trigger": "CGContextBeginTransparencyLayerWithRect", "contents": "CGContextBeginTransparencyLayerWithRect(${1:CGContextRef context}, ${2:CGRect rect}, ${3:CFDictionaryRef auxiliaryInfo})" },  
    { "trigger": "CGContextClearRect", "contents": "CGContextClearRect(${1:CGContextRef c}, ${2:CGRect rect})" },  
    { "trigger": "CGContextClip", "contents": "CGContextClip(${1:CGContextRef c})" },  
    { "trigger": "CGContextClipToMask", "contents": "CGContextClipToMask(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGImageRef mask})" },  
    { "trigger": "CGContextClipToRect", "contents": "CGContextClipToRect(${1:CGContextRef c}, ${2:CGRect rect})" },  
    { "trigger": "CGContextClipToRects", "contents": "CGContextClipToRects(${1:CGContextRef c}, ${2:CGRect* rects}, ${3:size_t count})" },  
    { "trigger": "CGContextClosePath", "contents": "CGContextClosePath(${1:CGContextRef c})" },  
    { "trigger": "CGContextConcatCTM", "contents": "CGContextConcatCTM(${1:CGContextRef c}, ${2:CGAffineTransform transform})" },  
    { "trigger": "CGContextConvertPointToDeviceSpace", "contents": "CGContextConvertPointToDeviceSpace(${1:CGContextRef context}, ${2:CGPoint point})" },  
    { "trigger": "CGContextConvertPointToUserSpace", "contents": "CGContextConvertPointToUserSpace(${1:CGContextRef context}, ${2:CGPoint point})" },  
    { "trigger": "CGContextConvertRectToDeviceSpace", "contents": "CGContextConvertRectToDeviceSpace(${1:CGContextRef context}, ${2:CGRect rect})" },  
    { "trigger": "CGContextConvertRectToUserSpace", "contents": "CGContextConvertRectToUserSpace(${1:CGContextRef context}, ${2:CGRect rect})" },  
    { "trigger": "CGContextConvertSizeToDeviceSpace", "contents": "CGContextConvertSizeToDeviceSpace(${1:CGContextRef context}, ${2:CGSize size})" },  
    { "trigger": "CGContextConvertSizeToUserSpace", "contents": "CGContextConvertSizeToUserSpace(${1:CGContextRef context}, ${2:CGSize size})" },  
    { "trigger": "CGContextCopyPath", "contents": "CGContextCopyPath(${1:CGContextRef context})" },  
    { "trigger": "CGContextDrawImage", "contents": "CGContextDrawImage(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGImageRef image})" },  
    { "trigger": "CGContextDrawLayerAtPoint", "contents": "CGContextDrawLayerAtPoint(${1:CGContextRef context}, ${2:CGPoint point}, ${3:CGLayerRef layer})" },  
    { "trigger": "CGContextDrawLayerInRect", "contents": "CGContextDrawLayerInRect(${1:CGContextRef context}, ${2:CGRect rect}, ${3:CGLayerRef layer})" },  
    { "trigger": "CGContextDrawLinearGradient", "contents": "CGContextDrawLinearGradient(${1:CGContextRef context}, ${2:CGGradientRef gradient}, ${3:CGPoint startPoint}, ${4:CGPoint endPoint}, ${5:CGGradientDrawingOptions options})" },  
    { "trigger": "CGContextDrawPDFPage", "contents": "CGContextDrawPDFPage(${1:CGContextRef c}, ${2:CGPDFPageRef page})" },  
    { "trigger": "CGContextDrawPath", "contents": "CGContextDrawPath(${1:CGContextRef c}, ${2:CGPathDrawingMode mode})" },  
    { "trigger": "CGContextDrawRadialGradient", "contents": "CGContextDrawRadialGradient(${1:CGContextRef context}, ${2:CGGradientRef gradient}, ${3:CGPoint startCenter}, ${4:CGFloat startRadius}, ${5:CGPoint endCenter}, ${6:CGFloat endRadius}, ${7:CGGradientDrawingOptions options})" },  
    { "trigger": "CGContextDrawShading", "contents": "CGContextDrawShading(${1:CGContextRef context}, ${2:CGShadingRef shading})" },  
    { "trigger": "CGContextDrawTiledImage", "contents": "CGContextDrawTiledImage(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGImageRef image})" },  
    { "trigger": "CGContextEOClip", "contents": "CGContextEOClip(${1:CGContextRef c})" },  
    { "trigger": "CGContextEOFillPath", "contents": "CGContextEOFillPath(${1:CGContextRef c})" },  
    { "trigger": "CGContextEndPage", "contents": "CGContextEndPage(${1:CGContextRef c})" },  
    { "trigger": "CGContextEndTransparencyLayer", "contents": "CGContextEndTransparencyLayer(${1:CGContextRef context})" },  
    { "trigger": "CGContextFillEllipseInRect", "contents": "CGContextFillEllipseInRect(${1:CGContextRef context}, ${2:CGRect rect})" },  
    { "trigger": "CGContextFillPath", "contents": "CGContextFillPath(${1:CGContextRef c})" },  
    { "trigger": "CGContextFillRect", "contents": "CGContextFillRect(${1:CGContextRef c}, ${2:CGRect rect})" },  
    { "trigger": "CGContextFillRects", "contents": "CGContextFillRects(${1:CGContextRef c}, ${2:CGRect* rects}, ${3:size_t count})" },  
    { "trigger": "CGContextFlush", "contents": "CGContextFlush(${1:CGContextRef c})" },  
    { "trigger": "CGContextGetCTM", "contents": "CGContextGetCTM(${1:CGContextRef c})" },  
    { "trigger": "CGContextGetClipBoundingBox", "contents": "CGContextGetClipBoundingBox(${1:CGContextRef c})" },  
    { "trigger": "CGContextGetInterpolationQuality", "contents": "CGContextGetInterpolationQuality(${1:CGContextRef context})" },  
    { "trigger": "CGContextGetPathBoundingBox", "contents": "CGContextGetPathBoundingBox(${1:CGContextRef context})" },  
    { "trigger": "CGContextGetPathCurrentPoint", "contents": "CGContextGetPathCurrentPoint(${1:CGContextRef context})" },  
    { "trigger": "CGContextGetTextMatrix", "contents": "CGContextGetTextMatrix(${1:CGContextRef c})" },  
    { "trigger": "CGContextGetTextPosition", "contents": "CGContextGetTextPosition(${1:CGContextRef context})" },  
    { "trigger": "CGContextGetTypeID" },  
    { "trigger": "CGContextGetUserSpaceToDeviceSpaceTransform", "contents": "CGContextGetUserSpaceToDeviceSpaceTransform(${1:CGContextRef context})" },  
    { "trigger": "CGContextIsPathEmpty", "contents": "CGContextIsPathEmpty(${1:CGContextRef context})" },  
    { "trigger": "CGContextMoveToPoint", "contents": "CGContextMoveToPoint(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y})" },  
    { "trigger": "CGContextPathContainsPoint", "contents": "CGContextPathContainsPoint(${1:CGContextRef context}, ${2:CGPoint point}, ${3:CGPathDrawingMode mode})" },  
    { "trigger": "CGContextRelease", "contents": "CGContextRelease(${1:CGContextRef c})" },  
    { "trigger": "CGContextReplacePathWithStrokedPath", "contents": "CGContextReplacePathWithStrokedPath(${1:CGContextRef c})" },  
    { "trigger": "CGContextRestoreGState", "contents": "CGContextRestoreGState(${1:CGContextRef c})" },  
    { "trigger": "CGContextRetain", "contents": "CGContextRetain(${1:CGContextRef c})" },  
    { "trigger": "CGContextRotateCTM", "contents": "CGContextRotateCTM(${1:CGContextRef c}, ${2:CGFloat angle})" },  
    { "trigger": "CGContextSaveGState", "contents": "CGContextSaveGState(${1:CGContextRef c})" },  
    { "trigger": "CGContextScaleCTM", "contents": "CGContextScaleCTM(${1:CGContextRef c}, ${2:CGFloat sx}, ${3:CGFloat sy})" },  
    { "trigger": "CGContextSelectFont", "contents": "CGContextSelectFont(${1:CGContextRef c}, ${2:char* name}, ${3:CGFloat size}, ${4:CGTextEncoding textEncoding})" },  
    { "trigger": "CGContextSetAllowsAntialiasing", "contents": "CGContextSetAllowsAntialiasing(${1:CGContextRef context}, ${2:_Bool allowsAntialiasing})" },  
    { "trigger": "CGContextSetAllowsFontSmoothing", "contents": "CGContextSetAllowsFontSmoothing(${1:CGContextRef context}, ${2:_Bool allowsFontSmoothing})" },  
    { "trigger": "CGContextSetAllowsFontSubpixelPositioning", "contents": "CGContextSetAllowsFontSubpixelPositioning(${1:CGContextRef context}, ${2:_Bool allowsFontSubpixelPositioning})" },  
    { "trigger": "CGContextSetAllowsFontSubpixelQuantization", "contents": "CGContextSetAllowsFontSubpixelQuantization(${1:CGContextRef context}, ${2:_Bool allowsFontSubpixelQuantization})" },  
    { "trigger": "CGContextSetAlpha", "contents": "CGContextSetAlpha(${1:CGContextRef c}, ${2:CGFloat alpha})" },  
    { "trigger": "CGContextSetBlendMode", "contents": "CGContextSetBlendMode(${1:CGContextRef context}, ${2:CGBlendMode mode})" },  
    { "trigger": "CGContextSetCMYKFillColor", "contents": "CGContextSetCMYKFillColor(${1:CGContextRef context}, ${2:CGFloat cyan}, ${3:CGFloat magenta}, ${4:CGFloat yellow}, ${5:CGFloat black}, ${6:CGFloat alpha})" },  
    { "trigger": "CGContextSetCMYKStrokeColor", "contents": "CGContextSetCMYKStrokeColor(${1:CGContextRef context}, ${2:CGFloat cyan}, ${3:CGFloat magenta}, ${4:CGFloat yellow}, ${5:CGFloat black}, ${6:CGFloat alpha})" },  
    { "trigger": "CGContextSetCharacterSpacing", "contents": "CGContextSetCharacterSpacing(${1:CGContextRef context}, ${2:CGFloat spacing})" },  
    { "trigger": "CGContextSetFillColor", "contents": "CGContextSetFillColor(${1:CGContextRef context}, ${2:CGFloat* components})" },  
    { "trigger": "CGContextSetFillColorSpace", "contents": "CGContextSetFillColorSpace(${1:CGContextRef context}, ${2:CGColorSpaceRef space})" },  
    { "trigger": "CGContextSetFillColorWithColor", "contents": "CGContextSetFillColorWithColor(${1:CGContextRef c}, ${2:CGColorRef color})" },  
    { "trigger": "CGContextSetFillPattern", "contents": "CGContextSetFillPattern(${1:CGContextRef context}, ${2:CGPatternRef pattern}, ${3:CGFloat* components})" },  
    { "trigger": "CGContextSetFlatness", "contents": "CGContextSetFlatness(${1:CGContextRef c}, ${2:CGFloat flatness})" },  
    { "trigger": "CGContextSetFont", "contents": "CGContextSetFont(${1:CGContextRef c}, ${2:CGFontRef font})" },  
    { "trigger": "CGContextSetFontSize", "contents": "CGContextSetFontSize(${1:CGContextRef c}, ${2:CGFloat size})" },  
    { "trigger": "CGContextSetGrayFillColor", "contents": "CGContextSetGrayFillColor(${1:CGContextRef context}, ${2:CGFloat gray}, ${3:CGFloat alpha})" },  
    { "trigger": "CGContextSetGrayStrokeColor", "contents": "CGContextSetGrayStrokeColor(${1:CGContextRef context}, ${2:CGFloat gray}, ${3:CGFloat alpha})" },  
    { "trigger": "CGContextSetInterpolationQuality", "contents": "CGContextSetInterpolationQuality(${1:CGContextRef context}, ${2:CGInterpolationQuality quality})" },  
    { "trigger": "CGContextSetLineCap", "contents": "CGContextSetLineCap(${1:CGContextRef c}, ${2:CGLineCap cap})" },  
    { "trigger": "CGContextSetLineDash", "contents": "CGContextSetLineDash(${1:CGContextRef c}, ${2:CGFloat phase}, ${3:CGFloat* lengths}, ${4:size_t count})" },  
    { "trigger": "CGContextSetLineJoin", "contents": "CGContextSetLineJoin(${1:CGContextRef c}, ${2:CGLineJoin join})" },  
    { "trigger": "CGContextSetLineWidth", "contents": "CGContextSetLineWidth(${1:CGContextRef c}, ${2:CGFloat width})" },  
    { "trigger": "CGContextSetMiterLimit", "contents": "CGContextSetMiterLimit(${1:CGContextRef c}, ${2:CGFloat limit})" },  
    { "trigger": "CGContextSetPatternPhase", "contents": "CGContextSetPatternPhase(${1:CGContextRef context}, ${2:CGSize phase})" },  
    { "trigger": "CGContextSetRGBFillColor", "contents": "CGContextSetRGBFillColor(${1:CGContextRef context}, ${2:CGFloat red}, ${3:CGFloat green}, ${4:CGFloat blue}, ${5:CGFloat alpha})" },  
    { "trigger": "CGContextSetRGBStrokeColor", "contents": "CGContextSetRGBStrokeColor(${1:CGContextRef context}, ${2:CGFloat red}, ${3:CGFloat green}, ${4:CGFloat blue}, ${5:CGFloat alpha})" },  
    { "trigger": "CGContextSetRenderingIntent", "contents": "CGContextSetRenderingIntent(${1:CGContextRef context}, ${2:CGColorRenderingIntent intent})" },  
    { "trigger": "CGContextSetShadow", "contents": "CGContextSetShadow(${1:CGContextRef context}, ${2:CGSize offset}, ${3:CGFloat blur})" },  
    { "trigger": "CGContextSetShadowWithColor", "contents": "CGContextSetShadowWithColor(${1:CGContextRef context}, ${2:CGSize offset}, ${3:CGFloat blur}, ${4:CGColorRef color})" },  
    { "trigger": "CGContextSetShouldAntialias", "contents": "CGContextSetShouldAntialias(${1:CGContextRef context}, ${2:_Bool shouldAntialias})" },  
    { "trigger": "CGContextSetShouldSmoothFonts", "contents": "CGContextSetShouldSmoothFonts(${1:CGContextRef context}, ${2:_Bool shouldSmoothFonts})" },  
    { "trigger": "CGContextSetShouldSubpixelPositionFonts", "contents": "CGContextSetShouldSubpixelPositionFonts(${1:CGContextRef context}, ${2:_Bool shouldSubpixelPositionFonts})" },  
    { "trigger": "CGContextSetShouldSubpixelQuantizeFonts", "contents": "CGContextSetShouldSubpixelQuantizeFonts(${1:CGContextRef context}, ${2:_Bool shouldSubpixelQuantizeFonts})" },  
    { "trigger": "CGContextSetStrokeColor", "contents": "CGContextSetStrokeColor(${1:CGContextRef context}, ${2:CGFloat* components})" },  
    { "trigger": "CGContextSetStrokeColorSpace", "contents": "CGContextSetStrokeColorSpace(${1:CGContextRef context}, ${2:CGColorSpaceRef space})" },  
    { "trigger": "CGContextSetStrokeColorWithColor", "contents": "CGContextSetStrokeColorWithColor(${1:CGContextRef c}, ${2:CGColorRef color})" },  
    { "trigger": "CGContextSetStrokePattern", "contents": "CGContextSetStrokePattern(${1:CGContextRef context}, ${2:CGPatternRef pattern}, ${3:CGFloat* components})" },  
    { "trigger": "CGContextSetTextDrawingMode", "contents": "CGContextSetTextDrawingMode(${1:CGContextRef c}, ${2:CGTextDrawingMode mode})" },  
    { "trigger": "CGContextSetTextMatrix", "contents": "CGContextSetTextMatrix(${1:CGContextRef c}, ${2:CGAffineTransform t})" },  
    { "trigger": "CGContextSetTextPosition", "contents": "CGContextSetTextPosition(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y})" },  
    { "trigger": "CGContextShowGlyphs", "contents": "CGContextShowGlyphs(${1:CGContextRef c}, ${2:CGGlyph* g}, ${3:size_t count})" },  
    { "trigger": "CGContextShowGlyphsAtPoint", "contents": "CGContextShowGlyphsAtPoint(${1:CGContextRef context}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:CGGlyph* glyphs}, ${5:size_t count})" },  
    { "trigger": "CGContextShowGlyphsAtPositions", "contents": "CGContextShowGlyphsAtPositions(${1:CGContextRef context}, ${2:CGGlyph* glyphs}, ${3:CGPoint* positions}, ${4:size_t count})" },  
    { "trigger": "CGContextShowGlyphsWithAdvances", "contents": "CGContextShowGlyphsWithAdvances(${1:CGContextRef c}, ${2:CGGlyph* glyphs}, ${3:CGSize* advances}, ${4:size_t count})" },  
    { "trigger": "CGContextShowText", "contents": "CGContextShowText(${1:CGContextRef c}, ${2:char* string}, ${3:size_t length})" },  
    { "trigger": "CGContextShowTextAtPoint", "contents": "CGContextShowTextAtPoint(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:char* string}, ${5:size_t length})" },  
    { "trigger": "CGContextStrokeEllipseInRect", "contents": "CGContextStrokeEllipseInRect(${1:CGContextRef context}, ${2:CGRect rect})" },  
    { "trigger": "CGContextStrokeLineSegments", "contents": "CGContextStrokeLineSegments(${1:CGContextRef c}, ${2:CGPoint* points}, ${3:size_t count})" },  
    { "trigger": "CGContextStrokePath", "contents": "CGContextStrokePath(${1:CGContextRef c})" },  
    { "trigger": "CGContextStrokeRect", "contents": "CGContextStrokeRect(${1:CGContextRef c}, ${2:CGRect rect})" },  
    { "trigger": "CGContextStrokeRectWithWidth", "contents": "CGContextStrokeRectWithWidth(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGFloat width})" },  
    { "trigger": "CGContextSynchronize", "contents": "CGContextSynchronize(${1:CGContextRef c})" },  
    { "trigger": "CGContextTranslateCTM", "contents": "CGContextTranslateCTM(${1:CGContextRef c}, ${2:CGFloat tx}, ${3:CGFloat ty})" },  
    { "trigger": "CGDataConsumerCreate", "contents": "CGDataConsumerCreate(${1:void* info}, ${2:CGDataConsumerCallbacks* callbacks})" },  
    { "trigger": "CGDataConsumerCreateWithCFData", "contents": "CGDataConsumerCreateWithCFData(${1:CFMutableDataRef data})" },  
    { "trigger": "CGDataConsumerCreateWithURL", "contents": "CGDataConsumerCreateWithURL(${1:CFURLRef url})" },  
    { "trigger": "CGDataConsumerGetTypeID" },  
    { "trigger": "CGDataConsumerRelease", "contents": "CGDataConsumerRelease(${1:CGDataConsumerRef consumer})" },  
    { "trigger": "CGDataConsumerRetain", "contents": "CGDataConsumerRetain(${1:CGDataConsumerRef consumer})" },  
    { "trigger": "CGDataProviderCopyData", "contents": "CGDataProviderCopyData(${1:CGDataProviderRef provider})" },  
    { "trigger": "CGDataProviderCreateDirect", "contents": "CGDataProviderCreateDirect(${1:void* info}, ${2:off_t size}, ${3:CGDataProviderDirectCallbacks* callbacks})" },  
    { "trigger": "CGDataProviderCreateSequential", "contents": "CGDataProviderCreateSequential(${1:void* info}, ${2:CGDataProviderSequentialCallbacks* callbacks})" },  
    { "trigger": "CGDataProviderCreateWithCFData", "contents": "CGDataProviderCreateWithCFData(${1:CFDataRef data})" },  
    { "trigger": "CGDataProviderCreateWithData", "contents": "CGDataProviderCreateWithData(${1:void* info}, ${2:void* data}, ${3:size_t size}, ${4:CGDataProviderReleaseDataCallback releaseData})" },  
    { "trigger": "CGDataProviderCreateWithFilename", "contents": "CGDataProviderCreateWithFilename(${1:char* filename})" },  
    { "trigger": "CGDataProviderCreateWithURL", "contents": "CGDataProviderCreateWithURL(${1:CFURLRef url})" },  
    { "trigger": "CGDataProviderGetTypeID" },  
    { "trigger": "CGDataProviderRelease", "contents": "CGDataProviderRelease(${1:CGDataProviderRef provider})" },  
    { "trigger": "CGDataProviderRetain", "contents": "CGDataProviderRetain(${1:CGDataProviderRef provider})" },  
    { "trigger": "CGFLOAT_DEFINED (1)" },  
    { "trigger": "CGFLOAT_IS_DOUBLE (0)" },  
    { "trigger": "CGFontCanCreatePostScriptSubset", "contents": "CGFontCanCreatePostScriptSubset(${1:CGFontRef font}, ${2:CGFontPostScriptFormat format})" },  
    { "trigger": "CGFontCopyFullName", "contents": "CGFontCopyFullName(${1:CGFontRef font})" },  
    { "trigger": "CGFontCopyGlyphNameForGlyph", "contents": "CGFontCopyGlyphNameForGlyph(${1:CGFontRef font}, ${2:CGGlyph glyph})" },  
    { "trigger": "CGFontCopyPostScriptName", "contents": "CGFontCopyPostScriptName(${1:CGFontRef font})" },  
    { "trigger": "CGFontCopyTableForTag", "contents": "CGFontCopyTableForTag(${1:CGFontRef font}, ${2:uint32_t tag})" },  
    { "trigger": "CGFontCopyTableTags", "contents": "CGFontCopyTableTags(${1:CGFontRef font})" },  
    { "trigger": "CGFontCopyVariationAxes", "contents": "CGFontCopyVariationAxes(${1:CGFontRef font})" },  
    { "trigger": "CGFontCopyVariations", "contents": "CGFontCopyVariations(${1:CGFontRef font})" },  
    { "trigger": "CGFontCreateCopyWithVariations", "contents": "CGFontCreateCopyWithVariations(${1:CGFontRef font}, ${2:CFDictionaryRef variations})" },  
    { "trigger": "CGFontCreatePostScriptEncoding", "contents": "CGFontCreatePostScriptEncoding(${1:CGFontRef font}, ${2:CGGlyph* encoding})" },  
    { "trigger": "CGFontCreatePostScriptSubset", "contents": "CGFontCreatePostScriptSubset(${1:CGFontRef font}, ${2:CFStringRef subsetName}, ${3:CGFontPostScriptFormat format}, ${4:CGGlyph* glyphs}, ${5:size_t count}, ${6:CGGlyph* encoding})" },  
    { "trigger": "CGFontCreateWithDataProvider", "contents": "CGFontCreateWithDataProvider(${1:CGDataProviderRef provider})" },  
    { "trigger": "CGFontCreateWithFontName", "contents": "CGFontCreateWithFontName(${1:CFStringRef name})" },  
    { "trigger": "CGFontGetAscent", "contents": "CGFontGetAscent(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetCapHeight", "contents": "CGFontGetCapHeight(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetDescent", "contents": "CGFontGetDescent(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetFontBBox", "contents": "CGFontGetFontBBox(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetGlyphAdvances", "contents": "CGFontGetGlyphAdvances(${1:CGFontRef font}, ${2:CGGlyph* glyphs}, ${3:size_t count}, ${4:int* advances})" },  
    { "trigger": "CGFontGetGlyphBBoxes", "contents": "CGFontGetGlyphBBoxes(${1:CGFontRef font}, ${2:CGGlyph* glyphs}, ${3:size_t count}, ${4:CGRect* bboxes})" },  
    { "trigger": "CGFontGetGlyphWithGlyphName", "contents": "CGFontGetGlyphWithGlyphName(${1:CGFontRef font}, ${2:CFStringRef name})" },  
    { "trigger": "CGFontGetItalicAngle", "contents": "CGFontGetItalicAngle(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetLeading", "contents": "CGFontGetLeading(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetNumberOfGlyphs", "contents": "CGFontGetNumberOfGlyphs(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetStemV", "contents": "CGFontGetStemV(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetTypeID" },  
    { "trigger": "CGFontGetUnitsPerEm", "contents": "CGFontGetUnitsPerEm(${1:CGFontRef font})" },  
    { "trigger": "CGFontGetXHeight", "contents": "CGFontGetXHeight(${1:CGFontRef font})" },  
    { "trigger": "CGFontRelease", "contents": "CGFontRelease(${1:CGFontRef font})" },  
    { "trigger": "CGFontRetain", "contents": "CGFontRetain(${1:CGFontRef font})" },  
    { "trigger": "CGFunctionCreate", "contents": "CGFunctionCreate(${1:void* info}, ${2:size_t domainDimension}, ${3:CGFloat* domain}, ${4:size_t rangeDimension}, ${5:CGFloat* range}, ${6:CGFunctionCallbacks* callbacks})" },  
    { "trigger": "CGFunctionGetTypeID" },  
    { "trigger": "CGFunctionRelease", "contents": "CGFunctionRelease(${1:CGFunctionRef function})" },  
    { "trigger": "CGFunctionRetain", "contents": "CGFunctionRetain(${1:CGFunctionRef function})" },  
    { "trigger": "CGGlyphMax (65534)" },  
    { "trigger": "CGGlyphMin (0)" },  
    { "trigger": "CGGradientCreateWithColorComponents", "contents": "CGGradientCreateWithColorComponents(${1:CGColorSpaceRef space}, ${2:CGFloat* components}, ${3:CGFloat* locations}, ${4:size_t count})" },  
    { "trigger": "CGGradientCreateWithColors", "contents": "CGGradientCreateWithColors(${1:CGColorSpaceRef space}, ${2:CFArrayRef colors}, ${3:CGFloat* locations})" },  
    { "trigger": "CGGradientGetTypeID" },  
    { "trigger": "CGGradientRelease", "contents": "CGGradientRelease(${1:CGGradientRef gradient})" },  
    { "trigger": "CGGradientRetain", "contents": "CGGradientRetain(${1:CGGradientRef gradient})" },  
    { "trigger": "CGImage" },  
    { "trigger": "CGImageCreate", "contents": "CGImageCreate(${1:size_t width}, ${2:size_t height}, ${3:size_t bitsPerComponent}, ${4:size_t bitsPerPixel}, ${5:size_t bytesPerRow}, ${6:CGColorSpaceRef space}, ${7:CGBitmapInfo bitmapInfo}, ${8:CGDataProviderRef provider}, ${9:CGFloat* decode}, ${10:_Bool shouldInterpolate}, ${11:CGColorRenderingIntent intent})" },  
    { "trigger": "CGImageCreateCopy", "contents": "CGImageCreateCopy(${1:CGImageRef image})" },  
    { "trigger": "CGImageCreateCopyWithColorSpace", "contents": "CGImageCreateCopyWithColorSpace(${1:CGImageRef image}, ${2:CGColorSpaceRef space})" },  
    { "trigger": "CGImageCreateWithImageInRect", "contents": "CGImageCreateWithImageInRect(${1:CGImageRef image}, ${2:CGRect rect})" },  
    { "trigger": "CGImageCreateWithJPEGDataProvider", "contents": "CGImageCreateWithJPEGDataProvider(${1:CGDataProviderRef source}, ${2:CGFloat* decode}, ${3:_Bool shouldInterpolate}, ${4:CGColorRenderingIntent intent})" },  
    { "trigger": "CGImageCreateWithMask", "contents": "CGImageCreateWithMask(${1:CGImageRef image}, ${2:CGImageRef mask})" },  
    { "trigger": "CGImageCreateWithMaskingColors", "contents": "CGImageCreateWithMaskingColors(${1:CGImageRef image}, ${2:CGFloat* components})" },  
    { "trigger": "CGImageCreateWithPNGDataProvider", "contents": "CGImageCreateWithPNGDataProvider(${1:CGDataProviderRef source}, ${2:CGFloat* decode}, ${3:_Bool shouldInterpolate}, ${4:CGColorRenderingIntent intent})" },  
    { "trigger": "CGImageDestinationAddImage", "contents": "CGImageDestinationAddImage(${1:CGImageDestinationRef idst}, ${2:CGImageRef image}, ${3:CFDictionaryRef properties})" },  
    { "trigger": "CGImageDestinationAddImageFromSource", "contents": "CGImageDestinationAddImageFromSource(${1:CGImageDestinationRef idst}, ${2:CGImageSourceRef isrc}, ${3:size_t index}, ${4:CFDictionaryRef properties})" },  
    { "trigger": "CGImageDestinationCopyTypeIdentifiers" },  
    { "trigger": "CGImageDestinationCreateWithData", "contents": "CGImageDestinationCreateWithData(${1:CFMutableDataRef data}, ${2:CFStringRef type}, ${3:size_t count}, ${4:CFDictionaryRef options})" },  
    { "trigger": "CGImageDestinationCreateWithDataConsumer", "contents": "CGImageDestinationCreateWithDataConsumer(${1:CGDataConsumerRef consumer}, ${2:CFStringRef type}, ${3:size_t count}, ${4:CFDictionaryRef options})" },  
    { "trigger": "CGImageDestinationCreateWithURL", "contents": "CGImageDestinationCreateWithURL(${1:CFURLRef url}, ${2:CFStringRef type}, ${3:size_t count}, ${4:CFDictionaryRef options})" },  
    { "trigger": "CGImageDestinationFinalize", "contents": "CGImageDestinationFinalize(${1:CGImageDestinationRef idst})" },  
    { "trigger": "CGImageDestinationGetTypeID" },  
    { "trigger": "CGImageDestinationSetProperties", "contents": "CGImageDestinationSetProperties(${1:CGImageDestinationRef idst}, ${2:CFDictionaryRef properties})" },  
    { "trigger": "CGImageGetAlphaInfo", "contents": "CGImageGetAlphaInfo(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetBitmapInfo", "contents": "CGImageGetBitmapInfo(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetBitsPerComponent", "contents": "CGImageGetBitsPerComponent(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetBitsPerPixel", "contents": "CGImageGetBitsPerPixel(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetBytesPerRow", "contents": "CGImageGetBytesPerRow(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetColorSpace", "contents": "CGImageGetColorSpace(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetDataProvider", "contents": "CGImageGetDataProvider(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetDecode", "contents": "CGImageGetDecode(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetHeight", "contents": "CGImageGetHeight(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetRenderingIntent", "contents": "CGImageGetRenderingIntent(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetShouldInterpolate", "contents": "CGImageGetShouldInterpolate(${1:CGImageRef image})" },  
    { "trigger": "CGImageGetTypeID" },  
    { "trigger": "CGImageGetWidth", "contents": "CGImageGetWidth(${1:CGImageRef image})" },  
    { "trigger": "CGImageIsMask", "contents": "CGImageIsMask(${1:CGImageRef image})" },  
    { "trigger": "CGImageMaskCreate", "contents": "CGImageMaskCreate(${1:size_t width}, ${2:size_t height}, ${3:size_t bitsPerComponent}, ${4:size_t bitsPerPixel}, ${5:size_t bytesPerRow}, ${6:CGDataProviderRef provider}, ${7:CGFloat* decode}, ${8:_Bool shouldInterpolate})" },  
    { "trigger": "CGImageRelease", "contents": "CGImageRelease(${1:CGImageRef image})" },  
    { "trigger": "CGImageRetain", "contents": "CGImageRetain(${1:CGImageRef image})" },  
    { "trigger": "CGImageSourceCopyProperties", "contents": "CGImageSourceCopyProperties(${1:CGImageSourceRef isrc}, ${2:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCopyPropertiesAtIndex", "contents": "CGImageSourceCopyPropertiesAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index}, ${3:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCopyTypeIdentifiers" },  
    { "trigger": "CGImageSourceCreateImageAtIndex", "contents": "CGImageSourceCreateImageAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index}, ${3:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCreateIncremental", "contents": "CGImageSourceCreateIncremental(${1:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCreateThumbnailAtIndex", "contents": "CGImageSourceCreateThumbnailAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index}, ${3:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCreateWithData", "contents": "CGImageSourceCreateWithData(${1:CFDataRef data}, ${2:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCreateWithDataProvider", "contents": "CGImageSourceCreateWithDataProvider(${1:CGDataProviderRef provider}, ${2:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceCreateWithURL", "contents": "CGImageSourceCreateWithURL(${1:CFURLRef url}, ${2:CFDictionaryRef options})" },  
    { "trigger": "CGImageSourceGetCount", "contents": "CGImageSourceGetCount(${1:CGImageSourceRef isrc})" },  
    { "trigger": "CGImageSourceGetStatus", "contents": "CGImageSourceGetStatus(${1:CGImageSourceRef isrc})" },  
    { "trigger": "CGImageSourceGetStatusAtIndex", "contents": "CGImageSourceGetStatusAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index})" },  
    { "trigger": "CGImageSourceGetType", "contents": "CGImageSourceGetType(${1:CGImageSourceRef isrc})" },  
    { "trigger": "CGImageSourceGetTypeID" },  
    { "trigger": "CGImageSourceUpdateData", "contents": "CGImageSourceUpdateData(${1:CGImageSourceRef isrc}, ${2:CFDataRef data}, ${3:_Bool final})" },  
    { "trigger": "CGImageSourceUpdateDataProvider", "contents": "CGImageSourceUpdateDataProvider(${1:CGImageSourceRef isrc}, ${2:CGDataProviderRef provider}, ${3:_Bool final})" },  
    { "trigger": "CGImageWithOptions:", "contents": "CGImageWithOptions:(${1:NSDictionary* options})" },  
    { "trigger": "CGLayerCreateWithContext", "contents": "CGLayerCreateWithContext(${1:CGContextRef context}, ${2:CGSize size}, ${3:CFDictionaryRef auxiliaryInfo})" },  
    { "trigger": "CGLayerGetContext", "contents": "CGLayerGetContext(${1:CGLayerRef layer})" },  
    { "trigger": "CGLayerGetSize", "contents": "CGLayerGetSize(${1:CGLayerRef layer})" },  
    { "trigger": "CGLayerGetTypeID" },  
    { "trigger": "CGLayerRelease", "contents": "CGLayerRelease(${1:CGLayerRef layer})" },  
    { "trigger": "CGLayerRetain", "contents": "CGLayerRetain(${1:CGLayerRef layer})" },  
    { "trigger": "CGPDFArrayGetArray", "contents": "CGPDFArrayGetArray(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFArrayRef* value})" },  
    { "trigger": "CGPDFArrayGetBoolean", "contents": "CGPDFArrayGetBoolean(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFBoolean* value})" },  
    { "trigger": "CGPDFArrayGetCount", "contents": "CGPDFArrayGetCount(${1:CGPDFArrayRef array})" },  
    { "trigger": "CGPDFArrayGetDictionary", "contents": "CGPDFArrayGetDictionary(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFDictionaryRef* value})" },  
    { "trigger": "CGPDFArrayGetInteger", "contents": "CGPDFArrayGetInteger(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFInteger* value})" },  
    { "trigger": "CGPDFArrayGetName", "contents": "CGPDFArrayGetName(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:char** value})" },  
    { "trigger": "CGPDFArrayGetNull", "contents": "CGPDFArrayGetNull(${1:CGPDFArrayRef array}, ${2:size_t index})" },  
    { "trigger": "CGPDFArrayGetNumber", "contents": "CGPDFArrayGetNumber(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFReal* value})" },  
    { "trigger": "CGPDFArrayGetObject", "contents": "CGPDFArrayGetObject(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFObjectRef* value})" },  
    { "trigger": "CGPDFArrayGetStream", "contents": "CGPDFArrayGetStream(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFStreamRef* value})" },  
    { "trigger": "CGPDFArrayGetString", "contents": "CGPDFArrayGetString(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFStringRef* value})" },  
    { "trigger": "CGPDFContentStreamCreateWithPage", "contents": "CGPDFContentStreamCreateWithPage(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFContentStreamCreateWithStream", "contents": "CGPDFContentStreamCreateWithStream(${1:CGPDFStreamRef stream}, ${2:CGPDFDictionaryRef streamResources}, ${3:CGPDFContentStreamRef parent})" },  
    { "trigger": "CGPDFContentStreamGetResource", "contents": "CGPDFContentStreamGetResource(${1:CGPDFContentStreamRef cs}, ${2:char* category}, ${3:char* name})" },  
    { "trigger": "CGPDFContentStreamGetStreams", "contents": "CGPDFContentStreamGetStreams(${1:CGPDFContentStreamRef cs})" },  
    { "trigger": "CGPDFContentStreamRelease", "contents": "CGPDFContentStreamRelease(${1:CGPDFContentStreamRef cs})" },  
    { "trigger": "CGPDFContentStreamRetain", "contents": "CGPDFContentStreamRetain(${1:CGPDFContentStreamRef cs})" },  
    { "trigger": "CGPDFContextAddDestinationAtPoint", "contents": "CGPDFContextAddDestinationAtPoint(${1:CGContextRef context}, ${2:CFStringRef name}, ${3:CGPoint point})" },  
    { "trigger": "CGPDFContextAddDocumentMetadata", "contents": "CGPDFContextAddDocumentMetadata(${1:CGContextRef context}, ${2:CFDataRef metadata})" },  
    { "trigger": "CGPDFContextBeginPage", "contents": "CGPDFContextBeginPage(${1:CGContextRef context}, ${2:CFDictionaryRef pageInfo})" },  
    { "trigger": "CGPDFContextClose", "contents": "CGPDFContextClose(${1:CGContextRef context})" },  
    { "trigger": "CGPDFContextCreate", "contents": "CGPDFContextCreate(${1:CGDataConsumerRef consumer}, ${2:CGRect* mediaBox}, ${3:CFDictionaryRef auxiliaryInfo})" },  
    { "trigger": "CGPDFContextCreateWithURL", "contents": "CGPDFContextCreateWithURL(${1:CFURLRef url}, ${2:CGRect* mediaBox}, ${3:CFDictionaryRef auxiliaryInfo})" },  
    { "trigger": "CGPDFContextEndPage", "contents": "CGPDFContextEndPage(${1:CGContextRef context})" },  
    { "trigger": "CGPDFContextSetDestinationForRect", "contents": "CGPDFContextSetDestinationForRect(${1:CGContextRef context}, ${2:CFStringRef name}, ${3:CGRect rect})" },  
    { "trigger": "CGPDFContextSetURLForRect", "contents": "CGPDFContextSetURLForRect(${1:CGContextRef context}, ${2:CFURLRef url}, ${3:CGRect rect})" },  
    { "trigger": "CGPDFDataFormatJPEG2000 (2)" },  
    { "trigger": "CGPDFDataFormatJPEGEncoded (1)" },  
    { "trigger": "CGPDFDataFormatRaw (0)" },  
    { "trigger": "CGPDFDictionaryApplyFunction", "contents": "CGPDFDictionaryApplyFunction(${1:CGPDFDictionaryRef dict}, ${2:CGPDFDictionaryApplierFunction function}, ${3:void* info})" },  
    { "trigger": "CGPDFDictionaryGetArray", "contents": "CGPDFDictionaryGetArray(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFArrayRef* value})" },  
    { "trigger": "CGPDFDictionaryGetBoolean", "contents": "CGPDFDictionaryGetBoolean(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFBoolean* value})" },  
    { "trigger": "CGPDFDictionaryGetCount", "contents": "CGPDFDictionaryGetCount(${1:CGPDFDictionaryRef dict})" },  
    { "trigger": "CGPDFDictionaryGetDictionary", "contents": "CGPDFDictionaryGetDictionary(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFDictionaryRef* value})" },  
    { "trigger": "CGPDFDictionaryGetInteger", "contents": "CGPDFDictionaryGetInteger(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFInteger* value})" },  
    { "trigger": "CGPDFDictionaryGetName", "contents": "CGPDFDictionaryGetName(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:char** value})" },  
    { "trigger": "CGPDFDictionaryGetNumber", "contents": "CGPDFDictionaryGetNumber(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFReal* value})" },  
    { "trigger": "CGPDFDictionaryGetObject", "contents": "CGPDFDictionaryGetObject(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFObjectRef* value})" },  
    { "trigger": "CGPDFDictionaryGetStream", "contents": "CGPDFDictionaryGetStream(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFStreamRef* value})" },  
    { "trigger": "CGPDFDictionaryGetString", "contents": "CGPDFDictionaryGetString(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFStringRef* value})" },  
    { "trigger": "CGPDFDocumentAllowsCopying", "contents": "CGPDFDocumentAllowsCopying(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentAllowsPrinting", "contents": "CGPDFDocumentAllowsPrinting(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentCreateWithProvider", "contents": "CGPDFDocumentCreateWithProvider(${1:CGDataProviderRef provider})" },  
    { "trigger": "CGPDFDocumentCreateWithURL", "contents": "CGPDFDocumentCreateWithURL(${1:CFURLRef url})" },  
    { "trigger": "CGPDFDocumentGetCatalog", "contents": "CGPDFDocumentGetCatalog(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentGetID", "contents": "CGPDFDocumentGetID(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentGetInfo", "contents": "CGPDFDocumentGetInfo(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentGetNumberOfPages", "contents": "CGPDFDocumentGetNumberOfPages(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentGetPage", "contents": "CGPDFDocumentGetPage(${1:CGPDFDocumentRef document}, ${2:size_t pageNumber})" },  
    { "trigger": "CGPDFDocumentGetTypeID" },  
    { "trigger": "CGPDFDocumentGetVersion", "contents": "CGPDFDocumentGetVersion(${1:CGPDFDocumentRef document}, ${2:int* majorVersion}, ${3:int* minorVersion})" },  
    { "trigger": "CGPDFDocumentIsEncrypted", "contents": "CGPDFDocumentIsEncrypted(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentIsUnlocked", "contents": "CGPDFDocumentIsUnlocked(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentRelease", "contents": "CGPDFDocumentRelease(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentRetain", "contents": "CGPDFDocumentRetain(${1:CGPDFDocumentRef document})" },  
    { "trigger": "CGPDFDocumentUnlockWithPassword", "contents": "CGPDFDocumentUnlockWithPassword(${1:CGPDFDocumentRef document}, ${2:char* password})" },  
    { "trigger": "CGPDFObjectGetType", "contents": "CGPDFObjectGetType(${1:CGPDFObjectRef object})" },  
    { "trigger": "CGPDFObjectGetValue", "contents": "CGPDFObjectGetValue(${1:CGPDFObjectRef object}, ${2:CGPDFObjectType type}, ${3:void* value})" },  
    { "trigger": "CGPDFOperatorTableCreate" },  
    { "trigger": "CGPDFOperatorTableRelease", "contents": "CGPDFOperatorTableRelease(${1:CGPDFOperatorTableRef table})" },  
    { "trigger": "CGPDFOperatorTableRetain", "contents": "CGPDFOperatorTableRetain(${1:CGPDFOperatorTableRef table})" },  
    { "trigger": "CGPDFOperatorTableSetCallback", "contents": "CGPDFOperatorTableSetCallback(${1:CGPDFOperatorTableRef table}, ${2:char* name}, ${3:CGPDFOperatorCallback callback})" },  
    { "trigger": "CGPDFPageGetBoxRect", "contents": "CGPDFPageGetBoxRect(${1:CGPDFPageRef page}, ${2:CGPDFBox box})" },  
    { "trigger": "CGPDFPageGetDictionary", "contents": "CGPDFPageGetDictionary(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFPageGetDocument", "contents": "CGPDFPageGetDocument(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFPageGetDrawingTransform", "contents": "CGPDFPageGetDrawingTransform(${1:CGPDFPageRef page}, ${2:CGPDFBox box}, ${3:CGRect rect}, ${4:int rotate}, ${5:_Bool preserveAspectRatio})" },  
    { "trigger": "CGPDFPageGetPageNumber", "contents": "CGPDFPageGetPageNumber(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFPageGetRotationAngle", "contents": "CGPDFPageGetRotationAngle(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFPageGetTypeID" },  
    { "trigger": "CGPDFPageRelease", "contents": "CGPDFPageRelease(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFPageRetain", "contents": "CGPDFPageRetain(${1:CGPDFPageRef page})" },  
    { "trigger": "CGPDFScannerCreate", "contents": "CGPDFScannerCreate(${1:CGPDFContentStreamRef cs}, ${2:CGPDFOperatorTableRef table}, ${3:void* info})" },  
    { "trigger": "CGPDFScannerGetContentStream", "contents": "CGPDFScannerGetContentStream(${1:CGPDFScannerRef scanner})" },  
    { "trigger": "CGPDFScannerPopArray", "contents": "CGPDFScannerPopArray(${1:CGPDFScannerRef scanner}, ${2:CGPDFArrayRef* value})" },  
    { "trigger": "CGPDFScannerPopBoolean", "contents": "CGPDFScannerPopBoolean(${1:CGPDFScannerRef scanner}, ${2:CGPDFBoolean* value})" },  
    { "trigger": "CGPDFScannerPopDictionary", "contents": "CGPDFScannerPopDictionary(${1:CGPDFScannerRef scanner}, ${2:CGPDFDictionaryRef* value})" },  
    { "trigger": "CGPDFScannerPopInteger", "contents": "CGPDFScannerPopInteger(${1:CGPDFScannerRef scanner}, ${2:CGPDFInteger* value})" },  
    { "trigger": "CGPDFScannerPopName", "contents": "CGPDFScannerPopName(${1:CGPDFScannerRef scanner}, ${2:char** value})" },  
    { "trigger": "CGPDFScannerPopNumber", "contents": "CGPDFScannerPopNumber(${1:CGPDFScannerRef scanner}, ${2:CGPDFReal* value})" },  
    { "trigger": "CGPDFScannerPopObject", "contents": "CGPDFScannerPopObject(${1:CGPDFScannerRef scanner}, ${2:CGPDFObjectRef* value})" },  
    { "trigger": "CGPDFScannerPopStream", "contents": "CGPDFScannerPopStream(${1:CGPDFScannerRef scanner}, ${2:CGPDFStreamRef* value})" },  
    { "trigger": "CGPDFScannerPopString", "contents": "CGPDFScannerPopString(${1:CGPDFScannerRef scanner}, ${2:CGPDFStringRef* value})" },  
    { "trigger": "CGPDFScannerRelease", "contents": "CGPDFScannerRelease(${1:CGPDFScannerRef scanner})" },  
    { "trigger": "CGPDFScannerRetain", "contents": "CGPDFScannerRetain(${1:CGPDFScannerRef scanner})" },  
    { "trigger": "CGPDFScannerScan", "contents": "CGPDFScannerScan(${1:CGPDFScannerRef scanner})" },  
    { "trigger": "CGPDFStreamCopyData", "contents": "CGPDFStreamCopyData(${1:CGPDFStreamRef stream}, ${2:CGPDFDataFormat* format})" },  
    { "trigger": "CGPDFStreamGetDictionary", "contents": "CGPDFStreamGetDictionary(${1:CGPDFStreamRef stream})" },  
    { "trigger": "CGPDFStringCopyDate", "contents": "CGPDFStringCopyDate(${1:CGPDFStringRef string})" },  
    { "trigger": "CGPDFStringCopyTextString", "contents": "CGPDFStringCopyTextString(${1:CGPDFStringRef string})" },  
    { "trigger": "CGPDFStringGetBytePtr", "contents": "CGPDFStringGetBytePtr(${1:CGPDFStringRef string})" },  
    { "trigger": "CGPDFStringGetLength", "contents": "CGPDFStringGetLength(${1:CGPDFStringRef string})" },  
    { "trigger": "CGPath" },  
    { "trigger": "CGPathAddArc", "contents": "CGPathAddArc(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x}, ${4:CGFloat y}, ${5:CGFloat radius}, ${6:CGFloat startAngle}, ${7:CGFloat endAngle}, ${8:_Bool clockwise})" },  
    { "trigger": "CGPathAddArcToPoint", "contents": "CGPathAddArcToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x1}, ${4:CGFloat y1}, ${5:CGFloat x2}, ${6:CGFloat y2}, ${7:CGFloat radius})" },  
    { "trigger": "CGPathAddCurveToPoint", "contents": "CGPathAddCurveToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat cp1x}, ${4:CGFloat cp1y}, ${5:CGFloat cp2x}, ${6:CGFloat cp2y}, ${7:CGFloat x}, ${8:CGFloat y})" },  
    { "trigger": "CGPathAddEllipseInRect", "contents": "CGPathAddEllipseInRect(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGRect rect})" },  
    { "trigger": "CGPathAddLineToPoint", "contents": "CGPathAddLineToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x}, ${4:CGFloat y})" },  
    { "trigger": "CGPathAddLines", "contents": "CGPathAddLines(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGPoint* points}, ${4:size_t count})" },  
    { "trigger": "CGPathAddPath", "contents": "CGPathAddPath(${1:CGMutablePathRef path1}, ${2:CGAffineTransform* m}, ${3:CGPathRef path2})" },  
    { "trigger": "CGPathAddQuadCurveToPoint", "contents": "CGPathAddQuadCurveToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat cpx}, ${4:CGFloat cpy}, ${5:CGFloat x}, ${6:CGFloat y})" },  
    { "trigger": "CGPathAddRect", "contents": "CGPathAddRect(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGRect rect})" },  
    { "trigger": "CGPathAddRects", "contents": "CGPathAddRects(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGRect* rects}, ${4:size_t count})" },  
    { "trigger": "CGPathAddRelativeArc", "contents": "CGPathAddRelativeArc(${1:CGMutablePathRef path}, ${2:CGAffineTransform* matrix}, ${3:CGFloat x}, ${4:CGFloat y}, ${5:CGFloat radius}, ${6:CGFloat startAngle}, ${7:CGFloat delta})" },  
    { "trigger": "CGPathApply", "contents": "CGPathApply(${1:CGPathRef path}, ${2:void* info}, ${3:CGPathApplierFunction function})" },  
    { "trigger": "CGPathCloseSubpath", "contents": "CGPathCloseSubpath(${1:CGMutablePathRef path})" },  
    { "trigger": "CGPathContainsPoint", "contents": "CGPathContainsPoint(${1:CGPathRef path}, ${2:CGAffineTransform* m}, ${3:CGPoint point}, ${4:_Bool eoFill})" },  
    { "trigger": "CGPathCreateCopy", "contents": "CGPathCreateCopy(${1:CGPathRef path})" },  
    { "trigger": "CGPathCreateCopyByDashingPath", "contents": "CGPathCreateCopyByDashingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform}, ${3:CGFloat phase}, ${4:CGFloat* lengths}, ${5:size_t count})" },  
    { "trigger": "CGPathCreateCopyByStrokingPath", "contents": "CGPathCreateCopyByStrokingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform}, ${3:CGFloat lineWidth}, ${4:CGLineCap lineCap}, ${5:CGLineJoin lineJoin}, ${6:CGFloat miterLimit})" },  
    { "trigger": "CGPathCreateCopyByTransformingPath", "contents": "CGPathCreateCopyByTransformingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform})" },  
    { "trigger": "CGPathCreateMutable" },  
    { "trigger": "CGPathCreateMutableCopy", "contents": "CGPathCreateMutableCopy(${1:CGPathRef path})" },  
    { "trigger": "CGPathCreateMutableCopyByTransformingPath", "contents": "CGPathCreateMutableCopyByTransformingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform})" },  
    { "trigger": "CGPathCreateWithEllipseInRect", "contents": "CGPathCreateWithEllipseInRect(${1:CGRect rect}, ${2:CGAffineTransform* transform})" },  
    { "trigger": "CGPathCreateWithRect", "contents": "CGPathCreateWithRect(${1:CGRect rect}, ${2:CGAffineTransform* transform})" },  
    { "trigger": "CGPathEqualToPath", "contents": "CGPathEqualToPath(${1:CGPathRef path1}, ${2:CGPathRef path2})" },  
    { "trigger": "CGPathGetBoundingBox", "contents": "CGPathGetBoundingBox(${1:CGPathRef path})" },  
    { "trigger": "CGPathGetCurrentPoint", "contents": "CGPathGetCurrentPoint(${1:CGPathRef path})" },  
    { "trigger": "CGPathGetPathBoundingBox", "contents": "CGPathGetPathBoundingBox(${1:CGPathRef path})" },  
    { "trigger": "CGPathGetTypeID" },  
    { "trigger": "CGPathIsEmpty", "contents": "CGPathIsEmpty(${1:CGPathRef path})" },  
    { "trigger": "CGPathIsRect", "contents": "CGPathIsRect(${1:CGPathRef path}, ${2:CGRect* rect})" },  
    { "trigger": "CGPathMoveToPoint", "contents": "CGPathMoveToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x}, ${4:CGFloat y})" },  
    { "trigger": "CGPathRelease", "contents": "CGPathRelease(${1:CGPathRef path})" },  
    { "trigger": "CGPathRetain", "contents": "CGPathRetain(${1:CGPathRef path})" },  
    { "trigger": "CGPatternCreate", "contents": "CGPatternCreate(${1:void* info}, ${2:CGRect bounds}, ${3:CGAffineTransform matrix}, ${4:CGFloat xStep}, ${5:CGFloat yStep}, ${6:CGPatternTiling tiling}, ${7:_Bool isColored}, ${8:CGPatternCallbacks* callbacks})" },  
    { "trigger": "CGPatternGetTypeID" },  
    { "trigger": "CGPatternRelease", "contents": "CGPatternRelease(${1:CGPatternRef pattern})" },  
    { "trigger": "CGPatternRetain", "contents": "CGPatternRetain(${1:CGPatternRef pattern})" },  
    { "trigger": "CGPointApplyAffineTransform", "contents": "CGPointApplyAffineTransform(${1:CGPoint point}, ${2:CGAffineTransform t})" },  
    { "trigger": "CGPointCreateDictionaryRepresentation", "contents": "CGPointCreateDictionaryRepresentation(${1:CGPoint point})" },  
    { "trigger": "CGPointEqualToPoint", "contents": "CGPointEqualToPoint(${1:CGPoint point1}, ${2:CGPoint point2})" },  
    { "trigger": "CGPointFromString", "contents": "CGPointFromString(${1:NSString* string})" },  
    { "trigger": "CGPointMake", "contents": "CGPointMake(${1:CGFloat x}, ${2:CGFloat y})" },  
    { "trigger": "CGPointMakeWithDictionaryRepresentation", "contents": "CGPointMakeWithDictionaryRepresentation(${1:CFDictionaryRef dict}, ${2:CGPoint* point})" },  
    { "trigger": "CGPointValue" },  
    { "trigger": "CGPointValue" },  
    { "trigger": "CGPointZero (CGPoint)" },  
    { "trigger": "CGRectApplyAffineTransform", "contents": "CGRectApplyAffineTransform(${1:CGRect rect}, ${2:CGAffineTransform t})" },  
    { "trigger": "CGRectContainsPoint", "contents": "CGRectContainsPoint(${1:CGRect rect}, ${2:CGPoint point})" },  
    { "trigger": "CGRectContainsRect", "contents": "CGRectContainsRect(${1:CGRect rect1}, ${2:CGRect rect2})" },  
    { "trigger": "CGRectCreateDictionaryRepresentation", "contents": "CGRectCreateDictionaryRepresentation(${1:CGRect })" },  
    { "trigger": "CGRectDivide", "contents": "CGRectDivide(${1:CGRect rect}, ${2:CGRect* slice}, ${3:CGRect* remainder}, ${4:CGFloat amount}, ${5:CGRectEdge edge})" },  
    { "trigger": "CGRectEqualToRect", "contents": "CGRectEqualToRect(${1:CGRect rect1}, ${2:CGRect rect2})" },  
    { "trigger": "CGRectFromString", "contents": "CGRectFromString(${1:NSString* string})" },  
    { "trigger": "CGRectGetHeight", "contents": "CGRectGetHeight(${1:CGRect rect})" },  
    { "trigger": "CGRectGetMaxX", "contents": "CGRectGetMaxX(${1:CGRect rect})" },  
    { "trigger": "CGRectGetMaxY", "contents": "CGRectGetMaxY(${1:CGRect rect})" },  
    { "trigger": "CGRectGetMidX", "contents": "CGRectGetMidX(${1:CGRect rect})" },  
    { "trigger": "CGRectGetMidY", "contents": "CGRectGetMidY(${1:CGRect rect})" },  
    { "trigger": "CGRectGetMinX", "contents": "CGRectGetMinX(${1:CGRect rect})" },  
    { "trigger": "CGRectGetMinY", "contents": "CGRectGetMinY(${1:CGRect rect})" },  
    { "trigger": "CGRectGetWidth", "contents": "CGRectGetWidth(${1:CGRect rect})" },  
    { "trigger": "CGRectInfinite (CGRect)" },  
    { "trigger": "CGRectInset", "contents": "CGRectInset(${1:CGRect rect}, ${2:CGFloat dx}, ${3:CGFloat dy})" },  
    { "trigger": "CGRectIntegral", "contents": "CGRectIntegral(${1:CGRect rect})" },  
    { "trigger": "CGRectIntersection", "contents": "CGRectIntersection(${1:CGRect r1}, ${2:CGRect r2})" },  
    { "trigger": "CGRectIntersectsRect", "contents": "CGRectIntersectsRect(${1:CGRect rect1}, ${2:CGRect rect2})" },  
    { "trigger": "CGRectIsEmpty", "contents": "CGRectIsEmpty(${1:CGRect rect})" },  
    { "trigger": "CGRectIsInfinite", "contents": "CGRectIsInfinite(${1:CGRect rect})" },  
    { "trigger": "CGRectIsNull", "contents": "CGRectIsNull(${1:CGRect rect})" },  
    { "trigger": "CGRectMake", "contents": "CGRectMake(${1:CGFloat x}, ${2:CGFloat y}, ${3:CGFloat width}, ${4:CGFloat height})" },  
    { "trigger": "CGRectMakeWithDictionaryRepresentation", "contents": "CGRectMakeWithDictionaryRepresentation(${1:CFDictionaryRef dict}, ${2:CGRect* rect})" },  
    { "trigger": "CGRectMaxXEdge (2)" },  
    { "trigger": "CGRectMaxYEdge (3)" },  
    { "trigger": "CGRectMinXEdge (0)" },  
    { "trigger": "CGRectMinYEdge (1)" },  
    { "trigger": "CGRectNull (CGRect)" },  
    { "trigger": "CGRectOffset", "contents": "CGRectOffset(${1:CGRect rect}, ${2:CGFloat dx}, ${3:CGFloat dy})" },  
    { "trigger": "CGRectStandardize", "contents": "CGRectStandardize(${1:CGRect rect})" },  
    { "trigger": "CGRectUnion", "contents": "CGRectUnion(${1:CGRect r1}, ${2:CGRect r2})" },  
    { "trigger": "CGRectValue" },  
    { "trigger": "CGRectValue" },  
    { "trigger": "CGRectZero (CGRect)" },  
    { "trigger": "CGShadingCreateAxial", "contents": "CGShadingCreateAxial(${1:CGColorSpaceRef space}, ${2:CGPoint start}, ${3:CGPoint end}, ${4:CGFunctionRef function}, ${5:_Bool extendStart}, ${6:_Bool extendEnd})" },  
    { "trigger": "CGShadingCreateRadial", "contents": "CGShadingCreateRadial(${1:CGColorSpaceRef space}, ${2:CGPoint start}, ${3:CGFloat startRadius}, ${4:CGPoint end}, ${5:CGFloat endRadius}, ${6:CGFunctionRef function}, ${7:_Bool extendStart}, ${8:_Bool extendEnd})" },  
    { "trigger": "CGShadingGetTypeID" },  
    { "trigger": "CGShadingRelease", "contents": "CGShadingRelease(${1:CGShadingRef shading})" },  
    { "trigger": "CGShadingRetain", "contents": "CGShadingRetain(${1:CGShadingRef shading})" },  
    { "trigger": "CGSizeApplyAffineTransform", "contents": "CGSizeApplyAffineTransform(${1:CGSize size}, ${2:CGAffineTransform t})" },  
    { "trigger": "CGSizeCreateDictionaryRepresentation", "contents": "CGSizeCreateDictionaryRepresentation(${1:CGSize size})" },  
    { "trigger": "CGSizeEqualToSize", "contents": "CGSizeEqualToSize(${1:CGSize size1}, ${2:CGSize size2})" },  
    { "trigger": "CGSizeFromString", "contents": "CGSizeFromString(${1:NSString* string})" },  
    { "trigger": "CGSizeMake", "contents": "CGSizeMake(${1:CGFloat width}, ${2:CGFloat height})" },  
    { "trigger": "CGSizeMakeWithDictionaryRepresentation", "contents": "CGSizeMakeWithDictionaryRepresentation(${1:CFDictionaryRef dict}, ${2:CGSize* size})" },  
    { "trigger": "CGSizeValue" },  
    { "trigger": "CGSizeZero (CGSize)" },  
    { "trigger": "CIColor" },  
    { "trigger": "CIColor" },  
    { "trigger": "CIColor" },  
    { "trigger": "CIColor.colorWithCGColor:", "contents": "CIColor.colorWithCGColor:(${1:CGColorRef c})" },  
    { "trigger": "CIColor.colorWithRed:green:blue:", "contents": "CIColor.colorWithRed:green:blue:(${1:CGFloat r}, green:${2:CGFloat g}, blue:${3:CGFloat b})" },  
    { "trigger": "CIColor.colorWithRed:green:blue:alpha:", "contents": "CIColor.colorWithRed:green:blue:alpha:(${1:CGFloat r}, green:${2:CGFloat g}, blue:${3:CGFloat b}, alpha:${4:CGFloat a})" },  
    { "trigger": "CIColor.colorWithString:", "contents": "CIColor.colorWithString:(${1:NSString* representation})" },  
    { "trigger": "CIContext" },  
    { "trigger": "CIContext.contextWithEAGLContext:", "contents": "CIContext.contextWithEAGLContext:(${1:EAGLContext* eaglContext})" },  
    { "trigger": "CIContext.contextWithEAGLContext:options:", "contents": "CIContext.contextWithEAGLContext:options:(${1:EAGLContext* eaglContext}, options:${2:NSDictionary* dict})" },  
    { "trigger": "CIContext.contextWithOptions:", "contents": "CIContext.contextWithOptions:(${1:NSDictionary* dict})" },  
    { "trigger": "CIDetector" },  
    { "trigger": "CIDetectorAccuracy (NSString*)" },  
    { "trigger": "CIDetectorAccuracyHigh (NSString*)" },  
    { "trigger": "CIDetectorAccuracyLow (NSString*)" },  
    { "trigger": "CIDetectorImageOrientation (NSString*)" },  
    { "trigger": "CIDetectorTypeFace (NSString*)" },  
    { "trigger": "CIDetector.detectorOfType:context:options:", "contents": "CIDetector.detectorOfType:context:options:(${1:NSString* type}, context:${2:CIContext* context}, options:${3:NSDictionary* options})" },  
    { "trigger": "CIFaceFeature" },  
    { "trigger": "CIFeature" },  
    { "trigger": "CIFeatureTypeFace (NSString*)" },  
    { "trigger": "CIFilter" },  
    { "trigger": "CIFilter.filterNamesInCategories:", "contents": "CIFilter.filterNamesInCategories:(${1:NSArray* categories})" },  
    { "trigger": "CIFilter.filterNamesInCategory:", "contents": "CIFilter.filterNamesInCategory:(${1:NSString* category})" },  
    { "trigger": "CIFilter.filterWithName:", "contents": "CIFilter.filterWithName:(${1:NSString* name})" },  
    { "trigger": "CIFilter.filterWithName:keysAndValues:", "contents": "CIFilter.filterWithName:keysAndValues:(${1:NSString* name}, keysAndValues:${2:id key0})" },  
    { "trigger": "CIImage" },  
    { "trigger": "CIImage" },  
    { "trigger": "CIImage" },  
    { "trigger": "CIImage.emptyImage" },  
    { "trigger": "CIImage.imageWithBitmapData:bytesPerRow:size:format:colorSpace:", "contents": "CIImage.imageWithBitmapData:bytesPerRow:size:format:colorSpace:(${1:NSData* d}, bytesPerRow:${2:size_t bpr}, size:${3:CGSize size}, format:${4:CIFormat f}, colorSpace:${5:CGColorSpaceRef cs})" },  
    { "trigger": "CIImage.imageWithCGImage:", "contents": "CIImage.imageWithCGImage:(${1:CGImageRef image})" },  
    { "trigger": "CIImage.imageWithCGImage:options:", "contents": "CIImage.imageWithCGImage:options:(${1:CGImageRef image}, options:${2:NSDictionary* d})" },  
    { "trigger": "CIImage.imageWithCVPixelBuffer:", "contents": "CIImage.imageWithCVPixelBuffer:(${1:CVPixelBufferRef buffer})" },  
    { "trigger": "CIImage.imageWithCVPixelBuffer:options:", "contents": "CIImage.imageWithCVPixelBuffer:options:(${1:CVPixelBufferRef buffer}, options:${2:NSDictionary* dict})" },  
    { "trigger": "CIImage.imageWithColor:", "contents": "CIImage.imageWithColor:(${1:CIColor* color})" },  
    { "trigger": "CIImage.imageWithContentsOfURL:", "contents": "CIImage.imageWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "CIImage.imageWithContentsOfURL:options:", "contents": "CIImage.imageWithContentsOfURL:options:(${1:NSURL* url}, options:${2:NSDictionary* d})" },  
    { "trigger": "CIImage.imageWithData:", "contents": "CIImage.imageWithData:(${1:NSData* data})" },  
    { "trigger": "CIImage.imageWithData:options:", "contents": "CIImage.imageWithData:options:(${1:NSData* data}, options:${2:NSDictionary* d})" },  
    { "trigger": "CIVector" },  
    { "trigger": "CIVector.vectorWithCGAffineTransform:", "contents": "CIVector.vectorWithCGAffineTransform:(${1:CGAffineTransform t})" },  
    { "trigger": "CIVector.vectorWithCGPoint:", "contents": "CIVector.vectorWithCGPoint:(${1:CGPoint p})" },  
    { "trigger": "CIVector.vectorWithCGRect:", "contents": "CIVector.vectorWithCGRect:(${1:CGRect r})" },  
    { "trigger": "CIVector.vectorWithString:", "contents": "CIVector.vectorWithString:(${1:NSString* representation})" },  
    { "trigger": "CIVector.vectorWithValues:count:", "contents": "CIVector.vectorWithValues:count:(${1:CGFloat* values}, count:${2:size_t count})" },  
    { "trigger": "CIVector.vectorWithX:", "contents": "CIVector.vectorWithX:(${1:CGFloat x})" },  
    { "trigger": "CIVector.vectorWithX:Y:", "contents": "CIVector.vectorWithX:Y:(${1:CGFloat x}, Y:${2:CGFloat y})" },  
    { "trigger": "CIVector.vectorWithX:Y:Z:", "contents": "CIVector.vectorWithX:Y:Z:(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z})" },  
    { "trigger": "CIVector.vectorWithX:Y:Z:W:", "contents": "CIVector.vectorWithX:Y:Z:W:(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z}, W:${4:CGFloat w})" },  
    { "trigger": "CLDeviceOrientationFaceDown (6)" },  
    { "trigger": "CLDeviceOrientationFaceUp (5)" },  
    { "trigger": "CLDeviceOrientationLandscapeLeft (3)" },  
    { "trigger": "CLDeviceOrientationLandscapeRight (4)" },  
    { "trigger": "CLDeviceOrientationPortrait (1)" },  
    { "trigger": "CLDeviceOrientationPortraitUpsideDown (2)" },  
    { "trigger": "CLDeviceOrientationUnknown (0)" },  
    { "trigger": "CLGeocoder" },  
    { "trigger": "CLHeading" },  
    { "trigger": "CLLocation" },  
    { "trigger": "CLLocationCoordinate2DIsValid", "contents": "CLLocationCoordinate2DIsValid(${1:CLLocationCoordinate2D coord})" },  
    { "trigger": "CLLocationCoordinate2DMake", "contents": "CLLocationCoordinate2DMake(${1:CLLocationDegrees latitude}, ${2:CLLocationDegrees longitude})" },  
    { "trigger": "CLLocationManager" },  
    { "trigger": "CLLocationManagerDelegate" },  
    { "trigger": "CLLocationManager.authorizationStatus" },  
    { "trigger": "CLLocationManager.headingAvailable" },  
    { "trigger": "CLLocationManager.locationServicesEnabled" },  
    { "trigger": "CLLocationManager.regionMonitoringAvailable" },  
    { "trigger": "CLLocationManager.regionMonitoringEnabled" },  
    { "trigger": "CLLocationManager.significantLocationChangeMonitoringAvailable" },  
    { "trigger": "CLPlacemark" },  
    { "trigger": "CLRegion" },  
    { "trigger": "CMAccelerometerData" },  
    { "trigger": "CMAttitude" },  
    { "trigger": "CMAttitudeReferenceFrameXArbitraryCorrectedZVertical (2)" },  
    { "trigger": "CMAttitudeReferenceFrameXArbitraryZVertical (1)" },  
    { "trigger": "CMAttitudeReferenceFrameXMagneticNorthZVertical (4)" },  
    { "trigger": "CMAttitudeReferenceFrameXTrueNorthZVertical (8)" },  
    { "trigger": "CMAudioFormatDescriptionCreate", "contents": "CMAudioFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:AudioStreamBasicDescription* asbd}, ${3:size_t layoutSize}, ${4:AudioChannelLayout* layout}, ${5:size_t magicCookieSize}, ${6:void* magicCookie}, ${7:CFDictionaryRef extensions}, ${8:CMAudioFormatDescriptionRef* outDesc})" },  
    { "trigger": "CMAudioFormatDescriptionCreateSummary", "contents": "CMAudioFormatDescriptionCreateSummary(${1:CFAllocatorRef allocator}, ${2:CFArrayRef formatDescriptionArray}, ${3:uint32_t flags}, ${4:CMAudioFormatDescriptionRef* summaryFormatDescriptionOut})" },  
    { "trigger": "CMAudioFormatDescriptionEqual", "contents": "CMAudioFormatDescriptionEqual(${1:CMAudioFormatDescriptionRef desc1}, ${2:CMAudioFormatDescriptionRef desc2}, ${3:CMAudioFormatDescriptionMask equalityMask}, ${4:CMAudioFormatDescriptionMask* equalityMaskOut})" },  
    { "trigger": "CMAudioFormatDescriptionGetChannelLayout", "contents": "CMAudioFormatDescriptionGetChannelLayout(${1:CMAudioFormatDescriptionRef desc}, ${2:size_t* layoutSize})" },  
    { "trigger": "CMAudioFormatDescriptionGetFormatList", "contents": "CMAudioFormatDescriptionGetFormatList(${1:CMAudioFormatDescriptionRef desc}, ${2:size_t* formatListSize})" },  
    { "trigger": "CMAudioFormatDescriptionGetMagicCookie", "contents": "CMAudioFormatDescriptionGetMagicCookie(${1:CMAudioFormatDescriptionRef desc}, ${2:size_t* cookieSizeOut})" },  
    { "trigger": "CMAudioFormatDescriptionGetMostCompatibleFormat", "contents": "CMAudioFormatDescriptionGetMostCompatibleFormat(${1:CMAudioFormatDescriptionRef desc})" },  
    { "trigger": "CMAudioFormatDescriptionGetRichestDecodableFormat", "contents": "CMAudioFormatDescriptionGetRichestDecodableFormat(${1:CMAudioFormatDescriptionRef desc})" },  
    { "trigger": "CMAudioFormatDescriptionGetStreamBasicDescription", "contents": "CMAudioFormatDescriptionGetStreamBasicDescription(${1:CMAudioFormatDescriptionRef desc})" },  
    { "trigger": "CMAudioSampleBufferCreateWithPacketDescriptions", "contents": "CMAudioSampleBufferCreateWithPacketDescriptions(${1:CFAllocatorRef allocator}, ${2:CMBlockBufferRef dataBuffer}, ${3:Boolean dataReady}, ${4:CMSampleBufferMakeDataReadyCallback makeDataReadyCallback}, ${5:void* makeDataReadyRefcon}, ${6:CMFormatDescriptionRef formatDescription}, ${7:CMItemCount numSamples}, ${8:CMTime sbufPTS}, ${9:AudioStreamPacketDescription* packetDescriptions}, ${10:CMSampleBufferRef* sBufOut})" },  
    { "trigger": "CMBlockBufferAccessDataBytes", "contents": "CMBlockBufferAccessDataBytes(${1:CMBlockBufferRef theBuffer}, ${2:size_t offset}, ${3:size_t length}, ${4:void* temporaryBlock}, ${5:char** returnedPointer})" },  
    { "trigger": "CMBlockBufferAppendBufferReference", "contents": "CMBlockBufferAppendBufferReference(${1:CMBlockBufferRef theBuffer}, ${2:CMBlockBufferRef targetBBuf}, ${3:size_t offsetToData}, ${4:size_t dataLength}, ${5:CMBlockBufferFlags flags})" },  
    { "trigger": "CMBlockBufferAppendMemoryBlock", "contents": "CMBlockBufferAppendMemoryBlock(${1:CMBlockBufferRef theBuffer}, ${2:void* memoryBlock}, ${3:size_t blockLength}, ${4:CFAllocatorRef blockAllocator}, ${5:CMBlockBufferCustomBlockSource* customBlockSource}, ${6:size_t offsetToData}, ${7:size_t dataLength}, ${8:CMBlockBufferFlags flags})" },  
    { "trigger": "CMBlockBufferAssureBlockMemory", "contents": "CMBlockBufferAssureBlockMemory(${1:CMBlockBufferRef theBuffer})" },  
    { "trigger": "CMBlockBufferCopyDataBytes", "contents": "CMBlockBufferCopyDataBytes(${1:CMBlockBufferRef theSourceBuffer}, ${2:size_t offsetToData}, ${3:size_t dataLength}, ${4:void* destination})" },  
    { "trigger": "CMBlockBufferCreateContiguous", "contents": "CMBlockBufferCreateContiguous(${1:CFAllocatorRef structureAllocator}, ${2:CMBlockBufferRef sourceBuffer}, ${3:CFAllocatorRef blockAllocator}, ${4:CMBlockBufferCustomBlockSource* customBlockSource}, ${5:size_t offsetToData}, ${6:size_t dataLength}, ${7:CMBlockBufferFlags flags}, ${8:CMBlockBufferRef* newBBufOut})" },  
    { "trigger": "CMBlockBufferCreateEmpty", "contents": "CMBlockBufferCreateEmpty(${1:CFAllocatorRef structureAllocator}, ${2:uint32_t subBlockCapacity}, ${3:CMBlockBufferFlags flags}, ${4:CMBlockBufferRef* newBBufOut})" },  
    { "trigger": "CMBlockBufferCreateWithBufferReference", "contents": "CMBlockBufferCreateWithBufferReference(${1:CFAllocatorRef structureAllocator}, ${2:CMBlockBufferRef targetBuffer}, ${3:size_t offsetToData}, ${4:size_t dataLength}, ${5:CMBlockBufferFlags flags}, ${6:CMBlockBufferRef* newBBufOut})" },  
    { "trigger": "CMBlockBufferCreateWithMemoryBlock", "contents": "CMBlockBufferCreateWithMemoryBlock(${1:CFAllocatorRef structureAllocator}, ${2:void* memoryBlock}, ${3:size_t blockLength}, ${4:CFAllocatorRef blockAllocator}, ${5:CMBlockBufferCustomBlockSource* customBlockSource}, ${6:size_t offsetToData}, ${7:size_t dataLength}, ${8:CMBlockBufferFlags flags}, ${9:CMBlockBufferRef* newBBufOut})" },  
    { "trigger": "CMBlockBufferFillDataBytes", "contents": "CMBlockBufferFillDataBytes(${1:char fillByte}, ${2:CMBlockBufferRef destinationBuffer}, ${3:size_t offsetIntoDestination}, ${4:size_t dataLength})" },  
    { "trigger": "CMBlockBufferGetDataLength", "contents": "CMBlockBufferGetDataLength(${1:CMBlockBufferRef theBuffer})" },  
    { "trigger": "CMBlockBufferGetDataPointer", "contents": "CMBlockBufferGetDataPointer(${1:CMBlockBufferRef theBuffer}, ${2:size_t offset}, ${3:size_t* lengthAtOffset}, ${4:size_t* totalLength}, ${5:char** dataPointer})" },  
    { "trigger": "CMBlockBufferGetTypeID" },  
    { "trigger": "CMBlockBufferIsEmpty", "contents": "CMBlockBufferIsEmpty(${1:CMBlockBufferRef theBuffer})" },  
    { "trigger": "CMBlockBufferIsRangeContiguous", "contents": "CMBlockBufferIsRangeContiguous(${1:CMBlockBufferRef theBuffer}, ${2:size_t offset}, ${3:size_t length})" },  
    { "trigger": "CMBlockBufferReplaceDataBytes", "contents": "CMBlockBufferReplaceDataBytes(${1:void* sourceBytes}, ${2:CMBlockBufferRef destinationBuffer}, ${3:size_t offsetIntoDestination}, ${4:size_t dataLength})" },  
    { "trigger": "CMBufferQueueCallForEachBuffer", "contents": "CMBufferQueueCallForEachBuffer(${1:CMBufferQueueRef queue}, ${2:OSStatus (*)(CMBufferRef, void *) callback}, ${3:void* refcon})" },  
    { "trigger": "CMBufferQueueContainsEndOfData", "contents": "CMBufferQueueContainsEndOfData(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueCreate", "contents": "CMBufferQueueCreate(${1:CFAllocatorRef allocator}, ${2:CMItemCount capacity}, ${3:CMBufferCallbacks* callbacks}, ${4:CMBufferQueueRef* queueOut})" },  
    { "trigger": "CMBufferQueueDequeueAndRetain", "contents": "CMBufferQueueDequeueAndRetain(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueDequeueIfDataReadyAndRetain", "contents": "CMBufferQueueDequeueIfDataReadyAndRetain(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueEnqueue", "contents": "CMBufferQueueEnqueue(${1:CMBufferQueueRef queue}, ${2:CMBufferRef buf})" },  
    { "trigger": "CMBufferQueueGetBufferCount", "contents": "CMBufferQueueGetBufferCount(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS" },  
    { "trigger": "CMBufferQueueGetCallbacksForUnsortedSampleBuffers" },  
    { "trigger": "CMBufferQueueGetDuration", "contents": "CMBufferQueueGetDuration(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetEndPresentationTimeStamp", "contents": "CMBufferQueueGetEndPresentationTimeStamp(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetFirstDecodeTimeStamp", "contents": "CMBufferQueueGetFirstDecodeTimeStamp(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetFirstPresentationTimeStamp", "contents": "CMBufferQueueGetFirstPresentationTimeStamp(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetHead", "contents": "CMBufferQueueGetHead(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetMaxPresentationTimeStamp", "contents": "CMBufferQueueGetMaxPresentationTimeStamp(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetMinDecodeTimeStamp", "contents": "CMBufferQueueGetMinDecodeTimeStamp(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetMinPresentationTimeStamp", "contents": "CMBufferQueueGetMinPresentationTimeStamp(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueGetTypeID" },  
    { "trigger": "CMBufferQueueInstallTrigger", "contents": "CMBufferQueueInstallTrigger(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerCallback triggerCallback}, ${3:void* triggerRefcon}, ${4:CMBufferQueueTriggerCondition triggerCondition}, ${5:CMTime triggerTime}, ${6:CMBufferQueueTriggerToken* triggerTokenOut})" },  
    { "trigger": "CMBufferQueueInstallTriggerWithIntegerThreshold", "contents": "CMBufferQueueInstallTriggerWithIntegerThreshold(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerCallback triggerCallback}, ${3:void* triggerRefcon}, ${4:CMBufferQueueTriggerCondition triggerCondition}, ${5:CMItemCount triggerThreshold}, ${6:CMBufferQueueTriggerToken* triggerTokenOut})" },  
    { "trigger": "CMBufferQueueIsAtEndOfData", "contents": "CMBufferQueueIsAtEndOfData(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueIsEmpty", "contents": "CMBufferQueueIsEmpty(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueMarkEndOfData", "contents": "CMBufferQueueMarkEndOfData(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueRemoveTrigger", "contents": "CMBufferQueueRemoveTrigger(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerToken triggerToken})" },  
    { "trigger": "CMBufferQueueReset", "contents": "CMBufferQueueReset(${1:CMBufferQueueRef queue})" },  
    { "trigger": "CMBufferQueueResetWithCallback", "contents": "CMBufferQueueResetWithCallback(${1:CMBufferQueueRef queue}, ${2:void (*)(CMBufferRef, void *) callback}, ${3:void* refcon})" },  
    { "trigger": "CMBufferQueueSetValidationCallback", "contents": "CMBufferQueueSetValidationCallback(${1:CMBufferQueueRef queue}, ${2:CMBufferValidationCallback validationCallback}, ${3:void* validationRefCon})" },  
    { "trigger": "CMBufferQueueTestTrigger", "contents": "CMBufferQueueTestTrigger(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerToken triggerToken})" },  
    { "trigger": "CMCopyDictionaryOfAttachments", "contents": "CMCopyDictionaryOfAttachments(${1:CFAllocatorRef allocator}, ${2:CMAttachmentBearerRef target}, ${3:CMAttachmentMode attachmentMode})" },  
    { "trigger": "CMDeviceMotion" },  
    { "trigger": "CMErrorDeviceRequiresMovement (101)" },  
    { "trigger": "CMErrorDomain (NSString*)" },  
    { "trigger": "CMErrorNULL (100)" },  
    { "trigger": "CMErrorTrueNorthNotAvailable (102)" },  
    { "trigger": "CMFormatDescriptionCreate", "contents": "CMFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMMediaType mediaType}, ${3:FourCharCode mediaSubtype}, ${4:CFDictionaryRef extensions}, ${5:CMFormatDescriptionRef* descOut})" },  
    { "trigger": "CMFormatDescriptionEqual", "contents": "CMFormatDescriptionEqual(${1:CMFormatDescriptionRef desc1}, ${2:CMFormatDescriptionRef desc2})" },  
    { "trigger": "CMFormatDescriptionEqualIgnoringExtensionKeys", "contents": "CMFormatDescriptionEqualIgnoringExtensionKeys(${1:CMFormatDescriptionRef desc1}, ${2:CMFormatDescriptionRef desc2}, ${3:CFTypeRef formatDescriptionExtensionKeysToIgnore}, ${4:CFTypeRef sampleDescriptionExtensionAtomKeysToIgnore})" },  
    { "trigger": "CMFormatDescriptionGetExtension", "contents": "CMFormatDescriptionGetExtension(${1:CMFormatDescriptionRef desc}, ${2:CFStringRef extensionKey})" },  
    { "trigger": "CMFormatDescriptionGetExtensions", "contents": "CMFormatDescriptionGetExtensions(${1:CMFormatDescriptionRef desc})" },  
    { "trigger": "CMFormatDescriptionGetMediaSubType", "contents": "CMFormatDescriptionGetMediaSubType(${1:CMFormatDescriptionRef desc})" },  
    { "trigger": "CMFormatDescriptionGetMediaType", "contents": "CMFormatDescriptionGetMediaType(${1:CMFormatDescriptionRef desc})" },  
    { "trigger": "CMFormatDescriptionGetTypeID" },  
    { "trigger": "CMGetAttachment", "contents": "CMGetAttachment(${1:CMAttachmentBearerRef target}, ${2:CFStringRef key}, ${3:CMAttachmentMode* attachmentModeOut})" },  
    { "trigger": "CMGyroData" },  
    { "trigger": "CMLogItem" },  
    { "trigger": "CMMagneticFieldCalibrationAccuracyHigh (2)" },  
    { "trigger": "CMMagneticFieldCalibrationAccuracyLow (0)" },  
    { "trigger": "CMMagneticFieldCalibrationAccuracyMedium (1)" },  
    { "trigger": "CMMagneticFieldCalibrationAccuracyUncalibrated (-1)" },  
    { "trigger": "CMMagnetometerData" },  
    { "trigger": "CMMetadataFormatDescriptionCreateWithKeys", "contents": "CMMetadataFormatDescriptionCreateWithKeys(${1:CFAllocatorRef allocator}, ${2:CMMetadataFormatType metadataType}, ${3:CFArrayRef keys}, ${4:CMMetadataFormatDescriptionRef* outDesc})" },  
    { "trigger": "CMMetadataFormatDescriptionGetKeyWithLocalID", "contents": "CMMetadataFormatDescriptionGetKeyWithLocalID(${1:CMMetadataFormatDescriptionRef desc}, ${2:OSType localKeyID})" },  
    { "trigger": "CMMotionManager" },  
    { "trigger": "CMMotionManager.availableAttitudeReferenceFrames" },  
    { "trigger": "CMMuxedFormatDescriptionCreate", "contents": "CMMuxedFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMMuxedStreamType muxType}, ${3:CFDictionaryRef extensions}, ${4:CMMuxedFormatDescriptionRef* outDesc})" },  
    { "trigger": "CMPropagateAttachments", "contents": "CMPropagateAttachments(${1:CMAttachmentBearerRef source}, ${2:CMAttachmentBearerRef destination})" },  
    { "trigger": "CMRemoveAllAttachments", "contents": "CMRemoveAllAttachments(${1:CMAttachmentBearerRef target})" },  
    { "trigger": "CMRemoveAttachment", "contents": "CMRemoveAttachment(${1:CMAttachmentBearerRef target}, ${2:CFStringRef key})" },  
    { "trigger": "CMSampleBufferCallForEachSample", "contents": "CMSampleBufferCallForEachSample(${1:CMSampleBufferRef sbuf}, ${2:OSStatus (*)(CMSampleBufferRef, CMItemCount, void *) callback}, ${3:void* refcon})" },  
    { "trigger": "CMSampleBufferCopySampleBufferForRange", "contents": "CMSampleBufferCopySampleBufferForRange(${1:CFAllocatorRef allocator}, ${2:CMSampleBufferRef sbuf}, ${3:CFRange sampleRange}, ${4:CMSampleBufferRef* sBufOut})" },  
    { "trigger": "CMSampleBufferCreate", "contents": "CMSampleBufferCreate(${1:CFAllocatorRef allocator}, ${2:CMBlockBufferRef dataBuffer}, ${3:Boolean dataReady}, ${4:CMSampleBufferMakeDataReadyCallback makeDataReadyCallback}, ${5:void* makeDataReadyRefcon}, ${6:CMFormatDescriptionRef formatDescription}, ${7:CMItemCount numSamples}, ${8:CMItemCount numSampleTimingEntries}, ${9:CMSampleTimingInfo* sampleTimingArray}, ${10:CMItemCount numSampleSizeEntries}, ${11:size_t* sampleSizeArray}, ${12:CMSampleBufferRef* sBufOut})" },  
    { "trigger": "CMSampleBufferCreateCopy", "contents": "CMSampleBufferCreateCopy(${1:CFAllocatorRef allocator}, ${2:CMSampleBufferRef sbuf}, ${3:CMSampleBufferRef* sbufCopyOut})" },  
    { "trigger": "CMSampleBufferCreateCopyWithNewTiming", "contents": "CMSampleBufferCreateCopyWithNewTiming(${1:CFAllocatorRef allocator}, ${2:CMSampleBufferRef originalSBuf}, ${3:CMItemCount numSampleTimingEntries}, ${4:CMSampleTimingInfo* sampleTimingArray}, ${5:CMSampleBufferRef* sBufCopyOut})" },  
    { "trigger": "CMSampleBufferCreateForImageBuffer", "contents": "CMSampleBufferCreateForImageBuffer(${1:CFAllocatorRef allocator}, ${2:CVImageBufferRef imageBuffer}, ${3:Boolean dataReady}, ${4:CMSampleBufferMakeDataReadyCallback makeDataReadyCallback}, ${5:void* makeDataReadyRefcon}, ${6:CMVideoFormatDescriptionRef formatDescription}, ${7:CMSampleTimingInfo* sampleTiming}, ${8:CMSampleBufferRef* sBufOut})" },  
    { "trigger": "CMSampleBufferDataIsReady", "contents": "CMSampleBufferDataIsReady(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer", "contents": "CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(${1:CMSampleBufferRef sbuf}, ${2:size_t* bufferListSizeNeededOut}, ${3:AudioBufferList* bufferListOut}, ${4:size_t bufferListSize}, ${5:CFAllocatorRef bbufStructAllocator}, ${6:CFAllocatorRef bbufMemoryAllocator}, ${7:uint32_t flags}, ${8:CMBlockBufferRef* blockBufferOut})" },  
    { "trigger": "CMSampleBufferGetAudioStreamPacketDescriptions", "contents": "CMSampleBufferGetAudioStreamPacketDescriptions(${1:CMSampleBufferRef sbuf}, ${2:size_t packetDescriptionsSize}, ${3:AudioStreamPacketDescription* packetDescriptionsOut}, ${4:size_t* packetDescriptionsSizeNeededOut})" },  
    { "trigger": "CMSampleBufferGetAudioStreamPacketDescriptionsPtr", "contents": "CMSampleBufferGetAudioStreamPacketDescriptionsPtr(${1:CMSampleBufferRef sbuf}, ${2:AudioStreamPacketDescription** packetDescriptionsPtrOut}, ${3:size_t* packetDescriptionsSizeOut})" },  
    { "trigger": "CMSampleBufferGetDataBuffer", "contents": "CMSampleBufferGetDataBuffer(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetDecodeTimeStamp", "contents": "CMSampleBufferGetDecodeTimeStamp(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetDuration", "contents": "CMSampleBufferGetDuration(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetFormatDescription", "contents": "CMSampleBufferGetFormatDescription(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetImageBuffer", "contents": "CMSampleBufferGetImageBuffer(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetNumSamples", "contents": "CMSampleBufferGetNumSamples(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetOutputDecodeTimeStamp", "contents": "CMSampleBufferGetOutputDecodeTimeStamp(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetOutputDuration", "contents": "CMSampleBufferGetOutputDuration(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetOutputPresentationTimeStamp", "contents": "CMSampleBufferGetOutputPresentationTimeStamp(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetOutputSampleTimingInfoArray", "contents": "CMSampleBufferGetOutputSampleTimingInfoArray(${1:CMSampleBufferRef sbuf}, ${2:CMItemCount timingArrayEntries}, ${3:CMSampleTimingInfo* timingArrayOut}, ${4:CMItemCount* timingArrayEntriesNeededOut})" },  
    { "trigger": "CMSampleBufferGetPresentationTimeStamp", "contents": "CMSampleBufferGetPresentationTimeStamp(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetSampleAttachmentsArray", "contents": "CMSampleBufferGetSampleAttachmentsArray(${1:CMSampleBufferRef sbuf}, ${2:Boolean createIfNecessary})" },  
    { "trigger": "CMSampleBufferGetSampleSize", "contents": "CMSampleBufferGetSampleSize(${1:CMSampleBufferRef sbuf}, ${2:CMItemIndex sampleIndex})" },  
    { "trigger": "CMSampleBufferGetSampleSizeArray", "contents": "CMSampleBufferGetSampleSizeArray(${1:CMSampleBufferRef sbuf}, ${2:CMItemCount sizeArrayEntries}, ${3:size_t* sizeArrayOut}, ${4:CMItemCount* sizeArrayEntriesNeededOut})" },  
    { "trigger": "CMSampleBufferGetSampleTimingInfo", "contents": "CMSampleBufferGetSampleTimingInfo(${1:CMSampleBufferRef sbuf}, ${2:CMItemIndex sampleIndex}, ${3:CMSampleTimingInfo* timingInfoOut})" },  
    { "trigger": "CMSampleBufferGetSampleTimingInfoArray", "contents": "CMSampleBufferGetSampleTimingInfoArray(${1:CMSampleBufferRef sbuf}, ${2:CMItemCount timingArrayEntries}, ${3:CMSampleTimingInfo* timingArrayOut}, ${4:CMItemCount* timingArrayEntriesNeededOut})" },  
    { "trigger": "CMSampleBufferGetTotalSampleSize", "contents": "CMSampleBufferGetTotalSampleSize(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferGetTypeID" },  
    { "trigger": "CMSampleBufferInvalidate", "contents": "CMSampleBufferInvalidate(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferIsValid", "contents": "CMSampleBufferIsValid(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferMakeDataReady", "contents": "CMSampleBufferMakeDataReady(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferSetDataBuffer", "contents": "CMSampleBufferSetDataBuffer(${1:CMSampleBufferRef sbuf}, ${2:CMBlockBufferRef dataBuffer})" },  
    { "trigger": "CMSampleBufferSetDataBufferFromAudioBufferList", "contents": "CMSampleBufferSetDataBufferFromAudioBufferList(${1:CMSampleBufferRef sbuf}, ${2:CFAllocatorRef bbufStructAllocator}, ${3:CFAllocatorRef bbufMemoryAllocator}, ${4:uint32_t flags}, ${5:AudioBufferList* bufferList})" },  
    { "trigger": "CMSampleBufferSetDataReady", "contents": "CMSampleBufferSetDataReady(${1:CMSampleBufferRef sbuf})" },  
    { "trigger": "CMSampleBufferSetInvalidateCallback", "contents": "CMSampleBufferSetInvalidateCallback(${1:CMSampleBufferRef sbuf}, ${2:CMSampleBufferInvalidateCallback invalidateCallback}, ${3:uint64_t invalidateRefCon})" },  
    { "trigger": "CMSampleBufferSetOutputPresentationTimeStamp", "contents": "CMSampleBufferSetOutputPresentationTimeStamp(${1:CMSampleBufferRef sbuf}, ${2:CMTime outputPresentationTimeStamp})" },  
    { "trigger": "CMSampleBufferTrackDataReadiness", "contents": "CMSampleBufferTrackDataReadiness(${1:CMSampleBufferRef sbuf}, ${2:CMSampleBufferRef sbufToTrack})" },  
    { "trigger": "CMSetAttachment", "contents": "CMSetAttachment(${1:CMAttachmentBearerRef target}, ${2:CFStringRef key}, ${3:CFTypeRef value}, ${4:CMAttachmentMode attachmentMode})" },  
    { "trigger": "CMSetAttachments", "contents": "CMSetAttachments(${1:CMAttachmentBearerRef target}, ${2:CFDictionaryRef theAttachments}, ${3:CMAttachmentMode attachmentMode})" },  
    { "trigger": "CMSimpleQueueCreate", "contents": "CMSimpleQueueCreate(${1:CFAllocatorRef allocator}, ${2:int32_t capacity}, ${3:CMSimpleQueueRef* queueOut})" },  
    { "trigger": "CMSimpleQueueDequeue", "contents": "CMSimpleQueueDequeue(${1:CMSimpleQueueRef queue})" },  
    { "trigger": "CMSimpleQueueEnqueue", "contents": "CMSimpleQueueEnqueue(${1:CMSimpleQueueRef queue}, ${2:void* element})" },  
    { "trigger": "CMSimpleQueueGetCapacity", "contents": "CMSimpleQueueGetCapacity(${1:CMSimpleQueueRef queue})" },  
    { "trigger": "CMSimpleQueueGetCount", "contents": "CMSimpleQueueGetCount(${1:CMSimpleQueueRef queue})" },  
    { "trigger": "CMSimpleQueueGetHead", "contents": "CMSimpleQueueGetHead(${1:CMSimpleQueueRef queue})" },  
    { "trigger": "CMSimpleQueueGetTypeID" },  
    { "trigger": "CMSimpleQueueReset", "contents": "CMSimpleQueueReset(${1:CMSimpleQueueRef queue})" },  
    { "trigger": "CMTextFormatDescriptionGetDefaultStyle", "contents": "CMTextFormatDescriptionGetDefaultStyle(${1:CMFormatDescriptionRef desc}, ${2:uint16_t* outLocalFontID}, ${3:Boolean* outBold}, ${4:Boolean* outItalic}, ${5:Boolean* outUnderline}, ${6:CGFloat* outFontSize}, ${7:CGFloat* outColorComponents})" },  
    { "trigger": "CMTextFormatDescriptionGetDefaultTextBox", "contents": "CMTextFormatDescriptionGetDefaultTextBox(${1:CMFormatDescriptionRef desc}, ${2:Boolean originIsAtTopLeft}, ${3:CGFloat heightOfTextTrack}, ${4:CGRect* outDefaultTextBox})" },  
    { "trigger": "CMTextFormatDescriptionGetDisplayFlags", "contents": "CMTextFormatDescriptionGetDisplayFlags(${1:CMFormatDescriptionRef desc}, ${2:CMTextDisplayFlags* outDisplayFlags})" },  
    { "trigger": "CMTextFormatDescriptionGetFontName", "contents": "CMTextFormatDescriptionGetFontName(${1:CMFormatDescriptionRef desc}, ${2:uint16_t localFontID}, ${3:CFStringRef* outFontName})" },  
    { "trigger": "CMTextFormatDescriptionGetJustification", "contents": "CMTextFormatDescriptionGetJustification(${1:CMFormatDescriptionRef desc}, ${2:CMTextJustificationValue* outHorizontalJust}, ${3:CMTextJustificationValue* outVerticalJust})" },  
    { "trigger": "CMTimeAbsoluteValue", "contents": "CMTimeAbsoluteValue(${1:CMTime time})" },  
    { "trigger": "CMTimeAdd", "contents": "CMTimeAdd(${1:CMTime addend1}, ${2:CMTime addend2})" },  
    { "trigger": "CMTimeClampToRange", "contents": "CMTimeClampToRange(${1:CMTime time}, ${2:CMTimeRange range})" },  
    { "trigger": "CMTimeCodeFormatDescriptionCreate", "contents": "CMTimeCodeFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMTimeCodeFormatType timeCodeFormatType}, ${3:CMTime frameDuration}, ${4:uint32_t frameQuanta}, ${5:uint32_t tcFlags}, ${6:CFDictionaryRef extensions}, ${7:CMTimeCodeFormatDescriptionRef* descOut})" },  
    { "trigger": "CMTimeCodeFormatDescriptionGetFrameDuration", "contents": "CMTimeCodeFormatDescriptionGetFrameDuration(${1:CMTimeCodeFormatDescriptionRef timeCodeFormatDescription})" },  
    { "trigger": "CMTimeCodeFormatDescriptionGetFrameQuanta", "contents": "CMTimeCodeFormatDescriptionGetFrameQuanta(${1:CMTimeCodeFormatDescriptionRef timeCodeFormatDescription})" },  
    { "trigger": "CMTimeCodeFormatDescriptionGetTimeCodeFlags", "contents": "CMTimeCodeFormatDescriptionGetTimeCodeFlags(${1:CMTimeCodeFormatDescriptionRef desc})" },  
    { "trigger": "CMTimeCompare", "contents": "CMTimeCompare(${1:CMTime time1}, ${2:CMTime time2})" },  
    { "trigger": "CMTimeConvertScale", "contents": "CMTimeConvertScale(${1:CMTime time}, ${2:int32_t newTimescale}, ${3:CMTimeRoundingMethod method})" },  
    { "trigger": "CMTimeCopyAsDictionary", "contents": "CMTimeCopyAsDictionary(${1:CMTime time}, ${2:CFAllocatorRef allocator})" },  
    { "trigger": "CMTimeCopyDescription", "contents": "CMTimeCopyDescription(${1:CFAllocatorRef allocator}, ${2:CMTime time})" },  
    { "trigger": "CMTimeGetSeconds", "contents": "CMTimeGetSeconds(${1:CMTime time})" },  
    { "trigger": "CMTimeMake", "contents": "CMTimeMake(${1:int64_t value}, ${2:int32_t timescale})" },  
    { "trigger": "CMTimeMakeFromDictionary", "contents": "CMTimeMakeFromDictionary(${1:CFDictionaryRef dict})" },  
    { "trigger": "CMTimeMakeWithEpoch", "contents": "CMTimeMakeWithEpoch(${1:int64_t value}, ${2:int32_t timescale}, ${3:int64_t epoch})" },  
    { "trigger": "CMTimeMakeWithSeconds", "contents": "CMTimeMakeWithSeconds(${1:Float64 seconds}, ${2:int32_t preferredTimeScale})" },  
    { "trigger": "CMTimeMapDurationFromRangeToRange", "contents": "CMTimeMapDurationFromRangeToRange(${1:CMTime dur}, ${2:CMTimeRange fromRange}, ${3:CMTimeRange toRange})" },  
    { "trigger": "CMTimeMapTimeFromRangeToRange", "contents": "CMTimeMapTimeFromRangeToRange(${1:CMTime t}, ${2:CMTimeRange fromRange}, ${3:CMTimeRange toRange})" },  
    { "trigger": "CMTimeMappingValue" },  
    { "trigger": "CMTimeMaximum", "contents": "CMTimeMaximum(${1:CMTime time1}, ${2:CMTime time2})" },  
    { "trigger": "CMTimeMinimum", "contents": "CMTimeMinimum(${1:CMTime time1}, ${2:CMTime time2})" },  
    { "trigger": "CMTimeMultiply", "contents": "CMTimeMultiply(${1:CMTime time}, ${2:int32_t multiplier})" },  
    { "trigger": "CMTimeMultiplyByFloat64", "contents": "CMTimeMultiplyByFloat64(${1:CMTime time}, ${2:Float64 multiplier})" },  
    { "trigger": "CMTimeRangeContainsTime", "contents": "CMTimeRangeContainsTime(${1:CMTimeRange range}, ${2:CMTime time})" },  
    { "trigger": "CMTimeRangeContainsTimeRange", "contents": "CMTimeRangeContainsTimeRange(${1:CMTimeRange range1}, ${2:CMTimeRange range2})" },  
    { "trigger": "CMTimeRangeCopyAsDictionary", "contents": "CMTimeRangeCopyAsDictionary(${1:CMTimeRange range}, ${2:CFAllocatorRef allocator})" },  
    { "trigger": "CMTimeRangeCopyDescription", "contents": "CMTimeRangeCopyDescription(${1:CFAllocatorRef allocator}, ${2:CMTimeRange range})" },  
    { "trigger": "CMTimeRangeEqual", "contents": "CMTimeRangeEqual(${1:CMTimeRange range1}, ${2:CMTimeRange range2})" },  
    { "trigger": "CMTimeRangeFromTimeToTime", "contents": "CMTimeRangeFromTimeToTime(${1:CMTime start}, ${2:CMTime end})" },  
    { "trigger": "CMTimeRangeGetEnd", "contents": "CMTimeRangeGetEnd(${1:CMTimeRange range})" },  
    { "trigger": "CMTimeRangeGetIntersection", "contents": "CMTimeRangeGetIntersection(${1:CMTimeRange range1}, ${2:CMTimeRange range2})" },  
    { "trigger": "CMTimeRangeGetUnion", "contents": "CMTimeRangeGetUnion(${1:CMTimeRange range1}, ${2:CMTimeRange range2})" },  
    { "trigger": "CMTimeRangeMake", "contents": "CMTimeRangeMake(${1:CMTime start}, ${2:CMTime duration})" },  
    { "trigger": "CMTimeRangeMakeFromDictionary", "contents": "CMTimeRangeMakeFromDictionary(${1:CFDictionaryRef dict})" },  
    { "trigger": "CMTimeRangeShow", "contents": "CMTimeRangeShow(${1:CMTimeRange range})" },  
    { "trigger": "CMTimeRangeValue" },  
    { "trigger": "CMTimeShow", "contents": "CMTimeShow(${1:CMTime time})" },  
    { "trigger": "CMTimeSubtract", "contents": "CMTimeSubtract(${1:CMTime minuend}, ${2:CMTime subtrahend})" },  
    { "trigger": "CMTimeValue" },  
    { "trigger": "CMVideoFormatDescriptionCreate", "contents": "CMVideoFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMVideoCodecType codecType}, ${3:int32_t width}, ${4:int32_t height}, ${5:CFDictionaryRef extensions}, ${6:CMVideoFormatDescriptionRef* outDesc})" },  
    { "trigger": "CMVideoFormatDescriptionCreateForImageBuffer", "contents": "CMVideoFormatDescriptionCreateForImageBuffer(${1:CFAllocatorRef allocator}, ${2:CVImageBufferRef imageBuffer}, ${3:CMVideoFormatDescriptionRef* outDesc})" },  
    { "trigger": "CMVideoFormatDescriptionGetCleanAperture", "contents": "CMVideoFormatDescriptionGetCleanAperture(${1:CMVideoFormatDescriptionRef videoDesc}, ${2:Boolean originIsAtTopLeft})" },  
    { "trigger": "CMVideoFormatDescriptionGetDimensions", "contents": "CMVideoFormatDescriptionGetDimensions(${1:CMVideoFormatDescriptionRef videoDesc})" },  
    { "trigger": "CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers" },  
    { "trigger": "CMVideoFormatDescriptionGetPresentationDimensions", "contents": "CMVideoFormatDescriptionGetPresentationDimensions(${1:CMVideoFormatDescriptionRef videoDesc}, ${2:Boolean usePixelAspectRatio}, ${3:Boolean useCleanAperture})" },  
    { "trigger": "CMVideoFormatDescriptionMatchesImageBuffer", "contents": "CMVideoFormatDescriptionMatchesImageBuffer(${1:CMVideoFormatDescriptionRef desc}, ${2:CVImageBufferRef imageBuffer})" },  
    { "trigger": "CNCopyCurrentNetworkInfo", "contents": "CNCopyCurrentNetworkInfo(${1:CFStringRef interfaceName})" },  
    { "trigger": "CNCopySupportedInterfaces" },  
    { "trigger": "CNMarkPortalOffline", "contents": "CNMarkPortalOffline(${1:CFStringRef interfaceName})" },  
    { "trigger": "CNMarkPortalOnline", "contents": "CNMarkPortalOnline(${1:CFStringRef interfaceName})" },  
    { "trigger": "CNSetSupportedSSIDs", "contents": "CNSetSupportedSSIDs(${1:CFArrayRef ssidArray})" },  
    { "trigger": "COREFOUNDATION_CFPLUGINCOM_SEPARATE (1)" },  
    { "trigger": "COREVIDEO_SUPPORTS_COLORSPACE (0)" },  
    { "trigger": "COREVIDEO_SUPPORTS_DIRECT3D (0)" },  
    { "trigger": "COREVIDEO_SUPPORTS_DISPLAYLINK (0)" },  
    { "trigger": "COREVIDEO_SUPPORTS_IOSURFACE (0)" },  
    { "trigger": "COREVIDEO_SUPPORTS_OPENGL (0)" },  
    { "trigger": "COREVIDEO_SUPPORTS_OPENGLES (1)" },  
    { "trigger": "CTCall" },  
    { "trigger": "CTCallCenter" },  
    { "trigger": "CTCallStateConnected (NSString*)" },  
    { "trigger": "CTCallStateDialing (NSString*)" },  
    { "trigger": "CTCallStateDisconnected (NSString*)" },  
    { "trigger": "CTCallStateIncoming (NSString*)" },  
    { "trigger": "CTCarrier" },  
    { "trigger": "CTFontCollectionCreateCopyWithFontDescriptors", "contents": "CTFontCollectionCreateCopyWithFontDescriptors(${1:CTFontCollectionRef original}, ${2:CFArrayRef queryDescriptors}, ${3:CFDictionaryRef options})" },  
    { "trigger": "CTFontCollectionCreateFromAvailableFonts", "contents": "CTFontCollectionCreateFromAvailableFonts(${1:CFDictionaryRef options})" },  
    { "trigger": "CTFontCollectionCreateMatchingFontDescriptors", "contents": "CTFontCollectionCreateMatchingFontDescriptors(${1:CTFontCollectionRef collection})" },  
    { "trigger": "CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback", "contents": "CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(${1:CTFontCollectionRef collection}, ${2:CTFontCollectionSortDescriptorsCallback sortCallback}, ${3:void* refCon})" },  
    { "trigger": "CTFontCollectionCreateWithFontDescriptors", "contents": "CTFontCollectionCreateWithFontDescriptors(${1:CFArrayRef queryDescriptors}, ${2:CFDictionaryRef options})" },  
    { "trigger": "CTFontCollectionGetTypeID" },  
    { "trigger": "CTFontCopyAttribute", "contents": "CTFontCopyAttribute(${1:CTFontRef font}, ${2:CFStringRef attribute})" },  
    { "trigger": "CTFontCopyAvailableTables", "contents": "CTFontCopyAvailableTables(${1:CTFontRef font}, ${2:CTFontTableOptions options})" },  
    { "trigger": "CTFontCopyCharacterSet", "contents": "CTFontCopyCharacterSet(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyDisplayName", "contents": "CTFontCopyDisplayName(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyFamilyName", "contents": "CTFontCopyFamilyName(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyFeatureSettings", "contents": "CTFontCopyFeatureSettings(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyFeatures", "contents": "CTFontCopyFeatures(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyFontDescriptor", "contents": "CTFontCopyFontDescriptor(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyFullName", "contents": "CTFontCopyFullName(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyGraphicsFont", "contents": "CTFontCopyGraphicsFont(${1:CTFontRef font}, ${2:CTFontDescriptorRef* attributes})" },  
    { "trigger": "CTFontCopyLocalizedName", "contents": "CTFontCopyLocalizedName(${1:CTFontRef font}, ${2:CFStringRef nameKey}, ${3:CFStringRef* language})" },  
    { "trigger": "CTFontCopyName", "contents": "CTFontCopyName(${1:CTFontRef font}, ${2:CFStringRef nameKey})" },  
    { "trigger": "CTFontCopyPostScriptName", "contents": "CTFontCopyPostScriptName(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopySupportedLanguages", "contents": "CTFontCopySupportedLanguages(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyTable", "contents": "CTFontCopyTable(${1:CTFontRef font}, ${2:CTFontTableTag table}, ${3:CTFontTableOptions options})" },  
    { "trigger": "CTFontCopyTraits", "contents": "CTFontCopyTraits(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyVariation", "contents": "CTFontCopyVariation(${1:CTFontRef font})" },  
    { "trigger": "CTFontCopyVariationAxes", "contents": "CTFontCopyVariationAxes(${1:CTFontRef font})" },  
    { "trigger": "CTFontCreateCopyWithAttributes", "contents": "CTFontCreateCopyWithAttributes(${1:CTFontRef font}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontDescriptorRef attributes})" },  
    { "trigger": "CTFontCreateCopyWithFamily", "contents": "CTFontCreateCopyWithFamily(${1:CTFontRef font}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CFStringRef family})" },  
    { "trigger": "CTFontCreateCopyWithSymbolicTraits", "contents": "CTFontCreateCopyWithSymbolicTraits(${1:CTFontRef font}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontSymbolicTraits symTraitValue}, ${5:CTFontSymbolicTraits symTraitMask})" },  
    { "trigger": "CTFontCreateForString", "contents": "CTFontCreateForString(${1:CTFontRef currentFont}, ${2:CFStringRef string}, ${3:CFRange range})" },  
    { "trigger": "CTFontCreatePathForGlyph", "contents": "CTFontCreatePathForGlyph(${1:CTFontRef font}, ${2:CGGlyph glyph}, ${3:CGAffineTransform* transform})" },  
    { "trigger": "CTFontCreateUIFontForLanguage", "contents": "CTFontCreateUIFontForLanguage(${1:CTFontUIFontType uiType}, ${2:CGFloat size}, ${3:CFStringRef language})" },  
    { "trigger": "CTFontCreateWithFontDescriptor", "contents": "CTFontCreateWithFontDescriptor(${1:CTFontDescriptorRef descriptor}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix})" },  
    { "trigger": "CTFontCreateWithFontDescriptorAndOptions", "contents": "CTFontCreateWithFontDescriptorAndOptions(${1:CTFontDescriptorRef descriptor}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontOptions options})" },  
    { "trigger": "CTFontCreateWithGraphicsFont", "contents": "CTFontCreateWithGraphicsFont(${1:CGFontRef graphicsFont}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontDescriptorRef attributes})" },  
    { "trigger": "CTFontCreateWithName", "contents": "CTFontCreateWithName(${1:CFStringRef name}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix})" },  
    { "trigger": "CTFontCreateWithNameAndOptions", "contents": "CTFontCreateWithNameAndOptions(${1:CFStringRef name}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontOptions options})" },  
    { "trigger": "CTFontDescriptorCopyAttribute", "contents": "CTFontDescriptorCopyAttribute(${1:CTFontDescriptorRef descriptor}, ${2:CFStringRef attribute})" },  
    { "trigger": "CTFontDescriptorCopyAttributes", "contents": "CTFontDescriptorCopyAttributes(${1:CTFontDescriptorRef descriptor})" },  
    { "trigger": "CTFontDescriptorCopyLocalizedAttribute", "contents": "CTFontDescriptorCopyLocalizedAttribute(${1:CTFontDescriptorRef descriptor}, ${2:CFStringRef attribute}, ${3:CFStringRef* language})" },  
    { "trigger": "CTFontDescriptorCreateCopyWithAttributes", "contents": "CTFontDescriptorCreateCopyWithAttributes(${1:CTFontDescriptorRef original}, ${2:CFDictionaryRef attributes})" },  
    { "trigger": "CTFontDescriptorCreateCopyWithFeature", "contents": "CTFontDescriptorCreateCopyWithFeature(${1:CTFontDescriptorRef original}, ${2:CFNumberRef featureTypeIdentifier}, ${3:CFNumberRef featureSelectorIdentifier})" },  
    { "trigger": "CTFontDescriptorCreateCopyWithVariation", "contents": "CTFontDescriptorCreateCopyWithVariation(${1:CTFontDescriptorRef original}, ${2:CFNumberRef variationIdentifier}, ${3:CGFloat variationValue})" },  
    { "trigger": "CTFontDescriptorCreateMatchingFontDescriptor", "contents": "CTFontDescriptorCreateMatchingFontDescriptor(${1:CTFontDescriptorRef descriptor}, ${2:CFSetRef mandatoryAttributes})" },  
    { "trigger": "CTFontDescriptorCreateMatchingFontDescriptors", "contents": "CTFontDescriptorCreateMatchingFontDescriptors(${1:CTFontDescriptorRef descriptor}, ${2:CFSetRef mandatoryAttributes})" },  
    { "trigger": "CTFontDescriptorCreateWithAttributes", "contents": "CTFontDescriptorCreateWithAttributes(${1:CFDictionaryRef attributes})" },  
    { "trigger": "CTFontDescriptorCreateWithNameAndSize", "contents": "CTFontDescriptorCreateWithNameAndSize(${1:CFStringRef name}, ${2:CGFloat size})" },  
    { "trigger": "CTFontDescriptorGetTypeID" },  
    { "trigger": "CTFontDrawGlyphs", "contents": "CTFontDrawGlyphs(${1:CTFontRef font}, ${2:CGGlyph* glyphs}, ${3:CGPoint* positions}, ${4:size_t count}, ${5:CGContextRef context})" },  
    { "trigger": "CTFontGetAdvancesForGlyphs", "contents": "CTFontGetAdvancesForGlyphs(${1:CTFontRef font}, ${2:CTFontOrientation orientation}, ${3:CGGlyph* glyphs}, ${4:CGSize* advances}, ${5:CFIndex count})" },  
    { "trigger": "CTFontGetAscent", "contents": "CTFontGetAscent(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetBoundingBox", "contents": "CTFontGetBoundingBox(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetBoundingRectsForGlyphs", "contents": "CTFontGetBoundingRectsForGlyphs(${1:CTFontRef font}, ${2:CTFontOrientation orientation}, ${3:CGGlyph* glyphs}, ${4:CGRect* boundingRects}, ${5:CFIndex count})" },  
    { "trigger": "CTFontGetCapHeight", "contents": "CTFontGetCapHeight(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetDescent", "contents": "CTFontGetDescent(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetGlyphCount", "contents": "CTFontGetGlyphCount(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetGlyphWithName", "contents": "CTFontGetGlyphWithName(${1:CTFontRef font}, ${2:CFStringRef glyphName})" },  
    { "trigger": "CTFontGetGlyphsForCharacters", "contents": "CTFontGetGlyphsForCharacters(${1:CTFontRef font}, ${2:UniChar* characters}, ${3:CGGlyph* glyphs}, ${4:CFIndex count})" },  
    { "trigger": "CTFontGetLeading", "contents": "CTFontGetLeading(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetLigatureCaretPositions", "contents": "CTFontGetLigatureCaretPositions(${1:CTFontRef font}, ${2:CGGlyph glyph}, ${3:CGFloat* positions}, ${4:CFIndex maxPositions})" },  
    { "trigger": "CTFontGetMatrix", "contents": "CTFontGetMatrix(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetSize", "contents": "CTFontGetSize(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetSlantAngle", "contents": "CTFontGetSlantAngle(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetStringEncoding", "contents": "CTFontGetStringEncoding(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetSymbolicTraits", "contents": "CTFontGetSymbolicTraits(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetTypeID" },  
    { "trigger": "CTFontGetUnderlinePosition", "contents": "CTFontGetUnderlinePosition(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetUnderlineThickness", "contents": "CTFontGetUnderlineThickness(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetUnitsPerEm", "contents": "CTFontGetUnitsPerEm(${1:CTFontRef font})" },  
    { "trigger": "CTFontGetVerticalTranslationsForGlyphs", "contents": "CTFontGetVerticalTranslationsForGlyphs(${1:CTFontRef font}, ${2:CGGlyph* glyphs}, ${3:CGSize* translations}, ${4:CFIndex count})" },  
    { "trigger": "CTFontGetXHeight", "contents": "CTFontGetXHeight(${1:CTFontRef font})" },  
    { "trigger": "CTFontManagerRegisterFontsForURL", "contents": "CTFontManagerRegisterFontsForURL(${1:CFURLRef fontURL}, ${2:CTFontManagerScope scope}, ${3:CFErrorRef* error})" },  
    { "trigger": "CTFontManagerRegisterFontsForURLs", "contents": "CTFontManagerRegisterFontsForURLs(${1:CFArrayRef fontURLs}, ${2:CTFontManagerScope scope}, ${3:CFArrayRef* errors})" },  
    { "trigger": "CTFontManagerRegisterGraphicsFont", "contents": "CTFontManagerRegisterGraphicsFont(${1:CGFontRef font}, ${2:CFErrorRef* error})" },  
    { "trigger": "CTFontManagerUnregisterFontsForURL", "contents": "CTFontManagerUnregisterFontsForURL(${1:CFURLRef fontURL}, ${2:CTFontManagerScope scope}, ${3:CFErrorRef* error})" },  
    { "trigger": "CTFontManagerUnregisterFontsForURLs", "contents": "CTFontManagerUnregisterFontsForURLs(${1:CFArrayRef fontURLs}, ${2:CTFontManagerScope scope}, ${3:CFArrayRef* errors})" },  
    { "trigger": "CTFontManagerUnregisterGraphicsFont", "contents": "CTFontManagerUnregisterGraphicsFont(${1:CGFontRef font}, ${2:CFErrorRef* error})" },  
    { "trigger": "CTFrameDraw", "contents": "CTFrameDraw(${1:CTFrameRef frame}, ${2:CGContextRef context})" },  
    { "trigger": "CTFrameGetFrameAttributes", "contents": "CTFrameGetFrameAttributes(${1:CTFrameRef frame})" },  
    { "trigger": "CTFrameGetLineOrigins", "contents": "CTFrameGetLineOrigins(${1:CTFrameRef frame}, ${2:CFRange range}, ${3:CGPoint* origins})" },  
    { "trigger": "CTFrameGetLines", "contents": "CTFrameGetLines(${1:CTFrameRef frame})" },  
    { "trigger": "CTFrameGetPath", "contents": "CTFrameGetPath(${1:CTFrameRef frame})" },  
    { "trigger": "CTFrameGetStringRange", "contents": "CTFrameGetStringRange(${1:CTFrameRef frame})" },  
    { "trigger": "CTFrameGetTypeID" },  
    { "trigger": "CTFrameGetVisibleStringRange", "contents": "CTFrameGetVisibleStringRange(${1:CTFrameRef frame})" },  
    { "trigger": "CTFramesetterCreateFrame", "contents": "CTFramesetterCreateFrame(${1:CTFramesetterRef framesetter}, ${2:CFRange stringRange}, ${3:CGPathRef path}, ${4:CFDictionaryRef frameAttributes})" },  
    { "trigger": "CTFramesetterCreateWithAttributedString", "contents": "CTFramesetterCreateWithAttributedString(${1:CFAttributedStringRef string})" },  
    { "trigger": "CTFramesetterGetTypeID" },  
    { "trigger": "CTFramesetterGetTypesetter", "contents": "CTFramesetterGetTypesetter(${1:CTFramesetterRef framesetter})" },  
    { "trigger": "CTFramesetterSuggestFrameSizeWithConstraints", "contents": "CTFramesetterSuggestFrameSizeWithConstraints(${1:CTFramesetterRef framesetter}, ${2:CFRange stringRange}, ${3:CFDictionaryRef frameAttributes}, ${4:CGSize constraints}, ${5:CFRange* fitRange})" },  
    { "trigger": "CTGetCoreTextVersion" },  
    { "trigger": "CTGlyphInfoCreateWithCharacterIdentifier", "contents": "CTGlyphInfoCreateWithCharacterIdentifier(${1:CGFontIndex cid}, ${2:CTCharacterCollection collection}, ${3:CFStringRef baseString})" },  
    { "trigger": "CTGlyphInfoCreateWithGlyph", "contents": "CTGlyphInfoCreateWithGlyph(${1:CGGlyph glyph}, ${2:CTFontRef font}, ${3:CFStringRef baseString})" },  
    { "trigger": "CTGlyphInfoCreateWithGlyphName", "contents": "CTGlyphInfoCreateWithGlyphName(${1:CFStringRef glyphName}, ${2:CTFontRef font}, ${3:CFStringRef baseString})" },  
    { "trigger": "CTGlyphInfoGetCharacterCollection", "contents": "CTGlyphInfoGetCharacterCollection(${1:CTGlyphInfoRef glyphInfo})" },  
    { "trigger": "CTGlyphInfoGetCharacterIdentifier", "contents": "CTGlyphInfoGetCharacterIdentifier(${1:CTGlyphInfoRef glyphInfo})" },  
    { "trigger": "CTGlyphInfoGetGlyphName", "contents": "CTGlyphInfoGetGlyphName(${1:CTGlyphInfoRef glyphInfo})" },  
    { "trigger": "CTGlyphInfoGetTypeID" },  
    { "trigger": "CTLineCreateJustifiedLine", "contents": "CTLineCreateJustifiedLine(${1:CTLineRef line}, ${2:CGFloat justificationFactor}, ${3:double justificationWidth})" },  
    { "trigger": "CTLineCreateTruncatedLine", "contents": "CTLineCreateTruncatedLine(${1:CTLineRef line}, ${2:double width}, ${3:CTLineTruncationType truncationType}, ${4:CTLineRef truncationToken})" },  
    { "trigger": "CTLineCreateWithAttributedString", "contents": "CTLineCreateWithAttributedString(${1:CFAttributedStringRef string})" },  
    { "trigger": "CTLineDraw", "contents": "CTLineDraw(${1:CTLineRef line}, ${2:CGContextRef context})" },  
    { "trigger": "CTLineGetGlyphCount", "contents": "CTLineGetGlyphCount(${1:CTLineRef line})" },  
    { "trigger": "CTLineGetGlyphRuns", "contents": "CTLineGetGlyphRuns(${1:CTLineRef line})" },  
    { "trigger": "CTLineGetImageBounds", "contents": "CTLineGetImageBounds(${1:CTLineRef line}, ${2:CGContextRef context})" },  
    { "trigger": "CTLineGetOffsetForStringIndex", "contents": "CTLineGetOffsetForStringIndex(${1:CTLineRef line}, ${2:CFIndex charIndex}, ${3:CGFloat* secondaryOffset})" },  
    { "trigger": "CTLineGetPenOffsetForFlush", "contents": "CTLineGetPenOffsetForFlush(${1:CTLineRef line}, ${2:CGFloat flushFactor}, ${3:double flushWidth})" },  
    { "trigger": "CTLineGetStringIndexForPosition", "contents": "CTLineGetStringIndexForPosition(${1:CTLineRef line}, ${2:CGPoint position})" },  
    { "trigger": "CTLineGetStringRange", "contents": "CTLineGetStringRange(${1:CTLineRef line})" },  
    { "trigger": "CTLineGetTrailingWhitespaceWidth", "contents": "CTLineGetTrailingWhitespaceWidth(${1:CTLineRef line})" },  
    { "trigger": "CTLineGetTypeID" },  
    { "trigger": "CTLineGetTypographicBounds", "contents": "CTLineGetTypographicBounds(${1:CTLineRef line}, ${2:CGFloat* ascent}, ${3:CGFloat* descent}, ${4:CGFloat* leading})" },  
    { "trigger": "CTParagraphStyleCreate", "contents": "CTParagraphStyleCreate(${1:CTParagraphStyleSetting* settings}, ${2:CFIndex settingCount})" },  
    { "trigger": "CTParagraphStyleCreateCopy", "contents": "CTParagraphStyleCreateCopy(${1:CTParagraphStyleRef paragraphStyle})" },  
    { "trigger": "CTParagraphStyleGetTypeID" },  
    { "trigger": "CTParagraphStyleGetValueForSpecifier", "contents": "CTParagraphStyleGetValueForSpecifier(${1:CTParagraphStyleRef paragraphStyle}, ${2:CTParagraphStyleSpecifier spec}, ${3:size_t valueBufferSize}, ${4:void* valueBuffer})" },  
    { "trigger": "CTRunDelegateCreate", "contents": "CTRunDelegateCreate(${1:CTRunDelegateCallbacks* callbacks}, ${2:void* refCon})" },  
    { "trigger": "CTRunDelegateGetRefCon", "contents": "CTRunDelegateGetRefCon(${1:CTRunDelegateRef runDelegate})" },  
    { "trigger": "CTRunDraw", "contents": "CTRunDraw(${1:CTRunRef run}, ${2:CGContextRef context}, ${3:CFRange range})" },  
    { "trigger": "CTRunGetAdvances", "contents": "CTRunGetAdvances(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGSize* buffer})" },  
    { "trigger": "CTRunGetAdvancesPtr", "contents": "CTRunGetAdvancesPtr(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetAttributes", "contents": "CTRunGetAttributes(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetGlyphCount", "contents": "CTRunGetGlyphCount(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetGlyphs", "contents": "CTRunGetGlyphs(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGGlyph* buffer})" },  
    { "trigger": "CTRunGetGlyphsPtr", "contents": "CTRunGetGlyphsPtr(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetImageBounds", "contents": "CTRunGetImageBounds(${1:CTRunRef run}, ${2:CGContextRef context}, ${3:CFRange range})" },  
    { "trigger": "CTRunGetPositions", "contents": "CTRunGetPositions(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGPoint* buffer})" },  
    { "trigger": "CTRunGetPositionsPtr", "contents": "CTRunGetPositionsPtr(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetStatus", "contents": "CTRunGetStatus(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetStringIndices", "contents": "CTRunGetStringIndices(${1:CTRunRef run}, ${2:CFRange range}, ${3:CFIndex* buffer})" },  
    { "trigger": "CTRunGetStringIndicesPtr", "contents": "CTRunGetStringIndicesPtr(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetStringRange", "contents": "CTRunGetStringRange(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetTextMatrix", "contents": "CTRunGetTextMatrix(${1:CTRunRef run})" },  
    { "trigger": "CTRunGetTypeID" },  
    { "trigger": "CTRunGetTypographicBounds", "contents": "CTRunGetTypographicBounds(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGFloat* ascent}, ${4:CGFloat* descent}, ${5:CGFloat* leading})" },  
    { "trigger": "CTTelephonyNetworkInfo" },  
    { "trigger": "CTTextTabCreate", "contents": "CTTextTabCreate(${1:CTTextAlignment alignment}, ${2:double location}, ${3:CFDictionaryRef options})" },  
    { "trigger": "CTTextTabGetAlignment", "contents": "CTTextTabGetAlignment(${1:CTTextTabRef tab})" },  
    { "trigger": "CTTextTabGetLocation", "contents": "CTTextTabGetLocation(${1:CTTextTabRef tab})" },  
    { "trigger": "CTTextTabGetOptions", "contents": "CTTextTabGetOptions(${1:CTTextTabRef tab})" },  
    { "trigger": "CTTextTabGetTypeID" },  
    { "trigger": "CTTypesetterCreateLine", "contents": "CTTypesetterCreateLine(${1:CTTypesetterRef typesetter}, ${2:CFRange stringRange})" },  
    { "trigger": "CTTypesetterCreateLineWithOffset", "contents": "CTTypesetterCreateLineWithOffset(${1:CTTypesetterRef typesetter}, ${2:CFRange stringRange}, ${3:double offset})" },  
    { "trigger": "CTTypesetterCreateWithAttributedString", "contents": "CTTypesetterCreateWithAttributedString(${1:CFAttributedStringRef string})" },  
    { "trigger": "CTTypesetterCreateWithAttributedStringAndOptions", "contents": "CTTypesetterCreateWithAttributedStringAndOptions(${1:CFAttributedStringRef string}, ${2:CFDictionaryRef options})" },  
    { "trigger": "CTTypesetterGetTypeID" },  
    { "trigger": "CTTypesetterSuggestClusterBreak", "contents": "CTTypesetterSuggestClusterBreak(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width})" },  
    { "trigger": "CTTypesetterSuggestClusterBreakWithOffset", "contents": "CTTypesetterSuggestClusterBreakWithOffset(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width}, ${4:double offset})" },  
    { "trigger": "CTTypesetterSuggestLineBreak", "contents": "CTTypesetterSuggestLineBreak(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width})" },  
    { "trigger": "CTTypesetterSuggestLineBreakWithOffset", "contents": "CTTypesetterSuggestLineBreakWithOffset(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width}, ${4:double offset})" },  
    { "trigger": "CVBufferGetAttachment", "contents": "CVBufferGetAttachment(${1:CVBufferRef buffer}, ${2:CFStringRef key}, ${3:CVAttachmentMode* attachmentMode})" },  
    { "trigger": "CVBufferGetAttachments", "contents": "CVBufferGetAttachments(${1:CVBufferRef buffer}, ${2:CVAttachmentMode attachmentMode})" },  
    { "trigger": "CVBufferPropagateAttachments", "contents": "CVBufferPropagateAttachments(${1:CVBufferRef sourceBuffer}, ${2:CVBufferRef destinationBuffer})" },  
    { "trigger": "CVBufferRelease", "contents": "CVBufferRelease(${1:CVBufferRef buffer})" },  
    { "trigger": "CVBufferRemoveAllAttachments", "contents": "CVBufferRemoveAllAttachments(${1:CVBufferRef buffer})" },  
    { "trigger": "CVBufferRemoveAttachment", "contents": "CVBufferRemoveAttachment(${1:CVBufferRef buffer}, ${2:CFStringRef key})" },  
    { "trigger": "CVBufferRetain", "contents": "CVBufferRetain(${1:CVBufferRef buffer})" },  
    { "trigger": "CVBufferSetAttachment", "contents": "CVBufferSetAttachment(${1:CVBufferRef buffer}, ${2:CFStringRef key}, ${3:CFTypeRef value}, ${4:CVAttachmentMode attachmentMode})" },  
    { "trigger": "CVBufferSetAttachments", "contents": "CVBufferSetAttachments(${1:CVBufferRef buffer}, ${2:CFDictionaryRef theAttachments}, ${3:CVAttachmentMode attachmentMode})" },  
    { "trigger": "CVGetCurrentHostTime" },  
    { "trigger": "CVGetHostClockFrequency" },  
    { "trigger": "CVGetHostClockMinimumTimeDelta" },  
    { "trigger": "CVImageBufferGetCleanRect", "contents": "CVImageBufferGetCleanRect(${1:CVImageBufferRef imageBuffer})" },  
    { "trigger": "CVImageBufferGetDisplaySize", "contents": "CVImageBufferGetDisplaySize(${1:CVImageBufferRef imageBuffer})" },  
    { "trigger": "CVImageBufferGetEncodedSize", "contents": "CVImageBufferGetEncodedSize(${1:CVImageBufferRef imageBuffer})" },  
    { "trigger": "CVOpenGLESTextureCacheCreate", "contents": "CVOpenGLESTextureCacheCreate(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef cacheAttributes}, ${3:void* eaglContext}, ${4:CFDictionaryRef textureAttributes}, ${5:CVOpenGLESTextureCacheRef* cacheOut})" },  
    { "trigger": "CVOpenGLESTextureCacheCreateTextureFromImage", "contents": "CVOpenGLESTextureCacheCreateTextureFromImage(${1:CFAllocatorRef allocator}, ${2:CVOpenGLESTextureCacheRef textureCache}, ${3:CVImageBufferRef sourceImage}, ${4:CFDictionaryRef textureAttributes}, ${5:GLenum target}, ${6:GLint internalFormat}, ${7:GLsizei width}, ${8:GLsizei height}, ${9:GLenum format}, ${10:GLenum type}, ${11:size_t planeIndex}, ${12:CVOpenGLESTextureRef* textureOut})" },  
    { "trigger": "CVOpenGLESTextureCacheFlush", "contents": "CVOpenGLESTextureCacheFlush(${1:CVOpenGLESTextureCacheRef textureCache}, ${2:CVOptionFlags options})" },  
    { "trigger": "CVOpenGLESTextureCacheGetTypeID" },  
    { "trigger": "CVOpenGLESTextureGetCleanTexCoords", "contents": "CVOpenGLESTextureGetCleanTexCoords(${1:CVOpenGLESTextureRef image}, ${2:GLfloat* lowerLeft}, ${3:GLfloat* lowerRight}, ${4:GLfloat* upperRight}, ${5:GLfloat* upperLeft})" },  
    { "trigger": "CVOpenGLESTextureGetName", "contents": "CVOpenGLESTextureGetName(${1:CVOpenGLESTextureRef image})" },  
    { "trigger": "CVOpenGLESTextureGetTarget", "contents": "CVOpenGLESTextureGetTarget(${1:CVOpenGLESTextureRef image})" },  
    { "trigger": "CVOpenGLESTextureGetTypeID" },  
    { "trigger": "CVOpenGLESTextureIsFlipped", "contents": "CVOpenGLESTextureIsFlipped(${1:CVOpenGLESTextureRef image})" },  
    { "trigger": "CVPixelBufferCreate", "contents": "CVPixelBufferCreate(${1:CFAllocatorRef allocator}, ${2:size_t width}, ${3:size_t height}, ${4:OSType pixelFormatType}, ${5:CFDictionaryRef pixelBufferAttributes}, ${6:CVPixelBufferRef* pixelBufferOut})" },  
    { "trigger": "CVPixelBufferCreateResolvedAttributesDictionary", "contents": "CVPixelBufferCreateResolvedAttributesDictionary(${1:CFAllocatorRef allocator}, ${2:CFArrayRef attributes}, ${3:CFDictionaryRef* resolvedDictionaryOut})" },  
    { "trigger": "CVPixelBufferCreateWithBytes", "contents": "CVPixelBufferCreateWithBytes(${1:CFAllocatorRef allocator}, ${2:size_t width}, ${3:size_t height}, ${4:OSType pixelFormatType}, ${5:void* baseAddress}, ${6:size_t bytesPerRow}, ${7:CVPixelBufferReleaseBytesCallback releaseCallback}, ${8:void* releaseRefCon}, ${9:CFDictionaryRef pixelBufferAttributes}, ${10:CVPixelBufferRef* pixelBufferOut})" },  
    { "trigger": "CVPixelBufferCreateWithPlanarBytes", "contents": "CVPixelBufferCreateWithPlanarBytes(${1:CFAllocatorRef allocator}, ${2:size_t width}, ${3:size_t height}, ${4:OSType pixelFormatType}, ${5:void* dataPtr}, ${6:size_t dataSize}, ${7:size_t numberOfPlanes}, ${8:void** planeBaseAddress}, ${9:size_t* planeWidth}, ${10:size_t* planeHeight}, ${11:size_t* planeBytesPerRow}, ${12:CVPixelBufferReleasePlanarBytesCallback releaseCallback}, ${13:void* releaseRefCon}, ${14:CFDictionaryRef pixelBufferAttributes}, ${15:CVPixelBufferRef* pixelBufferOut})" },  
    { "trigger": "CVPixelBufferFillExtendedPixels", "contents": "CVPixelBufferFillExtendedPixels(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetBaseAddress", "contents": "CVPixelBufferGetBaseAddress(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetBaseAddressOfPlane", "contents": "CVPixelBufferGetBaseAddressOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})" },  
    { "trigger": "CVPixelBufferGetBytesPerRow", "contents": "CVPixelBufferGetBytesPerRow(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetBytesPerRowOfPlane", "contents": "CVPixelBufferGetBytesPerRowOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})" },  
    { "trigger": "CVPixelBufferGetDataSize", "contents": "CVPixelBufferGetDataSize(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetExtendedPixels", "contents": "CVPixelBufferGetExtendedPixels(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t* extraColumnsOnLeft}, ${3:size_t* extraColumnsOnRight}, ${4:size_t* extraRowsOnTop}, ${5:size_t* extraRowsOnBottom})" },  
    { "trigger": "CVPixelBufferGetHeight", "contents": "CVPixelBufferGetHeight(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetHeightOfPlane", "contents": "CVPixelBufferGetHeightOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})" },  
    { "trigger": "CVPixelBufferGetPixelFormatType", "contents": "CVPixelBufferGetPixelFormatType(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetPlaneCount", "contents": "CVPixelBufferGetPlaneCount(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetTypeID" },  
    { "trigger": "CVPixelBufferGetWidth", "contents": "CVPixelBufferGetWidth(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferGetWidthOfPlane", "contents": "CVPixelBufferGetWidthOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})" },  
    { "trigger": "CVPixelBufferIsPlanar", "contents": "CVPixelBufferIsPlanar(${1:CVPixelBufferRef pixelBuffer})" },  
    { "trigger": "CVPixelBufferLockBaseAddress", "contents": "CVPixelBufferLockBaseAddress(${1:CVPixelBufferRef pixelBuffer}, ${2:CVOptionFlags lockFlags})" },  
    { "trigger": "CVPixelBufferPoolCreate", "contents": "CVPixelBufferPoolCreate(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef poolAttributes}, ${3:CFDictionaryRef pixelBufferAttributes}, ${4:CVPixelBufferPoolRef* poolOut})" },  
    { "trigger": "CVPixelBufferPoolCreatePixelBuffer", "contents": "CVPixelBufferPoolCreatePixelBuffer(${1:CFAllocatorRef allocator}, ${2:CVPixelBufferPoolRef pixelBufferPool}, ${3:CVPixelBufferRef* pixelBufferOut})" },  
    { "trigger": "CVPixelBufferPoolCreatePixelBufferWithAuxAttributes", "contents": "CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(${1:CFAllocatorRef allocator}, ${2:CVPixelBufferPoolRef pixelBufferPool}, ${3:CFDictionaryRef auxAttributes}, ${4:CVPixelBufferRef* pixelBufferOut})" },  
    { "trigger": "CVPixelBufferPoolGetAttributes", "contents": "CVPixelBufferPoolGetAttributes(${1:CVPixelBufferPoolRef pool})" },  
    { "trigger": "CVPixelBufferPoolGetPixelBufferAttributes", "contents": "CVPixelBufferPoolGetPixelBufferAttributes(${1:CVPixelBufferPoolRef pool})" },  
    { "trigger": "CVPixelBufferPoolGetTypeID" },  
    { "trigger": "CVPixelBufferPoolRelease", "contents": "CVPixelBufferPoolRelease(${1:CVPixelBufferPoolRef pixelBufferPool})" },  
    { "trigger": "CVPixelBufferPoolRetain", "contents": "CVPixelBufferPoolRetain(${1:CVPixelBufferPoolRef pixelBufferPool})" },  
    { "trigger": "CVPixelBufferRelease", "contents": "CVPixelBufferRelease(${1:CVPixelBufferRef texture})" },  
    { "trigger": "CVPixelBufferRetain", "contents": "CVPixelBufferRetain(${1:CVPixelBufferRef texture})" },  
    { "trigger": "CVPixelBufferUnlockBaseAddress", "contents": "CVPixelBufferUnlockBaseAddress(${1:CVPixelBufferRef pixelBuffer}, ${2:CVOptionFlags unlockFlags})" },  
    { "trigger": "CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes", "contents": "CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(${1:CFAllocatorRef allocator})" },  
    { "trigger": "CVPixelFormatDescriptionCreateWithPixelFormatType", "contents": "CVPixelFormatDescriptionCreateWithPixelFormatType(${1:CFAllocatorRef allocator}, ${2:OSType pixelFormat})" },  
    { "trigger": "CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType", "contents": "CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(${1:CFDictionaryRef description}, ${2:OSType pixelFormat})" },  
    { "trigger": "CmapFontTableTag (1668112752)" },  
    { "trigger": "DisposeAUGraph", "contents": "DisposeAUGraph(${1:AUGraph inGraph})" },  
    { "trigger": "DisposeMusicEventIterator", "contents": "DisposeMusicEventIterator(${1:MusicEventIterator inIterator})" },  
    { "trigger": "DisposeMusicPlayer", "contents": "DisposeMusicPlayer(${1:MusicPlayer inPlayer})" },  
    { "trigger": "DisposeMusicSequence", "contents": "DisposeMusicSequence(${1:MusicSequence inSequence})" },  
    { "trigger": "EAAccessory" },  
    { "trigger": "EAAccessoryDelegate" },  
    { "trigger": "EAAccessoryDidConnectNotification (NSString*)" },  
    { "trigger": "EAAccessoryDidDisconnectNotification (NSString*)" },  
    { "trigger": "EAAccessoryKey (NSString*)" },  
    { "trigger": "EAAccessoryManager" },  
    { "trigger": "EAAccessoryManager.sharedAccessoryManager" },  
    { "trigger": "EAConnectionIDNone (0)" },  
    { "trigger": "EAGLContext" },  
    { "trigger": "EAGLContext.currentContext" },  
    { "trigger": "EAGLContext.setCurrentContext:", "contents": "EAGLContext.setCurrentContext:(${1:EAGLContext* context})" },  
    { "trigger": "EAGLDrawable" },  
    { "trigger": "EAGLGetVersion", "contents": "EAGLGetVersion(${1:unsigned int* major}, ${2:unsigned int* minor})" },  
    { "trigger": "EAGL_MAJOR_VERSION (1)" },  
    { "trigger": "EAGL_MINOR_VERSION (0)" },  
    { "trigger": "EASession" },  
    { "trigger": "EKAlarm" },  
    { "trigger": "EKAlarm.alarmWithAbsoluteDate:", "contents": "EKAlarm.alarmWithAbsoluteDate:(${1:NSDate* date})" },  
    { "trigger": "EKAlarm.alarmWithRelativeOffset:", "contents": "EKAlarm.alarmWithRelativeOffset:(${1:NSTimeInterval offset})" },  
    { "trigger": "EKCalendar" },  
    { "trigger": "EKCalendarChooser" },  
    { "trigger": "EKCalendarChooserDelegate" },  
    { "trigger": "EKCalendarChooserDisplayAllCalendars (0)" },  
    { "trigger": "EKCalendarChooserDisplayWritableCalendarsOnly (1)" },  
    { "trigger": "EKCalendarChooserSelectionStyleMultiple (1)" },  
    { "trigger": "EKCalendarChooserSelectionStyleSingle (0)" },  
    { "trigger": "EKCalendarEventAvailabilityBusy (1)" },  
    { "trigger": "EKCalendarEventAvailabilityFree (2)" },  
    { "trigger": "EKCalendarEventAvailabilityNone (0)" },  
    { "trigger": "EKCalendarEventAvailabilityTentative (4)" },  
    { "trigger": "EKCalendarEventAvailabilityUnavailable (8)" },  
    { "trigger": "EKCalendarItem" },  
    { "trigger": "EKCalendarTypeBirthday (4)" },  
    { "trigger": "EKCalendarTypeCalDAV (1)" },  
    { "trigger": "EKCalendarTypeExchange (2)" },  
    { "trigger": "EKCalendarTypeLocal (0)" },  
    { "trigger": "EKCalendarTypeSubscription (3)" },  
    { "trigger": "EKCalendar.calendarWithEventStore:", "contents": "EKCalendar.calendarWithEventStore:(${1:EKEventStore* eventStore})" },  
    { "trigger": "EKErrorAlarmGreaterThanRecurrence (8)" },  
    { "trigger": "EKErrorCalendarHasNoSource (14)" },  
    { "trigger": "EKErrorCalendarIsImmutable (16)" },  
    { "trigger": "EKErrorCalendarReadOnly (6)" },  
    { "trigger": "EKErrorCalendarSourceCannotBeModified (15)" },  
    { "trigger": "EKErrorDatesInverted (4)" },  
    { "trigger": "EKErrorDomain (NSString*)" },  
    { "trigger": "EKErrorDurationGreaterThanRecurrence (7)" },  
    { "trigger": "EKErrorEventNotMutable (0)" },  
    { "trigger": "EKErrorInternalFailure (5)" },  
    { "trigger": "EKErrorInvalidSpan (13)" },  
    { "trigger": "EKErrorInvitesCannotBeMoved (12)" },  
    { "trigger": "EKErrorLast (18)" },  
    { "trigger": "EKErrorNoCalendar (1)" },  
    { "trigger": "EKErrorNoEndDate (3)" },  
    { "trigger": "EKErrorNoStartDate (2)" },  
    { "trigger": "EKErrorObjectBelongsToDifferentStore (11)" },  
    { "trigger": "EKErrorSourceDoesNotAllowCalendarAddDelete (17)" },  
    { "trigger": "EKErrorStartDateCollidesWithOtherOccurrence (10)" },  
    { "trigger": "EKErrorStartDateTooFarInFuture (9)" },  
    { "trigger": "EKEvent" },  
    { "trigger": "EKEventAvailabilityBusy (0)" },  
    { "trigger": "EKEventAvailabilityFree (1)" },  
    { "trigger": "EKEventAvailabilityNotSupported (-1)" },  
    { "trigger": "EKEventAvailabilityTentative (2)" },  
    { "trigger": "EKEventAvailabilityUnavailable (3)" },  
    { "trigger": "EKEventEditViewActionCanceled (0)" },  
    { "trigger": "EKEventEditViewActionCancelled (0)" },  
    { "trigger": "EKEventEditViewActionDeleted (2)" },  
    { "trigger": "EKEventEditViewActionSaved (1)" },  
    { "trigger": "EKEventEditViewController" },  
    { "trigger": "EKEventEditViewDelegate" },  
    { "trigger": "EKEventStatusCanceled (3)" },  
    { "trigger": "EKEventStatusConfirmed (1)" },  
    { "trigger": "EKEventStatusNone (0)" },  
    { "trigger": "EKEventStatusTentative (2)" },  
    { "trigger": "EKEventStore" },  
    { "trigger": "EKEventStoreChangedNotification (NSString*)" },  
    { "trigger": "EKEventViewActionDeleted (2)" },  
    { "trigger": "EKEventViewActionDone (0)" },  
    { "trigger": "EKEventViewActionResponded (1)" },  
    { "trigger": "EKEventViewController" },  
    { "trigger": "EKEventViewDelegate" },  
    { "trigger": "EKEvent.eventWithEventStore:", "contents": "EKEvent.eventWithEventStore:(${1:EKEventStore* eventStore})" },  
    { "trigger": "EKFriday (6)" },  
    { "trigger": "EKMonday (2)" },  
    { "trigger": "EKObject" },  
    { "trigger": "EKParticipant" },  
    { "trigger": "EKParticipantRoleChair (3)" },  
    { "trigger": "EKParticipantRoleNonParticipant (4)" },  
    { "trigger": "EKParticipantRoleOptional (2)" },  
    { "trigger": "EKParticipantRoleRequired (1)" },  
    { "trigger": "EKParticipantRoleUnknown (0)" },  
    { "trigger": "EKParticipantStatusAccepted (2)" },  
    { "trigger": "EKParticipantStatusCompleted (6)" },  
    { "trigger": "EKParticipantStatusDeclined (3)" },  
    { "trigger": "EKParticipantStatusDelegated (5)" },  
    { "trigger": "EKParticipantStatusInProcess (7)" },  
    { "trigger": "EKParticipantStatusPending (1)" },  
    { "trigger": "EKParticipantStatusTentative (4)" },  
    { "trigger": "EKParticipantStatusUnknown (0)" },  
    { "trigger": "EKParticipantTypeGroup (4)" },  
    { "trigger": "EKParticipantTypePerson (1)" },  
    { "trigger": "EKParticipantTypeResource (3)" },  
    { "trigger": "EKParticipantTypeRoom (2)" },  
    { "trigger": "EKParticipantTypeUnknown (0)" },  
    { "trigger": "EKRecurrenceDayOfWeek" },  
    { "trigger": "EKRecurrenceDayOfWeek.dayOfWeek:", "contents": "EKRecurrenceDayOfWeek.dayOfWeek:(${1:NSInteger dayOfTheWeek})" },  
    { "trigger": "EKRecurrenceDayOfWeek.dayOfWeek:weekNumber:", "contents": "EKRecurrenceDayOfWeek.dayOfWeek:weekNumber:(${1:NSInteger dayOfTheWeek}, weekNumber:${2:NSInteger weekNumber})" },  
    { "trigger": "EKRecurrenceEnd" },  
    { "trigger": "EKRecurrenceEnd.recurrenceEndWithEndDate:", "contents": "EKRecurrenceEnd.recurrenceEndWithEndDate:(${1:NSDate* endDate})" },  
    { "trigger": "EKRecurrenceEnd.recurrenceEndWithOccurrenceCount:", "contents": "EKRecurrenceEnd.recurrenceEndWithOccurrenceCount:(${1:NSUInteger occurrenceCount})" },  
    { "trigger": "EKRecurrenceFrequencyDaily (0)" },  
    { "trigger": "EKRecurrenceFrequencyMonthly (2)" },  
    { "trigger": "EKRecurrenceFrequencyWeekly (1)" },  
    { "trigger": "EKRecurrenceFrequencyYearly (3)" },  
    { "trigger": "EKRecurrenceRule" },  
    { "trigger": "EKSaturday (7)" },  
    { "trigger": "EKSource" },  
    { "trigger": "EKSourceTypeBirthdays (5)" },  
    { "trigger": "EKSourceTypeCalDAV (2)" },  
    { "trigger": "EKSourceTypeExchange (1)" },  
    { "trigger": "EKSourceTypeLocal (0)" },  
    { "trigger": "EKSourceTypeMobileMe (3)" },  
    { "trigger": "EKSourceTypeSubscribed (4)" },  
    { "trigger": "EKSpanFutureEvents (1)" },  
    { "trigger": "EKSpanThisEvent (0)" },  
    { "trigger": "EKSunday (1)" },  
    { "trigger": "EKThursday (5)" },  
    { "trigger": "EKTuesday (3)" },  
    { "trigger": "EKWednesday (4)" },  
    { "trigger": "E_ABORT (-2147483641)" },  
    { "trigger": "E_ACCESSDENIED (-2147483639)" },  
    { "trigger": "E_FAIL (-2147483640)" },  
    { "trigger": "E_HANDLE (-2147483642)" },  
    { "trigger": "E_INVALIDARG (-2147483645)" },  
    { "trigger": "E_NOINTERFACE (-2147483644)" },  
    { "trigger": "E_NOTIMPL (-2147483647)" },  
    { "trigger": "E_OUTOFMEMORY (-2147483646)" },  
    { "trigger": "E_POINTER (-2147483643)" },  
    { "trigger": "E_UNEXPECTED (-2147418113)" },  
    { "trigger": "ErrSSLBadCert (-9808)" },  
    { "trigger": "ErrSSLBadCipherSuite (-9818)" },  
    { "trigger": "ErrSSLBadConfiguration (-9848)" },  
    { "trigger": "ErrSSLBadRecordMac (-9846)" },  
    { "trigger": "ErrSSLBufferOverflow (-9817)" },  
    { "trigger": "ErrSSLCertExpired (-9814)" },  
    { "trigger": "ErrSSLCertNotYetValid (-9815)" },  
    { "trigger": "ErrSSLClientAuthCompleted (-9841)" },  
    { "trigger": "ErrSSLClientCertRequested (-9842)" },  
    { "trigger": "ErrSSLClosedAbort (-9806)" },  
    { "trigger": "ErrSSLClosedGraceful (-9805)" },  
    { "trigger": "ErrSSLClosedNoNotify (-9816)" },  
    { "trigger": "ErrSSLConnectionRefused (-9844)" },  
    { "trigger": "ErrSSLCrypto (-9809)" },  
    { "trigger": "ErrSSLDecryptionFail (-9845)" },  
    { "trigger": "ErrSSLFatalAlert (-9802)" },  
    { "trigger": "ErrSSLHostNameMismatch (-9843)" },  
    { "trigger": "ErrSSLIllegalParam (-9830)" },  
    { "trigger": "ErrSSLInternal (-9810)" },  
    { "trigger": "ErrSSLLast (-9849)" },  
    { "trigger": "ErrSSLModuleAttach (-9811)" },  
    { "trigger": "ErrSSLNegotiation (-9801)" },  
    { "trigger": "ErrSSLNoRootCert (-9813)" },  
    { "trigger": "ErrSSLPeerAccessDenied (-9832)" },  
    { "trigger": "ErrSSLPeerAuthCompleted (-9841)" },  
    { "trigger": "ErrSSLPeerBadCert (-9825)" },  
    { "trigger": "ErrSSLPeerBadRecordMac (-9820)" },  
    { "trigger": "ErrSSLPeerCertExpired (-9828)" },  
    { "trigger": "ErrSSLPeerCertRevoked (-9827)" },  
    { "trigger": "ErrSSLPeerCertUnknown (-9829)" },  
    { "trigger": "ErrSSLPeerDecodeError (-9833)" },  
    { "trigger": "ErrSSLPeerDecompressFail (-9823)" },  
    { "trigger": "ErrSSLPeerDecryptError (-9834)" },  
    { "trigger": "ErrSSLPeerDecryptionFail (-9821)" },  
    { "trigger": "ErrSSLPeerExportRestriction (-9835)" },  
    { "trigger": "ErrSSLPeerHandshakeFail (-9824)" },  
    { "trigger": "ErrSSLPeerInsufficientSecurity (-9837)" },  
    { "trigger": "ErrSSLPeerInternalError (-9838)" },  
    { "trigger": "ErrSSLPeerNoRenegotiation (-9840)" },  
    { "trigger": "ErrSSLPeerProtocolVersion (-9836)" },  
    { "trigger": "ErrSSLPeerRecordOverflow (-9822)" },  
    { "trigger": "ErrSSLPeerUnexpectedMsg (-9819)" },  
    { "trigger": "ErrSSLPeerUnknownCA (-9831)" },  
    { "trigger": "ErrSSLPeerUnsupportedCert (-9826)" },  
    { "trigger": "ErrSSLPeerUserCancelled (-9839)" },  
    { "trigger": "ErrSSLProtocol (-9800)" },  
    { "trigger": "ErrSSLRecordOverflow (-9847)" },  
    { "trigger": "ErrSSLServerAuthCompleted (-9841)" },  
    { "trigger": "ErrSSLSessionNotFound (-9804)" },  
    { "trigger": "ErrSSLUnknownRootCert (-9812)" },  
    { "trigger": "ErrSSLWouldBlock (-9803)" },  
    { "trigger": "ErrSSLXCertChainInvalid (-9807)" },  
    { "trigger": "ErrSecAllocate (-108)" },  
    { "trigger": "ErrSecAuthFailed (-25293)" },  
    { "trigger": "ErrSecDecode (-26275)" },  
    { "trigger": "ErrSecDuplicateItem (-25299)" },  
    { "trigger": "ErrSecInteractionNotAllowed (-25308)" },  
    { "trigger": "ErrSecItemNotFound (-25300)" },  
    { "trigger": "ErrSecNotAvailable (-25291)" },  
    { "trigger": "ErrSecParam (-50)" },  
    { "trigger": "ErrSecSuccess (0)" },  
    { "trigger": "ErrSecUnimplemented (-4)" },  
    { "trigger": "ExtAudioFileCreateWithURL", "contents": "ExtAudioFileCreateWithURL(${1:CFURLRef inURL}, ${2:AudioFileTypeID inFileType}, ${3:AudioStreamBasicDescription* inStreamDesc}, ${4:AudioChannelLayout* inChannelLayout}, ${5:UInt32 inFlags}, ${6:ExtAudioFileRef* outExtAudioFile})" },  
    { "trigger": "ExtAudioFileDispose", "contents": "ExtAudioFileDispose(${1:ExtAudioFileRef inExtAudioFile})" },  
    { "trigger": "ExtAudioFileGetProperty", "contents": "ExtAudioFileGetProperty(${1:ExtAudioFileRef inExtAudioFile}, ${2:ExtAudioFilePropertyID inPropertyID}, ${3:UInt32* ioPropertyDataSize}, ${4:void* outPropertyData})" },  
    { "trigger": "ExtAudioFileGetPropertyInfo", "contents": "ExtAudioFileGetPropertyInfo(${1:ExtAudioFileRef inExtAudioFile}, ${2:ExtAudioFilePropertyID inPropertyID}, ${3:UInt32* outSize}, ${4:Boolean* outWritable})" },  
    { "trigger": "ExtAudioFileOpenURL", "contents": "ExtAudioFileOpenURL(${1:CFURLRef inURL}, ${2:ExtAudioFileRef* outExtAudioFile})" },  
    { "trigger": "ExtAudioFileRead", "contents": "ExtAudioFileRead(${1:ExtAudioFileRef inExtAudioFile}, ${2:UInt32* ioNumberFrames}, ${3:AudioBufferList* ioData})" },  
    { "trigger": "ExtAudioFileSeek", "contents": "ExtAudioFileSeek(${1:ExtAudioFileRef inExtAudioFile}, ${2:SInt64 inFrameOffset})" },  
    { "trigger": "ExtAudioFileSetProperty", "contents": "ExtAudioFileSetProperty(${1:ExtAudioFileRef inExtAudioFile}, ${2:ExtAudioFilePropertyID inPropertyID}, ${3:UInt32 inPropertyDataSize}, ${4:void* inPropertyData})" },  
    { "trigger": "ExtAudioFileTell", "contents": "ExtAudioFileTell(${1:ExtAudioFileRef inExtAudioFile}, ${2:SInt64* outFrameOffset})" },  
    { "trigger": "ExtAudioFileWrapAudioFileID", "contents": "ExtAudioFileWrapAudioFileID(${1:AudioFileID inFileID}, ${2:Boolean inForWriting}, ${3:ExtAudioFileRef* outExtAudioFile})" },  
    { "trigger": "ExtAudioFileWrite", "contents": "ExtAudioFileWrite(${1:ExtAudioFileRef inExtAudioFile}, ${2:UInt32 inNumberFrames}, ${3:AudioBufferList* ioData})" },  
    { "trigger": "ExtAudioFileWriteAsync", "contents": "ExtAudioFileWriteAsync(${1:ExtAudioFileRef inExtAudioFile}, ${2:UInt32 inNumberFrames}, ${3:AudioBufferList* ioData})" },  
    { "trigger": "FALSE (0)" },  
    { "trigger": "FeatureFontTableTag (1717920116)" },  
    { "trigger": "GKAchievement" },  
    { "trigger": "GKAchievementDescription" },  
    { "trigger": "GKAchievementDescription.incompleteAchievementImage" },  
    { "trigger": "GKAchievementDescription.loadAchievementDescriptionsWithCompletionHandler:", "contents": "GKAchievementDescription.loadAchievementDescriptionsWithCompletionHandler:(${1:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "GKAchievementDescription.placeholderCompletedAchievementImage" },  
    { "trigger": "GKAchievementViewController" },  
    { "trigger": "GKAchievementViewControllerDelegate" },  
    { "trigger": "GKAchievement.loadAchievementsWithCompletionHandler:", "contents": "GKAchievement.loadAchievementsWithCompletionHandler:(${1:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "GKAchievement.resetAchievementsWithCompletionHandler:", "contents": "GKAchievement.resetAchievementsWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "GKErrorAuthenticationInProgress (7)" },  
    { "trigger": "GKErrorCancelled (2)" },  
    { "trigger": "GKErrorCommunicationsFailure (3)" },  
    { "trigger": "GKErrorDomain (NSString*)" },  
    { "trigger": "GKErrorGameUnrecognized (15)" },  
    { "trigger": "GKErrorInvalidCredentials (5)" },  
    { "trigger": "GKErrorInvalidParameter (17)" },  
    { "trigger": "GKErrorInvalidPlayer (8)" },  
    { "trigger": "GKErrorMatchRequestInvalid (13)" },  
    { "trigger": "GKErrorNotAuthenticated (6)" },  
    { "trigger": "GKErrorNotSupported (16)" },  
    { "trigger": "GKErrorParentalControlsBlocked (10)" },  
    { "trigger": "GKErrorPlayerStatusExceedsMaximumLength (11)" },  
    { "trigger": "GKErrorPlayerStatusInvalid (12)" },  
    { "trigger": "GKErrorScoreNotSet (9)" },  
    { "trigger": "GKErrorUnderage (14)" },  
    { "trigger": "GKErrorUnexpectedConnection (18)" },  
    { "trigger": "GKErrorUnknown (1)" },  
    { "trigger": "GKErrorUserDenied (4)" },  
    { "trigger": "GKFriendRequestComposeViewController" },  
    { "trigger": "GKFriendRequestComposeViewControllerDelegate" },  
    { "trigger": "GKFriendRequestComposeViewController.maxNumberOfRecipients" },  
    { "trigger": "GKInvite" },  
    { "trigger": "GKLeaderboard" },  
    { "trigger": "GKLeaderboardPlayerScopeFriendsOnly (1)" },  
    { "trigger": "GKLeaderboardPlayerScopeGlobal (0)" },  
    { "trigger": "GKLeaderboardTimeScopeAllTime (2)" },  
    { "trigger": "GKLeaderboardTimeScopeToday (0)" },  
    { "trigger": "GKLeaderboardTimeScopeWeek (1)" },  
    { "trigger": "GKLeaderboardViewController" },  
    { "trigger": "GKLeaderboardViewControllerDelegate" },  
    { "trigger": "GKLeaderboard.loadCategoriesWithCompletionHandler:", "contents": "GKLeaderboard.loadCategoriesWithCompletionHandler:(${1:void (^)(NSArray *, NSArray *, NSError *) completionHandler})" },  
    { "trigger": "GKLeaderboard.setDefaultLeaderboard:withCompletionHandler:", "contents": "GKLeaderboard.setDefaultLeaderboard:withCompletionHandler:(${1:NSString* categoryID}, withCompletionHandler:${2:void (^)(NSError *) completionHandler})" },  
    { "trigger": "GKLocalPlayer" },  
    { "trigger": "GKLocalPlayer.localPlayer" },  
    { "trigger": "GKMatch" },  
    { "trigger": "GKMatchDelegate" },  
    { "trigger": "GKMatchRequest" },  
    { "trigger": "GKMatchSendDataReliable (0)" },  
    { "trigger": "GKMatchSendDataUnreliable (1)" },  
    { "trigger": "GKMatchmaker" },  
    { "trigger": "GKMatchmakerViewController" },  
    { "trigger": "GKMatchmakerViewControllerDelegate" },  
    { "trigger": "GKMatchmaker.sharedMatchmaker" },  
    { "trigger": "GKNotificationBanner" },  
    { "trigger": "GKNotificationBanner.showBannerWithTitle:message:completionHandler:", "contents": "GKNotificationBanner.showBannerWithTitle:message:completionHandler:(${1:NSString* title}, message:${2:NSString* message}, completionHandler:${3:void (^)(void) completionHandler})" },  
    { "trigger": "GKPeerPickerConnectionTypeNearby (2)" },  
    { "trigger": "GKPeerPickerConnectionTypeOnline (1)" },  
    { "trigger": "GKPeerPickerController" },  
    { "trigger": "GKPeerPickerControllerDelegate" },  
    { "trigger": "GKPeerStateAvailable (0)" },  
    { "trigger": "GKPeerStateConnected (2)" },  
    { "trigger": "GKPeerStateConnecting (4)" },  
    { "trigger": "GKPeerStateDisconnected (3)" },  
    { "trigger": "GKPeerStateUnavailable (1)" },  
    { "trigger": "GKPhotoSizeNormal (1)" },  
    { "trigger": "GKPhotoSizeSmall (0)" },  
    { "trigger": "GKPlayer" },  
    { "trigger": "GKPlayerAuthenticationDidChangeNotificationName (NSString*)" },  
    { "trigger": "GKPlayerDidChangeNotificationName (NSString*)" },  
    { "trigger": "GKPlayerStateConnected (1)" },  
    { "trigger": "GKPlayerStateDisconnected (2)" },  
    { "trigger": "GKPlayerStateUnknown (0)" },  
    { "trigger": "GKPlayer.loadPlayersForIdentifiers:withCompletionHandler:", "contents": "GKPlayer.loadPlayersForIdentifiers:withCompletionHandler:(${1:NSArray* identifiers}, withCompletionHandler:${2:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "GKScore" },  
    { "trigger": "GKSendDataReliable (0)" },  
    { "trigger": "GKSendDataUnreliable (1)" },  
    { "trigger": "GKSession" },  
    { "trigger": "GKSessionCancelledError (30504)" },  
    { "trigger": "GKSessionCannotEnableError (30509)" },  
    { "trigger": "GKSessionConnectionClosedError (30506)" },  
    { "trigger": "GKSessionConnectionFailedError (30505)" },  
    { "trigger": "GKSessionConnectivityError (30201)" },  
    { "trigger": "GKSessionDataTooBigError (30507)" },  
    { "trigger": "GKSessionDeclinedError (30502)" },  
    { "trigger": "GKSessionDelegate" },  
    { "trigger": "GKSessionErrorDomain (NSString*)" },  
    { "trigger": "GKSessionInProgressError (30510)" },  
    { "trigger": "GKSessionInternalError (30203)" },  
    { "trigger": "GKSessionInvalidParameterError (30500)" },  
    { "trigger": "GKSessionModeClient (1)" },  
    { "trigger": "GKSessionModePeer (2)" },  
    { "trigger": "GKSessionModeServer (0)" },  
    { "trigger": "GKSessionNotConnectedError (30508)" },  
    { "trigger": "GKSessionPeerNotFoundError (30501)" },  
    { "trigger": "GKSessionSystemError (30205)" },  
    { "trigger": "GKSessionTimedOutError (30503)" },  
    { "trigger": "GKSessionTransportError (30202)" },  
    { "trigger": "GKSessionUnknownError (30204)" },  
    { "trigger": "GKTurnBasedEventHandler" },  
    { "trigger": "GKTurnBasedEventHandlerDelegate" },  
    { "trigger": "GKTurnBasedEventHandler.sharedTurnBasedEventHandler" },  
    { "trigger": "GKTurnBasedMatch" },  
    { "trigger": "GKTurnBasedMatchOutcomeCustomRange (16711680)" },  
    { "trigger": "GKTurnBasedMatchOutcomeFirst (6)" },  
    { "trigger": "GKTurnBasedMatchOutcomeFourth (9)" },  
    { "trigger": "GKTurnBasedMatchOutcomeLost (3)" },  
    { "trigger": "GKTurnBasedMatchOutcomeNone (0)" },  
    { "trigger": "GKTurnBasedMatchOutcomeQuit (1)" },  
    { "trigger": "GKTurnBasedMatchOutcomeSecond (7)" },  
    { "trigger": "GKTurnBasedMatchOutcomeThird (8)" },  
    { "trigger": "GKTurnBasedMatchOutcomeTied (4)" },  
    { "trigger": "GKTurnBasedMatchOutcomeTimeExpired (5)" },  
    { "trigger": "GKTurnBasedMatchOutcomeWon (2)" },  
    { "trigger": "GKTurnBasedMatchStatusEnded (2)" },  
    { "trigger": "GKTurnBasedMatchStatusMatching (3)" },  
    { "trigger": "GKTurnBasedMatchStatusOpen (1)" },  
    { "trigger": "GKTurnBasedMatchStatusUnknown (0)" },  
    { "trigger": "GKTurnBasedMatch.findMatchForRequest:withCompletionHandler:", "contents": "GKTurnBasedMatch.findMatchForRequest:withCompletionHandler:(${1:GKMatchRequest* request}, withCompletionHandler:${2:void (^)(GKTurnBasedMatch *, NSError *) completionHandler})" },  
    { "trigger": "GKTurnBasedMatch.loadMatchesWithCompletionHandler:", "contents": "GKTurnBasedMatch.loadMatchesWithCompletionHandler:(${1:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "GKTurnBasedMatchmakerViewController" },  
    { "trigger": "GKTurnBasedMatchmakerViewControllerDelegate" },  
    { "trigger": "GKTurnBasedParticipant" },  
    { "trigger": "GKTurnBasedParticipantStatusActive (4)" },  
    { "trigger": "GKTurnBasedParticipantStatusDeclined (2)" },  
    { "trigger": "GKTurnBasedParticipantStatusDone (5)" },  
    { "trigger": "GKTurnBasedParticipantStatusInvited (1)" },  
    { "trigger": "GKTurnBasedParticipantStatusMatching (3)" },  
    { "trigger": "GKTurnBasedParticipantStatusUnknown (0)" },  
    { "trigger": "GKVoiceChat" },  
    { "trigger": "GKVoiceChatClient" },  
    { "trigger": "GKVoiceChatPlayerConnected (0)" },  
    { "trigger": "GKVoiceChatPlayerDisconnected (1)" },  
    { "trigger": "GKVoiceChatPlayerSilent (3)" },  
    { "trigger": "GKVoiceChatPlayerSpeaking (2)" },  
    { "trigger": "GKVoiceChatService" },  
    { "trigger": "GKVoiceChatServiceAudioUnavailableError (32005)" },  
    { "trigger": "GKVoiceChatServiceClientMissingRequiredMethodsError (32007)" },  
    { "trigger": "GKVoiceChatServiceErrorDomain (NSString*)" },  
    { "trigger": "GKVoiceChatServiceInternalError (32000)" },  
    { "trigger": "GKVoiceChatServiceInvalidCallIDError (32004)" },  
    { "trigger": "GKVoiceChatServiceInvalidParameterError (32016)" },  
    { "trigger": "GKVoiceChatServiceMethodCurrentlyInvalidError (32012)" },  
    { "trigger": "GKVoiceChatServiceNetworkConfigurationError (32013)" },  
    { "trigger": "GKVoiceChatServiceNoRemotePacketsError (32001)" },  
    { "trigger": "GKVoiceChatServiceOutOfMemoryError (32015)" },  
    { "trigger": "GKVoiceChatServiceRemoteParticipantBusyError (32008)" },  
    { "trigger": "GKVoiceChatServiceRemoteParticipantCancelledError (32009)" },  
    { "trigger": "GKVoiceChatServiceRemoteParticipantDeclinedInviteError (32011)" },  
    { "trigger": "GKVoiceChatServiceRemoteParticipantHangupError (32003)" },  
    { "trigger": "GKVoiceChatServiceRemoteParticipantResponseInvalidError (32010)" },  
    { "trigger": "GKVoiceChatServiceUnableToConnectError (32002)" },  
    { "trigger": "GKVoiceChatServiceUninitializedClientError (32006)" },  
    { "trigger": "GKVoiceChatServiceUnsupportedRemoteVersionError (32014)" },  
    { "trigger": "GKVoiceChatService.defaultVoiceChatService" },  
    { "trigger": "GKVoiceChatService.isVoIPAllowed" },  
    { "trigger": "GKVoiceChat.isVoIPAllowed" },  
    { "trigger": "GLKBaseEffect" },  
    { "trigger": "GLKEffectPropertyFog" },  
    { "trigger": "GLKEffectPropertyLight" },  
    { "trigger": "GLKEffectPropertyMaterial" },  
    { "trigger": "GLKEffectPropertyTexture" },  
    { "trigger": "GLKEffectPropertyTransform" },  
    { "trigger": "GLKFogModeExp (0)" },  
    { "trigger": "GLKFogModeExp2 (1)" },  
    { "trigger": "GLKFogModeLinear (2)" },  
    { "trigger": "GLKLightingTypePerPixel (1)" },  
    { "trigger": "GLKLightingTypePerVertex (0)" },  
    { "trigger": "GLKMathDegreesToRadians", "contents": "GLKMathDegreesToRadians(${1:float degrees})" },  
    { "trigger": "GLKMathProject", "contents": "GLKMathProject(${1:GLKVector3 object}, ${2:GLKMatrix4 model}, ${3:GLKMatrix4 projection}, ${4:int* viewport})" },  
    { "trigger": "GLKMathRadiansToDegrees", "contents": "GLKMathRadiansToDegrees(${1:float radians})" },  
    { "trigger": "GLKMathUnproject", "contents": "GLKMathUnproject(${1:GLKVector3 window}, ${2:GLKMatrix4 model}, ${3:GLKMatrix4 projection}, ${4:int* viewport}, ${5:_Bool* success})" },  
    { "trigger": "GLKMatrix3Add", "contents": "GLKMatrix3Add(${1:GLKMatrix3 matrixLeft}, ${2:GLKMatrix3 matrixRight})" },  
    { "trigger": "GLKMatrix3GetColumn", "contents": "GLKMatrix3GetColumn(${1:GLKMatrix3 matrix}, ${2:int column})" },  
    { "trigger": "GLKMatrix3GetMatrix2", "contents": "GLKMatrix3GetMatrix2(${1:GLKMatrix3 matrix})" },  
    { "trigger": "GLKMatrix3GetRow", "contents": "GLKMatrix3GetRow(${1:GLKMatrix3 matrix}, ${2:int row})" },  
    { "trigger": "GLKMatrix3Identity (GLKMatrix3)" },  
    { "trigger": "GLKMatrix3Invert", "contents": "GLKMatrix3Invert(${1:GLKMatrix3 matrix}, ${2:_Bool* isInvertible})" },  
    { "trigger": "GLKMatrix3InvertAndTranspose", "contents": "GLKMatrix3InvertAndTranspose(${1:GLKMatrix3 matrix}, ${2:_Bool* isInvertible})" },  
    { "trigger": "GLKMatrix3Make", "contents": "GLKMatrix3Make(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m10}, ${5:float m11}, ${6:float m12}, ${7:float m20}, ${8:float m21}, ${9:float m22})" },  
    { "trigger": "GLKMatrix3MakeAndTranspose", "contents": "GLKMatrix3MakeAndTranspose(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m10}, ${5:float m11}, ${6:float m12}, ${7:float m20}, ${8:float m21}, ${9:float m22})" },  
    { "trigger": "GLKMatrix3MakeRotation", "contents": "GLKMatrix3MakeRotation(${1:float radians}, ${2:float x}, ${3:float y}, ${4:float z})" },  
    { "trigger": "GLKMatrix3MakeScale", "contents": "GLKMatrix3MakeScale(${1:float sx}, ${2:float sy}, ${3:float sz})" },  
    { "trigger": "GLKMatrix3MakeWithArray", "contents": "GLKMatrix3MakeWithArray(${1:float* values})" },  
    { "trigger": "GLKMatrix3MakeWithArrayAndTranspose", "contents": "GLKMatrix3MakeWithArrayAndTranspose(${1:float* values})" },  
    { "trigger": "GLKMatrix3MakeWithColumns", "contents": "GLKMatrix3MakeWithColumns(${1:GLKVector3 column0}, ${2:GLKVector3 column1}, ${3:GLKVector3 column2})" },  
    { "trigger": "GLKMatrix3MakeWithQuaternion", "contents": "GLKMatrix3MakeWithQuaternion(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKMatrix3MakeWithRows", "contents": "GLKMatrix3MakeWithRows(${1:GLKVector3 row0}, ${2:GLKVector3 row1}, ${3:GLKVector3 row2})" },  
    { "trigger": "GLKMatrix3MakeXRotation", "contents": "GLKMatrix3MakeXRotation(${1:float radians})" },  
    { "trigger": "GLKMatrix3MakeYRotation", "contents": "GLKMatrix3MakeYRotation(${1:float radians})" },  
    { "trigger": "GLKMatrix3MakeZRotation", "contents": "GLKMatrix3MakeZRotation(${1:float radians})" },  
    { "trigger": "GLKMatrix3Multiply", "contents": "GLKMatrix3Multiply(${1:GLKMatrix3 matrixLeft}, ${2:GLKMatrix3 matrixRight})" },  
    { "trigger": "GLKMatrix3MultiplyVector3", "contents": "GLKMatrix3MultiplyVector3(${1:GLKMatrix3 matrixLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKMatrix3MultiplyVector3Array", "contents": "GLKMatrix3MultiplyVector3Array(${1:GLKMatrix3 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKMatrix3Rotate", "contents": "GLKMatrix3Rotate(${1:GLKMatrix3 matrix}, ${2:float radians}, ${3:float x}, ${4:float y}, ${5:float z})" },  
    { "trigger": "GLKMatrix3RotateWithVector3", "contents": "GLKMatrix3RotateWithVector3(${1:GLKMatrix3 matrix}, ${2:float radians}, ${3:GLKVector3 axisVector})" },  
    { "trigger": "GLKMatrix3RotateWithVector4", "contents": "GLKMatrix3RotateWithVector4(${1:GLKMatrix3 matrix}, ${2:float radians}, ${3:GLKVector4 axisVector})" },  
    { "trigger": "GLKMatrix3RotateX", "contents": "GLKMatrix3RotateX(${1:GLKMatrix3 matrix}, ${2:float radians})" },  
    { "trigger": "GLKMatrix3RotateY", "contents": "GLKMatrix3RotateY(${1:GLKMatrix3 matrix}, ${2:float radians})" },  
    { "trigger": "GLKMatrix3RotateZ", "contents": "GLKMatrix3RotateZ(${1:GLKMatrix3 matrix}, ${2:float radians})" },  
    { "trigger": "GLKMatrix3Scale", "contents": "GLKMatrix3Scale(${1:GLKMatrix3 matrix}, ${2:float sx}, ${3:float sy}, ${4:float sz})" },  
    { "trigger": "GLKMatrix3ScaleWithVector3", "contents": "GLKMatrix3ScaleWithVector3(${1:GLKMatrix3 matrix}, ${2:GLKVector3 scaleVector})" },  
    { "trigger": "GLKMatrix3ScaleWithVector4", "contents": "GLKMatrix3ScaleWithVector4(${1:GLKMatrix3 matrix}, ${2:GLKVector4 scaleVector})" },  
    { "trigger": "GLKMatrix3SetColumn", "contents": "GLKMatrix3SetColumn(${1:GLKMatrix3 matrix}, ${2:int column}, ${3:GLKVector3 vector})" },  
    { "trigger": "GLKMatrix3SetRow", "contents": "GLKMatrix3SetRow(${1:GLKMatrix3 matrix}, ${2:int row}, ${3:GLKVector3 vector})" },  
    { "trigger": "GLKMatrix3Subtract", "contents": "GLKMatrix3Subtract(${1:GLKMatrix3 matrixLeft}, ${2:GLKMatrix3 matrixRight})" },  
    { "trigger": "GLKMatrix3Transpose", "contents": "GLKMatrix3Transpose(${1:GLKMatrix3 matrix})" },  
    { "trigger": "GLKMatrix4Add", "contents": "GLKMatrix4Add(${1:GLKMatrix4 matrixLeft}, ${2:GLKMatrix4 matrixRight})" },  
    { "trigger": "GLKMatrix4GetColumn", "contents": "GLKMatrix4GetColumn(${1:GLKMatrix4 matrix}, ${2:int column})" },  
    { "trigger": "GLKMatrix4GetMatrix2", "contents": "GLKMatrix4GetMatrix2(${1:GLKMatrix4 matrix})" },  
    { "trigger": "GLKMatrix4GetMatrix3", "contents": "GLKMatrix4GetMatrix3(${1:GLKMatrix4 matrix})" },  
    { "trigger": "GLKMatrix4GetRow", "contents": "GLKMatrix4GetRow(${1:GLKMatrix4 matrix}, ${2:int row})" },  
    { "trigger": "GLKMatrix4Identity (GLKMatrix4)" },  
    { "trigger": "GLKMatrix4Invert", "contents": "GLKMatrix4Invert(${1:GLKMatrix4 matrix}, ${2:_Bool* isInvertible})" },  
    { "trigger": "GLKMatrix4InvertAndTranspose", "contents": "GLKMatrix4InvertAndTranspose(${1:GLKMatrix4 matrix}, ${2:_Bool* isInvertible})" },  
    { "trigger": "GLKMatrix4Make", "contents": "GLKMatrix4Make(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m03}, ${5:float m10}, ${6:float m11}, ${7:float m12}, ${8:float m13}, ${9:float m20}, ${10:float m21}, ${11:float m22}, ${12:float m23}, ${13:float m30}, ${14:float m31}, ${15:float m32}, ${16:float m33})" },  
    { "trigger": "GLKMatrix4MakeAndTranspose", "contents": "GLKMatrix4MakeAndTranspose(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m03}, ${5:float m10}, ${6:float m11}, ${7:float m12}, ${8:float m13}, ${9:float m20}, ${10:float m21}, ${11:float m22}, ${12:float m23}, ${13:float m30}, ${14:float m31}, ${15:float m32}, ${16:float m33})" },  
    { "trigger": "GLKMatrix4MakeFrustum", "contents": "GLKMatrix4MakeFrustum(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top}, ${5:float nearZ}, ${6:float farZ})" },  
    { "trigger": "GLKMatrix4MakeLookAt", "contents": "GLKMatrix4MakeLookAt(${1:float eyeX}, ${2:float eyeY}, ${3:float eyeZ}, ${4:float centerX}, ${5:float centerY}, ${6:float centerZ}, ${7:float upX}, ${8:float upY}, ${9:float upZ})" },  
    { "trigger": "GLKMatrix4MakeOrtho", "contents": "GLKMatrix4MakeOrtho(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top}, ${5:float nearZ}, ${6:float farZ})" },  
    { "trigger": "GLKMatrix4MakePerspective", "contents": "GLKMatrix4MakePerspective(${1:float fovyRadians}, ${2:float aspect}, ${3:float nearZ}, ${4:float farZ})" },  
    { "trigger": "GLKMatrix4MakeRotation", "contents": "GLKMatrix4MakeRotation(${1:float radians}, ${2:float x}, ${3:float y}, ${4:float z})" },  
    { "trigger": "GLKMatrix4MakeScale", "contents": "GLKMatrix4MakeScale(${1:float sx}, ${2:float sy}, ${3:float sz})" },  
    { "trigger": "GLKMatrix4MakeTranslation", "contents": "GLKMatrix4MakeTranslation(${1:float tx}, ${2:float ty}, ${3:float tz})" },  
    { "trigger": "GLKMatrix4MakeWithArray", "contents": "GLKMatrix4MakeWithArray(${1:float* values})" },  
    { "trigger": "GLKMatrix4MakeWithArrayAndTranspose", "contents": "GLKMatrix4MakeWithArrayAndTranspose(${1:float* values})" },  
    { "trigger": "GLKMatrix4MakeWithColumns", "contents": "GLKMatrix4MakeWithColumns(${1:GLKVector4 column0}, ${2:GLKVector4 column1}, ${3:GLKVector4 column2}, ${4:GLKVector4 column3})" },  
    { "trigger": "GLKMatrix4MakeWithQuaternion", "contents": "GLKMatrix4MakeWithQuaternion(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKMatrix4MakeWithRows", "contents": "GLKMatrix4MakeWithRows(${1:GLKVector4 row0}, ${2:GLKVector4 row1}, ${3:GLKVector4 row2}, ${4:GLKVector4 row3})" },  
    { "trigger": "GLKMatrix4MakeXRotation", "contents": "GLKMatrix4MakeXRotation(${1:float radians})" },  
    { "trigger": "GLKMatrix4MakeYRotation", "contents": "GLKMatrix4MakeYRotation(${1:float radians})" },  
    { "trigger": "GLKMatrix4MakeZRotation", "contents": "GLKMatrix4MakeZRotation(${1:float radians})" },  
    { "trigger": "GLKMatrix4Multiply", "contents": "GLKMatrix4Multiply(${1:GLKMatrix4 matrixLeft}, ${2:GLKMatrix4 matrixRight})" },  
    { "trigger": "GLKMatrix4MultiplyAndProjectVector3", "contents": "GLKMatrix4MultiplyAndProjectVector3(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKMatrix4MultiplyAndProjectVector3Array", "contents": "GLKMatrix4MultiplyAndProjectVector3Array(${1:GLKMatrix4 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKMatrix4MultiplyVector3", "contents": "GLKMatrix4MultiplyVector3(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKMatrix4MultiplyVector3Array", "contents": "GLKMatrix4MultiplyVector3Array(${1:GLKMatrix4 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKMatrix4MultiplyVector3ArrayWithTranslation", "contents": "GLKMatrix4MultiplyVector3ArrayWithTranslation(${1:GLKMatrix4 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKMatrix4MultiplyVector3WithTranslation", "contents": "GLKMatrix4MultiplyVector3WithTranslation(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKMatrix4MultiplyVector4", "contents": "GLKMatrix4MultiplyVector4(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKMatrix4MultiplyVector4Array", "contents": "GLKMatrix4MultiplyVector4Array(${1:GLKMatrix4 matrix}, ${2:GLKVector4* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKMatrix4Rotate", "contents": "GLKMatrix4Rotate(${1:GLKMatrix4 matrix}, ${2:float radians}, ${3:float x}, ${4:float y}, ${5:float z})" },  
    { "trigger": "GLKMatrix4RotateWithVector3", "contents": "GLKMatrix4RotateWithVector3(${1:GLKMatrix4 matrix}, ${2:float radians}, ${3:GLKVector3 axisVector})" },  
    { "trigger": "GLKMatrix4RotateWithVector4", "contents": "GLKMatrix4RotateWithVector4(${1:GLKMatrix4 matrix}, ${2:float radians}, ${3:GLKVector4 axisVector})" },  
    { "trigger": "GLKMatrix4RotateX", "contents": "GLKMatrix4RotateX(${1:GLKMatrix4 matrix}, ${2:float radians})" },  
    { "trigger": "GLKMatrix4RotateY", "contents": "GLKMatrix4RotateY(${1:GLKMatrix4 matrix}, ${2:float radians})" },  
    { "trigger": "GLKMatrix4RotateZ", "contents": "GLKMatrix4RotateZ(${1:GLKMatrix4 matrix}, ${2:float radians})" },  
    { "trigger": "GLKMatrix4Scale", "contents": "GLKMatrix4Scale(${1:GLKMatrix4 matrix}, ${2:float sx}, ${3:float sy}, ${4:float sz})" },  
    { "trigger": "GLKMatrix4ScaleWithVector3", "contents": "GLKMatrix4ScaleWithVector3(${1:GLKMatrix4 matrix}, ${2:GLKVector3 scaleVector})" },  
    { "trigger": "GLKMatrix4ScaleWithVector4", "contents": "GLKMatrix4ScaleWithVector4(${1:GLKMatrix4 matrix}, ${2:GLKVector4 scaleVector})" },  
    { "trigger": "GLKMatrix4SetColumn", "contents": "GLKMatrix4SetColumn(${1:GLKMatrix4 matrix}, ${2:int column}, ${3:GLKVector4 vector})" },  
    { "trigger": "GLKMatrix4SetRow", "contents": "GLKMatrix4SetRow(${1:GLKMatrix4 matrix}, ${2:int row}, ${3:GLKVector4 vector})" },  
    { "trigger": "GLKMatrix4Subtract", "contents": "GLKMatrix4Subtract(${1:GLKMatrix4 matrixLeft}, ${2:GLKMatrix4 matrixRight})" },  
    { "trigger": "GLKMatrix4Translate", "contents": "GLKMatrix4Translate(${1:GLKMatrix4 matrix}, ${2:float tx}, ${3:float ty}, ${4:float tz})" },  
    { "trigger": "GLKMatrix4TranslateWithVector3", "contents": "GLKMatrix4TranslateWithVector3(${1:GLKMatrix4 matrix}, ${2:GLKVector3 translationVector})" },  
    { "trigger": "GLKMatrix4TranslateWithVector4", "contents": "GLKMatrix4TranslateWithVector4(${1:GLKMatrix4 matrix}, ${2:GLKVector4 translationVector})" },  
    { "trigger": "GLKMatrix4Transpose", "contents": "GLKMatrix4Transpose(${1:GLKMatrix4 matrix})" },  
    { "trigger": "GLKMatrixStackCreate", "contents": "GLKMatrixStackCreate(${1:CFAllocatorRef alloc})" },  
    { "trigger": "GLKMatrixStackGetMatrix2", "contents": "GLKMatrixStackGetMatrix2(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetMatrix3", "contents": "GLKMatrixStackGetMatrix3(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetMatrix3Inverse", "contents": "GLKMatrixStackGetMatrix3Inverse(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetMatrix3InverseTranspose", "contents": "GLKMatrixStackGetMatrix3InverseTranspose(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetMatrix4", "contents": "GLKMatrixStackGetMatrix4(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetMatrix4Inverse", "contents": "GLKMatrixStackGetMatrix4Inverse(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetMatrix4InverseTranspose", "contents": "GLKMatrixStackGetMatrix4InverseTranspose(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackGetTypeID" },  
    { "trigger": "GLKMatrixStackLoadMatrix4", "contents": "GLKMatrixStackLoadMatrix4(${1:GLKMatrixStackRef stack}, ${2:GLKMatrix4 matrix})" },  
    { "trigger": "GLKMatrixStackMultiplyMatrix4", "contents": "GLKMatrixStackMultiplyMatrix4(${1:GLKMatrixStackRef stack}, ${2:GLKMatrix4 matrix})" },  
    { "trigger": "GLKMatrixStackMultiplyMatrixStack", "contents": "GLKMatrixStackMultiplyMatrixStack(${1:GLKMatrixStackRef stackLeft}, ${2:GLKMatrixStackRef stackRight})" },  
    { "trigger": "GLKMatrixStackPop", "contents": "GLKMatrixStackPop(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackPush", "contents": "GLKMatrixStackPush(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackRotate", "contents": "GLKMatrixStackRotate(${1:GLKMatrixStackRef stack}, ${2:float radians}, ${3:float x}, ${4:float y}, ${5:float z})" },  
    { "trigger": "GLKMatrixStackRotateWithVector3", "contents": "GLKMatrixStackRotateWithVector3(${1:GLKMatrixStackRef stack}, ${2:float radians}, ${3:GLKVector3 axisVector})" },  
    { "trigger": "GLKMatrixStackRotateWithVector4", "contents": "GLKMatrixStackRotateWithVector4(${1:GLKMatrixStackRef stack}, ${2:float radians}, ${3:GLKVector4 axisVector})" },  
    { "trigger": "GLKMatrixStackRotateX", "contents": "GLKMatrixStackRotateX(${1:GLKMatrixStackRef stack}, ${2:float radians})" },  
    { "trigger": "GLKMatrixStackRotateY", "contents": "GLKMatrixStackRotateY(${1:GLKMatrixStackRef stack}, ${2:float radians})" },  
    { "trigger": "GLKMatrixStackRotateZ", "contents": "GLKMatrixStackRotateZ(${1:GLKMatrixStackRef stack}, ${2:float radians})" },  
    { "trigger": "GLKMatrixStackScale", "contents": "GLKMatrixStackScale(${1:GLKMatrixStackRef stack}, ${2:float sx}, ${3:float sy}, ${4:float sz})" },  
    { "trigger": "GLKMatrixStackScaleWithVector3", "contents": "GLKMatrixStackScaleWithVector3(${1:GLKMatrixStackRef stack}, ${2:GLKVector3 scaleVector})" },  
    { "trigger": "GLKMatrixStackScaleWithVector4", "contents": "GLKMatrixStackScaleWithVector4(${1:GLKMatrixStackRef stack}, ${2:GLKVector4 scaleVector})" },  
    { "trigger": "GLKMatrixStackSize", "contents": "GLKMatrixStackSize(${1:GLKMatrixStackRef stack})" },  
    { "trigger": "GLKMatrixStackTranslate", "contents": "GLKMatrixStackTranslate(${1:GLKMatrixStackRef stack}, ${2:float tx}, ${3:float ty}, ${4:float tz})" },  
    { "trigger": "GLKMatrixStackTranslateWithVector3", "contents": "GLKMatrixStackTranslateWithVector3(${1:GLKMatrixStackRef stack}, ${2:GLKVector3 translationVector})" },  
    { "trigger": "GLKMatrixStackTranslateWithVector4", "contents": "GLKMatrixStackTranslateWithVector4(${1:GLKMatrixStackRef stack}, ${2:GLKVector4 translationVector})" },  
    { "trigger": "GLKNamedEffect" },  
    { "trigger": "GLKQuaternionAdd", "contents": "GLKQuaternionAdd(${1:GLKQuaternion quaternionLeft}, ${2:GLKQuaternion quaternionRight})" },  
    { "trigger": "GLKQuaternionAngle", "contents": "GLKQuaternionAngle(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKQuaternionAxis", "contents": "GLKQuaternionAxis(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKQuaternionConjugate", "contents": "GLKQuaternionConjugate(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKQuaternionIdentity (GLKQuaternion)" },  
    { "trigger": "GLKQuaternionInvert", "contents": "GLKQuaternionInvert(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKQuaternionLength", "contents": "GLKQuaternionLength(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKQuaternionMake", "contents": "GLKQuaternionMake(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})" },  
    { "trigger": "GLKQuaternionMakeWithAngleAndAxis", "contents": "GLKQuaternionMakeWithAngleAndAxis(${1:float radians}, ${2:float x}, ${3:float y}, ${4:float z})" },  
    { "trigger": "GLKQuaternionMakeWithAngleAndVector3Axis", "contents": "GLKQuaternionMakeWithAngleAndVector3Axis(${1:float radians}, ${2:GLKVector3 axisVector})" },  
    { "trigger": "GLKQuaternionMakeWithArray", "contents": "GLKQuaternionMakeWithArray(${1:float* values})" },  
    { "trigger": "GLKQuaternionMakeWithMatrix3", "contents": "GLKQuaternionMakeWithMatrix3(${1:GLKMatrix3 matrix})" },  
    { "trigger": "GLKQuaternionMakeWithMatrix4", "contents": "GLKQuaternionMakeWithMatrix4(${1:GLKMatrix4 matrix})" },  
    { "trigger": "GLKQuaternionMakeWithVector3", "contents": "GLKQuaternionMakeWithVector3(${1:GLKVector3 vector}, ${2:float scalar})" },  
    { "trigger": "GLKQuaternionMultiply", "contents": "GLKQuaternionMultiply(${1:GLKQuaternion quaternionLeft}, ${2:GLKQuaternion quaternionRight})" },  
    { "trigger": "GLKQuaternionNormalize", "contents": "GLKQuaternionNormalize(${1:GLKQuaternion quaternion})" },  
    { "trigger": "GLKQuaternionRotateVector3", "contents": "GLKQuaternionRotateVector3(${1:GLKQuaternion quaternion}, ${2:GLKVector3 vector})" },  
    { "trigger": "GLKQuaternionRotateVector3Array", "contents": "GLKQuaternionRotateVector3Array(${1:GLKQuaternion quaternion}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKQuaternionRotateVector4", "contents": "GLKQuaternionRotateVector4(${1:GLKQuaternion quaternion}, ${2:GLKVector4 vector})" },  
    { "trigger": "GLKQuaternionRotateVector4Array", "contents": "GLKQuaternionRotateVector4Array(${1:GLKQuaternion quaternion}, ${2:GLKVector4* vectors}, ${3:size_t vectorCount})" },  
    { "trigger": "GLKQuaternionSlerp", "contents": "GLKQuaternionSlerp(${1:GLKQuaternion quaternionStart}, ${2:GLKQuaternion quaternionEnd}, ${3:float t})" },  
    { "trigger": "GLKQuaternionSubtract", "contents": "GLKQuaternionSubtract(${1:GLKQuaternion quaternionLeft}, ${2:GLKQuaternion quaternionRight})" },  
    { "trigger": "GLKReflectionMapEffect" },  
    { "trigger": "GLKSkyboxEffect" },  
    { "trigger": "GLKTextureEnvModeDecal (2)" },  
    { "trigger": "GLKTextureEnvModeModulate (1)" },  
    { "trigger": "GLKTextureEnvModeReplace (0)" },  
    { "trigger": "GLKTextureInfo" },  
    { "trigger": "GLKTextureInfoAlphaStateNonPremultiplied (1)" },  
    { "trigger": "GLKTextureInfoAlphaStateNone (0)" },  
    { "trigger": "GLKTextureInfoAlphaStatePremultiplied (2)" },  
    { "trigger": "GLKTextureInfoOriginBottomLeft (2)" },  
    { "trigger": "GLKTextureInfoOriginTopLeft (1)" },  
    { "trigger": "GLKTextureInfoOriginUnknown (0)" },  
    { "trigger": "GLKTextureLoader" },  
    { "trigger": "GLKTextureLoaderApplyPremultiplication (NSString*)" },  
    { "trigger": "GLKTextureLoaderErrorAlphaPremultiplicationFailure (16)" },  
    { "trigger": "GLKTextureLoaderErrorCompressedTextureUpload (7)" },  
    { "trigger": "GLKTextureLoaderErrorCubeMapInvalidNumFiles (6)" },  
    { "trigger": "GLKTextureLoaderErrorDataPreprocessingFailure (12)" },  
    { "trigger": "GLKTextureLoaderErrorDomain (NSString*)" },  
    { "trigger": "GLKTextureLoaderErrorFileOrURLNotFound (0)" },  
    { "trigger": "GLKTextureLoaderErrorInvalidCGImage (2)" },  
    { "trigger": "GLKTextureLoaderErrorInvalidEAGLContext (17)" },  
    { "trigger": "GLKTextureLoaderErrorInvalidNSData (1)" },  
    { "trigger": "GLKTextureLoaderErrorKey (NSString*)" },  
    { "trigger": "GLKTextureLoaderErrorMipmapUnsupported (13)" },  
    { "trigger": "GLKTextureLoaderErrorPVRAtlasUnsupported (5)" },  
    { "trigger": "GLKTextureLoaderErrorReorientationFailure (15)" },  
    { "trigger": "GLKTextureLoaderErrorUncompressedTextureUpload (8)" },  
    { "trigger": "GLKTextureLoaderErrorUnknownFileType (4)" },  
    { "trigger": "GLKTextureLoaderErrorUnknownPathType (3)" },  
    { "trigger": "GLKTextureLoaderErrorUnsupportedBitDepth (10)" },  
    { "trigger": "GLKTextureLoaderErrorUnsupportedCubeMapDimensions (9)" },  
    { "trigger": "GLKTextureLoaderErrorUnsupportedOrientation (14)" },  
    { "trigger": "GLKTextureLoaderErrorUnsupportedPVRFormat (11)" },  
    { "trigger": "GLKTextureLoaderGLErrorKey (NSString*)" },  
    { "trigger": "GLKTextureLoaderGenerateMipmaps (NSString*)" },  
    { "trigger": "GLKTextureLoaderGrayscaleAsAlpha (NSString*)" },  
    { "trigger": "GLKTextureLoaderOriginBottomLeft (NSString*)" },  
    { "trigger": "GLKTextureLoader.cubeMapWithContentsOfFile:options:error:", "contents": "GLKTextureLoader.cubeMapWithContentsOfFile:options:error:(${1:NSString* path}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureLoader.cubeMapWithContentsOfFiles:options:error:", "contents": "GLKTextureLoader.cubeMapWithContentsOfFiles:options:error:(${1:NSArray* paths}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureLoader.cubeMapWithContentsOfURL:options:error:", "contents": "GLKTextureLoader.cubeMapWithContentsOfURL:options:error:(${1:NSURL* url}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureLoader.textureWithCGImage:options:error:", "contents": "GLKTextureLoader.textureWithCGImage:options:error:(${1:CGImageRef cgImage}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureLoader.textureWithContentsOfData:options:error:", "contents": "GLKTextureLoader.textureWithContentsOfData:options:error:(${1:NSData* data}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureLoader.textureWithContentsOfFile:options:error:", "contents": "GLKTextureLoader.textureWithContentsOfFile:options:error:(${1:NSString* path}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureLoader.textureWithContentsOfURL:options:error:", "contents": "GLKTextureLoader.textureWithContentsOfURL:options:error:(${1:NSURL* url}, options:${2:NSDictionary* options}, error:${3:NSError** outError})" },  
    { "trigger": "GLKTextureTarget2D (3553)" },  
    { "trigger": "GLKTextureTargetCt (2)" },  
    { "trigger": "GLKTextureTargetCubeMap (34067)" },  
    { "trigger": "GLKVector2Add", "contents": "GLKVector2Add(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2AddScalar", "contents": "GLKVector2AddScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector2AllEqualToScalar", "contents": "GLKVector2AllEqualToScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector2AllEqualToVector2", "contents": "GLKVector2AllEqualToVector2(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2AllGreaterThanOrEqualToScalar", "contents": "GLKVector2AllGreaterThanOrEqualToScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector2AllGreaterThanOrEqualToVector2", "contents": "GLKVector2AllGreaterThanOrEqualToVector2(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2AllGreaterThanScalar", "contents": "GLKVector2AllGreaterThanScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector2AllGreaterThanVector2", "contents": "GLKVector2AllGreaterThanVector2(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2Distance", "contents": "GLKVector2Distance(${1:GLKVector2 vectorStart}, ${2:GLKVector2 vectorEnd})" },  
    { "trigger": "GLKVector2Divide", "contents": "GLKVector2Divide(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2DivideScalar", "contents": "GLKVector2DivideScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector2DotProduct", "contents": "GLKVector2DotProduct(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2Length", "contents": "GLKVector2Length(${1:GLKVector2 vector})" },  
    { "trigger": "GLKVector2Lerp", "contents": "GLKVector2Lerp(${1:GLKVector2 vectorStart}, ${2:GLKVector2 vectorEnd}, ${3:float t})" },  
    { "trigger": "GLKVector2Make", "contents": "GLKVector2Make(${1:float x}, ${2:float y})" },  
    { "trigger": "GLKVector2MakeWithArray", "contents": "GLKVector2MakeWithArray(${1:float* values})" },  
    { "trigger": "GLKVector2Maximum", "contents": "GLKVector2Maximum(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2Minimum", "contents": "GLKVector2Minimum(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2Multiply", "contents": "GLKVector2Multiply(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2MultiplyScalar", "contents": "GLKVector2MultiplyScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector2Negate", "contents": "GLKVector2Negate(${1:GLKVector2 vector})" },  
    { "trigger": "GLKVector2Normalize", "contents": "GLKVector2Normalize(${1:GLKVector2 vector})" },  
    { "trigger": "GLKVector2Project", "contents": "GLKVector2Project(${1:GLKVector2 vectorToProject}, ${2:GLKVector2 projectionVector})" },  
    { "trigger": "GLKVector2Subtract", "contents": "GLKVector2Subtract(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})" },  
    { "trigger": "GLKVector2SubtractScalar", "contents": "GLKVector2SubtractScalar(${1:GLKVector2 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3Add", "contents": "GLKVector3Add(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3AddScalar", "contents": "GLKVector3AddScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3AllEqualToScalar", "contents": "GLKVector3AllEqualToScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3AllEqualToVector3", "contents": "GLKVector3AllEqualToVector3(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3AllGreaterThanOrEqualToScalar", "contents": "GLKVector3AllGreaterThanOrEqualToScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3AllGreaterThanOrEqualToVector3", "contents": "GLKVector3AllGreaterThanOrEqualToVector3(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3AllGreaterThanScalar", "contents": "GLKVector3AllGreaterThanScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3AllGreaterThanVector3", "contents": "GLKVector3AllGreaterThanVector3(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3CrossProduct", "contents": "GLKVector3CrossProduct(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3Distance", "contents": "GLKVector3Distance(${1:GLKVector3 vectorStart}, ${2:GLKVector3 vectorEnd})" },  
    { "trigger": "GLKVector3Divide", "contents": "GLKVector3Divide(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3DivideScalar", "contents": "GLKVector3DivideScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3DotProduct", "contents": "GLKVector3DotProduct(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3Length", "contents": "GLKVector3Length(${1:GLKVector3 vector})" },  
    { "trigger": "GLKVector3Lerp", "contents": "GLKVector3Lerp(${1:GLKVector3 vectorStart}, ${2:GLKVector3 vectorEnd}, ${3:float t})" },  
    { "trigger": "GLKVector3Make", "contents": "GLKVector3Make(${1:float x}, ${2:float y}, ${3:float z})" },  
    { "trigger": "GLKVector3MakeWithArray", "contents": "GLKVector3MakeWithArray(${1:float* values})" },  
    { "trigger": "GLKVector3Maximum", "contents": "GLKVector3Maximum(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3Minimum", "contents": "GLKVector3Minimum(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3Multiply", "contents": "GLKVector3Multiply(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3MultiplyScalar", "contents": "GLKVector3MultiplyScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector3Negate", "contents": "GLKVector3Negate(${1:GLKVector3 vector})" },  
    { "trigger": "GLKVector3Normalize", "contents": "GLKVector3Normalize(${1:GLKVector3 vector})" },  
    { "trigger": "GLKVector3Project", "contents": "GLKVector3Project(${1:GLKVector3 vectorToProject}, ${2:GLKVector3 projectionVector})" },  
    { "trigger": "GLKVector3Subtract", "contents": "GLKVector3Subtract(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})" },  
    { "trigger": "GLKVector3SubtractScalar", "contents": "GLKVector3SubtractScalar(${1:GLKVector3 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4Add", "contents": "GLKVector4Add(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4AddScalar", "contents": "GLKVector4AddScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4AllEqualToScalar", "contents": "GLKVector4AllEqualToScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4AllEqualToVector4", "contents": "GLKVector4AllEqualToVector4(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4AllGreaterThanOrEqualToScalar", "contents": "GLKVector4AllGreaterThanOrEqualToScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4AllGreaterThanOrEqualToVector4", "contents": "GLKVector4AllGreaterThanOrEqualToVector4(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4AllGreaterThanScalar", "contents": "GLKVector4AllGreaterThanScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4AllGreaterThanVector4", "contents": "GLKVector4AllGreaterThanVector4(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4CrossProduct", "contents": "GLKVector4CrossProduct(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4Distance", "contents": "GLKVector4Distance(${1:GLKVector4 vectorStart}, ${2:GLKVector4 vectorEnd})" },  
    { "trigger": "GLKVector4Divide", "contents": "GLKVector4Divide(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4DivideScalar", "contents": "GLKVector4DivideScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4DotProduct", "contents": "GLKVector4DotProduct(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4Length", "contents": "GLKVector4Length(${1:GLKVector4 vector})" },  
    { "trigger": "GLKVector4Lerp", "contents": "GLKVector4Lerp(${1:GLKVector4 vectorStart}, ${2:GLKVector4 vectorEnd}, ${3:float t})" },  
    { "trigger": "GLKVector4Make", "contents": "GLKVector4Make(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})" },  
    { "trigger": "GLKVector4MakeWithArray", "contents": "GLKVector4MakeWithArray(${1:float* values})" },  
    { "trigger": "GLKVector4MakeWithVector3", "contents": "GLKVector4MakeWithVector3(${1:GLKVector3 vector}, ${2:float w})" },  
    { "trigger": "GLKVector4Maximum", "contents": "GLKVector4Maximum(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4Minimum", "contents": "GLKVector4Minimum(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4Multiply", "contents": "GLKVector4Multiply(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4MultiplyScalar", "contents": "GLKVector4MultiplyScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVector4Negate", "contents": "GLKVector4Negate(${1:GLKVector4 vector})" },  
    { "trigger": "GLKVector4Normalize", "contents": "GLKVector4Normalize(${1:GLKVector4 vector})" },  
    { "trigger": "GLKVector4Project", "contents": "GLKVector4Project(${1:GLKVector4 vectorToProject}, ${2:GLKVector4 projectionVector})" },  
    { "trigger": "GLKVector4Subtract", "contents": "GLKVector4Subtract(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})" },  
    { "trigger": "GLKVector4SubtractScalar", "contents": "GLKVector4SubtractScalar(${1:GLKVector4 vector}, ${2:float value})" },  
    { "trigger": "GLKVertexAttribColor (2)" },  
    { "trigger": "GLKVertexAttribNormal (1)" },  
    { "trigger": "GLKVertexAttribPosition (0)" },  
    { "trigger": "GLKVertexAttribTexCoord0 (3)" },  
    { "trigger": "GLKVertexAttribTexCoord1 (4)" },  
    { "trigger": "GLKView" },  
    { "trigger": "GLKViewController" },  
    { "trigger": "GLKViewControllerDelegate" },  
    { "trigger": "GLKViewDelegate" },  
    { "trigger": "GLKViewDrawableColorFormatRGB565 (1)" },  
    { "trigger": "GLKViewDrawableColorFormatRGBA8888 (0)" },  
    { "trigger": "GLKViewDrawableDepthFormat16 (1)" },  
    { "trigger": "GLKViewDrawableDepthFormat24 (2)" },  
    { "trigger": "GLKViewDrawableDepthFormatNone (0)" },  
    { "trigger": "GLKViewDrawableMultisample4X (1)" },  
    { "trigger": "GLKViewDrawableMultisampleNone (0)" },  
    { "trigger": "GLKViewDrawableStencilFormat8 (1)" },  
    { "trigger": "GLKViewDrawableStencilFormatNone (0)" },  
    { "trigger": "GL_ACTIVE_ATTRIBUTES (35721)" },  
    { "trigger": "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH (35722)" },  
    { "trigger": "GL_ACTIVE_PROGRAM_EXT (33369)" },  
    { "trigger": "GL_ACTIVE_TEXTURE (34016)" },  
    { "trigger": "GL_ACTIVE_UNIFORMS (35718)" },  
    { "trigger": "GL_ACTIVE_UNIFORM_MAX_LENGTH (35719)" },  
    { "trigger": "GL_ADD (260)" },  
    { "trigger": "GL_ADD_SIGNED (34164)" },  
    { "trigger": "GL_ALIASED_LINE_WIDTH_RANGE (33902)" },  
    { "trigger": "GL_ALIASED_POINT_SIZE_RANGE (33901)" },  
    { "trigger": "GL_ALL_SHADER_BITS_EXT (4294967295)" },  
    { "trigger": "GL_ALPHA (6406)" },  
    { "trigger": "GL_ALPHA_BITS (3413)" },  
    { "trigger": "GL_ALPHA_SCALE (3356)" },  
    { "trigger": "GL_ALPHA_TEST (3008)" },  
    { "trigger": "GL_ALPHA_TEST_FUNC (3009)" },  
    { "trigger": "GL_ALPHA_TEST_REF (3010)" },  
    { "trigger": "GL_ALWAYS (519)" },  
    { "trigger": "GL_AMBIENT (4608)" },  
    { "trigger": "GL_AMBIENT_AND_DIFFUSE (5634)" },  
    { "trigger": "GL_AND (5377)" },  
    { "trigger": "GL_AND_INVERTED (5380)" },  
    { "trigger": "GL_AND_REVERSE (5378)" },  
    { "trigger": "GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT (36202)" },  
    { "trigger": "GL_ANY_SAMPLES_PASSED_EXT (35887)" },  
    { "trigger": "GL_APPLE_framebuffer_multisample (1)" },  
    { "trigger": "GL_APPLE_rgb_422 (1)" },  
    { "trigger": "GL_APPLE_texture_2D_limited_npot (1)" },  
    { "trigger": "GL_APPLE_texture_format_BGRA8888 (1)" },  
    { "trigger": "GL_APPLE_texture_max_level (1)" },  
    { "trigger": "GL_ARRAY_BUFFER (34962)" },  
    { "trigger": "GL_ARRAY_BUFFER_BINDING (34964)" },  
    { "trigger": "GL_ATTACHED_SHADERS (35717)" },  
    { "trigger": "GL_BACK (1029)" },  
    { "trigger": "GL_BGRA (32993)" },  
    { "trigger": "GL_BGRA_EXT (32993)" },  
    { "trigger": "GL_BGRA_IMG (32993)" },  
    { "trigger": "GL_BLEND (3042)" },  
    { "trigger": "GL_BLEND_COLOR (32773)" },  
    { "trigger": "GL_BLEND_DST (3040)" },  
    { "trigger": "GL_BLEND_DST_ALPHA (32970)" },  
    { "trigger": "GL_BLEND_DST_ALPHA_OES (32970)" },  
    { "trigger": "GL_BLEND_DST_RGB (32968)" },  
    { "trigger": "GL_BLEND_DST_RGB_OES (32968)" },  
    { "trigger": "GL_BLEND_EQUATION (32777)" },  
    { "trigger": "GL_BLEND_EQUATION_ALPHA (34877)" },  
    { "trigger": "GL_BLEND_EQUATION_ALPHA_OES (34877)" },  
    { "trigger": "GL_BLEND_EQUATION_OES (32777)" },  
    { "trigger": "GL_BLEND_EQUATION_RGB (32777)" },  
    { "trigger": "GL_BLEND_EQUATION_RGB_OES (32777)" },  
    { "trigger": "GL_BLEND_SRC (3041)" },  
    { "trigger": "GL_BLEND_SRC_ALPHA (32971)" },  
    { "trigger": "GL_BLEND_SRC_ALPHA_OES (32971)" },  
    { "trigger": "GL_BLEND_SRC_RGB (32969)" },  
    { "trigger": "GL_BLEND_SRC_RGB_OES (32969)" },  
    { "trigger": "GL_BLUE_BITS (3412)" },  
    { "trigger": "GL_BOOL (35670)" },  
    { "trigger": "GL_BOOL_VEC2 (35671)" },  
    { "trigger": "GL_BOOL_VEC3 (35672)" },  
    { "trigger": "GL_BOOL_VEC4 (35673)" },  
    { "trigger": "GL_BUFFER_ACCESS_OES (35003)" },  
    { "trigger": "GL_BUFFER_MAPPED_OES (35004)" },  
    { "trigger": "GL_BUFFER_MAP_POINTER_OES (35005)" },  
    { "trigger": "GL_BUFFER_OBJECT_EXT (37201)" },  
    { "trigger": "GL_BUFFER_SIZE (34660)" },  
    { "trigger": "GL_BUFFER_USAGE (34661)" },  
    { "trigger": "GL_BYTE (5120)" },  
    { "trigger": "GL_CCW (2305)" },  
    { "trigger": "GL_CLAMP_TO_EDGE (33071)" },  
    { "trigger": "GL_CLEAR (5376)" },  
    { "trigger": "GL_CLIENT_ACTIVE_TEXTURE (34017)" },  
    { "trigger": "GL_CLIP_PLANE0 (12288)" },  
    { "trigger": "GL_CLIP_PLANE1 (12289)" },  
    { "trigger": "GL_CLIP_PLANE2 (12290)" },  
    { "trigger": "GL_CLIP_PLANE3 (12291)" },  
    { "trigger": "GL_CLIP_PLANE4 (12292)" },  
    { "trigger": "GL_CLIP_PLANE5 (12293)" },  
    { "trigger": "GL_COLOR_ARRAY (32886)" },  
    { "trigger": "GL_COLOR_ARRAY_BUFFER_BINDING (34968)" },  
    { "trigger": "GL_COLOR_ARRAY_POINTER (32912)" },  
    { "trigger": "GL_COLOR_ARRAY_SIZE (32897)" },  
    { "trigger": "GL_COLOR_ARRAY_STRIDE (32899)" },  
    { "trigger": "GL_COLOR_ARRAY_TYPE (32898)" },  
    { "trigger": "GL_COLOR_ATTACHMENT0 (36064)" },  
    { "trigger": "GL_COLOR_ATTACHMENT0_OES (36064)" },  
    { "trigger": "GL_COLOR_BUFFER_BIT (16384)" },  
    { "trigger": "GL_COLOR_CLEAR_VALUE (3106)" },  
    { "trigger": "GL_COLOR_EXT (6144)" },  
    { "trigger": "GL_COLOR_LOGIC_OP (3058)" },  
    { "trigger": "GL_COLOR_MATERIAL (2903)" },  
    { "trigger": "GL_COLOR_WRITEMASK (3107)" },  
    { "trigger": "GL_COMBINE (34160)" },  
    { "trigger": "GL_COMBINE_ALPHA (34162)" },  
    { "trigger": "GL_COMBINE_RGB (34161)" },  
    { "trigger": "GL_COMPARE_REF_TO_TEXTURE_EXT (34894)" },  
    { "trigger": "GL_COMPILE_STATUS (35713)" },  
    { "trigger": "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG (35843)" },  
    { "trigger": "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG (35842)" },  
    { "trigger": "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG (35841)" },  
    { "trigger": "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG (35840)" },  
    { "trigger": "GL_COMPRESSED_TEXTURE_FORMATS (34467)" },  
    { "trigger": "GL_CONSTANT (34166)" },  
    { "trigger": "GL_CONSTANT_ALPHA (32771)" },  
    { "trigger": "GL_CONSTANT_ATTENUATION (4615)" },  
    { "trigger": "GL_CONSTANT_COLOR (32769)" },  
    { "trigger": "GL_COORD_REPLACE_OES (34914)" },  
    { "trigger": "GL_COPY (5379)" },  
    { "trigger": "GL_COPY_INVERTED (5388)" },  
    { "trigger": "GL_CULL_FACE (2884)" },  
    { "trigger": "GL_CULL_FACE_MODE (2885)" },  
    { "trigger": "GL_CURRENT_COLOR (2816)" },  
    { "trigger": "GL_CURRENT_NORMAL (2818)" },  
    { "trigger": "GL_CURRENT_PALETTE_MATRIX_OES (34883)" },  
    { "trigger": "GL_CURRENT_PROGRAM (35725)" },  
    { "trigger": "GL_CURRENT_QUERY_EXT (34917)" },  
    { "trigger": "GL_CURRENT_TEXTURE_COORDS (2819)" },  
    { "trigger": "GL_CURRENT_VERTEX_ATTRIB (34342)" },  
    { "trigger": "GL_CW (2304)" },  
    { "trigger": "GL_DECAL (8449)" },  
    { "trigger": "GL_DECR (7683)" },  
    { "trigger": "GL_DECR_WRAP (34056)" },  
    { "trigger": "GL_DECR_WRAP_OES (34056)" },  
    { "trigger": "GL_DELETE_STATUS (35712)" },  
    { "trigger": "GL_DEPTH24_STENCIL8_OES (35056)" },  
    { "trigger": "GL_DEPTH_ATTACHMENT (36096)" },  
    { "trigger": "GL_DEPTH_ATTACHMENT_OES (36096)" },  
    { "trigger": "GL_DEPTH_BITS (3414)" },  
    { "trigger": "GL_DEPTH_BUFFER_BIT (256)" },  
    { "trigger": "GL_DEPTH_CLEAR_VALUE (2931)" },  
    { "trigger": "GL_DEPTH_COMPONENT (6402)" },  
    { "trigger": "GL_DEPTH_COMPONENT16 (33189)" },  
    { "trigger": "GL_DEPTH_COMPONENT16_OES (33189)" },  
    { "trigger": "GL_DEPTH_COMPONENT24_OES (33190)" },  
    { "trigger": "GL_DEPTH_EXT (6145)" },  
    { "trigger": "GL_DEPTH_FUNC (2932)" },  
    { "trigger": "GL_DEPTH_RANGE (2928)" },  
    { "trigger": "GL_DEPTH_STENCIL_OES (34041)" },  
    { "trigger": "GL_DEPTH_TEST (2929)" },  
    { "trigger": "GL_DEPTH_WRITEMASK (2930)" },  
    { "trigger": "GL_DIFFUSE (4609)" },  
    { "trigger": "GL_DITHER (3024)" },  
    { "trigger": "GL_DONT_CARE (4352)" },  
    { "trigger": "GL_DOT3_RGB (34478)" },  
    { "trigger": "GL_DOT3_RGBA (34479)" },  
    { "trigger": "GL_DRAW_FRAMEBUFFER_APPLE (36009)" },  
    { "trigger": "GL_DRAW_FRAMEBUFFER_BINDING_APPLE (36006)" },  
    { "trigger": "GL_DST_ALPHA (772)" },  
    { "trigger": "GL_DST_COLOR (774)" },  
    { "trigger": "GL_DYNAMIC_DRAW (35048)" },  
    { "trigger": "GL_ELEMENT_ARRAY_BUFFER (34963)" },  
    { "trigger": "GL_ELEMENT_ARRAY_BUFFER_BINDING (34965)" },  
    { "trigger": "GL_EMISSION (5632)" },  
    { "trigger": "GL_EQUAL (514)" },  
    { "trigger": "GL_EQUIV (5385)" },  
    { "trigger": "GL_ES_VERSION_2_0 (1)" },  
    { "trigger": "GL_EXP (2048)" },  
    { "trigger": "GL_EXP2 (2049)" },  
    { "trigger": "GL_EXTENSIONS (7939)" },  
    { "trigger": "GL_EXT_blend_minmax (1)" },  
    { "trigger": "GL_EXT_color_buffer_half_float (1)" },  
    { "trigger": "GL_EXT_debug_label (1)" },  
    { "trigger": "GL_EXT_debug_marker (1)" },  
    { "trigger": "GL_EXT_discard_framebuffer (1)" },  
    { "trigger": "GL_EXT_occlusion_query_boolean (1)" },  
    { "trigger": "GL_EXT_read_format_bgra (1)" },  
    { "trigger": "GL_EXT_separate_shader_objects (1)" },  
    { "trigger": "GL_EXT_shader_texture_lod (1)" },  
    { "trigger": "GL_EXT_shadow_samplers (1)" },  
    { "trigger": "GL_EXT_texture_filter_anisotropic (1)" },  
    { "trigger": "GL_EXT_texture_lod_bias (1)" },  
    { "trigger": "GL_EXT_texture_rg (1)" },  
    { "trigger": "GL_FALSE (0)" },  
    { "trigger": "GL_FASTEST (4353)" },  
    { "trigger": "GL_FIXED (5132)" },  
    { "trigger": "GL_FLAT (7424)" },  
    { "trigger": "GL_FLOAT (5126)" },  
    { "trigger": "GL_FLOAT_MAT2 (35674)" },  
    { "trigger": "GL_FLOAT_MAT3 (35675)" },  
    { "trigger": "GL_FLOAT_MAT4 (35676)" },  
    { "trigger": "GL_FLOAT_VEC2 (35664)" },  
    { "trigger": "GL_FLOAT_VEC3 (35665)" },  
    { "trigger": "GL_FLOAT_VEC4 (35666)" },  
    { "trigger": "GL_FOG (2912)" },  
    { "trigger": "GL_FOG_COLOR (2918)" },  
    { "trigger": "GL_FOG_DENSITY (2914)" },  
    { "trigger": "GL_FOG_END (2916)" },  
    { "trigger": "GL_FOG_HINT (3156)" },  
    { "trigger": "GL_FOG_MODE (2917)" },  
    { "trigger": "GL_FOG_START (2915)" },  
    { "trigger": "GL_FRAGMENT_SHADER (35632)" },  
    { "trigger": "GL_FRAGMENT_SHADER_BIT_EXT (2)" },  
    { "trigger": "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES (35723)" },  
    { "trigger": "GL_FRAMEBUFFER (36160)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT (33297)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME (36049)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES (36049)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE (36048)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES (36048)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE (36051)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES (36051)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL (36050)" },  
    { "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES (36050)" },  
    { "trigger": "GL_FRAMEBUFFER_BINDING (36006)" },  
    { "trigger": "GL_FRAMEBUFFER_BINDING_OES (36006)" },  
    { "trigger": "GL_FRAMEBUFFER_COMPLETE (36053)" },  
    { "trigger": "GL_FRAMEBUFFER_COMPLETE_OES (36053)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT (36054)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES (36054)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS (36057)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES (36057)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES (36058)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT (36055)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES (36055)" },  
    { "trigger": "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE (36182)" },  
    { "trigger": "GL_FRAMEBUFFER_OES (36160)" },  
    { "trigger": "GL_FRAMEBUFFER_UNSUPPORTED (36061)" },  
    { "trigger": "GL_FRAMEBUFFER_UNSUPPORTED_OES (36061)" },  
    { "trigger": "GL_FRONT (1028)" },  
    { "trigger": "GL_FRONT_AND_BACK (1032)" },  
    { "trigger": "GL_FRONT_FACE (2886)" },  
    { "trigger": "GL_FUNC_ADD (32774)" },  
    { "trigger": "GL_FUNC_ADD_OES (32774)" },  
    { "trigger": "GL_FUNC_REVERSE_SUBTRACT (32779)" },  
    { "trigger": "GL_FUNC_REVERSE_SUBTRACT_OES (32779)" },  
    { "trigger": "GL_FUNC_SUBTRACT (32778)" },  
    { "trigger": "GL_FUNC_SUBTRACT_OES (32778)" },  
    { "trigger": "GL_GENERATE_MIPMAP (33169)" },  
    { "trigger": "GL_GENERATE_MIPMAP_HINT (33170)" },  
    { "trigger": "GL_GEQUAL (518)" },  
    { "trigger": "GL_GREATER (516)" },  
    { "trigger": "GL_GREEN_BITS (3411)" },  
    { "trigger": "GL_HALF_FLOAT_OES (36193)" },  
    { "trigger": "GL_HIGH_FLOAT (36338)" },  
    { "trigger": "GL_HIGH_INT (36341)" },  
    { "trigger": "GL_IMG_read_format (1)" },  
    { "trigger": "GL_IMG_texture_compression_pvrtc (1)" },  
    { "trigger": "GL_IMPLEMENTATION_COLOR_READ_FORMAT (35739)" },  
    { "trigger": "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES (35739)" },  
    { "trigger": "GL_IMPLEMENTATION_COLOR_READ_TYPE (35738)" },  
    { "trigger": "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES (35738)" },  
    { "trigger": "GL_INCR (7682)" },  
    { "trigger": "GL_INCR_WRAP (34055)" },  
    { "trigger": "GL_INCR_WRAP_OES (34055)" },  
    { "trigger": "GL_INFO_LOG_LENGTH (35716)" },  
    { "trigger": "GL_INT (5124)" },  
    { "trigger": "GL_INTERPOLATE (34165)" },  
    { "trigger": "GL_INT_VEC2 (35667)" },  
    { "trigger": "GL_INT_VEC3 (35668)" },  
    { "trigger": "GL_INT_VEC4 (35669)" },  
    { "trigger": "GL_INVALID_ENUM (1280)" },  
    { "trigger": "GL_INVALID_FRAMEBUFFER_OPERATION (1286)" },  
    { "trigger": "GL_INVALID_FRAMEBUFFER_OPERATION_OES (1286)" },  
    { "trigger": "GL_INVALID_OPERATION (1282)" },  
    { "trigger": "GL_INVALID_VALUE (1281)" },  
    { "trigger": "GL_INVERT (5386)" },  
    { "trigger": "GL_KEEP (7680)" },  
    { "trigger": "GL_LEQUAL (515)" },  
    { "trigger": "GL_LESS (513)" },  
    { "trigger": "GL_LIGHT0 (16384)" },  
    { "trigger": "GL_LIGHT1 (16385)" },  
    { "trigger": "GL_LIGHT2 (16386)" },  
    { "trigger": "GL_LIGHT3 (16387)" },  
    { "trigger": "GL_LIGHT4 (16388)" },  
    { "trigger": "GL_LIGHT5 (16389)" },  
    { "trigger": "GL_LIGHT6 (16390)" },  
    { "trigger": "GL_LIGHT7 (16391)" },  
    { "trigger": "GL_LIGHTING (2896)" },  
    { "trigger": "GL_LIGHT_MODEL_AMBIENT (2899)" },  
    { "trigger": "GL_LIGHT_MODEL_TWO_SIDE (2898)" },  
    { "trigger": "GL_LINEAR (9729)" },  
    { "trigger": "GL_LINEAR_ATTENUATION (4616)" },  
    { "trigger": "GL_LINEAR_MIPMAP_LINEAR (9987)" },  
    { "trigger": "GL_LINEAR_MIPMAP_NEAREST (9985)" },  
    { "trigger": "GL_LINES (1)" },  
    { "trigger": "GL_LINE_LOOP (2)" },  
    { "trigger": "GL_LINE_SMOOTH (2848)" },  
    { "trigger": "GL_LINE_SMOOTH_HINT (3154)" },  
    { "trigger": "GL_LINE_STRIP (3)" },  
    { "trigger": "GL_LINE_WIDTH (2849)" },  
    { "trigger": "GL_LINK_STATUS (35714)" },  
    { "trigger": "GL_LOGIC_OP_MODE (3056)" },  
    { "trigger": "GL_LOW_FLOAT (36336)" },  
    { "trigger": "GL_LOW_INT (36339)" },  
    { "trigger": "GL_LUMINANCE (6409)" },  
    { "trigger": "GL_LUMINANCE_ALPHA (6410)" },  
    { "trigger": "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES (35742)" },  
    { "trigger": "GL_MATRIX_INDEX_ARRAY_OES (34884)" },  
    { "trigger": "GL_MATRIX_INDEX_ARRAY_POINTER_OES (34889)" },  
    { "trigger": "GL_MATRIX_INDEX_ARRAY_SIZE_OES (34886)" },  
    { "trigger": "GL_MATRIX_INDEX_ARRAY_STRIDE_OES (34888)" },  
    { "trigger": "GL_MATRIX_INDEX_ARRAY_TYPE_OES (34887)" },  
    { "trigger": "GL_MATRIX_MODE (2976)" },  
    { "trigger": "GL_MATRIX_PALETTE_OES (34880)" },  
    { "trigger": "GL_MAX_CLIP_PLANES (3378)" },  
    { "trigger": "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS (35661)" },  
    { "trigger": "GL_MAX_CUBE_MAP_TEXTURE_SIZE (34076)" },  
    { "trigger": "GL_MAX_EXT (32776)" },  
    { "trigger": "GL_MAX_FRAGMENT_UNIFORM_VECTORS (36349)" },  
    { "trigger": "GL_MAX_LIGHTS (3377)" },  
    { "trigger": "GL_MAX_MODELVIEW_STACK_DEPTH (3382)" },  
    { "trigger": "GL_MAX_PALETTE_MATRICES_OES (34882)" },  
    { "trigger": "GL_MAX_PROJECTION_STACK_DEPTH (3384)" },  
    { "trigger": "GL_MAX_RENDERBUFFER_SIZE (34024)" },  
    { "trigger": "GL_MAX_RENDERBUFFER_SIZE_OES (34024)" },  
    { "trigger": "GL_MAX_SAMPLES_APPLE (36183)" },  
    { "trigger": "GL_MAX_TEXTURE_IMAGE_UNITS (34930)" },  
    { "trigger": "GL_MAX_TEXTURE_LOD_BIAS_EXT (34045)" },  
    { "trigger": "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT (34047)" },  
    { "trigger": "GL_MAX_TEXTURE_SIZE (3379)" },  
    { "trigger": "GL_MAX_TEXTURE_STACK_DEPTH (3385)" },  
    { "trigger": "GL_MAX_TEXTURE_UNITS (34018)" },  
    { "trigger": "GL_MAX_VARYING_VECTORS (36348)" },  
    { "trigger": "GL_MAX_VERTEX_ATTRIBS (34921)" },  
    { "trigger": "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS (35660)" },  
    { "trigger": "GL_MAX_VERTEX_UNIFORM_VECTORS (36347)" },  
    { "trigger": "GL_MAX_VERTEX_UNITS_OES (34468)" },  
    { "trigger": "GL_MAX_VIEWPORT_DIMS (3386)" },  
    { "trigger": "GL_MEDIUM_FLOAT (36337)" },  
    { "trigger": "GL_MEDIUM_INT (36340)" },  
    { "trigger": "GL_MIN_EXT (32775)" },  
    { "trigger": "GL_MIRRORED_REPEAT (33648)" },  
    { "trigger": "GL_MIRRORED_REPEAT_OES (33648)" },  
    { "trigger": "GL_MODELVIEW (5888)" },  
    { "trigger": "GL_MODELVIEW_MATRIX (2982)" },  
    { "trigger": "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES (35213)" },  
    { "trigger": "GL_MODELVIEW_STACK_DEPTH (2979)" },  
    { "trigger": "GL_MODULATE (8448)" },  
    { "trigger": "GL_MULTISAMPLE (32925)" },  
    { "trigger": "GL_NAND (5390)" },  
    { "trigger": "GL_NEAREST (9728)" },  
    { "trigger": "GL_NEAREST_MIPMAP_LINEAR (9986)" },  
    { "trigger": "GL_NEAREST_MIPMAP_NEAREST (9984)" },  
    { "trigger": "GL_NEVER (512)" },  
    { "trigger": "GL_NICEST (4354)" },  
    { "trigger": "GL_NONE (0)" },  
    { "trigger": "GL_NOOP (5381)" },  
    { "trigger": "GL_NOR (5384)" },  
    { "trigger": "GL_NORMALIZE (2977)" },  
    { "trigger": "GL_NORMAL_ARRAY (32885)" },  
    { "trigger": "GL_NORMAL_ARRAY_BUFFER_BINDING (34967)" },  
    { "trigger": "GL_NORMAL_ARRAY_POINTER (32911)" },  
    { "trigger": "GL_NORMAL_ARRAY_STRIDE (32895)" },  
    { "trigger": "GL_NORMAL_ARRAY_TYPE (32894)" },  
    { "trigger": "GL_NOTEQUAL (517)" },  
    { "trigger": "GL_NO_ERROR (0)" },  
    { "trigger": "GL_NUM_COMPRESSED_TEXTURE_FORMATS (34466)" },  
    { "trigger": "GL_NUM_SHADER_BINARY_FORMATS (36345)" },  
    { "trigger": "GL_OES_VERSION_1_0 (1)" },  
    { "trigger": "GL_OES_VERSION_1_1 (1)" },  
    { "trigger": "GL_OES_blend_equation_separate (1)" },  
    { "trigger": "GL_OES_blend_func_separate (1)" },  
    { "trigger": "GL_OES_blend_subtract (1)" },  
    { "trigger": "GL_OES_byte_coordinates (1)" },  
    { "trigger": "GL_OES_compressed_paletted_texture (1)" },  
    { "trigger": "GL_OES_depth24 (1)" },  
    { "trigger": "GL_OES_depth_texture (1)" },  
    { "trigger": "GL_OES_draw_texture (1)" },  
    { "trigger": "GL_OES_element_index_uint (1)" },  
    { "trigger": "GL_OES_fbo_render_mipmap (1)" },  
    { "trigger": "GL_OES_fixed_point (1)" },  
    { "trigger": "GL_OES_framebuffer_object (1)" },  
    { "trigger": "GL_OES_mapbuffer (1)" },  
    { "trigger": "GL_OES_matrix_get (1)" },  
    { "trigger": "GL_OES_matrix_palette (1)" },  
    { "trigger": "GL_OES_packed_depth_stencil (1)" },  
    { "trigger": "GL_OES_point_size_array (1)" },  
    { "trigger": "GL_OES_point_sprite (1)" },  
    { "trigger": "GL_OES_read_format (1)" },  
    { "trigger": "GL_OES_rgb8_rgba8 (1)" },  
    { "trigger": "GL_OES_single_precision (1)" },  
    { "trigger": "GL_OES_standard_derivatives (1)" },  
    { "trigger": "GL_OES_stencil8 (1)" },  
    { "trigger": "GL_OES_stencil_wrap (1)" },  
    { "trigger": "GL_OES_texture_float (1)" },  
    { "trigger": "GL_OES_texture_half_float (1)" },  
    { "trigger": "GL_OES_texture_mirrored_repeat (1)" },  
    { "trigger": "GL_OES_vertex_array_object (1)" },  
    { "trigger": "GL_ONE (1)" },  
    { "trigger": "GL_ONE_MINUS_CONSTANT_ALPHA (32772)" },  
    { "trigger": "GL_ONE_MINUS_CONSTANT_COLOR (32770)" },  
    { "trigger": "GL_ONE_MINUS_DST_ALPHA (773)" },  
    { "trigger": "GL_ONE_MINUS_DST_COLOR (775)" },  
    { "trigger": "GL_ONE_MINUS_SRC_ALPHA (771)" },  
    { "trigger": "GL_ONE_MINUS_SRC_COLOR (769)" },  
    { "trigger": "GL_OPERAND0_ALPHA (34200)" },  
    { "trigger": "GL_OPERAND0_RGB (34192)" },  
    { "trigger": "GL_OPERAND1_ALPHA (34201)" },  
    { "trigger": "GL_OPERAND1_RGB (34193)" },  
    { "trigger": "GL_OPERAND2_ALPHA (34202)" },  
    { "trigger": "GL_OPERAND2_RGB (34194)" },  
    { "trigger": "GL_OR (5383)" },  
    { "trigger": "GL_OR_INVERTED (5389)" },  
    { "trigger": "GL_OR_REVERSE (5387)" },  
    { "trigger": "GL_OUT_OF_MEMORY (1285)" },  
    { "trigger": "GL_PACK_ALIGNMENT (3333)" },  
    { "trigger": "GL_PALETTE4_R5_G6_B5_OES (35730)" },  
    { "trigger": "GL_PALETTE4_RGB5_A1_OES (35732)" },  
    { "trigger": "GL_PALETTE4_RGB8_OES (35728)" },  
    { "trigger": "GL_PALETTE4_RGBA4_OES (35731)" },  
    { "trigger": "GL_PALETTE4_RGBA8_OES (35729)" },  
    { "trigger": "GL_PALETTE8_R5_G6_B5_OES (35735)" },  
    { "trigger": "GL_PALETTE8_RGB5_A1_OES (35737)" },  
    { "trigger": "GL_PALETTE8_RGB8_OES (35733)" },  
    { "trigger": "GL_PALETTE8_RGBA4_OES (35736)" },  
    { "trigger": "GL_PALETTE8_RGBA8_OES (35734)" },  
    { "trigger": "GL_PERSPECTIVE_CORRECTION_HINT (3152)" },  
    { "trigger": "GL_POINTS (0)" },  
    { "trigger": "GL_POINT_DISTANCE_ATTENUATION (33065)" },  
    { "trigger": "GL_POINT_FADE_THRESHOLD_SIZE (33064)" },  
    { "trigger": "GL_POINT_SIZE (2833)" },  
    { "trigger": "GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES (35743)" },  
    { "trigger": "GL_POINT_SIZE_ARRAY_OES (35740)" },  
    { "trigger": "GL_POINT_SIZE_ARRAY_POINTER_OES (35212)" },  
    { "trigger": "GL_POINT_SIZE_ARRAY_STRIDE_OES (35211)" },  
    { "trigger": "GL_POINT_SIZE_ARRAY_TYPE_OES (35210)" },  
    { "trigger": "GL_POINT_SIZE_MAX (33063)" },  
    { "trigger": "GL_POINT_SIZE_MIN (33062)" },  
    { "trigger": "GL_POINT_SMOOTH (2832)" },  
    { "trigger": "GL_POINT_SMOOTH_HINT (3153)" },  
    { "trigger": "GL_POINT_SPRITE_OES (34913)" },  
    { "trigger": "GL_POLYGON_OFFSET_FACTOR (32824)" },  
    { "trigger": "GL_POLYGON_OFFSET_FILL (32823)" },  
    { "trigger": "GL_POLYGON_OFFSET_UNITS (10752)" },  
    { "trigger": "GL_POSITION (4611)" },  
    { "trigger": "GL_PREVIOUS (34168)" },  
    { "trigger": "GL_PRIMARY_COLOR (34167)" },  
    { "trigger": "GL_PROGRAM_OBJECT_EXT (35648)" },  
    { "trigger": "GL_PROGRAM_PIPELINE_BINDING_EXT (33370)" },  
    { "trigger": "GL_PROGRAM_PIPELINE_OBJECT_EXT (35407)" },  
    { "trigger": "GL_PROGRAM_SEPARABLE_EXT (33368)" },  
    { "trigger": "GL_PROJECTION (5889)" },  
    { "trigger": "GL_PROJECTION_MATRIX (2983)" },  
    { "trigger": "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES (35214)" },  
    { "trigger": "GL_PROJECTION_STACK_DEPTH (2980)" },  
    { "trigger": "GL_QUADRATIC_ATTENUATION (4617)" },  
    { "trigger": "GL_QUERY_OBJECT_EXT (37203)" },  
    { "trigger": "GL_QUERY_RESULT_AVAILABLE_EXT (34919)" },  
    { "trigger": "GL_QUERY_RESULT_EXT (34918)" },  
    { "trigger": "GL_R16F_EXT (33325)" },  
    { "trigger": "GL_R8_EXT (33321)" },  
    { "trigger": "GL_READ_FRAMEBUFFER_APPLE (36008)" },  
    { "trigger": "GL_READ_FRAMEBUFFER_BINDING_APPLE (36010)" },  
    { "trigger": "GL_RED_BITS (3410)" },  
    { "trigger": "GL_RED_EXT (6403)" },  
    { "trigger": "GL_RENDERBUFFER (36161)" },  
    { "trigger": "GL_RENDERBUFFER_ALPHA_SIZE (36179)" },  
    { "trigger": "GL_RENDERBUFFER_ALPHA_SIZE_OES (36179)" },  
    { "trigger": "GL_RENDERBUFFER_BINDING (36007)" },  
    { "trigger": "GL_RENDERBUFFER_BINDING_OES (36007)" },  
    { "trigger": "GL_RENDERBUFFER_BLUE_SIZE (36178)" },  
    { "trigger": "GL_RENDERBUFFER_BLUE_SIZE_OES (36178)" },  
    { "trigger": "GL_RENDERBUFFER_DEPTH_SIZE (36180)" },  
    { "trigger": "GL_RENDERBUFFER_DEPTH_SIZE_OES (36180)" },  
    { "trigger": "GL_RENDERBUFFER_GREEN_SIZE (36177)" },  
    { "trigger": "GL_RENDERBUFFER_GREEN_SIZE_OES (36177)" },  
    { "trigger": "GL_RENDERBUFFER_HEIGHT (36163)" },  
    { "trigger": "GL_RENDERBUFFER_HEIGHT_OES (36163)" },  
    { "trigger": "GL_RENDERBUFFER_INTERNAL_FORMAT (36164)" },  
    { "trigger": "GL_RENDERBUFFER_INTERNAL_FORMAT_OES (36164)" },  
    { "trigger": "GL_RENDERBUFFER_OES (36161)" },  
    { "trigger": "GL_RENDERBUFFER_RED_SIZE (36176)" },  
    { "trigger": "GL_RENDERBUFFER_RED_SIZE_OES (36176)" },  
    { "trigger": "GL_RENDERBUFFER_SAMPLES_APPLE (36011)" },  
    { "trigger": "GL_RENDERBUFFER_STENCIL_SIZE (36181)" },  
    { "trigger": "GL_RENDERBUFFER_STENCIL_SIZE_OES (36181)" },  
    { "trigger": "GL_RENDERBUFFER_WIDTH (36162)" },  
    { "trigger": "GL_RENDERBUFFER_WIDTH_OES (36162)" },  
    { "trigger": "GL_RENDERER (7937)" },  
    { "trigger": "GL_REPEAT (10497)" },  
    { "trigger": "GL_REPLACE (7681)" },  
    { "trigger": "GL_RESCALE_NORMAL (32826)" },  
    { "trigger": "GL_RG16F_EXT (33327)" },  
    { "trigger": "GL_RG8_EXT (33323)" },  
    { "trigger": "GL_RGB (6407)" },  
    { "trigger": "GL_RGB16F_EXT (34843)" },  
    { "trigger": "GL_RGB565 (36194)" },  
    { "trigger": "GL_RGB565_OES (36194)" },  
    { "trigger": "GL_RGB5_A1 (32855)" },  
    { "trigger": "GL_RGB5_A1_OES (32855)" },  
    { "trigger": "GL_RGB8_OES (32849)" },  
    { "trigger": "GL_RGBA (6408)" },  
    { "trigger": "GL_RGBA16F_EXT (34842)" },  
    { "trigger": "GL_RGBA4 (32854)" },  
    { "trigger": "GL_RGBA4_OES (32854)" },  
    { "trigger": "GL_RGBA8_OES (32856)" },  
    { "trigger": "GL_RGB_422_APPLE (35359)" },  
    { "trigger": "GL_RGB_SCALE (34163)" },  
    { "trigger": "GL_RG_EXT (33319)" },  
    { "trigger": "GL_SAMPLER_2D (35678)" },  
    { "trigger": "GL_SAMPLER_CUBE (35680)" },  
    { "trigger": "GL_SAMPLES (32937)" },  
    { "trigger": "GL_SAMPLE_ALPHA_TO_COVERAGE (32926)" },  
    { "trigger": "GL_SAMPLE_ALPHA_TO_ONE (32927)" },  
    { "trigger": "GL_SAMPLE_BUFFERS (32936)" },  
    { "trigger": "GL_SAMPLE_COVERAGE (32928)" },  
    { "trigger": "GL_SAMPLE_COVERAGE_INVERT (32939)" },  
    { "trigger": "GL_SAMPLE_COVERAGE_VALUE (32938)" },  
    { "trigger": "GL_SCISSOR_BOX (3088)" },  
    { "trigger": "GL_SCISSOR_TEST (3089)" },  
    { "trigger": "GL_SET (5391)" },  
    { "trigger": "GL_SHADER_BINARY_FORMATS (36344)" },  
    { "trigger": "GL_SHADER_COMPILER (36346)" },  
    { "trigger": "GL_SHADER_OBJECT_EXT (35656)" },  
    { "trigger": "GL_SHADER_SOURCE_LENGTH (35720)" },  
    { "trigger": "GL_SHADER_TYPE (35663)" },  
    { "trigger": "GL_SHADE_MODEL (2900)" },  
    { "trigger": "GL_SHADING_LANGUAGE_VERSION (35724)" },  
    { "trigger": "GL_SHININESS (5633)" },  
    { "trigger": "GL_SHORT (5122)" },  
    { "trigger": "GL_SMOOTH (7425)" },  
    { "trigger": "GL_SMOOTH_LINE_WIDTH_RANGE (2850)" },  
    { "trigger": "GL_SMOOTH_POINT_SIZE_RANGE (2834)" },  
    { "trigger": "GL_SPECULAR (4610)" },  
    { "trigger": "GL_SPOT_CUTOFF (4614)" },  
    { "trigger": "GL_SPOT_DIRECTION (4612)" },  
    { "trigger": "GL_SPOT_EXPONENT (4613)" },  
    { "trigger": "GL_SRC0_ALPHA (34184)" },  
    { "trigger": "GL_SRC0_RGB (34176)" },  
    { "trigger": "GL_SRC1_ALPHA (34185)" },  
    { "trigger": "GL_SRC1_RGB (34177)" },  
    { "trigger": "GL_SRC2_ALPHA (34186)" },  
    { "trigger": "GL_SRC2_RGB (34178)" },  
    { "trigger": "GL_SRC_ALPHA (770)" },  
    { "trigger": "GL_SRC_ALPHA_SATURATE (776)" },  
    { "trigger": "GL_SRC_COLOR (768)" },  
    { "trigger": "GL_STACK_OVERFLOW (1283)" },  
    { "trigger": "GL_STACK_UNDERFLOW (1284)" },  
    { "trigger": "GL_STATIC_DRAW (35044)" },  
    { "trigger": "GL_STENCIL_ATTACHMENT (36128)" },  
    { "trigger": "GL_STENCIL_ATTACHMENT_OES (36128)" },  
    { "trigger": "GL_STENCIL_BACK_FAIL (34817)" },  
    { "trigger": "GL_STENCIL_BACK_FUNC (34816)" },  
    { "trigger": "GL_STENCIL_BACK_PASS_DEPTH_FAIL (34818)" },  
    { "trigger": "GL_STENCIL_BACK_PASS_DEPTH_PASS (34819)" },  
    { "trigger": "GL_STENCIL_BACK_REF (36003)" },  
    { "trigger": "GL_STENCIL_BACK_VALUE_MASK (36004)" },  
    { "trigger": "GL_STENCIL_BACK_WRITEMASK (36005)" },  
    { "trigger": "GL_STENCIL_BITS (3415)" },  
    { "trigger": "GL_STENCIL_BUFFER_BIT (1024)" },  
    { "trigger": "GL_STENCIL_CLEAR_VALUE (2961)" },  
    { "trigger": "GL_STENCIL_EXT (6146)" },  
    { "trigger": "GL_STENCIL_FAIL (2964)" },  
    { "trigger": "GL_STENCIL_FUNC (2962)" },  
    { "trigger": "GL_STENCIL_INDEX (6401)" },  
    { "trigger": "GL_STENCIL_INDEX8 (36168)" },  
    { "trigger": "GL_STENCIL_INDEX8_OES (36168)" },  
    { "trigger": "GL_STENCIL_PASS_DEPTH_FAIL (2965)" },  
    { "trigger": "GL_STENCIL_PASS_DEPTH_PASS (2966)" },  
    { "trigger": "GL_STENCIL_REF (2967)" },  
    { "trigger": "GL_STENCIL_TEST (2960)" },  
    { "trigger": "GL_STENCIL_VALUE_MASK (2963)" },  
    { "trigger": "GL_STENCIL_WRITEMASK (2968)" },  
    { "trigger": "GL_STREAM_DRAW (35040)" },  
    { "trigger": "GL_SUBPIXEL_BITS (3408)" },  
    { "trigger": "GL_SUBTRACT (34023)" },  
    { "trigger": "GL_TEXTURE (5890)" },  
    { "trigger": "GL_TEXTURE0 (33984)" },  
    { "trigger": "GL_TEXTURE1 (33985)" },  
    { "trigger": "GL_TEXTURE10 (33994)" },  
    { "trigger": "GL_TEXTURE11 (33995)" },  
    { "trigger": "GL_TEXTURE12 (33996)" },  
    { "trigger": "GL_TEXTURE13 (33997)" },  
    { "trigger": "GL_TEXTURE14 (33998)" },  
    { "trigger": "GL_TEXTURE15 (33999)" },  
    { "trigger": "GL_TEXTURE16 (34000)" },  
    { "trigger": "GL_TEXTURE17 (34001)" },  
    { "trigger": "GL_TEXTURE18 (34002)" },  
    { "trigger": "GL_TEXTURE19 (34003)" },  
    { "trigger": "GL_TEXTURE2 (33986)" },  
    { "trigger": "GL_TEXTURE20 (34004)" },  
    { "trigger": "GL_TEXTURE21 (34005)" },  
    { "trigger": "GL_TEXTURE22 (34006)" },  
    { "trigger": "GL_TEXTURE23 (34007)" },  
    { "trigger": "GL_TEXTURE24 (34008)" },  
    { "trigger": "GL_TEXTURE25 (34009)" },  
    { "trigger": "GL_TEXTURE26 (34010)" },  
    { "trigger": "GL_TEXTURE27 (34011)" },  
    { "trigger": "GL_TEXTURE28 (34012)" },  
    { "trigger": "GL_TEXTURE29 (34013)" },  
    { "trigger": "GL_TEXTURE3 (33987)" },  
    { "trigger": "GL_TEXTURE30 (34014)" },  
    { "trigger": "GL_TEXTURE31 (34015)" },  
    { "trigger": "GL_TEXTURE4 (33988)" },  
    { "trigger": "GL_TEXTURE5 (33989)" },  
    { "trigger": "GL_TEXTURE6 (33990)" },  
    { "trigger": "GL_TEXTURE7 (33991)" },  
    { "trigger": "GL_TEXTURE8 (33992)" },  
    { "trigger": "GL_TEXTURE9 (33993)" },  
    { "trigger": "GL_TEXTURE_2D (3553)" },  
    { "trigger": "GL_TEXTURE_BINDING_2D (32873)" },  
    { "trigger": "GL_TEXTURE_BINDING_CUBE_MAP (34068)" },  
    { "trigger": "GL_TEXTURE_COMPARE_FUNC_EXT (34893)" },  
    { "trigger": "GL_TEXTURE_COMPARE_MODE_EXT (34892)" },  
    { "trigger": "GL_TEXTURE_COORD_ARRAY (32888)" },  
    { "trigger": "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING (34970)" },  
    { "trigger": "GL_TEXTURE_COORD_ARRAY_POINTER (32914)" },  
    { "trigger": "GL_TEXTURE_COORD_ARRAY_SIZE (32904)" },  
    { "trigger": "GL_TEXTURE_COORD_ARRAY_STRIDE (32906)" },  
    { "trigger": "GL_TEXTURE_COORD_ARRAY_TYPE (32905)" },  
    { "trigger": "GL_TEXTURE_CROP_RECT_OES (35741)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP (34067)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP_NEGATIVE_X (34070)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y (34072)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z (34074)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP_POSITIVE_X (34069)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP_POSITIVE_Y (34071)" },  
    { "trigger": "GL_TEXTURE_CUBE_MAP_POSITIVE_Z (34073)" },  
    { "trigger": "GL_TEXTURE_ENV (8960)" },  
    { "trigger": "GL_TEXTURE_ENV_COLOR (8705)" },  
    { "trigger": "GL_TEXTURE_ENV_MODE (8704)" },  
    { "trigger": "GL_TEXTURE_FILTER_CONTROL_EXT (34048)" },  
    { "trigger": "GL_TEXTURE_LOD_BIAS_EXT (34049)" },  
    { "trigger": "GL_TEXTURE_MAG_FILTER (10240)" },  
    { "trigger": "GL_TEXTURE_MATRIX (2984)" },  
    { "trigger": "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES (35215)" },  
    { "trigger": "GL_TEXTURE_MAX_ANISOTROPY_EXT (34046)" },  
    { "trigger": "GL_TEXTURE_MAX_LEVEL_APPLE (33085)" },  
    { "trigger": "GL_TEXTURE_MIN_FILTER (10241)" },  
    { "trigger": "GL_TEXTURE_STACK_DEPTH (2981)" },  
    { "trigger": "GL_TEXTURE_WRAP_S (10242)" },  
    { "trigger": "GL_TEXTURE_WRAP_T (10243)" },  
    { "trigger": "GL_TRIANGLES (4)" },  
    { "trigger": "GL_TRIANGLE_FAN (6)" },  
    { "trigger": "GL_TRIANGLE_STRIP (5)" },  
    { "trigger": "GL_TRUE (1)" },  
    { "trigger": "GL_UNPACK_ALIGNMENT (3317)" },  
    { "trigger": "GL_UNSIGNED_BYTE (5121)" },  
    { "trigger": "GL_UNSIGNED_INT (5125)" },  
    { "trigger": "GL_UNSIGNED_INT_24_8_OES (34042)" },  
    { "trigger": "GL_UNSIGNED_INT_OES (5125)" },  
    { "trigger": "GL_UNSIGNED_NORMALIZED_EXT (35863)" },  
    { "trigger": "GL_UNSIGNED_SHORT (5123)" },  
    { "trigger": "GL_UNSIGNED_SHORT_1_5_5_5_REV (33638)" },  
    { "trigger": "GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT (33638)" },  
    { "trigger": "GL_UNSIGNED_SHORT_4_4_4_4 (32819)" },  
    { "trigger": "GL_UNSIGNED_SHORT_4_4_4_4_REV (33637)" },  
    { "trigger": "GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT (33637)" },  
    { "trigger": "GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG (33637)" },  
    { "trigger": "GL_UNSIGNED_SHORT_5_5_5_1 (32820)" },  
    { "trigger": "GL_UNSIGNED_SHORT_5_6_5 (33635)" },  
    { "trigger": "GL_UNSIGNED_SHORT_8_8_APPLE (34234)" },  
    { "trigger": "GL_UNSIGNED_SHORT_8_8_REV_APPLE (34235)" },  
    { "trigger": "GL_VALIDATE_STATUS (35715)" },  
    { "trigger": "GL_VENDOR (7936)" },  
    { "trigger": "GL_VERSION (7938)" },  
    { "trigger": "GL_VERSION_ES_CL_1_0 (1)" },  
    { "trigger": "GL_VERSION_ES_CL_1_1 (1)" },  
    { "trigger": "GL_VERSION_ES_CM_1_0 (1)" },  
    { "trigger": "GL_VERSION_ES_CM_1_1 (1)" },  
    { "trigger": "GL_VERTEX_ARRAY (32884)" },  
    { "trigger": "GL_VERTEX_ARRAY_BINDING_OES (34229)" },  
    { "trigger": "GL_VERTEX_ARRAY_BUFFER_BINDING (34966)" },  
    { "trigger": "GL_VERTEX_ARRAY_OBJECT_EXT (37204)" },  
    { "trigger": "GL_VERTEX_ARRAY_POINTER (32910)" },  
    { "trigger": "GL_VERTEX_ARRAY_SIZE (32890)" },  
    { "trigger": "GL_VERTEX_ARRAY_STRIDE (32892)" },  
    { "trigger": "GL_VERTEX_ARRAY_TYPE (32891)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING (34975)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_ENABLED (34338)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED (34922)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_POINTER (34373)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_SIZE (34339)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_STRIDE (34340)" },  
    { "trigger": "GL_VERTEX_ATTRIB_ARRAY_TYPE (34341)" },  
    { "trigger": "GL_VERTEX_SHADER (35633)" },  
    { "trigger": "GL_VERTEX_SHADER_BIT_EXT (1)" },  
    { "trigger": "GL_VIEWPORT (2978)" },  
    { "trigger": "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES (34974)" },  
    { "trigger": "GL_WEIGHT_ARRAY_OES (34477)" },  
    { "trigger": "GL_WEIGHT_ARRAY_POINTER_OES (34476)" },  
    { "trigger": "GL_WEIGHT_ARRAY_SIZE_OES (34475)" },  
    { "trigger": "GL_WEIGHT_ARRAY_STRIDE_OES (34474)" },  
    { "trigger": "GL_WEIGHT_ARRAY_TYPE_OES (34473)" },  
    { "trigger": "GL_WRITE_ONLY_OES (35001)" },  
    { "trigger": "GL_XOR (5382)" },  
    { "trigger": "GL_ZERO (0)" },  
    { "trigger": "HTTPBody" },  
    { "trigger": "HTTPBodyStream" },  
    { "trigger": "HTTPMethod" },  
    { "trigger": "HTTPShouldHandleCookies" },  
    { "trigger": "HTTPShouldUsePipelining" },  
    { "trigger": "ISOcountryCode" },  
    { "trigger": "KABDateTimePropertyType (4)" },  
    { "trigger": "KABDictionaryPropertyType (5)" },  
    { "trigger": "KABGroupNameProperty (int)" },  
    { "trigger": "KABGroupType (1)" },  
    { "trigger": "KABHomeLabel (CFStringRef)" },  
    { "trigger": "KABIntegerPropertyType (2)" },  
    { "trigger": "KABInvalidPropertyType (0)" },  
    { "trigger": "KABMultiDateTimePropertyType (260)" },  
    { "trigger": "KABMultiDictionaryPropertyType (261)" },  
    { "trigger": "KABMultiIntegerPropertyType (258)" },  
    { "trigger": "KABMultiRealPropertyType (259)" },  
    { "trigger": "KABMultiStringPropertyType (257)" },  
    { "trigger": "KABMultiValueInvalidIdentifier (-1)" },  
    { "trigger": "KABMultiValueMask (256)" },  
    { "trigger": "KABOperationNotPermittedByStoreError (0)" },  
    { "trigger": "KABOtherLabel (CFStringRef)" },  
    { "trigger": "KABPersonAddressCityKey (CFStringRef)" },  
    { "trigger": "KABPersonAddressCountryCodeKey (CFStringRef)" },  
    { "trigger": "KABPersonAddressCountryKey (CFStringRef)" },  
    { "trigger": "KABPersonAddressProperty (ABPropertyID)" },  
    { "trigger": "KABPersonAddressStateKey (CFStringRef)" },  
    { "trigger": "KABPersonAddressStreetKey (CFStringRef)" },  
    { "trigger": "KABPersonAddressZIPKey (CFStringRef)" },  
    { "trigger": "KABPersonAnniversaryLabel (CFStringRef)" },  
    { "trigger": "KABPersonAssistantLabel (CFStringRef)" },  
    { "trigger": "KABPersonBirthdayProperty (ABPropertyID)" },  
    { "trigger": "KABPersonBrotherLabel (CFStringRef)" },  
    { "trigger": "KABPersonChildLabel (CFStringRef)" },  
    { "trigger": "KABPersonCompositeNameFormatFirstNameFirst (0)" },  
    { "trigger": "KABPersonCompositeNameFormatLastNameFirst (1)" },  
    { "trigger": "KABPersonCreationDateProperty (ABPropertyID)" },  
    { "trigger": "KABPersonDateProperty (ABPropertyID)" },  
    { "trigger": "KABPersonDepartmentProperty (ABPropertyID)" },  
    { "trigger": "KABPersonEmailProperty (ABPropertyID)" },  
    { "trigger": "KABPersonFatherLabel (CFStringRef)" },  
    { "trigger": "KABPersonFirstNamePhoneticProperty (ABPropertyID)" },  
    { "trigger": "KABPersonFirstNameProperty (ABPropertyID)" },  
    { "trigger": "KABPersonFriendLabel (CFStringRef)" },  
    { "trigger": "KABPersonHomePageLabel (CFStringRef)" },  
    { "trigger": "KABPersonImageFormatOriginalSize (2)" },  
    { "trigger": "KABPersonImageFormatThumbnail (0)" },  
    { "trigger": "KABPersonInstantMessageProperty (ABPropertyID)" },  
    { "trigger": "KABPersonInstantMessageServiceAIM (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceFacebook (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceGaduGadu (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceGoogleTalk (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceICQ (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceJabber (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceKey (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceMSN (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceQQ (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceSkype (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageServiceYahoo (CFStringRef)" },  
    { "trigger": "KABPersonInstantMessageUsernameKey (CFStringRef)" },  
    { "trigger": "KABPersonJobTitleProperty (ABPropertyID)" },  
    { "trigger": "KABPersonKindOrganization (CFNumberRef)" },  
    { "trigger": "KABPersonKindPerson (CFNumberRef)" },  
    { "trigger": "KABPersonKindProperty (ABPropertyID)" },  
    { "trigger": "KABPersonLastNamePhoneticProperty (ABPropertyID)" },  
    { "trigger": "KABPersonLastNameProperty (ABPropertyID)" },  
    { "trigger": "KABPersonManagerLabel (CFStringRef)" },  
    { "trigger": "KABPersonMiddleNamePhoneticProperty (ABPropertyID)" },  
    { "trigger": "KABPersonMiddleNameProperty (ABPropertyID)" },  
    { "trigger": "KABPersonModificationDateProperty (ABPropertyID)" },  
    { "trigger": "KABPersonMotherLabel (CFStringRef)" },  
    { "trigger": "KABPersonNicknameProperty (ABPropertyID)" },  
    { "trigger": "KABPersonNoteProperty (ABPropertyID)" },  
    { "trigger": "KABPersonOrganizationProperty (ABPropertyID)" },  
    { "trigger": "KABPersonParentLabel (CFStringRef)" },  
    { "trigger": "KABPersonPartnerLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhoneHomeFAXLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhoneIPhoneLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhoneMainLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhoneMobileLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhoneOtherFAXLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhonePagerLabel (CFStringRef)" },  
    { "trigger": "KABPersonPhoneProperty (ABPropertyID)" },  
    { "trigger": "KABPersonPhoneWorkFAXLabel (CFStringRef)" },  
    { "trigger": "KABPersonPrefixProperty (ABPropertyID)" },  
    { "trigger": "KABPersonRelatedNamesProperty (ABPropertyID)" },  
    { "trigger": "KABPersonSisterLabel (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileProperty (ABPropertyID)" },  
    { "trigger": "KABPersonSocialProfileServiceFacebook (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileServiceFlickr (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileServiceGameCenter (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileServiceKey (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileServiceLinkedIn (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileServiceMyspace (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileServiceTwitter (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileURLKey (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileUserIdentifierKey (CFStringRef)" },  
    { "trigger": "KABPersonSocialProfileUsernameKey (CFStringRef)" },  
    { "trigger": "KABPersonSortByFirstName (0)" },  
    { "trigger": "KABPersonSortByLastName (1)" },  
    { "trigger": "KABPersonSpouseLabel (CFStringRef)" },  
    { "trigger": "KABPersonSuffixProperty (ABPropertyID)" },  
    { "trigger": "KABPersonType (0)" },  
    { "trigger": "KABPersonURLProperty (ABPropertyID)" },  
    { "trigger": "KABPropertyInvalidID (-1)" },  
    { "trigger": "KABRealPropertyType (3)" },  
    { "trigger": "KABRecordInvalidID (-1)" },  
    { "trigger": "KABSourceNameProperty (ABPropertyID)" },  
    { "trigger": "KABSourceType (2)" },  
    { "trigger": "KABSourceTypeCardDAV (4)" },  
    { "trigger": "KABSourceTypeCardDAVSearch (16777220)" },  
    { "trigger": "KABSourceTypeExchange (1)" },  
    { "trigger": "KABSourceTypeExchangeGAL (16777217)" },  
    { "trigger": "KABSourceTypeLDAP (16777219)" },  
    { "trigger": "KABSourceTypeLocal (0)" },  
    { "trigger": "KABSourceTypeMobileMe (2)" },  
    { "trigger": "KABSourceTypeProperty (ABPropertyID)" },  
    { "trigger": "KABSourceTypeSearchableMask (16777216)" },  
    { "trigger": "KABStringPropertyType (1)" },  
    { "trigger": "KABWorkLabel (CFStringRef)" },  
    { "trigger": "KAUGraphErr_CannotDoInCurrentContext (-10863)" },  
    { "trigger": "KAUGraphErr_InvalidAudioUnit (-10864)" },  
    { "trigger": "KAUGraphErr_InvalidConnection (-10861)" },  
    { "trigger": "KAUGraphErr_NodeNotFound (-10860)" },  
    { "trigger": "KAUGraphErr_OutputNodeErr (-10862)" },  
    { "trigger": "KAUNodeInteraction_Connection (1)" },  
    { "trigger": "KAUNodeInteraction_InputCallback (2)" },  
    { "trigger": "KAbbrevSquaredLigaturesOffSelector (15)" },  
    { "trigger": "KAbbrevSquaredLigaturesOnSelector (14)" },  
    { "trigger": "KAllCapsSelector (1)" },  
    { "trigger": "KAllLowerCaseSelector (2)" },  
    { "trigger": "KAllTypeFeaturesOffSelector (1)" },  
    { "trigger": "KAllTypeFeaturesOnSelector (0)" },  
    { "trigger": "KAllTypographicFeaturesType (0)" },  
    { "trigger": "KAlwaysAuthenticate (1)" },  
    { "trigger": "KAnnotationType (24)" },  
    { "trigger": "KAppleHardwareAudioCodecManufacturer (1634756727)" },  
    { "trigger": "KAppleSoftwareAudioCodecManufacturer (1634758764)" },  
    { "trigger": "KAsteriskToMultiplyOffSelector (3)" },  
    { "trigger": "KAsteriskToMultiplyOnSelector (2)" },  
    { "trigger": "KAudioBalanceFadeType_EqualPower (1)" },  
    { "trigger": "KAudioBalanceFadeType_MaxUnityGain (0)" },  
    { "trigger": "KAudioConverterApplicableEncodeBitRates (1634034290)" },  
    { "trigger": "KAudioConverterApplicableEncodeSampleRates (1634038642)" },  
    { "trigger": "KAudioConverterAvailableEncodeBitRates (1986355826)" },  
    { "trigger": "KAudioConverterAvailableEncodeChannelLayoutTags (1634034540)" },  
    { "trigger": "KAudioConverterAvailableEncodeSampleRates (1986360178)" },  
    { "trigger": "KAudioConverterChannelMap (1667788144)" },  
    { "trigger": "KAudioConverterCodecQuality (1667527029)" },  
    { "trigger": "KAudioConverterCompressionMagicCookie (1668114275)" },  
    { "trigger": "KAudioConverterCurrentInputStreamDescription (1633904996)" },  
    { "trigger": "KAudioConverterCurrentOutputStreamDescription (1633906532)" },  
    { "trigger": "KAudioConverterDecompressionMagicCookie (1684891491)" },  
    { "trigger": "KAudioConverterEncodeAdjustableSampleRate (1634366322)" },  
    { "trigger": "KAudioConverterEncodeBitRate (1651663220)" },  
    { "trigger": "KAudioConverterErr_BadPropertySizeError (561211770)" },  
    { "trigger": "KAudioConverterErr_FormatNotSupported (1718449215)" },  
    { "trigger": "KAudioConverterErr_HardwareInUse (1752656245)" },  
    { "trigger": "KAudioConverterErr_InputSampleRateOutOfRange (560558962)" },  
    { "trigger": "KAudioConverterErr_InvalidInputSize (1768846202)" },  
    { "trigger": "KAudioConverterErr_InvalidOutputSize (1869902714)" },  
    { "trigger": "KAudioConverterErr_NoHardwarePermission (1885696621)" },  
    { "trigger": "KAudioConverterErr_OperationNotSupported (1869627199)" },  
    { "trigger": "KAudioConverterErr_OutputSampleRateOutOfRange (560952178)" },  
    { "trigger": "KAudioConverterErr_PropertyNotSupported (1886547824)" },  
    { "trigger": "KAudioConverterErr_RequiresPacketDescriptionsError (561015652)" },  
    { "trigger": "KAudioConverterErr_UnspecifiedError (2003329396)" },  
    { "trigger": "KAudioConverterInputChannelLayout (1768123424)" },  
    { "trigger": "KAudioConverterOutputChannelLayout (1868786720)" },  
    { "trigger": "KAudioConverterPrimeInfo (1886546285)" },  
    { "trigger": "KAudioConverterPrimeMethod (1886547309)" },  
    { "trigger": "KAudioConverterPropertyBitDepthHint (1633903204)" },  
    { "trigger": "KAudioConverterPropertyCalculateInputBufferSize (1667850867)" },  
    { "trigger": "KAudioConverterPropertyCalculateOutputBufferSize (1668244083)" },  
    { "trigger": "KAudioConverterPropertyCanResumeFromInterruption (1668441705)" },  
    { "trigger": "KAudioConverterPropertyFormatList (1718383476)" },  
    { "trigger": "KAudioConverterPropertyInputCodecParameters (1768121456)" },  
    { "trigger": "KAudioConverterPropertyMaximumInputBufferSize (2020172403)" },  
    { "trigger": "KAudioConverterPropertyMaximumInputPacketSize (2020175987)" },  
    { "trigger": "KAudioConverterPropertyMaximumOutputPacketSize (2020569203)" },  
    { "trigger": "KAudioConverterPropertyMinimumInputBufferSize (1835623027)" },  
    { "trigger": "KAudioConverterPropertyMinimumOutputBufferSize (1836016243)" },  
    { "trigger": "KAudioConverterPropertyOutputCodecParameters (1868784752)" },  
    { "trigger": "KAudioConverterPropertySettings (1633906803)" },  
    { "trigger": "KAudioConverterQuality_High (96)" },  
    { "trigger": "KAudioConverterQuality_Low (32)" },  
    { "trigger": "KAudioConverterQuality_Max (127)" },  
    { "trigger": "KAudioConverterQuality_Medium (64)" },  
    { "trigger": "KAudioConverterQuality_Min (0)" },  
    { "trigger": "KAudioConverterSampleRateConverterAlgorithm (1936876393)" },  
    { "trigger": "KAudioConverterSampleRateConverterComplexity (1936876385)" },  
    { "trigger": "KAudioConverterSampleRateConverterComplexity_Linear (1818848869)" },  
    { "trigger": "KAudioConverterSampleRateConverterComplexity_Mastering (1650553971)" },  
    { "trigger": "KAudioConverterSampleRateConverterComplexity_Normal (1852797549)" },  
    { "trigger": "KAudioConverterSampleRateConverterInitialPhase (1936876400)" },  
    { "trigger": "KAudioConverterSampleRateConverterQuality (1936876401)" },  
    { "trigger": "KAudioDecoderComponentType (1633969507)" },  
    { "trigger": "KAudioEncoderComponentType (1634037347)" },  
    { "trigger": "KAudioFile3GP2Type (862416946)" },  
    { "trigger": "KAudioFile3GPType (862417008)" },  
    { "trigger": "KAudioFileAAC_ADTSType (1633973363)" },  
    { "trigger": "KAudioFileAC3Type (1633889587)" },  
    { "trigger": "KAudioFileAIFCType (1095321155)" },  
    { "trigger": "KAudioFileAIFFType (1095321158)" },  
    { "trigger": "KAudioFileAMRType (1634562662)" },  
    { "trigger": "KAudioFileBadPropertySizeError (561211770)" },  
    { "trigger": "KAudioFileCAFType (1667327590)" },  
    { "trigger": "KAudioFileDoesNotAllow64BitDataSizeError (1868981823)" },  
    { "trigger": "KAudioFileEndOfFileError (-39)" },  
    { "trigger": "KAudioFileFileNotFoundError (-43)" },  
    { "trigger": "KAudioFileFlags_DontPageAlignAudioData (2)" },  
    { "trigger": "KAudioFileFlags_EraseFile (1)" },  
    { "trigger": "KAudioFileGlobalInfo_AllExtensions (1634498676)" },  
    { "trigger": "KAudioFileGlobalInfo_AllHFSTypeCodes (1634231923)" },  
    { "trigger": "KAudioFileGlobalInfo_AllMIMETypes (1634560365)" },  
    { "trigger": "KAudioFileGlobalInfo_AllUTIs (1635087465)" },  
    { "trigger": "KAudioFileGlobalInfo_AvailableFormatIDs (1718446436)" },  
    { "trigger": "KAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat (1935960420)" },  
    { "trigger": "KAudioFileGlobalInfo_ExtensionsForType (1717926004)" },  
    { "trigger": "KAudioFileGlobalInfo_FileTypeName (1718906477)" },  
    { "trigger": "KAudioFileGlobalInfo_HFSTypeCodesForType (1718118003)" },  
    { "trigger": "KAudioFileGlobalInfo_MIMETypesForType (1718446445)" },  
    { "trigger": "KAudioFileGlobalInfo_ReadableTypes (1634103910)" },  
    { "trigger": "KAudioFileGlobalInfo_TypesForExtension (1952807028)" },  
    { "trigger": "KAudioFileGlobalInfo_TypesForHFSTypeCode (1952999027)" },  
    { "trigger": "KAudioFileGlobalInfo_TypesForMIMEType (1953327469)" },  
    { "trigger": "KAudioFileGlobalInfo_TypesForUTI (1953854569)" },  
    { "trigger": "KAudioFileGlobalInfo_UTIsForType (1718973545)" },  
    { "trigger": "KAudioFileGlobalInfo_WritableTypes (1634105190)" },  
    { "trigger": "KAudioFileInvalidChunkError (1667787583)" },  
    { "trigger": "KAudioFileInvalidFileError (1685348671)" },  
    { "trigger": "KAudioFileInvalidPacketOffsetError (1885563711)" },  
    { "trigger": "KAudioFileLoopDirection_Backward (3)" },  
    { "trigger": "KAudioFileLoopDirection_Forward (1)" },  
    { "trigger": "KAudioFileLoopDirection_ForwardAndBackward (2)" },  
    { "trigger": "KAudioFileLoopDirection_NoLooping (0)" },  
    { "trigger": "KAudioFileM4AType (1832149350)" },  
    { "trigger": "KAudioFileMP1Type (1297106737)" },  
    { "trigger": "KAudioFileMP2Type (1297106738)" },  
    { "trigger": "KAudioFileMP3Type (1297106739)" },  
    { "trigger": "KAudioFileMPEG4Type (1836069990)" },  
    { "trigger": "KAudioFileMarkerType_Generic (0)" },  
    { "trigger": "KAudioFileNextType (1315264596)" },  
    { "trigger": "KAudioFileNotOpenError (-38)" },  
    { "trigger": "KAudioFileNotOptimizedError (1869640813)" },  
    { "trigger": "KAudioFileOperationNotSupportedError (1869627199)" },  
    { "trigger": "KAudioFilePermissionsError (1886547263)" },  
    { "trigger": "KAudioFilePositionError (-40)" },  
    { "trigger": "KAudioFilePropertyAlbumArtwork (1633776244)" },  
    { "trigger": "KAudioFilePropertyAudioDataByteCount (1650683508)" },  
    { "trigger": "KAudioFilePropertyAudioDataPacketCount (1885564532)" },  
    { "trigger": "KAudioFilePropertyBitRate (1651663220)" },  
    { "trigger": "KAudioFilePropertyByteToPacket (1652125803)" },  
    { "trigger": "KAudioFilePropertyChannelLayout (1668112752)" },  
    { "trigger": "KAudioFilePropertyChunkIDs (1667787108)" },  
    { "trigger": "KAudioFilePropertyDataFormat (1684434292)" },  
    { "trigger": "KAudioFilePropertyDataFormatName (1718512997)" },  
    { "trigger": "KAudioFilePropertyDataOffset (1685022310)" },  
    { "trigger": "KAudioFilePropertyDeferSizeUpdates (1685289589)" },  
    { "trigger": "KAudioFilePropertyEstimatedDuration (1701082482)" },  
    { "trigger": "KAudioFilePropertyFileFormat (1717988724)" },  
    { "trigger": "KAudioFilePropertyFormatList (1718383476)" },  
    { "trigger": "KAudioFilePropertyFrameToPacket (1718775915)" },  
    { "trigger": "KAudioFilePropertyID3Tag (1768174452)" },  
    { "trigger": "KAudioFilePropertyInfoDictionary (1768842863)" },  
    { "trigger": "KAudioFilePropertyIsOptimized (1869640813)" },  
    { "trigger": "KAudioFilePropertyMagicCookieData (1835493731)" },  
    { "trigger": "KAudioFilePropertyMarkerList (1835756659)" },  
    { "trigger": "KAudioFilePropertyMaximumPacketSize (1886616165)" },  
    { "trigger": "KAudioFilePropertyPacketSizeUpperBound (1886090594)" },  
    { "trigger": "KAudioFilePropertyPacketTableInfo (1886283375)" },  
    { "trigger": "KAudioFilePropertyPacketToByte (1886085753)" },  
    { "trigger": "KAudioFilePropertyPacketToFrame (1886086770)" },  
    { "trigger": "KAudioFilePropertyRegionList (1919380595)" },  
    { "trigger": "KAudioFilePropertyReserveDuration (1920168566)" },  
    { "trigger": "KAudioFilePropertySourceBitDepth (1935832164)" },  
    { "trigger": "KAudioFileReadPermission (1)" },  
    { "trigger": "KAudioFileReadWritePermission (3)" },  
    { "trigger": "KAudioFileRegionFlag_LoopEnable (1)" },  
    { "trigger": "KAudioFileRegionFlag_PlayBackward (4)" },  
    { "trigger": "KAudioFileRegionFlag_PlayForward (2)" },  
    { "trigger": "KAudioFileSoundDesigner2Type (1399075430)" },  
    { "trigger": "KAudioFileStreamError_BadPropertySize (561211770)" },  
    { "trigger": "KAudioFileStreamError_DataUnavailable (1836020325)" },  
    { "trigger": "KAudioFileStreamError_DiscontinuityCantRecover (1685283617)" },  
    { "trigger": "KAudioFileStreamError_IllegalOperation (1852797029)" },  
    { "trigger": "KAudioFileStreamError_InvalidFile (1685348671)" },  
    { "trigger": "KAudioFileStreamError_InvalidPacketOffset (1885563711)" },  
    { "trigger": "KAudioFileStreamError_NotOptimized (1869640813)" },  
    { "trigger": "KAudioFileStreamError_UnspecifiedError (2003334207)" },  
    { "trigger": "KAudioFileStreamError_UnsupportedDataFormat (1718449215)" },  
    { "trigger": "KAudioFileStreamError_UnsupportedFileType (1954115647)" },  
    { "trigger": "KAudioFileStreamError_UnsupportedProperty (1886681407)" },  
    { "trigger": "KAudioFileStreamError_ValueUnknown (1970170687)" },  
    { "trigger": "KAudioFileStreamParseFlag_Discontinuity (1)" },  
    { "trigger": "KAudioFileStreamPropertyFlag_CacheProperty (2)" },  
    { "trigger": "KAudioFileStreamPropertyFlag_PropertyIsCached (1)" },  
    { "trigger": "KAudioFileStreamProperty_AudioDataByteCount (1650683508)" },  
    { "trigger": "KAudioFileStreamProperty_AudioDataPacketCount (1885564532)" },  
    { "trigger": "KAudioFileStreamProperty_AverageBytesPerPacket (1633841264)" },  
    { "trigger": "KAudioFileStreamProperty_BitRate (1651663220)" },  
    { "trigger": "KAudioFileStreamProperty_ByteToPacket (1652125803)" },  
    { "trigger": "KAudioFileStreamProperty_ChannelLayout (1668112752)" },  
    { "trigger": "KAudioFileStreamProperty_DataFormat (1684434292)" },  
    { "trigger": "KAudioFileStreamProperty_DataOffset (1685022310)" },  
    { "trigger": "KAudioFileStreamProperty_FileFormat (1717988724)" },  
    { "trigger": "KAudioFileStreamProperty_FormatList (1718383476)" },  
    { "trigger": "KAudioFileStreamProperty_FrameToPacket (1718775915)" },  
    { "trigger": "KAudioFileStreamProperty_MagicCookieData (1835493731)" },  
    { "trigger": "KAudioFileStreamProperty_MaximumPacketSize (1886616165)" },  
    { "trigger": "KAudioFileStreamProperty_PacketSizeUpperBound (1886090594)" },  
    { "trigger": "KAudioFileStreamProperty_PacketTableInfo (1886283375)" },  
    { "trigger": "KAudioFileStreamProperty_PacketToByte (1886085753)" },  
    { "trigger": "KAudioFileStreamProperty_PacketToFrame (1886086770)" },  
    { "trigger": "KAudioFileStreamProperty_ReadyToProducePackets (1919247481)" },  
    { "trigger": "KAudioFileStreamSeekFlag_OffsetIsEstimated (1)" },  
    { "trigger": "KAudioFileUnspecifiedError (2003334207)" },  
    { "trigger": "KAudioFileUnsupportedDataFormatError (1718449215)" },  
    { "trigger": "KAudioFileUnsupportedFileTypeError (1954115647)" },  
    { "trigger": "KAudioFileUnsupportedPropertyError (1886681407)" },  
    { "trigger": "KAudioFileWAVEType (1463899717)" },  
    { "trigger": "KAudioFileWritePermission (2)" },  
    { "trigger": "KAudioFormatBadPropertySizeError (561211770)" },  
    { "trigger": "KAudioFormatBadSpecifierSizeError (561213539)" },  
    { "trigger": "KAudioFormatProperty_ASBDFromESDS (1702064996)" },  
    { "trigger": "KAudioFormatProperty_ASBDFromMPEGPacket (1633971568)" },  
    { "trigger": "KAudioFormatProperty_AvailableEncodeBitRates (1634034290)" },  
    { "trigger": "KAudioFormatProperty_AvailableEncodeChannelLayoutTags (1634034540)" },  
    { "trigger": "KAudioFormatProperty_AvailableEncodeNumberChannels (1635151459)" },  
    { "trigger": "KAudioFormatProperty_AvailableEncodeSampleRates (1634038642)" },  
    { "trigger": "KAudioFormatProperty_BalanceFade (1650551910)" },  
    { "trigger": "KAudioFormatProperty_BitmapForLayoutTag (1651340391)" },  
    { "trigger": "KAudioFormatProperty_ChannelLayoutForBitmap (1668116578)" },  
    { "trigger": "KAudioFormatProperty_ChannelLayoutForTag (1668116588)" },  
    { "trigger": "KAudioFormatProperty_ChannelLayoutFromESDS (1702060908)" },  
    { "trigger": "KAudioFormatProperty_ChannelLayoutName (1819242093)" },  
    { "trigger": "KAudioFormatProperty_ChannelLayoutSimpleName (1819504237)" },  
    { "trigger": "KAudioFormatProperty_ChannelMap (1667788144)" },  
    { "trigger": "KAudioFormatProperty_ChannelName (1668178285)" },  
    { "trigger": "KAudioFormatProperty_ChannelShortName (1668509293)" },  
    { "trigger": "KAudioFormatProperty_DecodeFormatIDs (1633904998)" },  
    { "trigger": "KAudioFormatProperty_Decoders (1635148901)" },  
    { "trigger": "KAudioFormatProperty_EncodeFormatIDs (1633906534)" },  
    { "trigger": "KAudioFormatProperty_Encoders (1635149166)" },  
    { "trigger": "KAudioFormatProperty_FirstPlayableFormatFromList (1718642284)" },  
    { "trigger": "KAudioFormatProperty_FormatInfo (1718449257)" },  
    { "trigger": "KAudioFormatProperty_FormatIsEncrypted (1668446576)" },  
    { "trigger": "KAudioFormatProperty_FormatIsExternallyFramed (1717925990)" },  
    { "trigger": "KAudioFormatProperty_FormatIsVBR (1719034482)" },  
    { "trigger": "KAudioFormatProperty_FormatList (1718383476)" },  
    { "trigger": "KAudioFormatProperty_FormatName (1718509933)" },  
    { "trigger": "KAudioFormatProperty_HardwareCodecCapabilities (1752654691)" },  
    { "trigger": "KAudioFormatProperty_ID3TagSize (1768174451)" },  
    { "trigger": "KAudioFormatProperty_ID3TagToDictionary (1768174436)" },  
    { "trigger": "KAudioFormatProperty_MatrixMixMap (1835884912)" },  
    { "trigger": "KAudioFormatProperty_NumberOfChannelsForLayout (1852008557)" },  
    { "trigger": "KAudioFormatProperty_OutputFormatList (1868983411)" },  
    { "trigger": "KAudioFormatProperty_PanningMatrix (1885433453)" },  
    { "trigger": "KAudioFormatProperty_TagForChannelLayout (1668116596)" },  
    { "trigger": "KAudioFormatProperty_TagsForNumberOfChannels (1952540515)" },  
    { "trigger": "KAudioFormatProperty_ValidateChannelLayout (1986093932)" },  
    { "trigger": "KAudioFormatUnknownFormatError (560360820)" },  
    { "trigger": "KAudioFormatUnspecifiedError (2003329396)" },  
    { "trigger": "KAudioFormatUnsupportedDataFormatError (1718449215)" },  
    { "trigger": "KAudioFormatUnsupportedPropertyError (1886547824)" },  
    { "trigger": "KAudioQueueDeviceProperty_NumberChannels (1634821219)" },  
    { "trigger": "KAudioQueueDeviceProperty_SampleRate (1634825074)" },  
    { "trigger": "KAudioQueueErr_BufferEmpty (-66686)" },  
    { "trigger": "KAudioQueueErr_BufferInQueue (-66679)" },  
    { "trigger": "KAudioQueueErr_CannotStart (-66681)" },  
    { "trigger": "KAudioQueueErr_CodecNotFound (-66673)" },  
    { "trigger": "KAudioQueueErr_DisposalPending (-66685)" },  
    { "trigger": "KAudioQueueErr_EnqueueDuringReset (-66632)" },  
    { "trigger": "KAudioQueueErr_InvalidBuffer (-66687)" },  
    { "trigger": "KAudioQueueErr_InvalidCodecAccess (-66672)" },  
    { "trigger": "KAudioQueueErr_InvalidDevice (-66680)" },  
    { "trigger": "KAudioQueueErr_InvalidOfflineMode (-66626)" },  
    { "trigger": "KAudioQueueErr_InvalidParameter (-66682)" },  
    { "trigger": "KAudioQueueErr_InvalidProperty (-66684)" },  
    { "trigger": "KAudioQueueErr_InvalidPropertySize (-66683)" },  
    { "trigger": "KAudioQueueErr_InvalidPropertyValue (-66675)" },  
    { "trigger": "KAudioQueueErr_InvalidQueueType (-66677)" },  
    { "trigger": "KAudioQueueErr_InvalidRunState (-66678)" },  
    { "trigger": "KAudioQueueErr_Permissions (-66676)" },  
    { "trigger": "KAudioQueueErr_PrimeTimedOut (-66674)" },  
    { "trigger": "KAudioQueueErr_QueueInvalidated (-66671)" },  
    { "trigger": "KAudioQueueErr_RecordUnderrun (-66668)" },  
    { "trigger": "KAudioQueueHardwareCodecPolicy_Default (0)" },  
    { "trigger": "KAudioQueueHardwareCodecPolicy_PreferHardware (4)" },  
    { "trigger": "KAudioQueueHardwareCodecPolicy_PreferSoftware (3)" },  
    { "trigger": "KAudioQueueHardwareCodecPolicy_UseHardwareOnly (2)" },  
    { "trigger": "KAudioQueueHardwareCodecPolicy_UseSoftwareOnly (1)" },  
    { "trigger": "KAudioQueueParam_Pan (13)" },  
    { "trigger": "KAudioQueueParam_Volume (1)" },  
    { "trigger": "KAudioQueueParam_VolumeRampTime (4)" },  
    { "trigger": "KAudioQueueProperty_ChannelLayout (1634820972)" },  
    { "trigger": "KAudioQueueProperty_ConverterError (1902343781)" },  
    { "trigger": "KAudioQueueProperty_CurrentDevice (1634820964)" },  
    { "trigger": "KAudioQueueProperty_CurrentLevelMeter (1634823542)" },  
    { "trigger": "KAudioQueueProperty_CurrentLevelMeterDB (1634823524)" },  
    { "trigger": "KAudioQueueProperty_DecodeBufferSizeFrames (1684234854)" },  
    { "trigger": "KAudioQueueProperty_EnableLevelMetering (1634823525)" },  
    { "trigger": "KAudioQueueProperty_HardwareCodecPolicy (1634820976)" },  
    { "trigger": "KAudioQueueProperty_IsRunning (1634824814)" },  
    { "trigger": "KAudioQueueProperty_MagicCookie (1634823523)" },  
    { "trigger": "KAudioQueueProperty_MaximumOutputPacketSize (2020569203)" },  
    { "trigger": "KAudioQueueProperty_StreamDescription (1634821748)" },  
    { "trigger": "KAudioServicesBadPropertySizeError (561211770)" },  
    { "trigger": "KAudioServicesBadSpecifierSizeError (561213539)" },  
    { "trigger": "KAudioServicesNoError (0)" },  
    { "trigger": "KAudioServicesNoHardwareError (1852794999)" },  
    { "trigger": "KAudioServicesPropertyCompletePlaybackIfAppDies (1768318057)" },  
    { "trigger": "KAudioServicesPropertyIsUISound (1769174377)" },  
    { "trigger": "KAudioServicesSystemSoundClientTimedOutError (-1501)" },  
    { "trigger": "KAudioServicesSystemSoundUnspecifiedError (-1500)" },  
    { "trigger": "KAudioServicesUnsupportedPropertyError (1886681407)" },  
    { "trigger": "KAudioSessionAlreadyInitialized (1768843636)" },  
    { "trigger": "KAudioSessionBadPropertySizeError (561211770)" },  
    { "trigger": "KAudioSessionBeginInterruption (1)" },  
    { "trigger": "KAudioSessionCategory_AmbientSound (1634558569)" },  
    { "trigger": "KAudioSessionCategory_AudioProcessing (1886547811)" },  
    { "trigger": "KAudioSessionCategory_LiveAudio (1818850917)" },  
    { "trigger": "KAudioSessionCategory_MediaPlayback (1835361385)" },  
    { "trigger": "KAudioSessionCategory_PlayAndRecord (1886151026)" },  
    { "trigger": "KAudioSessionCategory_RecordAudio (1919247201)" },  
    { "trigger": "KAudioSessionCategory_SoloAmbientSound (1936682095)" },  
    { "trigger": "KAudioSessionCategory_UserInterfaceSoundEffects (1969841784)" },  
    { "trigger": "KAudioSessionEndInterruption (0)" },  
    { "trigger": "KAudioSessionIncompatibleCategory (560161140)" },  
    { "trigger": "KAudioSessionInitializationError (1768843583)" },  
    { "trigger": "KAudioSessionInputRoute_BluetoothHFP (CFStringRef)" },  
    { "trigger": "KAudioSessionInputRoute_BuiltInMic (CFStringRef)" },  
    { "trigger": "KAudioSessionInputRoute_HeadsetMic (CFStringRef)" },  
    { "trigger": "KAudioSessionInputRoute_LineIn (CFStringRef)" },  
    { "trigger": "KAudioSessionInputRoute_USBAudio (CFStringRef)" },  
    { "trigger": "KAudioSessionInterruptionType_ShouldNotResume (561148781)" },  
    { "trigger": "KAudioSessionInterruptionType_ShouldResume (1769108333)" },  
    { "trigger": "KAudioSessionMode_Default (1684434036)" },  
    { "trigger": "KAudioSessionMode_GameChat (1735222132)" },  
    { "trigger": "KAudioSessionMode_Measurement (1836281204)" },  
    { "trigger": "KAudioSessionMode_VideoRecording (1987208036)" },  
    { "trigger": "KAudioSessionMode_VoiceChat (1986225012)" },  
    { "trigger": "KAudioSessionNoCategorySet (1063477620)" },  
    { "trigger": "KAudioSessionNoError (0)" },  
    { "trigger": "KAudioSessionNotActiveError (560030580)" },  
    { "trigger": "KAudioSessionNotInitialized (560557673)" },  
    { "trigger": "KAudioSessionOutputRoute_AirPlay (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_BluetoothA2DP (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_BluetoothHFP (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_BuiltInReceiver (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_BuiltInSpeaker (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_HDMI (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_Headphones (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_LineOut (CFStringRef)" },  
    { "trigger": "KAudioSessionOutputRoute_USBAudio (CFStringRef)" },  
    { "trigger": "KAudioSessionOverrideAudioRoute_None (0)" },  
    { "trigger": "KAudioSessionOverrideAudioRoute_Speaker (1936747378)" },  
    { "trigger": "KAudioSessionProperty_AudioCategory (1633902964)" },  
    { "trigger": "KAudioSessionProperty_AudioInputAvailable (1634296182)" },  
    { "trigger": "KAudioSessionProperty_AudioRoute (1919907188)" },  
    { "trigger": "KAudioSessionProperty_AudioRouteChange (1919902568)" },  
    { "trigger": "KAudioSessionProperty_AudioRouteDescription (1668440434)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareIOBufferDuration (1667785316)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareInputLatency (1667853428)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareInputNumberChannels (1667787107)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareOutputLatency (1668246644)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareOutputNumberChannels (1667788643)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareOutputVolume (1667788662)" },  
    { "trigger": "KAudioSessionProperty_CurrentHardwareSampleRate (1667789682)" },  
    { "trigger": "KAudioSessionProperty_InputGainAvailable (1768382838)" },  
    { "trigger": "KAudioSessionProperty_InputGainScalar (1768387427)" },  
    { "trigger": "KAudioSessionProperty_InputSource (1769173603)" },  
    { "trigger": "KAudioSessionProperty_InputSources (1936876403)" },  
    { "trigger": "KAudioSessionProperty_InterruptionType (1954115685)" },  
    { "trigger": "KAudioSessionProperty_Mode (1836016741)" },  
    { "trigger": "KAudioSessionProperty_OtherAudioIsPlaying (1869899890)" },  
    { "trigger": "KAudioSessionProperty_OtherMixableAudioShouldDuck (1685414763)" },  
    { "trigger": "KAudioSessionProperty_OutputDestination (1868854132)" },  
    { "trigger": "KAudioSessionProperty_OutputDestinations (1685288051)" },  
    { "trigger": "KAudioSessionProperty_OverrideAudioRoute (1870033508)" },  
    { "trigger": "KAudioSessionProperty_OverrideCategoryDefaultToSpeaker (1668509803)" },  
    { "trigger": "KAudioSessionProperty_OverrideCategoryEnableBluetoothInput (1667394677)" },  
    { "trigger": "KAudioSessionProperty_OverrideCategoryMixWithOthers (1668114808)" },  
    { "trigger": "KAudioSessionProperty_PreferredHardwareIOBufferDuration (1768907364)" },  
    { "trigger": "KAudioSessionProperty_PreferredHardwareSampleRate (1752658802)" },  
    { "trigger": "KAudioSessionProperty_ServerDied (1684628836)" },  
    { "trigger": "KAudioSessionRouteChangeReason_CategoryChange (3)" },  
    { "trigger": "KAudioSessionRouteChangeReason_NewDeviceAvailable (1)" },  
    { "trigger": "KAudioSessionRouteChangeReason_NoSuitableRouteForCategory (7)" },  
    { "trigger": "KAudioSessionRouteChangeReason_OldDeviceUnavailable (2)" },  
    { "trigger": "KAudioSessionRouteChangeReason_Override (4)" },  
    { "trigger": "KAudioSessionRouteChangeReason_Unknown (0)" },  
    { "trigger": "KAudioSessionRouteChangeReason_WakeFromSleep (6)" },  
    { "trigger": "KAudioSessionSetActiveFlag_NotifyOthersOnDeactivation (1)" },  
    { "trigger": "KAudioSessionUnspecifiedError (2003329396)" },  
    { "trigger": "KAudioSessionUnsupportedPropertyError (1886681407)" },  
    { "trigger": "KAudioSession_AudioRouteChangeKey_CurrentRouteDescription (CFStringRef)" },  
    { "trigger": "KAudioSession_AudioRouteChangeKey_PreviousRouteDescription (CFStringRef)" },  
    { "trigger": "KAudioSession_AudioRouteKey_Inputs (CFStringRef)" },  
    { "trigger": "KAudioSession_AudioRouteKey_Outputs (CFStringRef)" },  
    { "trigger": "KAudioSession_AudioRouteKey_Type (CFStringRef)" },  
    { "trigger": "KAudioSession_InputSourceKey_Description (CFStringRef)" },  
    { "trigger": "KAudioSession_InputSourceKey_ID (CFStringRef)" },  
    { "trigger": "KAudioSession_OutputDestinationKey_Description (CFStringRef)" },  
    { "trigger": "KAudioSession_OutputDestinationKey_ID (CFStringRef)" },  
    { "trigger": "KAudioSession_RouteChangeKey_Reason (CFStringRef)" },  
    { "trigger": "KAudioToolboxErr_CannotDoInCurrentContext (-10863)" },  
    { "trigger": "KAudioToolboxErr_EndOfTrack (-10857)" },  
    { "trigger": "KAudioToolboxErr_IllegalTrackDestination (-10855)" },  
    { "trigger": "KAudioToolboxErr_InvalidEventType (-10853)" },  
    { "trigger": "KAudioToolboxErr_InvalidPlayerState (-10852)" },  
    { "trigger": "KAudioToolboxErr_InvalidSequenceType (-10846)" },  
    { "trigger": "KAudioToolboxErr_NoSequence (-10854)" },  
    { "trigger": "KAudioToolboxErr_StartOfTrack (-10856)" },  
    { "trigger": "KAudioToolboxErr_TrackIndexError (-10859)" },  
    { "trigger": "KAudioToolboxErr_TrackNotFound (-10858)" },  
    { "trigger": "KBoxAnnotationSelector (1)" },  
    { "trigger": "KBytePacketTranslationFlag_IsEstimate (1)" },  
    { "trigger": "KCAAlignmentCenter (NSString*)" },  
    { "trigger": "KCAAlignmentJustified (NSString*)" },  
    { "trigger": "KCAAlignmentLeft (NSString*)" },  
    { "trigger": "KCAAlignmentNatural (NSString*)" },  
    { "trigger": "KCAAlignmentRight (NSString*)" },  
    { "trigger": "KCAAnimationCubic (NSString*)" },  
    { "trigger": "KCAAnimationCubicPaced (NSString*)" },  
    { "trigger": "KCAAnimationDiscrete (NSString*)" },  
    { "trigger": "KCAAnimationLinear (NSString*)" },  
    { "trigger": "KCAAnimationPaced (NSString*)" },  
    { "trigger": "KCAAnimationRotateAuto (NSString*)" },  
    { "trigger": "KCAAnimationRotateAutoReverse (NSString*)" },  
    { "trigger": "KCAEmitterLayerAdditive (NSString*)" },  
    { "trigger": "KCAEmitterLayerBackToFront (NSString*)" },  
    { "trigger": "KCAEmitterLayerCircle (NSString*)" },  
    { "trigger": "KCAEmitterLayerCuboid (NSString*)" },  
    { "trigger": "KCAEmitterLayerLine (NSString*)" },  
    { "trigger": "KCAEmitterLayerOldestFirst (NSString*)" },  
    { "trigger": "KCAEmitterLayerOldestLast (NSString*)" },  
    { "trigger": "KCAEmitterLayerOutline (NSString*)" },  
    { "trigger": "KCAEmitterLayerPoint (NSString*)" },  
    { "trigger": "KCAEmitterLayerPoints (NSString*)" },  
    { "trigger": "KCAEmitterLayerRectangle (NSString*)" },  
    { "trigger": "KCAEmitterLayerSphere (NSString*)" },  
    { "trigger": "KCAEmitterLayerSurface (NSString*)" },  
    { "trigger": "KCAEmitterLayerUnordered (NSString*)" },  
    { "trigger": "KCAEmitterLayerVolume (NSString*)" },  
    { "trigger": "KCAFLinearPCMFormatFlagIsFloat (1)" },  
    { "trigger": "KCAFLinearPCMFormatFlagIsLittleEndian (2)" },  
    { "trigger": "KCAFMarkerChunkHdrSize (8)" },  
    { "trigger": "KCAFMarkerType_EditDestinationBegin (1684170087)" },  
    { "trigger": "KCAFMarkerType_EditDestinationEnd (1684368996)" },  
    { "trigger": "KCAFMarkerType_EditSourceBegin (1667392871)" },  
    { "trigger": "KCAFMarkerType_EditSourceEnd (1667591780)" },  
    { "trigger": "KCAFMarkerType_Generic (0)" },  
    { "trigger": "KCAFMarkerType_Index (1768842360)" },  
    { "trigger": "KCAFMarkerType_KeySignature (1802725735)" },  
    { "trigger": "KCAFMarkerType_ProgramEnd (1885695588)" },  
    { "trigger": "KCAFMarkerType_ProgramStart (1885496679)" },  
    { "trigger": "KCAFMarkerType_RegionEnd (1919250020)" },  
    { "trigger": "KCAFMarkerType_RegionStart (1919051111)" },  
    { "trigger": "KCAFMarkerType_RegionSyncPoint (1920170339)" },  
    { "trigger": "KCAFMarkerType_ReleaseLoopEnd (1919706478)" },  
    { "trigger": "KCAFMarkerType_ReleaseLoopStart (1919705703)" },  
    { "trigger": "KCAFMarkerType_SavedPlayPosition (1936747641)" },  
    { "trigger": "KCAFMarkerType_SelectionEnd (1936027236)" },  
    { "trigger": "KCAFMarkerType_SelectionStart (1935828327)" },  
    { "trigger": "KCAFMarkerType_SustainLoopEnd (1936483694)" },  
    { "trigger": "KCAFMarkerType_SustainLoopStart (1936482919)" },  
    { "trigger": "KCAFMarkerType_Tempo (1953329263)" },  
    { "trigger": "KCAFMarkerType_TimeSignature (1953720679)" },  
    { "trigger": "KCAFMarkerType_TrackEnd (1952804452)" },  
    { "trigger": "KCAFMarkerType_TrackStart (1952605543)" },  
    { "trigger": "KCAFRegionChunkHdrSize (8)" },  
    { "trigger": "KCAFRegionFlag_LoopEnable (1)" },  
    { "trigger": "KCAFRegionFlag_PlayBackward (4)" },  
    { "trigger": "KCAFRegionFlag_PlayForward (2)" },  
    { "trigger": "KCAF_AudioDataChunkID (1684108385)" },  
    { "trigger": "KCAF_ChannelLayoutChunkID (1667785070)" },  
    { "trigger": "KCAF_EditCommentsChunkID (1701077876)" },  
    { "trigger": "KCAF_FileType (1667327590)" },  
    { "trigger": "KCAF_FileVersion_Initial (1)" },  
    { "trigger": "KCAF_FillerChunkID (1718773093)" },  
    { "trigger": "KCAF_FormatListID (1818522467)" },  
    { "trigger": "KCAF_InfoStringsChunkID (1768842863)" },  
    { "trigger": "KCAF_InstrumentChunkID (1768846196)" },  
    { "trigger": "KCAF_MIDIChunkID (1835623529)" },  
    { "trigger": "KCAF_MagicCookieID (1802857321)" },  
    { "trigger": "KCAF_MarkerChunkID (1835102827)" },  
    { "trigger": "KCAF_OverviewChunkID (1870034551)" },  
    { "trigger": "KCAF_PacketTableChunkID (1885432692)" },  
    { "trigger": "KCAF_PeakChunkID (1885692267)" },  
    { "trigger": "KCAF_RegionChunkID (1919248238)" },  
    { "trigger": "KCAF_SMPTE_TimeType2398 (12)" },  
    { "trigger": "KCAF_SMPTE_TimeType24 (1)" },  
    { "trigger": "KCAF_SMPTE_TimeType25 (2)" },  
    { "trigger": "KCAF_SMPTE_TimeType2997 (5)" },  
    { "trigger": "KCAF_SMPTE_TimeType2997Drop (6)" },  
    { "trigger": "KCAF_SMPTE_TimeType30 (4)" },  
    { "trigger": "KCAF_SMPTE_TimeType30Drop (3)" },  
    { "trigger": "KCAF_SMPTE_TimeType50 (11)" },  
    { "trigger": "KCAF_SMPTE_TimeType5994 (8)" },  
    { "trigger": "KCAF_SMPTE_TimeType5994Drop (10)" },  
    { "trigger": "KCAF_SMPTE_TimeType60 (7)" },  
    { "trigger": "KCAF_SMPTE_TimeType60Drop (9)" },  
    { "trigger": "KCAF_SMPTE_TimeTypeNone (0)" },  
    { "trigger": "KCAF_StreamDescriptionChunkID (1684370275)" },  
    { "trigger": "KCAF_StringsChunkID (1937011303)" },  
    { "trigger": "KCAF_UMIDChunkID (1970104676)" },  
    { "trigger": "KCAF_UUIDChunkID (1970628964)" },  
    { "trigger": "KCAFillModeBackwards (NSString*)" },  
    { "trigger": "KCAFillModeBoth (NSString*)" },  
    { "trigger": "KCAFillModeForwards (NSString*)" },  
    { "trigger": "KCAFillModeFrozen (NSString*)" },  
    { "trigger": "KCAFillModeRemoved (NSString*)" },  
    { "trigger": "KCAFillRuleEvenOdd (NSString*)" },  
    { "trigger": "KCAFillRuleNonZero (NSString*)" },  
    { "trigger": "KCAFilterLinear (NSString*)" },  
    { "trigger": "KCAFilterNearest (NSString*)" },  
    { "trigger": "KCAFilterTrilinear (NSString*)" },  
    { "trigger": "KCAGradientLayerAxial (NSString*)" },  
    { "trigger": "KCAGravityBottom (NSString*)" },  
    { "trigger": "KCAGravityBottomLeft (NSString*)" },  
    { "trigger": "KCAGravityBottomRight (NSString*)" },  
    { "trigger": "KCAGravityCenter (NSString*)" },  
    { "trigger": "KCAGravityLeft (NSString*)" },  
    { "trigger": "KCAGravityResize (NSString*)" },  
    { "trigger": "KCAGravityResizeAspect (NSString*)" },  
    { "trigger": "KCAGravityResizeAspectFill (NSString*)" },  
    { "trigger": "KCAGravityRight (NSString*)" },  
    { "trigger": "KCAGravityTop (NSString*)" },  
    { "trigger": "KCAGravityTopLeft (NSString*)" },  
    { "trigger": "KCAGravityTopRight (NSString*)" },  
    { "trigger": "KCALayerBottomEdge (4)" },  
    { "trigger": "KCALayerLeftEdge (1)" },  
    { "trigger": "KCALayerRightEdge (2)" },  
    { "trigger": "KCALayerTopEdge (8)" },  
    { "trigger": "KCALineCapButt (NSString*)" },  
    { "trigger": "KCALineCapRound (NSString*)" },  
    { "trigger": "KCALineCapSquare (NSString*)" },  
    { "trigger": "KCALineJoinBevel (NSString*)" },  
    { "trigger": "KCALineJoinMiter (NSString*)" },  
    { "trigger": "KCALineJoinRound (NSString*)" },  
    { "trigger": "KCAMediaTimingFunctionDefault (NSString*)" },  
    { "trigger": "KCAMediaTimingFunctionEaseIn (NSString*)" },  
    { "trigger": "KCAMediaTimingFunctionEaseInEaseOut (NSString*)" },  
    { "trigger": "KCAMediaTimingFunctionEaseOut (NSString*)" },  
    { "trigger": "KCAMediaTimingFunctionLinear (NSString*)" },  
    { "trigger": "KCAOnOrderIn (NSString*)" },  
    { "trigger": "KCAOnOrderOut (NSString*)" },  
    { "trigger": "KCAScrollBoth (NSString*)" },  
    { "trigger": "KCAScrollHorizontally (NSString*)" },  
    { "trigger": "KCAScrollNone (NSString*)" },  
    { "trigger": "KCAScrollVertically (NSString*)" },  
    { "trigger": "KCATransactionAnimationDuration (NSString*)" },  
    { "trigger": "KCATransactionAnimationTimingFunction (NSString*)" },  
    { "trigger": "KCATransactionCompletionBlock (NSString*)" },  
    { "trigger": "KCATransactionDisableActions (NSString*)" },  
    { "trigger": "KCATransition (NSString*)" },  
    { "trigger": "KCATransitionFade (NSString*)" },  
    { "trigger": "KCATransitionFromBottom (NSString*)" },  
    { "trigger": "KCATransitionFromLeft (NSString*)" },  
    { "trigger": "KCATransitionFromRight (NSString*)" },  
    { "trigger": "KCATransitionFromTop (NSString*)" },  
    { "trigger": "KCATransitionMoveIn (NSString*)" },  
    { "trigger": "KCATransitionPush (NSString*)" },  
    { "trigger": "KCATransitionReveal (NSString*)" },  
    { "trigger": "KCATruncationEnd (NSString*)" },  
    { "trigger": "KCATruncationMiddle (NSString*)" },  
    { "trigger": "KCATruncationNone (NSString*)" },  
    { "trigger": "KCATruncationStart (NSString*)" },  
    { "trigger": "KCAValueFunctionRotateX (NSString*)" },  
    { "trigger": "KCAValueFunctionRotateY (NSString*)" },  
    { "trigger": "KCAValueFunctionRotateZ (NSString*)" },  
    { "trigger": "KCAValueFunctionScale (NSString*)" },  
    { "trigger": "KCAValueFunctionScaleX (NSString*)" },  
    { "trigger": "KCAValueFunctionScaleY (NSString*)" },  
    { "trigger": "KCAValueFunctionScaleZ (NSString*)" },  
    { "trigger": "KCAValueFunctionTranslate (NSString*)" },  
    { "trigger": "KCAValueFunctionTranslateX (NSString*)" },  
    { "trigger": "KCAValueFunctionTranslateY (NSString*)" },  
    { "trigger": "KCAValueFunctionTranslateZ (NSString*)" },  
    { "trigger": "KCFAbsoluteTimeIntervalSince1904 (CFTimeInterval)" },  
    { "trigger": "KCFAbsoluteTimeIntervalSince1970 (CFTimeInterval)" },  
    { "trigger": "KCFAllocatorDefault (CFAllocatorRef)" },  
    { "trigger": "KCFAllocatorMalloc (CFAllocatorRef)" },  
    { "trigger": "KCFAllocatorMallocZone (CFAllocatorRef)" },  
    { "trigger": "KCFAllocatorNull (CFAllocatorRef)" },  
    { "trigger": "KCFAllocatorSystemDefault (CFAllocatorRef)" },  
    { "trigger": "KCFAllocatorUseContext (CFAllocatorRef)" },  
    { "trigger": "KCFBookmarkResolutionWithoutMountingMask (512)" },  
    { "trigger": "KCFBookmarkResolutionWithoutUIMask (256)" },  
    { "trigger": "KCFBooleanFalse (CFBooleanRef)" },  
    { "trigger": "KCFBooleanTrue (CFBooleanRef)" },  
    { "trigger": "KCFBuddhistCalendar (CFStringRef)" },  
    { "trigger": "KCFBundleDevelopmentRegionKey (CFStringRef)" },  
    { "trigger": "KCFBundleExecutableArchitectureI386 (7)" },  
    { "trigger": "KCFBundleExecutableArchitecturePPC (18)" },  
    { "trigger": "KCFBundleExecutableArchitecturePPC64 (16777234)" },  
    { "trigger": "KCFBundleExecutableArchitectureX86_64 (16777223)" },  
    { "trigger": "KCFBundleExecutableKey (CFStringRef)" },  
    { "trigger": "KCFBundleIdentifierKey (CFStringRef)" },  
    { "trigger": "KCFBundleInfoDictionaryVersionKey (CFStringRef)" },  
    { "trigger": "KCFBundleLocalizationsKey (CFStringRef)" },  
    { "trigger": "KCFBundleNameKey (CFStringRef)" },  
    { "trigger": "KCFBundleVersionKey (CFStringRef)" },  
    { "trigger": "KCFCalendarComponentsWrap (1)" },  
    { "trigger": "KCFCalendarUnitDay (16)" },  
    { "trigger": "KCFCalendarUnitEra (2)" },  
    { "trigger": "KCFCalendarUnitHour (32)" },  
    { "trigger": "KCFCalendarUnitMinute (64)" },  
    { "trigger": "KCFCalendarUnitMonth (8)" },  
    { "trigger": "KCFCalendarUnitQuarter (2048)" },  
    { "trigger": "KCFCalendarUnitSecond (128)" },  
    { "trigger": "KCFCalendarUnitWeek (256)" },  
    { "trigger": "KCFCalendarUnitWeekOfMonth (4096)" },  
    { "trigger": "KCFCalendarUnitWeekOfYear (8192)" },  
    { "trigger": "KCFCalendarUnitWeekday (512)" },  
    { "trigger": "KCFCalendarUnitWeekdayOrdinal (1024)" },  
    { "trigger": "KCFCalendarUnitYear (4)" },  
    { "trigger": "KCFCalendarUnitYearForWeekOfYear (16384)" },  
    { "trigger": "KCFCharacterSetAlphaNumeric (10)" },  
    { "trigger": "KCFCharacterSetCapitalizedLetter (13)" },  
    { "trigger": "KCFCharacterSetControl (1)" },  
    { "trigger": "KCFCharacterSetDecimalDigit (4)" },  
    { "trigger": "KCFCharacterSetDecomposable (9)" },  
    { "trigger": "KCFCharacterSetIllegal (12)" },  
    { "trigger": "KCFCharacterSetLetter (5)" },  
    { "trigger": "KCFCharacterSetLowercaseLetter (6)" },  
    { "trigger": "KCFCharacterSetNewline (15)" },  
    { "trigger": "KCFCharacterSetNonBase (8)" },  
    { "trigger": "KCFCharacterSetPunctuation (11)" },  
    { "trigger": "KCFCharacterSetSymbol (14)" },  
    { "trigger": "KCFCharacterSetUppercaseLetter (7)" },  
    { "trigger": "KCFCharacterSetWhitespace (2)" },  
    { "trigger": "KCFCharacterSetWhitespaceAndNewline (3)" },  
    { "trigger": "KCFChineseCalendar (CFStringRef)" },  
    { "trigger": "KCFCompareAnchored (8)" },  
    { "trigger": "KCFCompareBackwards (4)" },  
    { "trigger": "KCFCompareCaseInsensitive (1)" },  
    { "trigger": "KCFCompareDiacriticInsensitive (128)" },  
    { "trigger": "KCFCompareEqualTo (0)" },  
    { "trigger": "KCFCompareForcedOrdering (512)" },  
    { "trigger": "KCFCompareGreaterThan (1)" },  
    { "trigger": "KCFCompareLessThan (-1)" },  
    { "trigger": "KCFCompareLocalized (32)" },  
    { "trigger": "KCFCompareNonliteral (16)" },  
    { "trigger": "KCFCompareNumerically (64)" },  
    { "trigger": "KCFCompareWidthInsensitive (256)" },  
    { "trigger": "KCFCopyStringBagCallBacks (CFBagCallBacks)" },  
    { "trigger": "KCFCopyStringDictionaryKeyCallBacks (CFDictionaryKeyCallBacks)" },  
    { "trigger": "KCFCopyStringSetCallBacks (CFSetCallBacks)" },  
    { "trigger": "KCFCoreFoundationVersionNumber (double)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_0 (196.40)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_0_3 (196.50)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_1 (226.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_1_1 (226.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_1_2 (227.20)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_1_3 (227.20)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_1_4 (227.30)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2 (263.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_1 (263.10)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_2 (263.10)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_3 (263.30)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_4 (263.30)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_5 (263.50)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_6 (263.50)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_7 (263.50)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_2_8 (263.50)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3 (299.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_1 (299.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_2 (299.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_3 (299.30)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_4 (299.31)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_5 (299.31)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_6 (299.32)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_7 (299.33)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_8 (299.33)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_3_9 (299.35)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4 (368.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_1 (368.10)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_10 (368.28)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_11 (368.31)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_2 (368.11)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_3 (368.18)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_4_Intel (368.26)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_4_PowerPC (368.25)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_5_Intel (368.26)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_5_PowerPC (368.25)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_6_Intel (368.26)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_6_PowerPC (368.25)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_7 (368.27)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_8 (368.27)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_4_9 (368.28)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5 (476.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_1 (476.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_2 (476.10)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_3 (476.13)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_4 (476.14)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_5 (476.15)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_6 (476.17)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_7 (476.18)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_5_8 (476.19)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_6 (550.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_6_1 (550.00)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_6_2 (550.13)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_6_3 (550.19)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_6_4 (550.29)" },  
    { "trigger": "KCFCoreFoundationVersionNumber10_6_5 (550.42)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iOS_4_0 (550.32)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iOS_4_1 (550.38)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iOS_4_2 (550.52)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iPhoneOS_2_0 (478.23)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iPhoneOS_2_1 (478.26)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iPhoneOS_2_2 (478.29)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iPhoneOS_3_0 (478.47)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iPhoneOS_3_1 (478.52)" },  
    { "trigger": "KCFCoreFoundationVersionNumber_iPhoneOS_3_2 (478.61)" },  
    { "trigger": "KCFDataSearchAnchored (2)" },  
    { "trigger": "KCFDataSearchBackwards (1)" },  
    { "trigger": "KCFDateFormatterAMSymbol (CFStringRef)" },  
    { "trigger": "KCFDateFormatterCalendar (CFStringRef)" },  
    { "trigger": "KCFDateFormatterCalendarName (CFStringRef)" },  
    { "trigger": "KCFDateFormatterDefaultDate (CFStringRef)" },  
    { "trigger": "KCFDateFormatterDefaultFormat (CFStringRef)" },  
    { "trigger": "KCFDateFormatterDoesRelativeDateFormattingKey (CFStringRef)" },  
    { "trigger": "KCFDateFormatterEraSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterFullStyle (4)" },  
    { "trigger": "KCFDateFormatterGregorianStartDate (CFStringRef)" },  
    { "trigger": "KCFDateFormatterIsLenient (CFStringRef)" },  
    { "trigger": "KCFDateFormatterLongEraSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterLongStyle (3)" },  
    { "trigger": "KCFDateFormatterMediumStyle (2)" },  
    { "trigger": "KCFDateFormatterMonthSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterNoStyle (0)" },  
    { "trigger": "KCFDateFormatterPMSymbol (CFStringRef)" },  
    { "trigger": "KCFDateFormatterQuarterSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterShortMonthSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterShortQuarterSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterShortStandaloneMonthSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterShortStandaloneQuarterSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterShortStandaloneWeekdaySymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterShortStyle (1)" },  
    { "trigger": "KCFDateFormatterShortWeekdaySymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterStandaloneMonthSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterStandaloneQuarterSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterStandaloneWeekdaySymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterTimeZone (CFStringRef)" },  
    { "trigger": "KCFDateFormatterTwoDigitStartDate (CFStringRef)" },  
    { "trigger": "KCFDateFormatterVeryShortMonthSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterVeryShortStandaloneMonthSymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterVeryShortStandaloneWeekdaySymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterVeryShortWeekdaySymbols (CFStringRef)" },  
    { "trigger": "KCFDateFormatterWeekdaySymbols (CFStringRef)" },  
    { "trigger": "KCFErrorDescriptionKey (CFStringRef)" },  
    { "trigger": "KCFErrorDomainCocoa (CFStringRef)" },  
    { "trigger": "KCFErrorDomainMach (CFStringRef)" },  
    { "trigger": "KCFErrorDomainOSStatus (CFStringRef)" },  
    { "trigger": "KCFErrorDomainPOSIX (CFStringRef)" },  
    { "trigger": "KCFErrorDomainSystemConfiguration (CFStringRef)" },  
    { "trigger": "KCFErrorFilePathKey (CFStringRef)" },  
    { "trigger": "KCFErrorLocalizedDescriptionKey (CFStringRef)" },  
    { "trigger": "KCFErrorLocalizedFailureReasonKey (CFStringRef)" },  
    { "trigger": "KCFErrorLocalizedRecoverySuggestionKey (CFStringRef)" },  
    { "trigger": "KCFErrorURLKey (CFStringRef)" },  
    { "trigger": "KCFErrorUnderlyingErrorKey (CFStringRef)" },  
    { "trigger": "KCFFileDescriptorReadCallBack (1)" },  
    { "trigger": "KCFFileDescriptorWriteCallBack (2)" },  
    { "trigger": "KCFGregorianAllUnits (16777215)" },  
    { "trigger": "KCFGregorianCalendar (CFStringRef)" },  
    { "trigger": "KCFGregorianUnitsDays (4)" },  
    { "trigger": "KCFGregorianUnitsHours (8)" },  
    { "trigger": "KCFGregorianUnitsMinutes (16)" },  
    { "trigger": "KCFGregorianUnitsMonths (2)" },  
    { "trigger": "KCFGregorianUnitsSeconds (32)" },  
    { "trigger": "KCFGregorianUnitsYears (1)" },  
    { "trigger": "KCFHebrewCalendar (CFStringRef)" },  
    { "trigger": "KCFISO8601Calendar (CFStringRef)" },  
    { "trigger": "KCFIndianCalendar (CFStringRef)" },  
    { "trigger": "KCFIslamicCalendar (CFStringRef)" },  
    { "trigger": "KCFIslamicCivilCalendar (CFStringRef)" },  
    { "trigger": "KCFJapaneseCalendar (CFStringRef)" },  
    { "trigger": "KCFLocaleAlternateQuotationBeginDelimiterKey (CFStringRef)" },  
    { "trigger": "KCFLocaleAlternateQuotationEndDelimiterKey (CFStringRef)" },  
    { "trigger": "KCFLocaleCalendar (CFStringRef)" },  
    { "trigger": "KCFLocaleCalendarIdentifier (CFStringRef)" },  
    { "trigger": "KCFLocaleCollationIdentifier (CFStringRef)" },  
    { "trigger": "KCFLocaleCollatorIdentifier (CFStringRef)" },  
    { "trigger": "KCFLocaleCountryCode (CFStringRef)" },  
    { "trigger": "KCFLocaleCurrencyCode (CFStringRef)" },  
    { "trigger": "KCFLocaleCurrencySymbol (CFStringRef)" },  
    { "trigger": "KCFLocaleCurrentLocaleDidChangeNotification (CFStringRef)" },  
    { "trigger": "KCFLocaleDecimalSeparator (CFStringRef)" },  
    { "trigger": "KCFLocaleExemplarCharacterSet (CFStringRef)" },  
    { "trigger": "KCFLocaleGroupingSeparator (CFStringRef)" },  
    { "trigger": "KCFLocaleIdentifier (CFStringRef)" },  
    { "trigger": "KCFLocaleLanguageCode (CFStringRef)" },  
    { "trigger": "KCFLocaleLanguageDirectionBottomToTop (4)" },  
    { "trigger": "KCFLocaleLanguageDirectionLeftToRight (1)" },  
    { "trigger": "KCFLocaleLanguageDirectionRightToLeft (2)" },  
    { "trigger": "KCFLocaleLanguageDirectionTopToBottom (3)" },  
    { "trigger": "KCFLocaleLanguageDirectionUnknown (0)" },  
    { "trigger": "KCFLocaleMeasurementSystem (CFStringRef)" },  
    { "trigger": "KCFLocaleQuotationBeginDelimiterKey (CFStringRef)" },  
    { "trigger": "KCFLocaleQuotationEndDelimiterKey (CFStringRef)" },  
    { "trigger": "KCFLocaleScriptCode (CFStringRef)" },  
    { "trigger": "KCFLocaleUsesMetricSystem (CFStringRef)" },  
    { "trigger": "KCFLocaleVariantCode (CFStringRef)" },  
    { "trigger": "KCFMessagePortBecameInvalidError (-5)" },  
    { "trigger": "KCFMessagePortIsInvalid (-3)" },  
    { "trigger": "KCFMessagePortReceiveTimeout (-2)" },  
    { "trigger": "KCFMessagePortSendTimeout (-1)" },  
    { "trigger": "KCFMessagePortSuccess (0)" },  
    { "trigger": "KCFMessagePortTransportError (-4)" },  
    { "trigger": "KCFNotFound (-1)" },  
    { "trigger": "KCFNotificationDeliverImmediately (1)" },  
    { "trigger": "KCFNotificationPostToAllSessions (2)" },  
    { "trigger": "KCFNull (CFNullRef)" },  
    { "trigger": "KCFNumberCFIndexType (14)" },  
    { "trigger": "KCFNumberCGFloatType (16)" },  
    { "trigger": "KCFNumberCharType (7)" },  
    { "trigger": "KCFNumberDoubleType (13)" },  
    { "trigger": "KCFNumberFloat32Type (5)" },  
    { "trigger": "KCFNumberFloat64Type (6)" },  
    { "trigger": "KCFNumberFloatType (12)" },  
    { "trigger": "KCFNumberFormatterAlwaysShowDecimalSeparator (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterCurrencyCode (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterCurrencyDecimalSeparator (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterCurrencyGroupingSeparator (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterCurrencyStyle (2)" },  
    { "trigger": "KCFNumberFormatterCurrencySymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterDecimalSeparator (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterDecimalStyle (1)" },  
    { "trigger": "KCFNumberFormatterDefaultFormat (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterExponentSymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterFormatWidth (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterGroupingSeparator (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterGroupingSize (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterInfinitySymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterInternationalCurrencySymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterIsLenient (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMaxFractionDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMaxIntegerDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMaxSignificantDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMinFractionDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMinIntegerDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMinSignificantDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMinusSign (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterMultiplier (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterNaNSymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterNegativePrefix (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterNegativeSuffix (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterNoStyle (0)" },  
    { "trigger": "KCFNumberFormatterPadAfterPrefix (1)" },  
    { "trigger": "KCFNumberFormatterPadAfterSuffix (3)" },  
    { "trigger": "KCFNumberFormatterPadBeforePrefix (0)" },  
    { "trigger": "KCFNumberFormatterPadBeforeSuffix (2)" },  
    { "trigger": "KCFNumberFormatterPaddingCharacter (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterPaddingPosition (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterParseIntegersOnly (1)" },  
    { "trigger": "KCFNumberFormatterPerMillSymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterPercentStyle (3)" },  
    { "trigger": "KCFNumberFormatterPercentSymbol (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterPlusSign (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterPositivePrefix (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterPositiveSuffix (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterRoundCeiling (0)" },  
    { "trigger": "KCFNumberFormatterRoundDown (2)" },  
    { "trigger": "KCFNumberFormatterRoundFloor (1)" },  
    { "trigger": "KCFNumberFormatterRoundHalfDown (5)" },  
    { "trigger": "KCFNumberFormatterRoundHalfEven (4)" },  
    { "trigger": "KCFNumberFormatterRoundHalfUp (6)" },  
    { "trigger": "KCFNumberFormatterRoundUp (3)" },  
    { "trigger": "KCFNumberFormatterRoundingIncrement (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterRoundingMode (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterScientificStyle (4)" },  
    { "trigger": "KCFNumberFormatterSecondaryGroupingSize (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterSpellOutStyle (5)" },  
    { "trigger": "KCFNumberFormatterUseGroupingSeparator (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterUseSignificantDigits (CFStringRef)" },  
    { "trigger": "KCFNumberFormatterZeroSymbol (CFStringRef)" },  
    { "trigger": "KCFNumberIntType (9)" },  
    { "trigger": "KCFNumberLongLongType (11)" },  
    { "trigger": "KCFNumberLongType (10)" },  
    { "trigger": "KCFNumberMaxType (16)" },  
    { "trigger": "KCFNumberNSIntegerType (15)" },  
    { "trigger": "KCFNumberNaN (CFNumberRef)" },  
    { "trigger": "KCFNumberNegativeInfinity (CFNumberRef)" },  
    { "trigger": "KCFNumberPositiveInfinity (CFNumberRef)" },  
    { "trigger": "KCFNumberSInt16Type (2)" },  
    { "trigger": "KCFNumberSInt32Type (3)" },  
    { "trigger": "KCFNumberSInt64Type (4)" },  
    { "trigger": "KCFNumberSInt8Type (1)" },  
    { "trigger": "KCFNumberShortType (8)" },  
    { "trigger": "KCFPersianCalendar (CFStringRef)" },  
    { "trigger": "KCFPlugInDynamicRegisterFunctionKey (CFStringRef)" },  
    { "trigger": "KCFPlugInDynamicRegistrationKey (CFStringRef)" },  
    { "trigger": "KCFPlugInFactoriesKey (CFStringRef)" },  
    { "trigger": "KCFPlugInTypesKey (CFStringRef)" },  
    { "trigger": "KCFPlugInUnloadFunctionKey (CFStringRef)" },  
    { "trigger": "KCFPreferencesAnyApplication (CFStringRef)" },  
    { "trigger": "KCFPreferencesAnyHost (CFStringRef)" },  
    { "trigger": "KCFPreferencesAnyUser (CFStringRef)" },  
    { "trigger": "KCFPreferencesCurrentApplication (CFStringRef)" },  
    { "trigger": "KCFPreferencesCurrentHost (CFStringRef)" },  
    { "trigger": "KCFPreferencesCurrentUser (CFStringRef)" },  
    { "trigger": "KCFPropertyListBinaryFormat_v1_0 (200)" },  
    { "trigger": "KCFPropertyListImmutable (0)" },  
    { "trigger": "KCFPropertyListMutableContainers (1)" },  
    { "trigger": "KCFPropertyListMutableContainersAndLeaves (2)" },  
    { "trigger": "KCFPropertyListOpenStepFormat (1)" },  
    { "trigger": "KCFPropertyListReadCorruptError (3840)" },  
    { "trigger": "KCFPropertyListReadStreamError (3842)" },  
    { "trigger": "KCFPropertyListReadUnknownVersionError (3841)" },  
    { "trigger": "KCFPropertyListWriteStreamError (3851)" },  
    { "trigger": "KCFPropertyListXMLFormat_v1_0 (100)" },  
    { "trigger": "KCFRepublicOfChinaCalendar (CFStringRef)" },  
    { "trigger": "KCFRunLoopAfterWaiting (64)" },  
    { "trigger": "KCFRunLoopAllActivities (268435455)" },  
    { "trigger": "KCFRunLoopBeforeSources (4)" },  
    { "trigger": "KCFRunLoopBeforeTimers (2)" },  
    { "trigger": "KCFRunLoopBeforeWaiting (32)" },  
    { "trigger": "KCFRunLoopCommonModes (CFStringRef)" },  
    { "trigger": "KCFRunLoopDefaultMode (CFStringRef)" },  
    { "trigger": "KCFRunLoopEntry (1)" },  
    { "trigger": "KCFRunLoopExit (128)" },  
    { "trigger": "KCFRunLoopRunFinished (1)" },  
    { "trigger": "KCFRunLoopRunHandledSource (4)" },  
    { "trigger": "KCFRunLoopRunStopped (2)" },  
    { "trigger": "KCFRunLoopRunTimedOut (3)" },  
    { "trigger": "KCFSocketAcceptCallBack (2)" },  
    { "trigger": "KCFSocketAutomaticallyReenableAcceptCallBack (2)" },  
    { "trigger": "KCFSocketAutomaticallyReenableDataCallBack (3)" },  
    { "trigger": "KCFSocketAutomaticallyReenableReadCallBack (1)" },  
    { "trigger": "KCFSocketAutomaticallyReenableWriteCallBack (8)" },  
    { "trigger": "KCFSocketCloseOnInvalidate (128)" },  
    { "trigger": "KCFSocketCommandKey (CFStringRef)" },  
    { "trigger": "KCFSocketConnectCallBack (4)" },  
    { "trigger": "KCFSocketDataCallBack (3)" },  
    { "trigger": "KCFSocketError (-1)" },  
    { "trigger": "KCFSocketErrorKey (CFStringRef)" },  
    { "trigger": "KCFSocketLeaveErrors (64)" },  
    { "trigger": "KCFSocketNameKey (CFStringRef)" },  
    { "trigger": "KCFSocketNoCallBack (0)" },  
    { "trigger": "KCFSocketReadCallBack (1)" },  
    { "trigger": "KCFSocketRegisterCommand (CFStringRef)" },  
    { "trigger": "KCFSocketResultKey (CFStringRef)" },  
    { "trigger": "KCFSocketRetrieveCommand (CFStringRef)" },  
    { "trigger": "KCFSocketSuccess (0)" },  
    { "trigger": "KCFSocketTimeout (-2)" },  
    { "trigger": "KCFSocketValueKey (CFStringRef)" },  
    { "trigger": "KCFSocketWriteCallBack (8)" },  
    { "trigger": "KCFStreamErrorDomainCustom (-1)" },  
    { "trigger": "KCFStreamErrorDomainMacOSStatus (2)" },  
    { "trigger": "KCFStreamErrorDomainPOSIX (1)" },  
    { "trigger": "KCFStreamEventCanAcceptBytes (4)" },  
    { "trigger": "KCFStreamEventEndEncountered (16)" },  
    { "trigger": "KCFStreamEventErrorOccurred (8)" },  
    { "trigger": "KCFStreamEventHasBytesAvailable (2)" },  
    { "trigger": "KCFStreamEventNone (0)" },  
    { "trigger": "KCFStreamEventOpenCompleted (1)" },  
    { "trigger": "KCFStreamPropertyAppendToFile (CFStringRef)" },  
    { "trigger": "KCFStreamPropertyDataWritten (CFStringRef)" },  
    { "trigger": "KCFStreamPropertyFileCurrentOffset (CFStringRef)" },  
    { "trigger": "KCFStreamPropertySocketNativeHandle (CFStringRef)" },  
    { "trigger": "KCFStreamPropertySocketRemoteHostName (CFStringRef)" },  
    { "trigger": "KCFStreamPropertySocketRemotePortNumber (CFStringRef)" },  
    { "trigger": "KCFStreamStatusAtEnd (5)" },  
    { "trigger": "KCFStreamStatusClosed (6)" },  
    { "trigger": "KCFStreamStatusError (7)" },  
    { "trigger": "KCFStreamStatusNotOpen (0)" },  
    { "trigger": "KCFStreamStatusOpen (2)" },  
    { "trigger": "KCFStreamStatusOpening (1)" },  
    { "trigger": "KCFStreamStatusReading (3)" },  
    { "trigger": "KCFStreamStatusWriting (4)" },  
    { "trigger": "KCFStringBinaryHeapCallBacks (CFBinaryHeapCallBacks)" },  
    { "trigger": "KCFStringEncodingANSEL (1537)" },  
    { "trigger": "KCFStringEncodingASCII (1536)" },  
    { "trigger": "KCFStringEncodingBig5 (2563)" },  
    { "trigger": "KCFStringEncodingBig5_E (2569)" },  
    { "trigger": "KCFStringEncodingBig5_HKSCS_1999 (2566)" },  
    { "trigger": "KCFStringEncodingCNS_11643_92_P1 (1617)" },  
    { "trigger": "KCFStringEncodingCNS_11643_92_P2 (1618)" },  
    { "trigger": "KCFStringEncodingCNS_11643_92_P3 (1619)" },  
    { "trigger": "KCFStringEncodingDOSArabic (1049)" },  
    { "trigger": "KCFStringEncodingDOSBalticRim (1030)" },  
    { "trigger": "KCFStringEncodingDOSCanadianFrench (1048)" },  
    { "trigger": "KCFStringEncodingDOSChineseSimplif (1057)" },  
    { "trigger": "KCFStringEncodingDOSChineseTrad (1059)" },  
    { "trigger": "KCFStringEncodingDOSCyrillic (1043)" },  
    { "trigger": "KCFStringEncodingDOSGreek (1029)" },  
    { "trigger": "KCFStringEncodingDOSGreek1 (1041)" },  
    { "trigger": "KCFStringEncodingDOSGreek2 (1052)" },  
    { "trigger": "KCFStringEncodingDOSHebrew (1047)" },  
    { "trigger": "KCFStringEncodingDOSIcelandic (1046)" },  
    { "trigger": "KCFStringEncodingDOSJapanese (1056)" },  
    { "trigger": "KCFStringEncodingDOSKorean (1058)" },  
    { "trigger": "KCFStringEncodingDOSLatin1 (1040)" },  
    { "trigger": "KCFStringEncodingDOSLatin2 (1042)" },  
    { "trigger": "KCFStringEncodingDOSLatinUS (1024)" },  
    { "trigger": "KCFStringEncodingDOSNordic (1050)" },  
    { "trigger": "KCFStringEncodingDOSPortuguese (1045)" },  
    { "trigger": "KCFStringEncodingDOSRussian (1051)" },  
    { "trigger": "KCFStringEncodingDOSThai (1053)" },  
    { "trigger": "KCFStringEncodingDOSTurkish (1044)" },  
    { "trigger": "KCFStringEncodingEBCDIC_CP037 (3074)" },  
    { "trigger": "KCFStringEncodingEBCDIC_US (3073)" },  
    { "trigger": "KCFStringEncodingEUC_CN (2352)" },  
    { "trigger": "KCFStringEncodingEUC_JP (2336)" },  
    { "trigger": "KCFStringEncodingEUC_KR (2368)" },  
    { "trigger": "KCFStringEncodingEUC_TW (2353)" },  
    { "trigger": "KCFStringEncodingGBK_95 (1585)" },  
    { "trigger": "KCFStringEncodingGB_18030_2000 (1586)" },  
    { "trigger": "KCFStringEncodingGB_2312_80 (1584)" },  
    { "trigger": "KCFStringEncodingHZ_GB_2312 (2565)" },  
    { "trigger": "KCFStringEncodingISOLatin1 (513)" },  
    { "trigger": "KCFStringEncodingISOLatin10 (528)" },  
    { "trigger": "KCFStringEncodingISOLatin2 (514)" },  
    { "trigger": "KCFStringEncodingISOLatin3 (515)" },  
    { "trigger": "KCFStringEncodingISOLatin4 (516)" },  
    { "trigger": "KCFStringEncodingISOLatin5 (521)" },  
    { "trigger": "KCFStringEncodingISOLatin6 (522)" },  
    { "trigger": "KCFStringEncodingISOLatin7 (525)" },  
    { "trigger": "KCFStringEncodingISOLatin8 (526)" },  
    { "trigger": "KCFStringEncodingISOLatin9 (527)" },  
    { "trigger": "KCFStringEncodingISOLatinArabic (518)" },  
    { "trigger": "KCFStringEncodingISOLatinCyrillic (517)" },  
    { "trigger": "KCFStringEncodingISOLatinGreek (519)" },  
    { "trigger": "KCFStringEncodingISOLatinHebrew (520)" },  
    { "trigger": "KCFStringEncodingISOLatinThai (523)" },  
    { "trigger": "KCFStringEncodingISO_2022_CN (2096)" },  
    { "trigger": "KCFStringEncodingISO_2022_CN_EXT (2097)" },  
    { "trigger": "KCFStringEncodingISO_2022_JP (2080)" },  
    { "trigger": "KCFStringEncodingISO_2022_JP_1 (2082)" },  
    { "trigger": "KCFStringEncodingISO_2022_JP_2 (2081)" },  
    { "trigger": "KCFStringEncodingISO_2022_JP_3 (2083)" },  
    { "trigger": "KCFStringEncodingISO_2022_KR (2112)" },  
    { "trigger": "KCFStringEncodingInvalidId (4294967295)" },  
    { "trigger": "KCFStringEncodingJIS_C6226_78 (1572)" },  
    { "trigger": "KCFStringEncodingJIS_X0201_76 (1568)" },  
    { "trigger": "KCFStringEncodingJIS_X0208_83 (1569)" },  
    { "trigger": "KCFStringEncodingJIS_X0208_90 (1570)" },  
    { "trigger": "KCFStringEncodingJIS_X0212_90 (1571)" },  
    { "trigger": "KCFStringEncodingKOI8_R (2562)" },  
    { "trigger": "KCFStringEncodingKOI8_U (2568)" },  
    { "trigger": "KCFStringEncodingKSC_5601_87 (1600)" },  
    { "trigger": "KCFStringEncodingKSC_5601_92_Johab (1601)" },  
    { "trigger": "KCFStringEncodingMacArabic (4)" },  
    { "trigger": "KCFStringEncodingMacArmenian (24)" },  
    { "trigger": "KCFStringEncodingMacBengali (13)" },  
    { "trigger": "KCFStringEncodingMacBurmese (19)" },  
    { "trigger": "KCFStringEncodingMacCeltic (39)" },  
    { "trigger": "KCFStringEncodingMacCentralEurRoman (29)" },  
    { "trigger": "KCFStringEncodingMacChineseSimp (25)" },  
    { "trigger": "KCFStringEncodingMacChineseTrad (2)" },  
    { "trigger": "KCFStringEncodingMacCroatian (36)" },  
    { "trigger": "KCFStringEncodingMacCyrillic (7)" },  
    { "trigger": "KCFStringEncodingMacDevanagari (9)" },  
    { "trigger": "KCFStringEncodingMacDingbats (34)" },  
    { "trigger": "KCFStringEncodingMacEthiopic (28)" },  
    { "trigger": "KCFStringEncodingMacExtArabic (31)" },  
    { "trigger": "KCFStringEncodingMacFarsi (140)" },  
    { "trigger": "KCFStringEncodingMacGaelic (40)" },  
    { "trigger": "KCFStringEncodingMacGeorgian (23)" },  
    { "trigger": "KCFStringEncodingMacGreek (6)" },  
    { "trigger": "KCFStringEncodingMacGujarati (11)" },  
    { "trigger": "KCFStringEncodingMacGurmukhi (10)" },  
    { "trigger": "KCFStringEncodingMacHFS (255)" },  
    { "trigger": "KCFStringEncodingMacHebrew (5)" },  
    { "trigger": "KCFStringEncodingMacIcelandic (37)" },  
    { "trigger": "KCFStringEncodingMacInuit (236)" },  
    { "trigger": "KCFStringEncodingMacJapanese (1)" },  
    { "trigger": "KCFStringEncodingMacKannada (16)" },  
    { "trigger": "KCFStringEncodingMacKhmer (20)" },  
    { "trigger": "KCFStringEncodingMacKorean (3)" },  
    { "trigger": "KCFStringEncodingMacLaotian (22)" },  
    { "trigger": "KCFStringEncodingMacMalayalam (17)" },  
    { "trigger": "KCFStringEncodingMacMongolian (27)" },  
    { "trigger": "KCFStringEncodingMacOriya (12)" },  
    { "trigger": "KCFStringEncodingMacRoman (0)" },  
    { "trigger": "KCFStringEncodingMacRomanLatin1 (2564)" },  
    { "trigger": "KCFStringEncodingMacRomanian (38)" },  
    { "trigger": "KCFStringEncodingMacSinhalese (18)" },  
    { "trigger": "KCFStringEncodingMacSymbol (33)" },  
    { "trigger": "KCFStringEncodingMacTamil (14)" },  
    { "trigger": "KCFStringEncodingMacTelugu (15)" },  
    { "trigger": "KCFStringEncodingMacThai (21)" },  
    { "trigger": "KCFStringEncodingMacTibetan (26)" },  
    { "trigger": "KCFStringEncodingMacTurkish (35)" },  
    { "trigger": "KCFStringEncodingMacUkrainian (152)" },  
    { "trigger": "KCFStringEncodingMacVT100 (252)" },  
    { "trigger": "KCFStringEncodingMacVietnamese (30)" },  
    { "trigger": "KCFStringEncodingNextStepJapanese (2818)" },  
    { "trigger": "KCFStringEncodingNextStepLatin (2817)" },  
    { "trigger": "KCFStringEncodingNonLossyASCII (3071)" },  
    { "trigger": "KCFStringEncodingShiftJIS (2561)" },  
    { "trigger": "KCFStringEncodingShiftJIS_X0213 (1576)" },  
    { "trigger": "KCFStringEncodingShiftJIS_X0213_00 (1576)" },  
    { "trigger": "KCFStringEncodingShiftJIS_X0213_MenKuTen (1577)" },  
    { "trigger": "KCFStringEncodingUTF16 (256)" },  
    { "trigger": "KCFStringEncodingUTF16BE (268435712)" },  
    { "trigger": "KCFStringEncodingUTF16LE (335544576)" },  
    { "trigger": "KCFStringEncodingUTF32 (201326848)" },  
    { "trigger": "KCFStringEncodingUTF32BE (402653440)" },  
    { "trigger": "KCFStringEncodingUTF32LE (469762304)" },  
    { "trigger": "KCFStringEncodingUTF7 (67109120)" },  
    { "trigger": "KCFStringEncodingUTF7_IMAP (2576)" },  
    { "trigger": "KCFStringEncodingUTF8 (134217984)" },  
    { "trigger": "KCFStringEncodingUnicode (256)" },  
    { "trigger": "KCFStringEncodingVISCII (2567)" },  
    { "trigger": "KCFStringEncodingWindowsArabic (1286)" },  
    { "trigger": "KCFStringEncodingWindowsBalticRim (1287)" },  
    { "trigger": "KCFStringEncodingWindowsCyrillic (1282)" },  
    { "trigger": "KCFStringEncodingWindowsGreek (1283)" },  
    { "trigger": "KCFStringEncodingWindowsHebrew (1285)" },  
    { "trigger": "KCFStringEncodingWindowsKoreanJohab (1296)" },  
    { "trigger": "KCFStringEncodingWindowsLatin1 (1280)" },  
    { "trigger": "KCFStringEncodingWindowsLatin2 (1281)" },  
    { "trigger": "KCFStringEncodingWindowsLatin5 (1284)" },  
    { "trigger": "KCFStringEncodingWindowsVietnamese (1288)" },  
    { "trigger": "KCFStringNormalizationFormC (2)" },  
    { "trigger": "KCFStringNormalizationFormD (0)" },  
    { "trigger": "KCFStringNormalizationFormKC (3)" },  
    { "trigger": "KCFStringNormalizationFormKD (1)" },  
    { "trigger": "KCFStringTokenizerAttributeLanguage (131072)" },  
    { "trigger": "KCFStringTokenizerAttributeLatinTranscription (65536)" },  
    { "trigger": "KCFStringTokenizerTokenHasDerivedSubTokensMask (4)" },  
    { "trigger": "KCFStringTokenizerTokenHasHasNumbersMask (8)" },  
    { "trigger": "KCFStringTokenizerTokenHasNonLettersMask (16)" },  
    { "trigger": "KCFStringTokenizerTokenHasSubTokensMask (2)" },  
    { "trigger": "KCFStringTokenizerTokenIsCJWordMask (32)" },  
    { "trigger": "KCFStringTokenizerTokenNone (0)" },  
    { "trigger": "KCFStringTokenizerTokenNormal (1)" },  
    { "trigger": "KCFStringTokenizerUnitLineBreak (3)" },  
    { "trigger": "KCFStringTokenizerUnitParagraph (2)" },  
    { "trigger": "KCFStringTokenizerUnitSentence (1)" },  
    { "trigger": "KCFStringTokenizerUnitWord (0)" },  
    { "trigger": "KCFStringTokenizerUnitWordBoundary (4)" },  
    { "trigger": "KCFStringTransformFullwidthHalfwidth (CFStringRef)" },  
    { "trigger": "KCFStringTransformHiraganaKatakana (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinArabic (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinCyrillic (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinGreek (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinHangul (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinHebrew (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinHiragana (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinKatakana (CFStringRef)" },  
    { "trigger": "KCFStringTransformLatinThai (CFStringRef)" },  
    { "trigger": "KCFStringTransformMandarinLatin (CFStringRef)" },  
    { "trigger": "KCFStringTransformStripCombiningMarks (CFStringRef)" },  
    { "trigger": "KCFStringTransformStripDiacritics (CFStringRef)" },  
    { "trigger": "KCFStringTransformToLatin (CFStringRef)" },  
    { "trigger": "KCFStringTransformToUnicodeName (CFStringRef)" },  
    { "trigger": "KCFStringTransformToXMLHex (CFStringRef)" },  
    { "trigger": "KCFTimeZoneNameStyleDaylightSaving (2)" },  
    { "trigger": "KCFTimeZoneNameStyleGeneric (4)" },  
    { "trigger": "KCFTimeZoneNameStyleShortDaylightSaving (3)" },  
    { "trigger": "KCFTimeZoneNameStyleShortGeneric (5)" },  
    { "trigger": "KCFTimeZoneNameStyleShortStandard (1)" },  
    { "trigger": "KCFTimeZoneNameStyleStandard (0)" },  
    { "trigger": "KCFTimeZoneSystemTimeZoneDidChangeNotification (CFStringRef)" },  
    { "trigger": "KCFTypeArrayCallBacks (CFArrayCallBacks)" },  
    { "trigger": "KCFTypeBagCallBacks (CFBagCallBacks)" },  
    { "trigger": "KCFTypeDictionaryKeyCallBacks (CFDictionaryKeyCallBacks)" },  
    { "trigger": "KCFTypeDictionaryValueCallBacks (CFDictionaryValueCallBacks)" },  
    { "trigger": "KCFTypeSetCallBacks (CFSetCallBacks)" },  
    { "trigger": "KCFURLAttributeModificationDateKey (CFStringRef)" },  
    { "trigger": "KCFURLBookmarkCreationMinimalBookmarkMask (512)" },  
    { "trigger": "KCFURLBookmarkCreationPreferFileIDResolutionMask (256)" },  
    { "trigger": "KCFURLBookmarkCreationSuitableForBookmarkFile (1024)" },  
    { "trigger": "KCFURLComponentFragment (12)" },  
    { "trigger": "KCFURLComponentHost (8)" },  
    { "trigger": "KCFURLComponentNetLocation (2)" },  
    { "trigger": "KCFURLComponentParameterString (10)" },  
    { "trigger": "KCFURLComponentPassword (6)" },  
    { "trigger": "KCFURLComponentPath (3)" },  
    { "trigger": "KCFURLComponentPort (9)" },  
    { "trigger": "KCFURLComponentQuery (11)" },  
    { "trigger": "KCFURLComponentResourceSpecifier (4)" },  
    { "trigger": "KCFURLComponentScheme (1)" },  
    { "trigger": "KCFURLComponentUser (5)" },  
    { "trigger": "KCFURLComponentUserInfo (7)" },  
    { "trigger": "KCFURLContentAccessDateKey (CFStringRef)" },  
    { "trigger": "KCFURLContentModificationDateKey (CFStringRef)" },  
    { "trigger": "KCFURLCreationDateKey (CFStringRef)" },  
    { "trigger": "KCFURLCustomIconKey (CFStringRef)" },  
    { "trigger": "KCFURLEffectiveIconKey (CFStringRef)" },  
    { "trigger": "KCFURLEnumeratorDefaultBehavior (0)" },  
    { "trigger": "KCFURLEnumeratorDescendRecursively (1)" },  
    { "trigger": "KCFURLEnumeratorDirectoryPostOrderSuccess (4)" },  
    { "trigger": "KCFURLEnumeratorEnd (2)" },  
    { "trigger": "KCFURLEnumeratorError (3)" },  
    { "trigger": "KCFURLEnumeratorGenerateFileReferenceURLs (4)" },  
    { "trigger": "KCFURLEnumeratorIncludeDirectoriesPostOrder (32)" },  
    { "trigger": "KCFURLEnumeratorIncludeDirectoriesPreOrder (16)" },  
    { "trigger": "KCFURLEnumeratorSkipInvisibles (2)" },  
    { "trigger": "KCFURLEnumeratorSkipPackageContents (8)" },  
    { "trigger": "KCFURLEnumeratorSuccess (1)" },  
    { "trigger": "KCFURLFileAllocatedSizeKey (CFStringRef)" },  
    { "trigger": "KCFURLFileDirectoryContents (CFStringRef)" },  
    { "trigger": "KCFURLFileExists (CFStringRef)" },  
    { "trigger": "KCFURLFileLastModificationTime (CFStringRef)" },  
    { "trigger": "KCFURLFileLength (CFStringRef)" },  
    { "trigger": "KCFURLFileOwnerID (CFStringRef)" },  
    { "trigger": "KCFURLFilePOSIXMode (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceIdentifierKey (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeBlockSpecial (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeCharacterSpecial (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeDirectory (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeKey (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeNamedPipe (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeRegular (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeSocket (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeSymbolicLink (CFStringRef)" },  
    { "trigger": "KCFURLFileResourceTypeUnknown (CFStringRef)" },  
    { "trigger": "KCFURLFileSecurityKey (CFStringRef)" },  
    { "trigger": "KCFURLFileSizeKey (CFStringRef)" },  
    { "trigger": "KCFURLHFSPathStyle (1)" },  
    { "trigger": "KCFURLHTTPStatusCode (CFStringRef)" },  
    { "trigger": "KCFURLHTTPStatusLine (CFStringRef)" },  
    { "trigger": "KCFURLHasHiddenExtensionKey (CFStringRef)" },  
    { "trigger": "KCFURLImproperArgumentsError (-15)" },  
    { "trigger": "KCFURLIsAliasFileKey (CFStringRef)" },  
    { "trigger": "KCFURLIsDirectoryKey (CFStringRef)" },  
    { "trigger": "KCFURLIsExcludedFromBackupKey (CFStringRef)" },  
    { "trigger": "KCFURLIsExecutableKey (CFStringRef)" },  
    { "trigger": "KCFURLIsHiddenKey (CFStringRef)" },  
    { "trigger": "KCFURLIsMountTriggerKey (CFStringRef)" },  
    { "trigger": "KCFURLIsPackageKey (CFStringRef)" },  
    { "trigger": "KCFURLIsReadableKey (CFStringRef)" },  
    { "trigger": "KCFURLIsRegularFileKey (CFStringRef)" },  
    { "trigger": "KCFURLIsSymbolicLinkKey (CFStringRef)" },  
    { "trigger": "KCFURLIsSystemImmutableKey (CFStringRef)" },  
    { "trigger": "KCFURLIsUbiquitousItemKey (CFStringRef)" },  
    { "trigger": "KCFURLIsUserImmutableKey (CFStringRef)" },  
    { "trigger": "KCFURLIsVolumeKey (CFStringRef)" },  
    { "trigger": "KCFURLIsWritableKey (CFStringRef)" },  
    { "trigger": "KCFURLKeysOfUnsetValuesKey (CFStringRef)" },  
    { "trigger": "KCFURLLabelColorKey (CFStringRef)" },  
    { "trigger": "KCFURLLabelNumberKey (CFStringRef)" },  
    { "trigger": "KCFURLLinkCountKey (CFStringRef)" },  
    { "trigger": "KCFURLLocalizedLabelKey (CFStringRef)" },  
    { "trigger": "KCFURLLocalizedNameKey (CFStringRef)" },  
    { "trigger": "KCFURLLocalizedTypeDescriptionKey (CFStringRef)" },  
    { "trigger": "KCFURLNameKey (CFStringRef)" },  
    { "trigger": "KCFURLPOSIXPathStyle (0)" },  
    { "trigger": "KCFURLParentDirectoryURLKey (CFStringRef)" },  
    { "trigger": "KCFURLPreferredIOBlockSizeKey (CFStringRef)" },  
    { "trigger": "KCFURLPropertyKeyUnavailableError (-17)" },  
    { "trigger": "KCFURLRemoteHostUnavailableError (-14)" },  
    { "trigger": "KCFURLResourceAccessViolationError (-13)" },  
    { "trigger": "KCFURLResourceNotFoundError (-12)" },  
    { "trigger": "KCFURLTimeoutError (-18)" },  
    { "trigger": "KCFURLTotalFileAllocatedSizeKey (CFStringRef)" },  
    { "trigger": "KCFURLTotalFileSizeKey (CFStringRef)" },  
    { "trigger": "KCFURLTypeIdentifierKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemHasUnresolvedConflictsKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemIsDownloadedKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemIsDownloadingKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemIsUploadedKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemIsUploadingKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemPercentDownloadedKey (CFStringRef)" },  
    { "trigger": "KCFURLUbiquitousItemPercentUploadedKey (CFStringRef)" },  
    { "trigger": "KCFURLUnknownError (-10)" },  
    { "trigger": "KCFURLUnknownPropertyKeyError (-16)" },  
    { "trigger": "KCFURLUnknownSchemeError (-11)" },  
    { "trigger": "KCFURLVolumeAvailableCapacityKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeCreationDateKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIdentifierKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsAutomountedKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsBrowsableKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsEjectableKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsInternalKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsJournalingKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsLocalKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsReadOnlyKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeIsRemovableKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeLocalizedFormatDescriptionKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeLocalizedNameKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeMaximumFileSizeKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeNameKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeResourceCountKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsAdvisoryFileLockingKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsCasePreservedNamesKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsCaseSensitiveNamesKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsExtendedSecurityKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsHardLinksKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsJournalingKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsPersistentIDsKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsRenamingKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsRootDirectoryDatesKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsSparseFilesKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsSymbolicLinksKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsVolumeSizesKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeSupportsZeroRunsKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeTotalCapacityKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeURLForRemountingKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeURLKey (CFStringRef)" },  
    { "trigger": "KCFURLVolumeUUIDStringKey (CFStringRef)" },  
    { "trigger": "KCFURLWindowsPathStyle (2)" },  
    { "trigger": "KCGBitmapAlphaInfoMask (31)" },  
    { "trigger": "KCGBitmapByteOrder16Big (12288)" },  
    { "trigger": "KCGBitmapByteOrder16Host (4096)" },  
    { "trigger": "KCGBitmapByteOrder16Little (4096)" },  
    { "trigger": "KCGBitmapByteOrder32Big (16384)" },  
    { "trigger": "KCGBitmapByteOrder32Host (8192)" },  
    { "trigger": "KCGBitmapByteOrder32Little (8192)" },  
    { "trigger": "KCGBitmapByteOrderDefault (0)" },  
    { "trigger": "KCGBitmapByteOrderMask (28672)" },  
    { "trigger": "KCGBitmapFloatComponents (256)" },  
    { "trigger": "KCGBlendModeClear (16)" },  
    { "trigger": "KCGBlendModeColor (14)" },  
    { "trigger": "KCGBlendModeColorBurn (7)" },  
    { "trigger": "KCGBlendModeColorDodge (6)" },  
    { "trigger": "KCGBlendModeCopy (17)" },  
    { "trigger": "KCGBlendModeDarken (4)" },  
    { "trigger": "KCGBlendModeDestinationAtop (24)" },  
    { "trigger": "KCGBlendModeDestinationIn (22)" },  
    { "trigger": "KCGBlendModeDestinationOut (23)" },  
    { "trigger": "KCGBlendModeDestinationOver (21)" },  
    { "trigger": "KCGBlendModeDifference (10)" },  
    { "trigger": "KCGBlendModeExclusion (11)" },  
    { "trigger": "KCGBlendModeHardLight (9)" },  
    { "trigger": "KCGBlendModeHue (12)" },  
    { "trigger": "KCGBlendModeLighten (5)" },  
    { "trigger": "KCGBlendModeLuminosity (15)" },  
    { "trigger": "KCGBlendModeMultiply (1)" },  
    { "trigger": "KCGBlendModeNormal (0)" },  
    { "trigger": "KCGBlendModeOverlay (3)" },  
    { "trigger": "KCGBlendModePlusDarker (26)" },  
    { "trigger": "KCGBlendModePlusLighter (27)" },  
    { "trigger": "KCGBlendModeSaturation (13)" },  
    { "trigger": "KCGBlendModeScreen (2)" },  
    { "trigger": "KCGBlendModeSoftLight (8)" },  
    { "trigger": "KCGBlendModeSourceAtop (20)" },  
    { "trigger": "KCGBlendModeSourceIn (18)" },  
    { "trigger": "KCGBlendModeSourceOut (19)" },  
    { "trigger": "KCGBlendModeXOR (25)" },  
    { "trigger": "KCGColorSpaceModelCMYK (2)" },  
    { "trigger": "KCGColorSpaceModelDeviceN (4)" },  
    { "trigger": "KCGColorSpaceModelIndexed (5)" },  
    { "trigger": "KCGColorSpaceModelLab (3)" },  
    { "trigger": "KCGColorSpaceModelMonochrome (0)" },  
    { "trigger": "KCGColorSpaceModelPattern (6)" },  
    { "trigger": "KCGColorSpaceModelRGB (1)" },  
    { "trigger": "KCGColorSpaceModelUnknown (-1)" },  
    { "trigger": "KCGEncodingFontSpecific (0)" },  
    { "trigger": "KCGEncodingMacRoman (1)" },  
    { "trigger": "KCGErrorApplicationAlreadyRunning (1025)" },  
    { "trigger": "KCGErrorApplicationCanOnlyBeRunInOneSessionAtATime (1026)" },  
    { "trigger": "KCGErrorApplicationIncorrectExecutableFormatFound (1023)" },  
    { "trigger": "KCGErrorApplicationIsLaunching (1024)" },  
    { "trigger": "KCGErrorApplicationNotPermittedToExecute (1016)" },  
    { "trigger": "KCGErrorApplicationRequiresNewerSystem (1015)" },  
    { "trigger": "KCGErrorCannotComplete (1004)" },  
    { "trigger": "KCGErrorClassicApplicationsMustBeLaunchedByClassic (1027)" },  
    { "trigger": "KCGErrorFailure (1000)" },  
    { "trigger": "KCGErrorFirst (1000)" },  
    { "trigger": "KCGErrorForkFailed (1028)" },  
    { "trigger": "KCGErrorIllegalArgument (1001)" },  
    { "trigger": "KCGErrorInvalidConnection (1002)" },  
    { "trigger": "KCGErrorInvalidContext (1003)" },  
    { "trigger": "KCGErrorInvalidOperation (1010)" },  
    { "trigger": "KCGErrorLast (1029)" },  
    { "trigger": "KCGErrorNameTooLong (1005)" },  
    { "trigger": "KCGErrorNoCurrentPoint (1009)" },  
    { "trigger": "KCGErrorNoneAvailable (1011)" },  
    { "trigger": "KCGErrorNotImplemented (1006)" },  
    { "trigger": "KCGErrorRangeCheck (1007)" },  
    { "trigger": "KCGErrorRetryRegistration (1029)" },  
    { "trigger": "KCGErrorSuccess (0)" },  
    { "trigger": "KCGErrorTypeCheck (1008)" },  
    { "trigger": "KCGFontIndexInvalid (65535)" },  
    { "trigger": "KCGFontIndexMax (65534)" },  
    { "trigger": "KCGFontPostScriptFormatType1 (1)" },  
    { "trigger": "KCGFontPostScriptFormatType3 (3)" },  
    { "trigger": "KCGFontPostScriptFormatType42 (42)" },  
    { "trigger": "KCGFontVariationAxisDefaultValue (CFStringRef)" },  
    { "trigger": "KCGFontVariationAxisMaxValue (CFStringRef)" },  
    { "trigger": "KCGFontVariationAxisMinValue (CFStringRef)" },  
    { "trigger": "KCGFontVariationAxisName (CFStringRef)" },  
    { "trigger": "KCGGlyphMax (65534)" },  
    { "trigger": "KCGGradientDrawsAfterEndLocation (2)" },  
    { "trigger": "KCGGradientDrawsBeforeStartLocation (1)" },  
    { "trigger": "KCGImageAlphaFirst (4)" },  
    { "trigger": "KCGImageAlphaLast (3)" },  
    { "trigger": "KCGImageAlphaNone (0)" },  
    { "trigger": "KCGImageAlphaNoneSkipFirst (6)" },  
    { "trigger": "KCGImageAlphaNoneSkipLast (5)" },  
    { "trigger": "KCGImageAlphaOnly (7)" },  
    { "trigger": "KCGImageAlphaPremultipliedFirst (2)" },  
    { "trigger": "KCGImageAlphaPremultipliedLast (1)" },  
    { "trigger": "KCGImageDestinationBackgroundColor (CFStringRef)" },  
    { "trigger": "KCGImageDestinationLossyCompressionQuality (CFStringRef)" },  
    { "trigger": "KCGImageProperty8BIMDictionary (CFStringRef)" },  
    { "trigger": "KCGImageProperty8BIMLayerNames (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFCameraSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFContinuousDrive (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFDescription (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFFirmware (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFFlashExposureComp (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFFocusMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFImageFileName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFImageName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFImageSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFLensMaxMM (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFLensMinMM (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFLensModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFMeasuredEV (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFMeteringMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFOwnerName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFRecordID (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFReleaseMethod (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFReleaseTiming (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFSelfTimingTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFShootingMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyCIFFWhiteBalanceIndex (CFStringRef)" },  
    { "trigger": "KCGImagePropertyColorModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyColorModelCMYK (CFStringRef)" },  
    { "trigger": "KCGImagePropertyColorModelGray (CFStringRef)" },  
    { "trigger": "KCGImagePropertyColorModelLab (CFStringRef)" },  
    { "trigger": "KCGImagePropertyColorModelRGB (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGBackwardVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGCameraSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGLensInfo (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGLocalizedCameraModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGUniqueCameraModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDNGVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDPIHeight (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDPIWidth (CFStringRef)" },  
    { "trigger": "KCGImagePropertyDepth (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifApertureValue (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxFirmware (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxFlashCompensation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxImageNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxLensID (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxLensInfo (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxLensModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxLensSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxOwnerName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifAuxSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifBodySerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifBrightnessValue (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifCFAPattern (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifCameraOwnerName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifColorSpace (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifComponentsConfiguration (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifCompressedBitsPerPixel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifContrast (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifCustomRendered (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifDateTimeDigitized (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifDateTimeOriginal (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifDeviceSettingDescription (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifDigitalZoomRatio (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifExposureBiasValue (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifExposureIndex (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifExposureMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifExposureProgram (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifExposureTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFileSource (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFlash (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFlashEnergy (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFlashPixVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFocalLenIn35mmFilm (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFocalLength (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFocalPlaneResolutionUnit (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFocalPlaneXResolution (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifFocalPlaneYResolution (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifGainControl (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifGamma (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifISOSpeedRatings (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifImageUniqueID (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifLensMake (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifLensModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifLensSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifLensSpecification (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifLightSource (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifMakerNote (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifMaxApertureValue (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifMeteringMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifOECF (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifPixelXDimension (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifPixelYDimension (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifRelatedSoundFile (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSaturation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSceneCaptureType (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSceneType (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSensingMethod (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSharpness (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifShutterSpeedValue (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSpatialFrequencyResponse (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSpectralSensitivity (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubjectArea (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubjectDistRange (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubjectDistance (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubjectLocation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubsecTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubsecTimeDigitized (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifSubsecTimeOrginal (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifUserComment (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyExifWhiteBalance (CFStringRef)" },  
    { "trigger": "KCGImagePropertyFileSize (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGIFDelayTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGIFDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGIFHasGlobalColorMap (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGIFImageColorMap (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGIFLoopCount (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGIFUnclampedDelayTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSAltitude (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSAltitudeRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSAreaInformation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDOP (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDateStamp (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestBearing (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestBearingRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestDistance (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestDistanceRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestLatitude (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestLatitudeRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestLongitude (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDestLongitudeRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSDifferental (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSImgDirection (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSImgDirectionRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSLatitude (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSLatitudeRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSLongitude (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSLongitudeRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSMapDatum (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSMeasureMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSProcessingMethod (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSSatellites (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSSpeed (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSSpeedRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSStatus (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSTimeStamp (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSTrack (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSTrackRef (CFStringRef)" },  
    { "trigger": "KCGImagePropertyGPSVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyHasAlpha (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCActionAdvised (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCByline (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCBylineTitle (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCaptionAbstract (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCategory (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCity (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContact (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoAddress (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoCity (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoCountry (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoEmails (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoPhones (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoPostalCode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoStateProvince (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContactInfoWebURLs (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContentLocationCode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCContentLocationName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCopyrightNotice (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCountryPrimaryLocationCode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCountryPrimaryLocationName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCreatorContactInfo (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCCredit (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCDateCreated (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCDigitalCreationDate (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCDigitalCreationTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCEditStatus (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCEditorialUpdate (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCExpirationDate (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCExpirationTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCFixtureIdentifier (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCHeadline (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCImageOrientation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCImageType (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCKeywords (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCLanguageIdentifier (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCObjectAttributeReference (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCObjectCycle (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCObjectName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCObjectTypeReference (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCOriginalTransmissionReference (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCOriginatingProgram (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCProgramVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCProvinceState (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCReferenceDate (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCReferenceNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCReferenceService (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCReleaseDate (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCReleaseTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCRightsUsageTerms (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCScene (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCSource (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCSpecialInstructions (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCStarRating (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCSubLocation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCSubjectReference (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCSupplementalCategory (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCTimeCreated (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCUrgency (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIPTCWriterEditor (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIsFloat (CFStringRef)" },  
    { "trigger": "KCGImagePropertyIsIndexed (CFStringRef)" },  
    { "trigger": "KCGImagePropertyJFIFDensityUnit (CFStringRef)" },  
    { "trigger": "KCGImagePropertyJFIFDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyJFIFIsProgressive (CFStringRef)" },  
    { "trigger": "KCGImagePropertyJFIFVersion (CFStringRef)" },  
    { "trigger": "KCGImagePropertyJFIFXDensity (CFStringRef)" },  
    { "trigger": "KCGImagePropertyJFIFYDensity (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonAspectRatioInfo (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonCameraSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonContinuousDrive (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonFirmware (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonFlashExposureComp (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonImageSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonLensModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerCanonOwnerName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerFujiDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerMinoltaDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonCameraSerialNumber (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonColorMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonDigitalZoom (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonFlashExposureComp (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonFlashSetting (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonFocusDistance (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonFocusMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonISOSelection (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonISOSetting (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonImageAdjustment (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonLensAdapter (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonLensInfo (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonLensType (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonQuality (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonSharpenMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonShootingMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonShutterCount (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerNikonWhiteBalanceMode (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerOlympusDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyMakerPentaxDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyOrientation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGAuthor (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGChromaticities (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGCopyright (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGCreationTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGDescription (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGGamma (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGInterlaceType (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGModificationTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGSoftware (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGTitle (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGXPixelsPerMeter (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGYPixelsPerMeter (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPNGsRGBIntent (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPixelHeight (CFStringRef)" },  
    { "trigger": "KCGImagePropertyPixelWidth (CFStringRef)" },  
    { "trigger": "KCGImagePropertyProfileName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyRawDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFArtist (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFCompression (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFCopyright (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFDateTime (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFDictionary (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFDocumentName (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFHostComputer (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFImageDescription (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFMake (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFModel (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFOrientation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFPhotometricInterpretation (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFPrimaryChromaticities (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFResolutionUnit (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFSoftware (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFTransferFunction (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFWhitePoint (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFXResolution (CFStringRef)" },  
    { "trigger": "KCGImagePropertyTIFFYResolution (CFStringRef)" },  
    { "trigger": "KCGImageSourceCreateThumbnailFromImageAlways (CFStringRef)" },  
    { "trigger": "KCGImageSourceCreateThumbnailFromImageIfAbsent (CFStringRef)" },  
    { "trigger": "KCGImageSourceCreateThumbnailWithTransform (CFStringRef)" },  
    { "trigger": "KCGImageSourceShouldAllowFloat (CFStringRef)" },  
    { "trigger": "KCGImageSourceShouldCache (CFStringRef)" },  
    { "trigger": "KCGImageSourceThumbnailMaxPixelSize (CFStringRef)" },  
    { "trigger": "KCGImageSourceTypeIdentifierHint (CFStringRef)" },  
    { "trigger": "KCGImageStatusComplete (0)" },  
    { "trigger": "KCGImageStatusIncomplete (-1)" },  
    { "trigger": "KCGImageStatusInvalidData (-4)" },  
    { "trigger": "KCGImageStatusReadingHeader (-2)" },  
    { "trigger": "KCGImageStatusUnexpectedEOF (-5)" },  
    { "trigger": "KCGImageStatusUnknownType (-3)" },  
    { "trigger": "KCGInterpolationDefault (0)" },  
    { "trigger": "KCGInterpolationHigh (3)" },  
    { "trigger": "KCGInterpolationLow (2)" },  
    { "trigger": "KCGInterpolationMedium (4)" },  
    { "trigger": "KCGInterpolationNone (1)" },  
    { "trigger": "KCGLineCapButt (0)" },  
    { "trigger": "KCGLineCapRound (1)" },  
    { "trigger": "KCGLineCapSquare (2)" },  
    { "trigger": "KCGLineJoinBevel (2)" },  
    { "trigger": "KCGLineJoinMiter (0)" },  
    { "trigger": "KCGLineJoinRound (1)" },  
    { "trigger": "KCGPDFArtBox (4)" },  
    { "trigger": "KCGPDFBleedBox (2)" },  
    { "trigger": "KCGPDFContextAllowsCopying (CFStringRef)" },  
    { "trigger": "KCGPDFContextAllowsPrinting (CFStringRef)" },  
    { "trigger": "KCGPDFContextArtBox (CFStringRef)" },  
    { "trigger": "KCGPDFContextAuthor (CFStringRef)" },  
    { "trigger": "KCGPDFContextBleedBox (CFStringRef)" },  
    { "trigger": "KCGPDFContextCreator (CFStringRef)" },  
    { "trigger": "KCGPDFContextCropBox (CFStringRef)" },  
    { "trigger": "KCGPDFContextEncryptionKeyLength (CFStringRef)" },  
    { "trigger": "KCGPDFContextKeywords (CFStringRef)" },  
    { "trigger": "KCGPDFContextMediaBox (CFStringRef)" },  
    { "trigger": "KCGPDFContextOwnerPassword (CFStringRef)" },  
    { "trigger": "KCGPDFContextSubject (CFStringRef)" },  
    { "trigger": "KCGPDFContextTitle (CFStringRef)" },  
    { "trigger": "KCGPDFContextTrimBox (CFStringRef)" },  
    { "trigger": "KCGPDFContextUserPassword (CFStringRef)" },  
    { "trigger": "KCGPDFCropBox (1)" },  
    { "trigger": "KCGPDFMediaBox (0)" },  
    { "trigger": "KCGPDFObjectTypeArray (7)" },  
    { "trigger": "KCGPDFObjectTypeBoolean (2)" },  
    { "trigger": "KCGPDFObjectTypeDictionary (8)" },  
    { "trigger": "KCGPDFObjectTypeInteger (3)" },  
    { "trigger": "KCGPDFObjectTypeName (5)" },  
    { "trigger": "KCGPDFObjectTypeNull (1)" },  
    { "trigger": "KCGPDFObjectTypeReal (4)" },  
    { "trigger": "KCGPDFObjectTypeStream (9)" },  
    { "trigger": "KCGPDFObjectTypeString (6)" },  
    { "trigger": "KCGPDFTrimBox (3)" },  
    { "trigger": "KCGPathEOFill (1)" },  
    { "trigger": "KCGPathEOFillStroke (4)" },  
    { "trigger": "KCGPathElementAddCurveToPoint (3)" },  
    { "trigger": "KCGPathElementAddLineToPoint (1)" },  
    { "trigger": "KCGPathElementAddQuadCurveToPoint (2)" },  
    { "trigger": "KCGPathElementCloseSubpath (4)" },  
    { "trigger": "KCGPathElementMoveToPoint (0)" },  
    { "trigger": "KCGPathFill (0)" },  
    { "trigger": "KCGPathFillStroke (3)" },  
    { "trigger": "KCGPathStroke (2)" },  
    { "trigger": "KCGPatternTilingConstantSpacing (2)" },  
    { "trigger": "KCGPatternTilingConstantSpacingMinimalDistortion (1)" },  
    { "trigger": "KCGPatternTilingNoDistortion (0)" },  
    { "trigger": "KCGRenderingIntentAbsoluteColorimetric (1)" },  
    { "trigger": "KCGRenderingIntentDefault (0)" },  
    { "trigger": "KCGRenderingIntentPerceptual (3)" },  
    { "trigger": "KCGRenderingIntentRelativeColorimetric (2)" },  
    { "trigger": "KCGRenderingIntentSaturation (4)" },  
    { "trigger": "KCGTextClip (7)" },  
    { "trigger": "KCGTextFill (0)" },  
    { "trigger": "KCGTextFillClip (4)" },  
    { "trigger": "KCGTextFillStroke (2)" },  
    { "trigger": "KCGTextFillStrokeClip (6)" },  
    { "trigger": "KCGTextInvisible (3)" },  
    { "trigger": "KCGTextStroke (1)" },  
    { "trigger": "KCGTextStrokeClip (5)" },  
    { "trigger": "KCIAttributeClass (NSString*)" },  
    { "trigger": "KCIAttributeDefault (NSString*)" },  
    { "trigger": "KCIAttributeDisplayName (NSString*)" },  
    { "trigger": "KCIAttributeFilterCategories (NSString*)" },  
    { "trigger": "KCIAttributeFilterDisplayName (NSString*)" },  
    { "trigger": "KCIAttributeFilterName (NSString*)" },  
    { "trigger": "KCIAttributeIdentity (NSString*)" },  
    { "trigger": "KCIAttributeMax (NSString*)" },  
    { "trigger": "KCIAttributeMin (NSString*)" },  
    { "trigger": "KCIAttributeName (NSString*)" },  
    { "trigger": "KCIAttributeSliderMax (NSString*)" },  
    { "trigger": "KCIAttributeSliderMin (NSString*)" },  
    { "trigger": "KCIAttributeType (NSString*)" },  
    { "trigger": "KCIAttributeTypeAngle (NSString*)" },  
    { "trigger": "KCIAttributeTypeBoolean (NSString*)" },  
    { "trigger": "KCIAttributeTypeColor (NSString*)" },  
    { "trigger": "KCIAttributeTypeCount (NSString*)" },  
    { "trigger": "KCIAttributeTypeDistance (NSString*)" },  
    { "trigger": "KCIAttributeTypeImage (NSString*)" },  
    { "trigger": "KCIAttributeTypeInteger (NSString*)" },  
    { "trigger": "KCIAttributeTypeOffset (NSString*)" },  
    { "trigger": "KCIAttributeTypePosition (NSString*)" },  
    { "trigger": "KCIAttributeTypePosition3 (NSString*)" },  
    { "trigger": "KCIAttributeTypeRectangle (NSString*)" },  
    { "trigger": "KCIAttributeTypeScalar (NSString*)" },  
    { "trigger": "KCIAttributeTypeTime (NSString*)" },  
    { "trigger": "KCIAttributeTypeTransform (NSString*)" },  
    { "trigger": "KCICategoryApplePrivate (NSString*)" },  
    { "trigger": "KCICategoryBlur (NSString*)" },  
    { "trigger": "KCICategoryBuiltIn (NSString*)" },  
    { "trigger": "KCICategoryColorAdjustment (NSString*)" },  
    { "trigger": "KCICategoryColorEffect (NSString*)" },  
    { "trigger": "KCICategoryCompositeOperation (NSString*)" },  
    { "trigger": "KCICategoryDistortionEffect (NSString*)" },  
    { "trigger": "KCICategoryGenerator (NSString*)" },  
    { "trigger": "KCICategoryGeometryAdjustment (NSString*)" },  
    { "trigger": "KCICategoryGradient (NSString*)" },  
    { "trigger": "KCICategoryHalftoneEffect (NSString*)" },  
    { "trigger": "KCICategoryHighDynamicRange (NSString*)" },  
    { "trigger": "KCICategoryInterlaced (NSString*)" },  
    { "trigger": "KCICategoryNonSquarePixels (NSString*)" },  
    { "trigger": "KCICategoryReduction (NSString*)" },  
    { "trigger": "KCICategorySharpen (NSString*)" },  
    { "trigger": "KCICategoryStillImage (NSString*)" },  
    { "trigger": "KCICategoryStylize (NSString*)" },  
    { "trigger": "KCICategoryTileEffect (NSString*)" },  
    { "trigger": "KCICategoryTransition (NSString*)" },  
    { "trigger": "KCICategoryVideo (NSString*)" },  
    { "trigger": "KCIContextOutputColorSpace (NSString*)" },  
    { "trigger": "KCIContextUseSoftwareRenderer (NSString*)" },  
    { "trigger": "KCIContextWorkingColorSpace (NSString*)" },  
    { "trigger": "KCIFormatBGRA8 (CIFormat)" },  
    { "trigger": "KCIFormatRGBA8 (CIFormat)" },  
    { "trigger": "KCIImageAutoAdjustEnhance (NSString*)" },  
    { "trigger": "KCIImageAutoAdjustFeatures (NSString*)" },  
    { "trigger": "KCIImageAutoAdjustRedEye (NSString*)" },  
    { "trigger": "KCIImageColorSpace (NSString*)" },  
    { "trigger": "KCIImageProperties (NSString*)" },  
    { "trigger": "KCIInputBackgroundImageKey (NSString*)" },  
    { "trigger": "KCIInputImageKey (NSString*)" },  
    { "trigger": "KCIOutputImageKey (NSString*)" },  
    { "trigger": "KCJKItalicRomanOffSelector (3)" },  
    { "trigger": "KCJKItalicRomanOnSelector (2)" },  
    { "trigger": "KCJKItalicRomanSelector (1)" },  
    { "trigger": "KCJKRomanSpacingType (103)" },  
    { "trigger": "KCJKSymbolAltFiveSelector (5)" },  
    { "trigger": "KCJKSymbolAltFourSelector (4)" },  
    { "trigger": "KCJKSymbolAltOneSelector (1)" },  
    { "trigger": "KCJKSymbolAltThreeSelector (3)" },  
    { "trigger": "KCJKSymbolAltTwoSelector (2)" },  
    { "trigger": "KCJKSymbolAlternativesType (29)" },  
    { "trigger": "KCJKVerticalRomanCenteredSelector (0)" },  
    { "trigger": "KCJKVerticalRomanHBaselineSelector (1)" },  
    { "trigger": "KCJKVerticalRomanPlacementType (31)" },  
    { "trigger": "KCLAuthorizationStatusAuthorized (3)" },  
    { "trigger": "KCLAuthorizationStatusDenied (2)" },  
    { "trigger": "KCLAuthorizationStatusNotDetermined (0)" },  
    { "trigger": "KCLAuthorizationStatusRestricted (1)" },  
    { "trigger": "KCLDistanceFilterNone (CLLocationDistance)" },  
    { "trigger": "KCLErrorDenied (1)" },  
    { "trigger": "KCLErrorDomain (NSString*)" },  
    { "trigger": "KCLErrorGeocodeCanceled (10)" },  
    { "trigger": "KCLErrorGeocodeFoundNoResult (8)" },  
    { "trigger": "KCLErrorGeocodeFoundPartialResult (9)" },  
    { "trigger": "KCLErrorHeadingFailure (3)" },  
    { "trigger": "KCLErrorLocationUnknown (0)" },  
    { "trigger": "KCLErrorNetwork (2)" },  
    { "trigger": "KCLErrorRegionMonitoringDenied (4)" },  
    { "trigger": "KCLErrorRegionMonitoringFailure (5)" },  
    { "trigger": "KCLErrorRegionMonitoringResponseDelayed (7)" },  
    { "trigger": "KCLErrorRegionMonitoringSetupDelayed (6)" },  
    { "trigger": "KCLErrorUserInfoAlternateRegionKey (NSString*)" },  
    { "trigger": "KCLHeadingFilterNone (CLLocationDegrees)" },  
    { "trigger": "KCLLocationAccuracyBest (CLLocationAccuracy)" },  
    { "trigger": "KCLLocationAccuracyBestForNavigation (CLLocationAccuracy)" },  
    { "trigger": "KCLLocationAccuracyHundredMeters (CLLocationAccuracy)" },  
    { "trigger": "KCLLocationAccuracyKilometer (CLLocationAccuracy)" },  
    { "trigger": "KCLLocationAccuracyNearestTenMeters (CLLocationAccuracy)" },  
    { "trigger": "KCLLocationAccuracyThreeKilometers (CLLocationAccuracy)" },  
    { "trigger": "KCLLocationCoordinate2DInvalid (CLLocationCoordinate2D)" },  
    { "trigger": "KCMAttachmentMode_ShouldNotPropagate (0)" },  
    { "trigger": "KCMAttachmentMode_ShouldPropagate (1)" },  
    { "trigger": "KCMAudioCodecType_AAC_AudibleProtected (1633771875)" },  
    { "trigger": "KCMAudioCodecType_AAC_LCProtected (1885430115)" },  
    { "trigger": "KCMAudioFormatDescriptionMask_All (15)" },  
    { "trigger": "KCMAudioFormatDescriptionMask_ChannelLayout (4)" },  
    { "trigger": "KCMAudioFormatDescriptionMask_Extensions (8)" },  
    { "trigger": "KCMAudioFormatDescriptionMask_MagicCookie (2)" },  
    { "trigger": "KCMAudioFormatDescriptionMask_StreamBasicDescription (1)" },  
    { "trigger": "KCMBlockBufferAlwaysCopyDataFlag (2)" },  
    { "trigger": "KCMBlockBufferAssureMemoryNowFlag (1)" },  
    { "trigger": "KCMBlockBufferBadCustomBlockSourceErr (-12702)" },  
    { "trigger": "KCMBlockBufferBadLengthParameterErr (-12704)" },  
    { "trigger": "KCMBlockBufferBadOffsetParameterErr (-12703)" },  
    { "trigger": "KCMBlockBufferBadPointerParameterErr (-12705)" },  
    { "trigger": "KCMBlockBufferBlockAllocationFailedErr (-12701)" },  
    { "trigger": "KCMBlockBufferCustomBlockSourceVersion (0)" },  
    { "trigger": "KCMBlockBufferDontOptimizeDepthFlag (4)" },  
    { "trigger": "KCMBlockBufferEmptyBBufErr (-12706)" },  
    { "trigger": "KCMBlockBufferNoErr (0)" },  
    { "trigger": "KCMBlockBufferPermitEmptyReferenceFlag (8)" },  
    { "trigger": "KCMBlockBufferStructureAllocationFailedErr (-12700)" },  
    { "trigger": "KCMBlockBufferUnallocatedBlockErr (-12707)" },  
    { "trigger": "KCMBufferQueueError_AllocationFailed (-12760)" },  
    { "trigger": "KCMBufferQueueError_BadTriggerDuration (-12765)" },  
    { "trigger": "KCMBufferQueueError_CannotModifyQueueFromTriggerCallback (-12766)" },  
    { "trigger": "KCMBufferQueueError_EnqueueAfterEndOfData (-12763)" },  
    { "trigger": "KCMBufferQueueError_InvalidBuffer (-12769)" },  
    { "trigger": "KCMBufferQueueError_InvalidCMBufferCallbacksStruct (-12762)" },  
    { "trigger": "KCMBufferQueueError_InvalidTriggerCondition (-12767)" },  
    { "trigger": "KCMBufferQueueError_InvalidTriggerToken (-12768)" },  
    { "trigger": "KCMBufferQueueError_QueueIsFull (-12764)" },  
    { "trigger": "KCMBufferQueueError_RequiredParameterMissing (-12761)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenBufferCountBecomesGreaterThan (11)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenBufferCountBecomesLessThan (10)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenDataBecomesReady (7)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenDurationBecomesGreaterThan (3)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualTo (4)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenDurationBecomesLessThan (1)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenDurationBecomesLessThanOrEqualTo (2)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenEndOfDataReached (8)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenMaxPresentationTimeStampChanges (6)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenMinPresentationTimeStampChanges (5)" },  
    { "trigger": "KCMBufferQueueTrigger_WhenReset (9)" },  
    { "trigger": "KCMClosedCaptionFormatType_ATSC (1635017571)" },  
    { "trigger": "KCMClosedCaptionFormatType_CEA608 (1664495672)" },  
    { "trigger": "KCMClosedCaptionFormatType_CEA708 (1664561208)" },  
    { "trigger": "KCMFormatDescriptionConformsToMPEG2VideoProfile (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionError_AllocationFailed (-12711)" },  
    { "trigger": "KCMFormatDescriptionError_InvalidParameter (-12710)" },  
    { "trigger": "KCMFormatDescriptionExtensionKey_MetadataKeyTable (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_BytesPerRow (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_Depth (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_FormatName (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_FullRangeVideo (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_ICCProfile (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_OriginalCompressionSettings (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_RevisionLevel (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_SpatialQuality (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_TemporalQuality (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_Vendor (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_VerbatimISOSampleEntry (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_VerbatimSampleDescription (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionExtension_Version (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionKey_CleanApertureHeightRational (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionKey_CleanApertureVerticalOffsetRational (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionKey_CleanApertureWidthRational (CFStringRef)" },  
    { "trigger": "KCMFormatDescriptionVendor_Apple (CFStringRef)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_1080i50 (1751414323)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_1080i60 (1751414322)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_1080p24 (1751414326)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_1080p25 (1751414327)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_1080p30 (1751414328)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_720p24 (1751414324)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_720p25 (1751414325)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_720p30 (1751414321)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_720p50 (1751414369)" },  
    { "trigger": "KCMMPEG2VideoProfile_HDV_720p60 (1751414329)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_1080i50_VBR35 (2019849827)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_1080i60_VBR35 (2019849826)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_1080p24_VBR35 (2019849828)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_1080p25_VBR35 (2019849829)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_1080p30_VBR35 (2019849830)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_720p24_VBR35 (2019849780)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_720p25_VBR35 (2019849781)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_720p30_VBR35 (2019849777)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_720p50_VBR35 (2019849825)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_EX_720p60_VBR35 (2019849785)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_1080i50_CBR50 (2019833187)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_1080i60_CBR50 (2019833186)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_1080p24_CBR50 (2019833188)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_1080p25_CBR50 (2019833189)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_1080p30_CBR50 (2019833190)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_540p (2019846194)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_720p24_CBR50 (2019833140)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_720p25_CBR50 (2019833141)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_720p30_CBR50 (2019833137)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_720p50_CBR50 (2019833185)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD422_720p60_CBR50 (2019833145)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD_1080i50_VBR35 (2019849779)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD_1080i60_VBR35 (2019849778)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD_1080p24_VBR35 (2019849782)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD_1080p25_VBR35 (2019849783)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD_1080p30_VBR35 (2019849784)" },  
    { "trigger": "KCMMPEG2VideoProfile_XDCAM_HD_540p (2019846244)" },  
    { "trigger": "KCMMediaType_Audio (1936684398)" },  
    { "trigger": "KCMMediaType_ClosedCaption (1668047728)" },  
    { "trigger": "KCMMediaType_Muxed (1836415096)" },  
    { "trigger": "KCMMediaType_Subtitle (1935832172)" },  
    { "trigger": "KCMMediaType_Text (1952807028)" },  
    { "trigger": "KCMMediaType_TimeCode (1953325924)" },  
    { "trigger": "KCMMediaType_TimedMetadata (1953326452)" },  
    { "trigger": "KCMMediaType_Video (1986618469)" },  
    { "trigger": "KCMMetadataFormatDescriptionKey_LocalID (CFStringRef)" },  
    { "trigger": "KCMMetadataFormatDescriptionKey_Namespace (CFStringRef)" },  
    { "trigger": "KCMMetadataFormatDescriptionKey_Value (CFStringRef)" },  
    { "trigger": "KCMMuxedStreamType_DV (1685463072)" },  
    { "trigger": "KCMMuxedStreamType_MPEG1System (1836069235)" },  
    { "trigger": "KCMMuxedStreamType_MPEG2Program (1836069488)" },  
    { "trigger": "KCMMuxedStreamType_MPEG2Transport (1836069492)" },  
    { "trigger": "KCMPersistentTrackID_Invalid (0)" },  
    { "trigger": "KCMPixelFormat_16BE555 (16)" },  
    { "trigger": "KCMPixelFormat_16BE565 (1110783541)" },  
    { "trigger": "KCMPixelFormat_16LE555 (1278555445)" },  
    { "trigger": "KCMPixelFormat_16LE5551 (892679473)" },  
    { "trigger": "KCMPixelFormat_16LE565 (1278555701)" },  
    { "trigger": "KCMPixelFormat_24RGB (24)" },  
    { "trigger": "KCMPixelFormat_32ARGB (32)" },  
    { "trigger": "KCMPixelFormat_32BGRA (1111970369)" },  
    { "trigger": "KCMPixelFormat_422YpCbCr10 (1983000880)" },  
    { "trigger": "KCMPixelFormat_422YpCbCr16 (1983000886)" },  
    { "trigger": "KCMPixelFormat_422YpCbCr8 (846624121)" },  
    { "trigger": "KCMPixelFormat_422YpCbCr8_yuvs (2037741171)" },  
    { "trigger": "KCMPixelFormat_4444YpCbCrA8 (1983131704)" },  
    { "trigger": "KCMPixelFormat_444YpCbCr10 (1983131952)" },  
    { "trigger": "KCMPixelFormat_444YpCbCr8 (1983066168)" },  
    { "trigger": "KCMPixelFormat_8IndexedGray_WhiteIsZero (40)" },  
    { "trigger": "KCMSampleAttachmentKey_DependsOnOthers (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_DisplayImmediately (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_DoNotDisplay (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_EarlierDisplayTimesAllowed (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_HasRedundantCoding (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_IsDependedOnByOthers (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_NotSync (CFStringRef)" },  
    { "trigger": "KCMSampleAttachmentKey_PartialSync (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_DrainAfterDecoding (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_EmptyMedia (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_EndsPreviousSampleDuration (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_GradualDecoderRefresh (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_PermanentEmptyMedia (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_PostNotificationWhenConsumed (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_ResumeOutput (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_Reverse (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_SampleReferenceByteOffset (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_SampleReferenceURL (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_SpeedMultiplier (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_TransitionID (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_TrimDurationAtEnd (CFStringRef)" },  
    { "trigger": "KCMSampleBufferAttachmentKey_TrimDurationAtStart (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotificationParameter_ResumeTag (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotification_InhibitOutputUntil (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotification_ResetOutput (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged (CFStringRef)" },  
    { "trigger": "KCMSampleBufferConsumerNotification_BufferConsumed (CFStringRef)" },  
    { "trigger": "KCMSampleBufferError_AllocationFailed (-12730)" },  
    { "trigger": "KCMSampleBufferError_AlreadyHasDataBuffer (-12732)" },  
    { "trigger": "KCMSampleBufferError_ArrayTooSmall (-12737)" },  
    { "trigger": "KCMSampleBufferError_BufferHasNoSampleSizes (-12735)" },  
    { "trigger": "KCMSampleBufferError_BufferHasNoSampleTimingInfo (-12736)" },  
    { "trigger": "KCMSampleBufferError_BufferNotReady (-12733)" },  
    { "trigger": "KCMSampleBufferError_CannotSubdivide (-12739)" },  
    { "trigger": "KCMSampleBufferError_InvalidEntryCount (-12738)" },  
    { "trigger": "KCMSampleBufferError_InvalidMediaFormat (-12743)" },  
    { "trigger": "KCMSampleBufferError_InvalidMediaTypeForOperation (-12741)" },  
    { "trigger": "KCMSampleBufferError_InvalidSampleData (-12742)" },  
    { "trigger": "KCMSampleBufferError_Invalidated (-12744)" },  
    { "trigger": "KCMSampleBufferError_RequiredParameterMissing (-12731)" },  
    { "trigger": "KCMSampleBufferError_SampleIndexOutOfRange (-12734)" },  
    { "trigger": "KCMSampleBufferError_SampleTimingInfoInvalid (-12740)" },  
    { "trigger": "KCMSampleBufferFlag_AudioBufferList_Assure16ByteAlignment (1)" },  
    { "trigger": "KCMSampleBufferNotification_DataBecameReady (CFStringRef)" },  
    { "trigger": "KCMSimpleQueueError_AllocationFailed (-12770)" },  
    { "trigger": "KCMSimpleQueueError_ParameterOutOfRange (-12772)" },  
    { "trigger": "KCMSimpleQueueError_QueueIsFull (-12773)" },  
    { "trigger": "KCMSimpleQueueError_RequiredParameterMissing (-12771)" },  
    { "trigger": "KCMTextDisplayFlag_allSubtitlesForced (2147483648)" },  
    { "trigger": "KCMTextDisplayFlag_continuousKaraoke (2048)" },  
    { "trigger": "KCMTextDisplayFlag_fillTextRegion (262144)" },  
    { "trigger": "KCMTextDisplayFlag_forcedSubtitlesPresent (1073741824)" },  
    { "trigger": "KCMTextDisplayFlag_obeySubtitleFormatting (536870912)" },  
    { "trigger": "KCMTextDisplayFlag_scrollDirectionMask (384)" },  
    { "trigger": "KCMTextDisplayFlag_scrollDirection_bottomToTop (0)" },  
    { "trigger": "KCMTextDisplayFlag_scrollDirection_leftToRight (384)" },  
    { "trigger": "KCMTextDisplayFlag_scrollDirection_rightToLeft (128)" },  
    { "trigger": "KCMTextDisplayFlag_scrollDirection_topToBottom (256)" },  
    { "trigger": "KCMTextDisplayFlag_scrollIn (32)" },  
    { "trigger": "KCMTextDisplayFlag_scrollOut (64)" },  
    { "trigger": "KCMTextDisplayFlag_writeTextVertically (131072)" },  
    { "trigger": "KCMTextFormatDescriptionColor_Alpha (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionColor_Blue (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionColor_Green (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionColor_Red (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_BackgroundColor (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_DefaultFontName (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_DefaultStyle (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_DefaultTextBox (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_DisplayFlags (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_FontTable (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_HorizontalJustification (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_TextJustification (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionExtension_VerticalJustification (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionRect_Bottom (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionRect_Left (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionRect_Right (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionRect_Top (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_Ascent (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_EndChar (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_Font (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_FontFace (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_FontSize (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_ForegroundColor (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_Height (CFStringRef)" },  
    { "trigger": "KCMTextFormatDescriptionStyle_StartChar (CFStringRef)" },  
    { "trigger": "KCMTextFormatType_3GText (1954034535)" },  
    { "trigger": "KCMTextFormatType_QTText (1952807028)" },  
    { "trigger": "KCMTextJustification_bottom_right (-1)" },  
    { "trigger": "KCMTextJustification_centered (1)" },  
    { "trigger": "KCMTextJustification_left_top (0)" },  
    { "trigger": "KCMTimeCodeFlag_24HourMax (2)" },  
    { "trigger": "KCMTimeCodeFlag_DropFrame (1)" },  
    { "trigger": "KCMTimeCodeFlag_NegTimesOK (4)" },  
    { "trigger": "KCMTimeCodeFormatDescriptionExtension_SourceReferenceName (CFStringRef)" },  
    { "trigger": "KCMTimeCodeFormatDescriptionKey_LangCode (CFStringRef)" },  
    { "trigger": "KCMTimeCodeFormatDescriptionKey_Value (CFStringRef)" },  
    { "trigger": "KCMTimeCodeFormatType_Counter32 (1668166450)" },  
    { "trigger": "KCMTimeCodeFormatType_Counter64 (1668167220)" },  
    { "trigger": "KCMTimeCodeFormatType_TimeCode32 (1953325924)" },  
    { "trigger": "KCMTimeCodeFormatType_TimeCode64 (1952658996)" },  
    { "trigger": "KCMTimeEpochKey (CFStringRef)" },  
    { "trigger": "KCMTimeFlagsKey (CFStringRef)" },  
    { "trigger": "KCMTimeFlags_HasBeenRounded (2)" },  
    { "trigger": "KCMTimeFlags_ImpliedValueFlagsMask (28)" },  
    { "trigger": "KCMTimeFlags_Indefinite (16)" },  
    { "trigger": "KCMTimeFlags_NegativeInfinity (8)" },  
    { "trigger": "KCMTimeFlags_PositiveInfinity (4)" },  
    { "trigger": "KCMTimeFlags_Valid (1)" },  
    { "trigger": "KCMTimeIndefinite (CMTime)" },  
    { "trigger": "KCMTimeInvalid (CMTime)" },  
    { "trigger": "KCMTimeMaxTimescale (2147483647)" },  
    { "trigger": "KCMTimeNegativeInfinity (CMTime)" },  
    { "trigger": "KCMTimePositiveInfinity (CMTime)" },  
    { "trigger": "KCMTimeRangeDurationKey (CFStringRef)" },  
    { "trigger": "KCMTimeRangeInvalid (CMTimeRange)" },  
    { "trigger": "KCMTimeRangeStartKey (CFStringRef)" },  
    { "trigger": "KCMTimeRangeZero (CMTimeRange)" },  
    { "trigger": "KCMTimeRoundingMethod_Default (1)" },  
    { "trigger": "KCMTimeRoundingMethod_QuickTime (4)" },  
    { "trigger": "KCMTimeRoundingMethod_RoundAwayFromZero (3)" },  
    { "trigger": "KCMTimeRoundingMethod_RoundHalfAwayFromZero (1)" },  
    { "trigger": "KCMTimeRoundingMethod_RoundTowardNegativeInfinity (6)" },  
    { "trigger": "KCMTimeRoundingMethod_RoundTowardPositiveInfinity (5)" },  
    { "trigger": "KCMTimeRoundingMethod_RoundTowardZero (2)" },  
    { "trigger": "KCMTimeScaleKey (CFStringRef)" },  
    { "trigger": "KCMTimeValueKey (CFStringRef)" },  
    { "trigger": "KCMTimeZero (CMTime)" },  
    { "trigger": "KCMTimedMetadataFormatType_Boxed (1835360888)" },  
    { "trigger": "KCMTimedMetadataFormatType_ICY (1768126752)" },  
    { "trigger": "KCMTimedMetadataFormatType_ID3 (1768174368)" },  
    { "trigger": "KCMTimingInfoInvalid (CMSampleTimingInfo)" },  
    { "trigger": "KCMVideoCodecType_422YpCbCr8 (846624121)" },  
    { "trigger": "KCMVideoCodecType_Animation (1919706400)" },  
    { "trigger": "KCMVideoCodecType_AppleProRes422 (1634755438)" },  
    { "trigger": "KCMVideoCodecType_AppleProRes422HQ (1634755432)" },  
    { "trigger": "KCMVideoCodecType_AppleProRes422LT (1634755443)" },  
    { "trigger": "KCMVideoCodecType_AppleProRes422Proxy (1634755439)" },  
    { "trigger": "KCMVideoCodecType_AppleProRes4444 (1634743400)" },  
    { "trigger": "KCMVideoCodecType_Cinepak (1668704612)" },  
    { "trigger": "KCMVideoCodecType_DVCNTSC (1685480224)" },  
    { "trigger": "KCMVideoCodecType_DVCPAL (1685480304)" },  
    { "trigger": "KCMVideoCodecType_DVCPROHD1080i50 (1685481525)" },  
    { "trigger": "KCMVideoCodecType_DVCPROHD1080i60 (1685481526)" },  
    { "trigger": "KCMVideoCodecType_DVCPROHD1080p25 (1685481522)" },  
    { "trigger": "KCMVideoCodecType_DVCPROHD1080p30 (1685481523)" },  
    { "trigger": "KCMVideoCodecType_DVCPROHD720p50 (1685481585)" },  
    { "trigger": "KCMVideoCodecType_DVCPROHD720p60 (1685481584)" },  
    { "trigger": "KCMVideoCodecType_DVCPro50NTSC (1685468526)" },  
    { "trigger": "KCMVideoCodecType_DVCPro50PAL (1685468528)" },  
    { "trigger": "KCMVideoCodecType_DVCProPAL (1685483632)" },  
    { "trigger": "KCMVideoCodecType_H263 (1748121139)" },  
    { "trigger": "KCMVideoCodecType_H264 (1635148593)" },  
    { "trigger": "KCMVideoCodecType_JPEG (1785750887)" },  
    { "trigger": "KCMVideoCodecType_JPEG_OpenDML (1684890161)" },  
    { "trigger": "KCMVideoCodecType_MPEG1Video (1836069238)" },  
    { "trigger": "KCMVideoCodecType_MPEG2Video (1836069494)" },  
    { "trigger": "KCMVideoCodecType_MPEG4Video (1836070006)" },  
    { "trigger": "KCMVideoCodecType_SorensonVideo (1398165809)" },  
    { "trigger": "KCMVideoCodecType_SorensonVideo3 (1398165811)" },  
    { "trigger": "KCNNetworkInfoKeyBSSID (CFStringRef)" },  
    { "trigger": "KCNNetworkInfoKeySSID (CFStringRef)" },  
    { "trigger": "KCNNetworkInfoKeySSIDData (CFStringRef)" },  
    { "trigger": "KCTAdobeCNS1CharacterCollection (1)" },  
    { "trigger": "KCTAdobeGB1CharacterCollection (2)" },  
    { "trigger": "KCTAdobeJapan1CharacterCollection (3)" },  
    { "trigger": "KCTAdobeJapan2CharacterCollection (4)" },  
    { "trigger": "KCTAdobeKorea1CharacterCollection (5)" },  
    { "trigger": "KCTCenterTextAlignment (2)" },  
    { "trigger": "KCTCharacterShapeAttributeName (CFStringRef)" },  
    { "trigger": "KCTFontAlertHeaderFontType (18)" },  
    { "trigger": "KCTFontApplicationFontType (9)" },  
    { "trigger": "KCTFontAttributeName (CFStringRef)" },  
    { "trigger": "KCTFontBaselineAdjustAttribute (CFStringRef)" },  
    { "trigger": "KCTFontBoldTrait (2)" },  
    { "trigger": "KCTFontCascadeListAttribute (CFStringRef)" },  
    { "trigger": "KCTFontCharacterSetAttribute (CFStringRef)" },  
    { "trigger": "KCTFontClarendonSerifsClass (1073741824)" },  
    { "trigger": "KCTFontClassMaskShift (28)" },  
    { "trigger": "KCTFontClassMaskTrait (-268435456)" },  
    { "trigger": "KCTFontCollectionCopyDefaultOptions (0)" },  
    { "trigger": "KCTFontCollectionCopyStandardSort (2)" },  
    { "trigger": "KCTFontCollectionCopyUnique (1)" },  
    { "trigger": "KCTFontCollectionRemoveDuplicatesOption (CFStringRef)" },  
    { "trigger": "KCTFontColorGlyphsTrait (8192)" },  
    { "trigger": "KCTFontCondensedTrait (64)" },  
    { "trigger": "KCTFontControlContentFontType (26)" },  
    { "trigger": "KCTFontCopyrightNameKey (CFStringRef)" },  
    { "trigger": "KCTFontDefaultOrientation (0)" },  
    { "trigger": "KCTFontDescriptionNameKey (CFStringRef)" },  
    { "trigger": "KCTFontDesignerNameKey (CFStringRef)" },  
    { "trigger": "KCTFontDesignerURLNameKey (CFStringRef)" },  
    { "trigger": "KCTFontDisplayNameAttribute (CFStringRef)" },  
    { "trigger": "KCTFontEmphasizedSystemDetailFontType (20)" },  
    { "trigger": "KCTFontEmphasizedSystemFontType (3)" },  
    { "trigger": "KCTFontEnabledAttribute (CFStringRef)" },  
    { "trigger": "KCTFontExpandedTrait (32)" },  
    { "trigger": "KCTFontFamilyNameAttribute (CFStringRef)" },  
    { "trigger": "KCTFontFamilyNameKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureSelectorDefaultKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureSelectorIdentifierKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureSelectorNameKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureSelectorSettingKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureSettingsAttribute (CFStringRef)" },  
    { "trigger": "KCTFontFeatureTypeExclusiveKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureTypeIdentifierKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureTypeNameKey (CFStringRef)" },  
    { "trigger": "KCTFontFeatureTypeSelectorsKey (CFStringRef)" },  
    { "trigger": "KCTFontFeaturesAttribute (CFStringRef)" },  
    { "trigger": "KCTFontFixedAdvanceAttribute (CFStringRef)" },  
    { "trigger": "KCTFontFormatAttribute (CFStringRef)" },  
    { "trigger": "KCTFontFormatBitmap (5)" },  
    { "trigger": "KCTFontFormatOpenTypePostScript (1)" },  
    { "trigger": "KCTFontFormatOpenTypeTrueType (2)" },  
    { "trigger": "KCTFontFormatPostScript (4)" },  
    { "trigger": "KCTFontFormatTrueType (3)" },  
    { "trigger": "KCTFontFormatUnrecognized (0)" },  
    { "trigger": "KCTFontFreeformSerifsClass (1879048192)" },  
    { "trigger": "KCTFontFullNameKey (CFStringRef)" },  
    { "trigger": "KCTFontHorizontalOrientation (1)" },  
    { "trigger": "KCTFontItalicTrait (1)" },  
    { "trigger": "KCTFontLabelFontType (10)" },  
    { "trigger": "KCTFontLanguagesAttribute (CFStringRef)" },  
    { "trigger": "KCTFontLicenseNameKey (CFStringRef)" },  
    { "trigger": "KCTFontLicenseURLNameKey (CFStringRef)" },  
    { "trigger": "KCTFontMacintoshEncodingsAttribute (CFStringRef)" },  
    { "trigger": "KCTFontManagerAutoActivationDefault (0)" },  
    { "trigger": "KCTFontManagerAutoActivationDisabled (1)" },  
    { "trigger": "KCTFontManagerAutoActivationEnabled (2)" },  
    { "trigger": "KCTFontManagerAutoActivationPromptUser (3)" },  
    { "trigger": "KCTFontManagerErrorAlreadyRegistered (105)" },  
    { "trigger": "KCTFontManagerErrorDomain (CFStringRef)" },  
    { "trigger": "KCTFontManagerErrorFileNotFound (101)" },  
    { "trigger": "KCTFontManagerErrorFontURLsKey (CFStringRef)" },  
    { "trigger": "KCTFontManagerErrorInUse (202)" },  
    { "trigger": "KCTFontManagerErrorInsufficientPermissions (102)" },  
    { "trigger": "KCTFontManagerErrorInvalidFontData (104)" },  
    { "trigger": "KCTFontManagerErrorNotRegistered (201)" },  
    { "trigger": "KCTFontManagerErrorSystemRequired (202)" },  
    { "trigger": "KCTFontManagerErrorUnrecognizedFormat (103)" },  
    { "trigger": "KCTFontManagerScopeNone (0)" },  
    { "trigger": "KCTFontManagerScopeProcess (1)" },  
    { "trigger": "KCTFontManagerScopeSession (3)" },  
    { "trigger": "KCTFontManagerScopeUser (2)" },  
    { "trigger": "KCTFontManufacturerNameKey (CFStringRef)" },  
    { "trigger": "KCTFontMatrixAttribute (CFStringRef)" },  
    { "trigger": "KCTFontMenuItemCmdKeyFontType (14)" },  
    { "trigger": "KCTFontMenuItemFontType (12)" },  
    { "trigger": "KCTFontMenuItemMarkFontType (13)" },  
    { "trigger": "KCTFontMenuTitleFontType (11)" },  
    { "trigger": "KCTFontMessageFontType (23)" },  
    { "trigger": "KCTFontMiniEmphasizedSystemFontType (7)" },  
    { "trigger": "KCTFontMiniSystemFontType (6)" },  
    { "trigger": "KCTFontModernSerifsClass (805306368)" },  
    { "trigger": "KCTFontMonoSpaceTrait (1024)" },  
    { "trigger": "KCTFontNameAttribute (CFStringRef)" },  
    { "trigger": "KCTFontNoFontType (4294967295)" },  
    { "trigger": "KCTFontOldStyleSerifsClass (268435456)" },  
    { "trigger": "KCTFontOptionsDefault (0)" },  
    { "trigger": "KCTFontOptionsPreferSystemFont (4)" },  
    { "trigger": "KCTFontOptionsPreventAutoActivation (1)" },  
    { "trigger": "KCTFontOrientationAttribute (CFStringRef)" },  
    { "trigger": "KCTFontOrnamentalsClass (-1879048192)" },  
    { "trigger": "KCTFontPaletteFontType (24)" },  
    { "trigger": "KCTFontPostScriptCIDNameKey (CFStringRef)" },  
    { "trigger": "KCTFontPostScriptNameKey (CFStringRef)" },  
    { "trigger": "KCTFontPriorityAttribute (CFStringRef)" },  
    { "trigger": "KCTFontPriorityComputer (30000)" },  
    { "trigger": "KCTFontPriorityDynamic (50000)" },  
    { "trigger": "KCTFontPriorityNetwork (20000)" },  
    { "trigger": "KCTFontPriorityProcess (60000)" },  
    { "trigger": "KCTFontPrioritySystem (10000)" },  
    { "trigger": "KCTFontPriorityUser (40000)" },  
    { "trigger": "KCTFontPushButtonFontType (16)" },  
    { "trigger": "KCTFontRegistrationScopeAttribute (CFStringRef)" },  
    { "trigger": "KCTFontSampleTextNameKey (CFStringRef)" },  
    { "trigger": "KCTFontSansSerifClass (-2147483648)" },  
    { "trigger": "KCTFontScriptsClass (-1610612736)" },  
    { "trigger": "KCTFontSizeAttribute (CFStringRef)" },  
    { "trigger": "KCTFontSlabSerifsClass (1342177280)" },  
    { "trigger": "KCTFontSlantTrait (CFStringRef)" },  
    { "trigger": "KCTFontSmallEmphasizedSystemFontType (5)" },  
    { "trigger": "KCTFontSmallSystemFontType (4)" },  
    { "trigger": "KCTFontSmallToolbarFontType (22)" },  
    { "trigger": "KCTFontStyleNameAttribute (CFStringRef)" },  
    { "trigger": "KCTFontStyleNameKey (CFStringRef)" },  
    { "trigger": "KCTFontSubFamilyNameKey (CFStringRef)" },  
    { "trigger": "KCTFontSymbolicClass (-1073741824)" },  
    { "trigger": "KCTFontSymbolicTrait (CFStringRef)" },  
    { "trigger": "KCTFontSystemDetailFontType (19)" },  
    { "trigger": "KCTFontSystemFontType (2)" },  
    { "trigger": "KCTFontTableAcnt (1633906292)" },  
    { "trigger": "KCTFontTableAvar (1635148146)" },  
    { "trigger": "KCTFontTableBASE (1111577413)" },  
    { "trigger": "KCTFontTableBdat (1650745716)" },  
    { "trigger": "KCTFontTableBhed (1651008868)" },  
    { "trigger": "KCTFontTableBloc (1651273571)" },  
    { "trigger": "KCTFontTableBsln (1651731566)" },  
    { "trigger": "KCTFontTableCFF (1128678944)" },  
    { "trigger": "KCTFontTableCmap (1668112752)" },  
    { "trigger": "KCTFontTableCvar (1668702578)" },  
    { "trigger": "KCTFontTableCvt (1668707360)" },  
    { "trigger": "KCTFontTableDSIG (1146308935)" },  
    { "trigger": "KCTFontTableEBDT (1161970772)" },  
    { "trigger": "KCTFontTableEBLC (1161972803)" },  
    { "trigger": "KCTFontTableEBSC (1161974595)" },  
    { "trigger": "KCTFontTableFdsc (1717859171)" },  
    { "trigger": "KCTFontTableFeat (1717920116)" },  
    { "trigger": "KCTFontTableFmtx (1718449272)" },  
    { "trigger": "KCTFontTableFpgm (1718642541)" },  
    { "trigger": "KCTFontTableFvar (1719034226)" },  
    { "trigger": "KCTFontTableGDEF (1195656518)" },  
    { "trigger": "KCTFontTableGPOS (1196445523)" },  
    { "trigger": "KCTFontTableGSUB (1196643650)" },  
    { "trigger": "KCTFontTableGasp (1734439792)" },  
    { "trigger": "KCTFontTableGlyf (1735162214)" },  
    { "trigger": "KCTFontTableGvar (1735811442)" },  
    { "trigger": "KCTFontTableHdmx (1751412088)" },  
    { "trigger": "KCTFontTableHead (1751474532)" },  
    { "trigger": "KCTFontTableHhea (1751672161)" },  
    { "trigger": "KCTFontTableHmtx (1752003704)" },  
    { "trigger": "KCTFontTableHsty (1752396921)" },  
    { "trigger": "KCTFontTableJSTF (1246975046)" },  
    { "trigger": "KCTFontTableJust (1786082164)" },  
    { "trigger": "KCTFontTableKern (1801810542)" },  
    { "trigger": "KCTFontTableKerx (1801810552)" },  
    { "trigger": "KCTFontTableLTSH (1280594760)" },  
    { "trigger": "KCTFontTableLcar (1818452338)" },  
    { "trigger": "KCTFontTableLoca (1819239265)" },  
    { "trigger": "KCTFontTableMaxp (1835104368)" },  
    { "trigger": "KCTFontTableMort (1836020340)" },  
    { "trigger": "KCTFontTableMorx (1836020344)" },  
    { "trigger": "KCTFontTableName (1851878757)" },  
    { "trigger": "KCTFontTableOS2 (1330851634)" },  
    { "trigger": "KCTFontTableOpbd (1869636196)" },  
    { "trigger": "KCTFontTableOptionExcludeSynthetic (1)" },  
    { "trigger": "KCTFontTableOptionNoOptions (0)" },  
    { "trigger": "KCTFontTablePCLT (1346587732)" },  
    { "trigger": "KCTFontTablePost (1886352244)" },  
    { "trigger": "KCTFontTablePrep (1886545264)" },  
    { "trigger": "KCTFontTableProp (1886547824)" },  
    { "trigger": "KCTFontTableSbit (1935829364)" },  
    { "trigger": "KCTFontTableSbix (1935829368)" },  
    { "trigger": "KCTFontTableTrak (1953653099)" },  
    { "trigger": "KCTFontTableVDMX (1447316824)" },  
    { "trigger": "KCTFontTableVORG (1448038983)" },  
    { "trigger": "KCTFontTableVhea (1986553185)" },  
    { "trigger": "KCTFontTableVmtx (1986884728)" },  
    { "trigger": "KCTFontTableZapf (1516335206)" },  
    { "trigger": "KCTFontToolTipFontType (25)" },  
    { "trigger": "KCTFontToolbarFontType (21)" },  
    { "trigger": "KCTFontTrademarkNameKey (CFStringRef)" },  
    { "trigger": "KCTFontTraitsAttribute (CFStringRef)" },  
    { "trigger": "KCTFontTransitionalSerifsClass (536870912)" },  
    { "trigger": "KCTFontUIOptimizedTrait (4096)" },  
    { "trigger": "KCTFontURLAttribute (CFStringRef)" },  
    { "trigger": "KCTFontUniqueNameKey (CFStringRef)" },  
    { "trigger": "KCTFontUnknownClass (0)" },  
    { "trigger": "KCTFontUserFixedPitchFontType (1)" },  
    { "trigger": "KCTFontUserFontType (0)" },  
    { "trigger": "KCTFontUtilityWindowTitleFontType (17)" },  
    { "trigger": "KCTFontVariationAttribute (CFStringRef)" },  
    { "trigger": "KCTFontVariationAxisDefaultValueKey (CFStringRef)" },  
    { "trigger": "KCTFontVariationAxisIdentifierKey (CFStringRef)" },  
    { "trigger": "KCTFontVariationAxisMaximumValueKey (CFStringRef)" },  
    { "trigger": "KCTFontVariationAxisMinimumValueKey (CFStringRef)" },  
    { "trigger": "KCTFontVariationAxisNameKey (CFStringRef)" },  
    { "trigger": "KCTFontVendorURLNameKey (CFStringRef)" },  
    { "trigger": "KCTFontVersionNameKey (CFStringRef)" },  
    { "trigger": "KCTFontVerticalOrientation (2)" },  
    { "trigger": "KCTFontVerticalTrait (2048)" },  
    { "trigger": "KCTFontViewsFontType (8)" },  
    { "trigger": "KCTFontWeightTrait (CFStringRef)" },  
    { "trigger": "KCTFontWidthTrait (CFStringRef)" },  
    { "trigger": "KCTFontWindowTitleFontType (15)" },  
    { "trigger": "KCTForegroundColorAttributeName (CFStringRef)" },  
    { "trigger": "KCTForegroundColorFromContextAttributeName (CFStringRef)" },  
    { "trigger": "KCTFrameClippingPathsAttributeName (CFStringRef)" },  
    { "trigger": "KCTFramePathClippingPathAttributeName (CFStringRef)" },  
    { "trigger": "KCTFramePathFillEvenOdd (0)" },  
    { "trigger": "KCTFramePathFillRuleAttributeName (CFStringRef)" },  
    { "trigger": "KCTFramePathFillWindingNumber (1)" },  
    { "trigger": "KCTFramePathWidthAttributeName (CFStringRef)" },  
    { "trigger": "KCTFrameProgressionAttributeName (CFStringRef)" },  
    { "trigger": "KCTFrameProgressionRightToLeft (1)" },  
    { "trigger": "KCTFrameProgressionTopToBottom (0)" },  
    { "trigger": "KCTGlyphInfoAttributeName (CFStringRef)" },  
    { "trigger": "KCTIdentityMappingCharacterCollection (0)" },  
    { "trigger": "KCTJustifiedTextAlignment (3)" },  
    { "trigger": "KCTKernAttributeName (CFStringRef)" },  
    { "trigger": "KCTLeftTextAlignment (0)" },  
    { "trigger": "KCTLigatureAttributeName (CFStringRef)" },  
    { "trigger": "KCTLineBreakByCharWrapping (1)" },  
    { "trigger": "KCTLineBreakByClipping (2)" },  
    { "trigger": "KCTLineBreakByTruncatingHead (3)" },  
    { "trigger": "KCTLineBreakByTruncatingMiddle (5)" },  
    { "trigger": "KCTLineBreakByTruncatingTail (4)" },  
    { "trigger": "KCTLineBreakByWordWrapping (0)" },  
    { "trigger": "KCTLineTruncationEnd (1)" },  
    { "trigger": "KCTLineTruncationMiddle (2)" },  
    { "trigger": "KCTLineTruncationStart (0)" },  
    { "trigger": "KCTNaturalTextAlignment (4)" },  
    { "trigger": "KCTParagraphStyleAttributeName (CFStringRef)" },  
    { "trigger": "KCTParagraphStyleSpecifierAlignment (0)" },  
    { "trigger": "KCTParagraphStyleSpecifierBaseWritingDirection (13)" },  
    { "trigger": "KCTParagraphStyleSpecifierCount (17)" },  
    { "trigger": "KCTParagraphStyleSpecifierDefaultTabInterval (5)" },  
    { "trigger": "KCTParagraphStyleSpecifierFirstLineHeadIndent (1)" },  
    { "trigger": "KCTParagraphStyleSpecifierHeadIndent (2)" },  
    { "trigger": "KCTParagraphStyleSpecifierLineBreakMode (6)" },  
    { "trigger": "KCTParagraphStyleSpecifierLineHeightMultiple (7)" },  
    { "trigger": "KCTParagraphStyleSpecifierLineSpacing (10)" },  
    { "trigger": "KCTParagraphStyleSpecifierLineSpacingAdjustment (16)" },  
    { "trigger": "KCTParagraphStyleSpecifierMaximumLineHeight (8)" },  
    { "trigger": "KCTParagraphStyleSpecifierMaximumLineSpacing (14)" },  
    { "trigger": "KCTParagraphStyleSpecifierMinimumLineHeight (9)" },  
    { "trigger": "KCTParagraphStyleSpecifierMinimumLineSpacing (15)" },  
    { "trigger": "KCTParagraphStyleSpecifierParagraphSpacing (11)" },  
    { "trigger": "KCTParagraphStyleSpecifierParagraphSpacingBefore (12)" },  
    { "trigger": "KCTParagraphStyleSpecifierTabStops (4)" },  
    { "trigger": "KCTParagraphStyleSpecifierTailIndent (3)" },  
    { "trigger": "KCTRightTextAlignment (1)" },  
    { "trigger": "KCTRunDelegateAttributeName (CFStringRef)" },  
    { "trigger": "KCTRunDelegateCurrentVersion (1)" },  
    { "trigger": "KCTRunDelegateVersion1 (1)" },  
    { "trigger": "KCTRunStatusHasNonIdentityMatrix (4)" },  
    { "trigger": "KCTRunStatusNoStatus (0)" },  
    { "trigger": "KCTRunStatusNonMonotonic (2)" },  
    { "trigger": "KCTRunStatusRightToLeft (1)" },  
    { "trigger": "KCTStrokeColorAttributeName (CFStringRef)" },  
    { "trigger": "KCTStrokeWidthAttributeName (CFStringRef)" },  
    { "trigger": "KCTSuperscriptAttributeName (CFStringRef)" },  
    { "trigger": "KCTTabColumnTerminatorsAttributeName (CFStringRef)" },  
    { "trigger": "KCTTypesetterOptionDisableBidiProcessing (CFStringRef)" },  
    { "trigger": "KCTTypesetterOptionForcedEmbeddingLevel (CFStringRef)" },  
    { "trigger": "KCTUnderlineColorAttributeName (CFStringRef)" },  
    { "trigger": "KCTUnderlinePatternDash (512)" },  
    { "trigger": "KCTUnderlinePatternDashDot (768)" },  
    { "trigger": "KCTUnderlinePatternDashDotDot (1024)" },  
    { "trigger": "KCTUnderlinePatternDot (256)" },  
    { "trigger": "KCTUnderlinePatternSolid (0)" },  
    { "trigger": "KCTUnderlineStyleAttributeName (CFStringRef)" },  
    { "trigger": "KCTUnderlineStyleDouble (9)" },  
    { "trigger": "KCTUnderlineStyleNone (0)" },  
    { "trigger": "KCTUnderlineStyleSingle (1)" },  
    { "trigger": "KCTUnderlineStyleThick (2)" },  
    { "trigger": "KCTVersionNumber10_5 (131072)" },  
    { "trigger": "KCTVersionNumber10_5_2 (131073)" },  
    { "trigger": "KCTVersionNumber10_5_3 (131074)" },  
    { "trigger": "KCTVersionNumber10_5_5 (131075)" },  
    { "trigger": "KCTVersionNumber10_6 (196608)" },  
    { "trigger": "KCTVersionNumber10_7 (262144)" },  
    { "trigger": "KCTVerticalFormsAttributeName (CFStringRef)" },  
    { "trigger": "KCTWritingDirectionLeftToRight (0)" },  
    { "trigger": "KCTWritingDirectionNatural (-1)" },  
    { "trigger": "KCTWritingDirectionRightToLeft (1)" },  
    { "trigger": "KCVAttachmentMode_ShouldNotPropagate (0)" },  
    { "trigger": "KCVAttachmentMode_ShouldPropagate (1)" },  
    { "trigger": "KCVBufferMovieTimeKey (CFStringRef)" },  
    { "trigger": "KCVBufferNonPropagatedAttachmentsKey (CFStringRef)" },  
    { "trigger": "KCVBufferPropagatedAttachmentsKey (CFStringRef)" },  
    { "trigger": "KCVBufferTimeScaleKey (CFStringRef)" },  
    { "trigger": "KCVBufferTimeValueKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferCGColorSpaceKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocationBottomFieldKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocationTopFieldKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_Bottom (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_BottomLeft (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_Center (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_DV420 (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_Left (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_Top (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaLocation_TopLeft (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaSubsamplingKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaSubsampling_411 (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaSubsampling_420 (CFStringRef)" },  
    { "trigger": "KCVImageBufferChromaSubsampling_422 (CFStringRef)" },  
    { "trigger": "KCVImageBufferCleanApertureHeightKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferCleanApertureHorizontalOffsetKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferCleanApertureKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferCleanApertureVerticalOffsetKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferCleanApertureWidthKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferColorPrimariesKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferColorPrimaries_EBU_3213 (CFStringRef)" },  
    { "trigger": "KCVImageBufferColorPrimaries_ITU_R_709_2 (CFStringRef)" },  
    { "trigger": "KCVImageBufferColorPrimaries_SMPTE_C (CFStringRef)" },  
    { "trigger": "KCVImageBufferDisplayDimensionsKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferDisplayHeightKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferDisplayWidthKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferFieldCountKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferFieldDetailKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferFieldDetailSpatialFirstLineEarly (CFStringRef)" },  
    { "trigger": "KCVImageBufferFieldDetailSpatialFirstLineLate (CFStringRef)" },  
    { "trigger": "KCVImageBufferFieldDetailTemporalBottomFirst (CFStringRef)" },  
    { "trigger": "KCVImageBufferFieldDetailTemporalTopFirst (CFStringRef)" },  
    { "trigger": "KCVImageBufferGammaLevelKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferICCProfileKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferPixelAspectRatioHorizontalSpacingKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferPixelAspectRatioKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferPixelAspectRatioVerticalSpacingKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferPreferredCleanApertureKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferTransferFunctionKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferTransferFunction_ITU_R_709_2 (CFStringRef)" },  
    { "trigger": "KCVImageBufferTransferFunction_SMPTE_240M_1995 (CFStringRef)" },  
    { "trigger": "KCVImageBufferTransferFunction_UseGamma (CFStringRef)" },  
    { "trigger": "KCVImageBufferYCbCrMatrixKey (CFStringRef)" },  
    { "trigger": "KCVImageBufferYCbCrMatrix_ITU_R_601_4 (CFStringRef)" },  
    { "trigger": "KCVImageBufferYCbCrMatrix_ITU_R_709_2 (CFStringRef)" },  
    { "trigger": "KCVImageBufferYCbCrMatrix_SMPTE_240M_1995 (CFStringRef)" },  
    { "trigger": "KCVIndefiniteTime (CVTime)" },  
    { "trigger": "KCVOpenGLESTextureCacheMaximumTextureAgeKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferBytesPerRowAlignmentKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferCGBitmapContextCompatibilityKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferCGImageCompatibilityKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferExtendedPixelsBottomKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferExtendedPixelsLeftKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferExtendedPixelsRightKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferExtendedPixelsTopKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferHeightKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferIOSurfacePropertiesKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferLock_ReadOnly (1)" },  
    { "trigger": "KCVPixelBufferMemoryAllocatorKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferOpenGLCompatibilityKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferPixelFormatTypeKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferPlaneAlignmentKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferPoolAllocationThresholdKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferPoolFreeBufferNotification (CFStringRef)" },  
    { "trigger": "KCVPixelBufferPoolMaximumBufferAgeKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferPoolMinimumBufferCountKey (CFStringRef)" },  
    { "trigger": "KCVPixelBufferWidthKey (CFStringRef)" },  
    { "trigger": "KCVPixelFormatBitsPerBlock (CFStringRef)" },  
    { "trigger": "KCVPixelFormatBlackBlock (CFStringRef)" },  
    { "trigger": "KCVPixelFormatBlockHeight (CFStringRef)" },  
    { "trigger": "KCVPixelFormatBlockHorizontalAlignment (CFStringRef)" },  
    { "trigger": "KCVPixelFormatBlockVerticalAlignment (CFStringRef)" },  
    { "trigger": "KCVPixelFormatBlockWidth (CFStringRef)" },  
    { "trigger": "KCVPixelFormatCGBitmapContextCompatibility (CFStringRef)" },  
    { "trigger": "KCVPixelFormatCGBitmapInfo (CFStringRef)" },  
    { "trigger": "KCVPixelFormatCGImageCompatibility (CFStringRef)" },  
    { "trigger": "KCVPixelFormatCodecType (CFStringRef)" },  
    { "trigger": "KCVPixelFormatConstant (CFStringRef)" },  
    { "trigger": "KCVPixelFormatContainsAlpha (CFStringRef)" },  
    { "trigger": "KCVPixelFormatFillExtendedPixelsCallback (CFStringRef)" },  
    { "trigger": "KCVPixelFormatFourCC (CFStringRef)" },  
    { "trigger": "KCVPixelFormatHorizontalSubsampling (CFStringRef)" },  
    { "trigger": "KCVPixelFormatName (CFStringRef)" },  
    { "trigger": "KCVPixelFormatOpenGLCompatibility (CFStringRef)" },  
    { "trigger": "KCVPixelFormatOpenGLESCompatibility (CFStringRef)" },  
    { "trigger": "KCVPixelFormatOpenGLFormat (CFStringRef)" },  
    { "trigger": "KCVPixelFormatOpenGLInternalFormat (CFStringRef)" },  
    { "trigger": "KCVPixelFormatOpenGLType (CFStringRef)" },  
    { "trigger": "KCVPixelFormatPlanes (CFStringRef)" },  
    { "trigger": "KCVPixelFormatQDCompatibility (CFStringRef)" },  
    { "trigger": "KCVPixelFormatType_16BE555 (16)" },  
    { "trigger": "KCVPixelFormatType_16BE565 (1110783541)" },  
    { "trigger": "KCVPixelFormatType_16Gray (1647392359)" },  
    { "trigger": "KCVPixelFormatType_16LE555 (1278555445)" },  
    { "trigger": "KCVPixelFormatType_16LE5551 (892679473)" },  
    { "trigger": "KCVPixelFormatType_16LE565 (1278555701)" },  
    { "trigger": "KCVPixelFormatType_1IndexedGray_WhiteIsZero (33)" },  
    { "trigger": "KCVPixelFormatType_1Monochrome (1)" },  
    { "trigger": "KCVPixelFormatType_24BGR (842285639)" },  
    { "trigger": "KCVPixelFormatType_24RGB (24)" },  
    { "trigger": "KCVPixelFormatType_2Indexed (2)" },  
    { "trigger": "KCVPixelFormatType_2IndexedGray_WhiteIsZero (34)" },  
    { "trigger": "KCVPixelFormatType_30RGB (1378955371)" },  
    { "trigger": "KCVPixelFormatType_32ABGR (1094862674)" },  
    { "trigger": "KCVPixelFormatType_32ARGB (32)" },  
    { "trigger": "KCVPixelFormatType_32AlphaGray (1647522401)" },  
    { "trigger": "KCVPixelFormatType_32BGRA (1111970369)" },  
    { "trigger": "KCVPixelFormatType_32RGBA (1380401729)" },  
    { "trigger": "KCVPixelFormatType_420YpCbCr8BiPlanarFullRange (875704422)" },  
    { "trigger": "KCVPixelFormatType_420YpCbCr8BiPlanarVideoRange (875704438)" },  
    { "trigger": "KCVPixelFormatType_420YpCbCr8Planar (2033463856)" },  
    { "trigger": "KCVPixelFormatType_420YpCbCr8PlanarFullRange (1714696752)" },  
    { "trigger": "KCVPixelFormatType_422YpCbCr10 (1983000880)" },  
    { "trigger": "KCVPixelFormatType_422YpCbCr16 (1983000886)" },  
    { "trigger": "KCVPixelFormatType_422YpCbCr8 (846624121)" },  
    { "trigger": "KCVPixelFormatType_422YpCbCr8FullRange (2037741158)" },  
    { "trigger": "KCVPixelFormatType_422YpCbCr8_yuvs (2037741171)" },  
    { "trigger": "KCVPixelFormatType_422YpCbCr_4A_8BiPlanar (1630697081)" },  
    { "trigger": "KCVPixelFormatType_4444AYpCbCr16 (2033463606)" },  
    { "trigger": "KCVPixelFormatType_4444AYpCbCr8 (2033463352)" },  
    { "trigger": "KCVPixelFormatType_4444YpCbCrA8 (1983131704)" },  
    { "trigger": "KCVPixelFormatType_4444YpCbCrA8R (1916022840)" },  
    { "trigger": "KCVPixelFormatType_444YpCbCr10 (1983131952)" },  
    { "trigger": "KCVPixelFormatType_444YpCbCr8 (1983066168)" },  
    { "trigger": "KCVPixelFormatType_48RGB (1647589490)" },  
    { "trigger": "KCVPixelFormatType_4Indexed (4)" },  
    { "trigger": "KCVPixelFormatType_4IndexedGray_WhiteIsZero (36)" },  
    { "trigger": "KCVPixelFormatType_64ARGB (1647719521)" },  
    { "trigger": "KCVPixelFormatType_8Indexed (8)" },  
    { "trigger": "KCVPixelFormatType_8IndexedGray_WhiteIsZero (40)" },  
    { "trigger": "KCVPixelFormatType_OneComponent8 (1278226488)" },  
    { "trigger": "KCVPixelFormatType_TwoComponent8 (843264056)" },  
    { "trigger": "KCVPixelFormatVerticalSubsampling (CFStringRef)" },  
    { "trigger": "KCVReturnAllocationFailed (-6662)" },  
    { "trigger": "KCVReturnDisplayLinkAlreadyRunning (-6671)" },  
    { "trigger": "KCVReturnDisplayLinkCallbacksNotSet (-6673)" },  
    { "trigger": "KCVReturnDisplayLinkNotRunning (-6672)" },  
    { "trigger": "KCVReturnError (-6660)" },  
    { "trigger": "KCVReturnFirst (-6660)" },  
    { "trigger": "KCVReturnInvalidArgument (-6661)" },  
    { "trigger": "KCVReturnInvalidDisplay (-6670)" },  
    { "trigger": "KCVReturnInvalidPixelBufferAttributes (-6682)" },  
    { "trigger": "KCVReturnInvalidPixelFormat (-6680)" },  
    { "trigger": "KCVReturnInvalidPoolAttributes (-6691)" },  
    { "trigger": "KCVReturnInvalidSize (-6681)" },  
    { "trigger": "KCVReturnLast (-6699)" },  
    { "trigger": "KCVReturnPixelBufferNotOpenGLCompatible (-6683)" },  
    { "trigger": "KCVReturnPoolAllocationFailed (-6690)" },  
    { "trigger": "KCVReturnSuccess (0)" },  
    { "trigger": "KCVReturnWouldExceedAllocationThreshold (-6689)" },  
    { "trigger": "KCVSMPTETimeRunning (2)" },  
    { "trigger": "KCVSMPTETimeType24 (0)" },  
    { "trigger": "KCVSMPTETimeType25 (1)" },  
    { "trigger": "KCVSMPTETimeType2997 (4)" },  
    { "trigger": "KCVSMPTETimeType2997Drop (5)" },  
    { "trigger": "KCVSMPTETimeType30 (3)" },  
    { "trigger": "KCVSMPTETimeType30Drop (2)" },  
    { "trigger": "KCVSMPTETimeType5994 (7)" },  
    { "trigger": "KCVSMPTETimeType60 (6)" },  
    { "trigger": "KCVSMPTETimeValid (1)" },  
    { "trigger": "KCVTimeIsIndefinite (1)" },  
    { "trigger": "KCVTimeStampBottomField (131072)" },  
    { "trigger": "KCVTimeStampHostTimeValid (2)" },  
    { "trigger": "KCVTimeStampIsInterlaced (196608)" },  
    { "trigger": "KCVTimeStampRateScalarValid (16)" },  
    { "trigger": "KCVTimeStampSMPTETimeValid (4)" },  
    { "trigger": "KCVTimeStampTopField (65536)" },  
    { "trigger": "KCVTimeStampVideoHostTimeValid (3)" },  
    { "trigger": "KCVTimeStampVideoRefreshPeriodValid (8)" },  
    { "trigger": "KCVTimeStampVideoTimeValid (1)" },  
    { "trigger": "KCVZeroTime (CVTime)" },  
    { "trigger": "KCanonicalCompositionOffSelector (1)" },  
    { "trigger": "KCanonicalCompositionOnSelector (0)" },  
    { "trigger": "KCharacterAlternativesType (17)" },  
    { "trigger": "KCharacterShapeType (20)" },  
    { "trigger": "KCircleAnnotationSelector (3)" },  
    { "trigger": "KCommonLigaturesOffSelector (3)" },  
    { "trigger": "KCommonLigaturesOnSelector (2)" },  
    { "trigger": "KCompatibilityCompositionOffSelector (3)" },  
    { "trigger": "KCompatibilityCompositionOnSelector (2)" },  
    { "trigger": "KConverterPrimeMethod_None (2)" },  
    { "trigger": "KConverterPrimeMethod_Normal (1)" },  
    { "trigger": "KConverterPrimeMethod_Pre (0)" },  
    { "trigger": "KCursiveConnectionType (2)" },  
    { "trigger": "KCursiveSelector (2)" },  
    { "trigger": "KDTLSProtocol1 (9)" },  
    { "trigger": "KDecomposeDiacriticsSelector (2)" },  
    { "trigger": "KDecorativeBordersSelector (4)" },  
    { "trigger": "KDefaultCJKRomanSelector (2)" },  
    { "trigger": "KDesignComplexityType (18)" },  
    { "trigger": "KDesignLevel1Selector (0)" },  
    { "trigger": "KDesignLevel2Selector (1)" },  
    { "trigger": "KDesignLevel3Selector (2)" },  
    { "trigger": "KDesignLevel4Selector (3)" },  
    { "trigger": "KDesignLevel5Selector (4)" },  
    { "trigger": "KDiacriticsType (9)" },  
    { "trigger": "KDiagonalFractionsSelector (2)" },  
    { "trigger": "KDiamondAnnotationSelector (8)" },  
    { "trigger": "KDingbatsSelector (1)" },  
    { "trigger": "KDiphthongLigaturesOffSelector (11)" },  
    { "trigger": "KDiphthongLigaturesOnSelector (10)" },  
    { "trigger": "KDisplayTextSelector (1)" },  
    { "trigger": "KEAGLColorFormatRGB565 (NSString*)" },  
    { "trigger": "KEAGLColorFormatRGBA8 (NSString*)" },  
    { "trigger": "KEAGLDrawablePropertyColorFormat (NSString*)" },  
    { "trigger": "KEAGLDrawablePropertyRetainedBacking (NSString*)" },  
    { "trigger": "KEAGLRenderingAPIOpenGLES1 (1)" },  
    { "trigger": "KEAGLRenderingAPIOpenGLES2 (2)" },  
    { "trigger": "KEngravedTextSelector (2)" },  
    { "trigger": "KExpertCharactersSelector (10)" },  
    { "trigger": "KExponentsOffSelector (9)" },  
    { "trigger": "KExponentsOnSelector (8)" },  
    { "trigger": "KExtAudioFileError_AsyncWriteBufferOverflow (-66570)" },  
    { "trigger": "KExtAudioFileError_AsyncWriteTooLarge (-66569)" },  
    { "trigger": "KExtAudioFileError_CodecUnavailableInputConsumed (-66559)" },  
    { "trigger": "KExtAudioFileError_CodecUnavailableInputNotConsumed (-66560)" },  
    { "trigger": "KExtAudioFileError_InvalidChannelMap (-66564)" },  
    { "trigger": "KExtAudioFileError_InvalidDataFormat (-66566)" },  
    { "trigger": "KExtAudioFileError_InvalidOperationOrder (-66565)" },  
    { "trigger": "KExtAudioFileError_InvalidProperty (-66561)" },  
    { "trigger": "KExtAudioFileError_InvalidPropertySize (-66562)" },  
    { "trigger": "KExtAudioFileError_InvalidSeek (-66568)" },  
    { "trigger": "KExtAudioFileError_MaxPacketSizeUnknown (-66567)" },  
    { "trigger": "KExtAudioFileError_NonPCMClientFormat (-66563)" },  
    { "trigger": "KExtAudioFileProperty_AudioConverter (1633906294)" },  
    { "trigger": "KExtAudioFileProperty_AudioFile (1634101612)" },  
    { "trigger": "KExtAudioFileProperty_ClientChannelLayout (1667460207)" },  
    { "trigger": "KExtAudioFileProperty_ClientDataFormat (1667657076)" },  
    { "trigger": "KExtAudioFileProperty_ClientMaxPacketSize (1668116595)" },  
    { "trigger": "KExtAudioFileProperty_CodecManufacturer (1668112750)" },  
    { "trigger": "KExtAudioFileProperty_ConverterConfig (1633903462)" },  
    { "trigger": "KExtAudioFileProperty_FileChannelLayout (1717791855)" },  
    { "trigger": "KExtAudioFileProperty_FileDataFormat (1717988724)" },  
    { "trigger": "KExtAudioFileProperty_FileLengthFrames (593916525)" },  
    { "trigger": "KExtAudioFileProperty_FileMaxPacketSize (1718448243)" },  
    { "trigger": "KExtAudioFileProperty_IOBuffer (1768907366)" },  
    { "trigger": "KExtAudioFileProperty_IOBufferSizeBytes (1768907379)" },  
    { "trigger": "KExtAudioFileProperty_PacketTable (2020635753)" },  
    { "trigger": "KFleuronsSelector (3)" },  
    { "trigger": "KFontAlbanianLanguage (36)" },  
    { "trigger": "KFontAmharicLanguage (85)" },  
    { "trigger": "KFontAmharicScript (28)" },  
    { "trigger": "KFontArabicLanguage (12)" },  
    { "trigger": "KFontArabicScript (4)" },  
    { "trigger": "KFontArmenianLanguage (51)" },  
    { "trigger": "KFontArmenianScript (24)" },  
    { "trigger": "KFontAssameseLanguage (68)" },  
    { "trigger": "KFontAymaraLanguage (134)" },  
    { "trigger": "KFontAzerbaijanArLanguage (50)" },  
    { "trigger": "KFontAzerbaijaniLanguage (49)" },  
    { "trigger": "KFontBasqueLanguage (129)" },  
    { "trigger": "KFontBengaliLanguage (67)" },  
    { "trigger": "KFontBengaliScript (13)" },  
    { "trigger": "KFontBulgarianLanguage (44)" },  
    { "trigger": "KFontBurmeseLanguage (77)" },  
    { "trigger": "KFontBurmeseScript (19)" },  
    { "trigger": "KFontByelorussianLanguage (46)" },  
    { "trigger": "KFontCatalanLanguage (130)" },  
    { "trigger": "KFontChewaLanguage (92)" },  
    { "trigger": "KFontChineseScript (2)" },  
    { "trigger": "KFontCopyrightName (0)" },  
    { "trigger": "KFontCroatianLanguage (18)" },  
    { "trigger": "KFontCustom16BitScript (2)" },  
    { "trigger": "KFontCustom816BitScript (1)" },  
    { "trigger": "KFontCustom8BitScript (0)" },  
    { "trigger": "KFontCustomPlatform (4)" },  
    { "trigger": "KFontCyrillicScript (7)" },  
    { "trigger": "KFontCzechLanguage (38)" },  
    { "trigger": "KFontDanishLanguage (7)" },  
    { "trigger": "KFontDescriptionName (10)" },  
    { "trigger": "KFontDesignerName (9)" },  
    { "trigger": "KFontDesignerURLName (12)" },  
    { "trigger": "KFontDevanagariScript (9)" },  
    { "trigger": "KFontDutchLanguage (4)" },  
    { "trigger": "KFontDzongkhaLanguage (137)" },  
    { "trigger": "KFontEastEuropeanRomanScript (29)" },  
    { "trigger": "KFontEnglishLanguage (0)" },  
    { "trigger": "KFontEsperantoLanguage (94)" },  
    { "trigger": "KFontEstonianLanguage (27)" },  
    { "trigger": "KFontEthiopicScript (28)" },  
    { "trigger": "KFontExtendedArabicScript (31)" },  
    { "trigger": "KFontFaeroeseLanguage (30)" },  
    { "trigger": "KFontFamilyName (1)" },  
    { "trigger": "KFontFarsiLanguage (31)" },  
    { "trigger": "KFontFinnishLanguage (13)" },  
    { "trigger": "KFontFlemishLanguage (34)" },  
    { "trigger": "KFontFrenchLanguage (1)" },  
    { "trigger": "KFontFullName (4)" },  
    { "trigger": "KFontGallaLanguage (87)" },  
    { "trigger": "KFontGeezScript (28)" },  
    { "trigger": "KFontGeorgianLanguage (52)" },  
    { "trigger": "KFontGeorgianScript (23)" },  
    { "trigger": "KFontGermanLanguage (2)" },  
    { "trigger": "KFontGreekLanguage (14)" },  
    { "trigger": "KFontGreekScript (6)" },  
    { "trigger": "KFontGuaraniLanguage (133)" },  
    { "trigger": "KFontGujaratiLanguage (69)" },  
    { "trigger": "KFontGujaratiScript (11)" },  
    { "trigger": "KFontGurmukhiScript (10)" },  
    { "trigger": "KFontHebrewLanguage (10)" },  
    { "trigger": "KFontHebrewScript (5)" },  
    { "trigger": "KFontHindiLanguage (21)" },  
    { "trigger": "KFontHungarianLanguage (26)" },  
    { "trigger": "KFontISO10646_1993Semantics (2)" },  
    { "trigger": "KFontIcelandicLanguage (15)" },  
    { "trigger": "KFontIndonesianLanguage (81)" },  
    { "trigger": "KFontIrishLanguage (35)" },  
    { "trigger": "KFontItalianLanguage (3)" },  
    { "trigger": "KFontJapaneseLanguage (11)" },  
    { "trigger": "KFontJapaneseScript (1)" },  
    { "trigger": "KFontJavaneseRomLanguage (138)" },  
    { "trigger": "KFontKannadaLanguage (73)" },  
    { "trigger": "KFontKannadaScript (16)" },  
    { "trigger": "KFontKashmiriLanguage (61)" },  
    { "trigger": "KFontKazakhLanguage (48)" },  
    { "trigger": "KFontKhmerLanguage (78)" },  
    { "trigger": "KFontKhmerScript (20)" },  
    { "trigger": "KFontKirghizLanguage (54)" },  
    { "trigger": "KFontKoreanLanguage (23)" },  
    { "trigger": "KFontKoreanScript (3)" },  
    { "trigger": "KFontKurdishLanguage (60)" },  
    { "trigger": "KFontLaoLanguage (79)" },  
    { "trigger": "KFontLaotianScript (22)" },  
    { "trigger": "KFontLappishLanguage (29)" },  
    { "trigger": "KFontLastReservedName (255)" },  
    { "trigger": "KFontLatinLanguage (131)" },  
    { "trigger": "KFontLatvianLanguage (28)" },  
    { "trigger": "KFontLettishLanguage (28)" },  
    { "trigger": "KFontLicenseDescriptionName (13)" },  
    { "trigger": "KFontLicenseInfoURLName (14)" },  
    { "trigger": "KFontLithuanianLanguage (24)" },  
    { "trigger": "KFontMacCompatibleFullName (18)" },  
    { "trigger": "KFontMacedonianLanguage (43)" },  
    { "trigger": "KFontMacintoshPlatform (1)" },  
    { "trigger": "KFontMalagasyLanguage (93)" },  
    { "trigger": "KFontMalayArabicLanguage (84)" },  
    { "trigger": "KFontMalayRomanLanguage (83)" },  
    { "trigger": "KFontMalayalamLanguage (72)" },  
    { "trigger": "KFontMalayalamScript (17)" },  
    { "trigger": "KFontMalteseLanguage (16)" },  
    { "trigger": "KFontManufacturerName (8)" },  
    { "trigger": "KFontMarathiLanguage (66)" },  
    { "trigger": "KFontMicrosoftPlatform (3)" },  
    { "trigger": "KFontMicrosoftStandardScript (1)" },  
    { "trigger": "KFontMicrosoftSymbolScript (0)" },  
    { "trigger": "KFontMicrosoftUCS4Script (10)" },  
    { "trigger": "KFontMoldavianLanguage (53)" },  
    { "trigger": "KFontMongolianCyrLanguage (58)" },  
    { "trigger": "KFontMongolianLanguage (57)" },  
    { "trigger": "KFontMongolianScript (27)" },  
    { "trigger": "KFontNepaliLanguage (64)" },  
    { "trigger": "KFontNoLanguageCode (4294967295)" },  
    { "trigger": "KFontNoNameCode (4294967295)" },  
    { "trigger": "KFontNoPlatformCode (4294967295)" },  
    { "trigger": "KFontNoScriptCode (4294967295)" },  
    { "trigger": "KFontNorwegianLanguage (9)" },  
    { "trigger": "KFontOriyaLanguage (71)" },  
    { "trigger": "KFontOriyaScript (12)" },  
    { "trigger": "KFontOromoLanguage (87)" },  
    { "trigger": "KFontPashtoLanguage (59)" },  
    { "trigger": "KFontPersianLanguage (31)" },  
    { "trigger": "KFontPolishLanguage (25)" },  
    { "trigger": "KFontPortugueseLanguage (8)" },  
    { "trigger": "KFontPostScriptCIDName (20)" },  
    { "trigger": "KFontPostscriptName (6)" },  
    { "trigger": "KFontPreferredFamilyName (16)" },  
    { "trigger": "KFontPreferredSubfamilyName (17)" },  
    { "trigger": "KFontPunjabiLanguage (70)" },  
    { "trigger": "KFontQuechuaLanguage (132)" },  
    { "trigger": "KFontRSymbolScript (8)" },  
    { "trigger": "KFontReservedPlatform (2)" },  
    { "trigger": "KFontRomanScript (0)" },  
    { "trigger": "KFontRomanianLanguage (37)" },  
    { "trigger": "KFontRuandaLanguage (90)" },  
    { "trigger": "KFontRundiLanguage (91)" },  
    { "trigger": "KFontRussian (7)" },  
    { "trigger": "KFontRussianLanguage (32)" },  
    { "trigger": "KFontSaamiskLanguage (29)" },  
    { "trigger": "KFontSampleTextName (19)" },  
    { "trigger": "KFontSanskritLanguage (65)" },  
    { "trigger": "KFontSerbianLanguage (42)" },  
    { "trigger": "KFontSimpChineseLanguage (33)" },  
    { "trigger": "KFontSimpleChineseScript (25)" },  
    { "trigger": "KFontSindhiLanguage (62)" },  
    { "trigger": "KFontSindhiScript (31)" },  
    { "trigger": "KFontSinhaleseLanguage (76)" },  
    { "trigger": "KFontSinhaleseScript (18)" },  
    { "trigger": "KFontSlavicScript (29)" },  
    { "trigger": "KFontSlovakLanguage (39)" },  
    { "trigger": "KFontSlovenianLanguage (40)" },  
    { "trigger": "KFontSomaliLanguage (88)" },  
    { "trigger": "KFontSpanishLanguage (6)" },  
    { "trigger": "KFontStyleName (2)" },  
    { "trigger": "KFontSundaneseRomLanguage (139)" },  
    { "trigger": "KFontSwahiliLanguage (89)" },  
    { "trigger": "KFontSwedishLanguage (5)" },  
    { "trigger": "KFontTagalogLanguage (82)" },  
    { "trigger": "KFontTajikiLanguage (55)" },  
    { "trigger": "KFontTamilLanguage (74)" },  
    { "trigger": "KFontTamilScript (14)" },  
    { "trigger": "KFontTatarLanguage (135)" },  
    { "trigger": "KFontTeluguLanguage (75)" },  
    { "trigger": "KFontTeluguScript (15)" },  
    { "trigger": "KFontThaiLanguage (22)" },  
    { "trigger": "KFontThaiScript (21)" },  
    { "trigger": "KFontTibetanLanguage (63)" },  
    { "trigger": "KFontTibetanScript (26)" },  
    { "trigger": "KFontTigrinyaLanguage (86)" },  
    { "trigger": "KFontTradChineseLanguage (19)" },  
    { "trigger": "KFontTrademarkName (7)" },  
    { "trigger": "KFontTraditionalChineseScript (2)" },  
    { "trigger": "KFontTurkishLanguage (17)" },  
    { "trigger": "KFontTurkmenLanguage (56)" },  
    { "trigger": "KFontUighurLanguage (136)" },  
    { "trigger": "KFontUkrainianLanguage (45)" },  
    { "trigger": "KFontUnicodeDefaultSemantics (0)" },  
    { "trigger": "KFontUnicodePlatform (0)" },  
    { "trigger": "KFontUnicodeV1_1Semantics (1)" },  
    { "trigger": "KFontUnicodeV2_0BMPOnlySemantics (3)" },  
    { "trigger": "KFontUnicodeV2_0FullCoverageSemantics (4)" },  
    { "trigger": "KFontUnicodeV4_0VariationSequenceSemantics (5)" },  
    { "trigger": "KFontUninterpretedScript (32)" },  
    { "trigger": "KFontUniqueName (3)" },  
    { "trigger": "KFontUrduLanguage (20)" },  
    { "trigger": "KFontUzbekLanguage (47)" },  
    { "trigger": "KFontVendorURLName (11)" },  
    { "trigger": "KFontVersionName (5)" },  
    { "trigger": "KFontVietnameseLanguage (80)" },  
    { "trigger": "KFontVietnameseScript (30)" },  
    { "trigger": "KFontWelshLanguage (128)" },  
    { "trigger": "KFontYiddishLanguage (41)" },  
    { "trigger": "KFormInterrobangOffSelector (7)" },  
    { "trigger": "KFormInterrobangOnSelector (6)" },  
    { "trigger": "KFractionsType (11)" },  
    { "trigger": "KFullWidthCJKRomanSelector (3)" },  
    { "trigger": "KFullWidthIdeographsSelector (0)" },  
    { "trigger": "KFullWidthKanaSelector (0)" },  
    { "trigger": "KHalfWidthCJKRomanSelector (0)" },  
    { "trigger": "KHalfWidthIdeographsSelector (2)" },  
    { "trigger": "KHalfWidthTextSelector (2)" },  
    { "trigger": "KHanjaToHangulAltOneSelector (7)" },  
    { "trigger": "KHanjaToHangulAltThreeSelector (9)" },  
    { "trigger": "KHanjaToHangulAltTwoSelector (8)" },  
    { "trigger": "KHanjaToHangulSelector (1)" },  
    { "trigger": "KHideDiacriticsSelector (1)" },  
    { "trigger": "KHiraganaToKatakanaSelector (2)" },  
    { "trigger": "KHyphenToEnDashOffSelector (3)" },  
    { "trigger": "KHyphenToEnDashOnSelector (2)" },  
    { "trigger": "KHyphenToMinusOffSelector (1)" },  
    { "trigger": "KHyphenToMinusOnSelector (0)" },  
    { "trigger": "KHyphensToEmDashOffSelector (1)" },  
    { "trigger": "KHyphensToEmDashOnSelector (0)" },  
    { "trigger": "KIdeographicAltFiveSelector (5)" },  
    { "trigger": "KIdeographicAltFourSelector (4)" },  
    { "trigger": "KIdeographicAltOneSelector (1)" },  
    { "trigger": "KIdeographicAltThreeSelector (3)" },  
    { "trigger": "KIdeographicAltTwoSelector (2)" },  
    { "trigger": "KIdeographicAlternativesType (30)" },  
    { "trigger": "KIdeographicSpacingType (26)" },  
    { "trigger": "KIlluminatedCapsSelector (3)" },  
    { "trigger": "KInequalityLigaturesOffSelector (7)" },  
    { "trigger": "KInequalityLigaturesOnSelector (6)" },  
    { "trigger": "KInferiorsSelector (2)" },  
    { "trigger": "KInitialCapsAndSmallCapsSelector (5)" },  
    { "trigger": "KInitialCapsSelector (4)" },  
    { "trigger": "KInternationalSymbolsSelector (5)" },  
    { "trigger": "KInvertedBoxAnnotationSelector (9)" },  
    { "trigger": "KInvertedCircleAnnotationSelector (4)" },  
    { "trigger": "KInvertedRoundedBoxAnnotationSelector (10)" },  
    { "trigger": "KItalicCJKRomanType (32)" },  
    { "trigger": "KJIS1978CharactersSelector (2)" },  
    { "trigger": "KJIS1983CharactersSelector (3)" },  
    { "trigger": "KJIS1990CharactersSelector (4)" },  
    { "trigger": "KJUSTCurrentVersion (65536)" },  
    { "trigger": "KJUSTKashidaPriority (0)" },  
    { "trigger": "KJUSTLetterPriority (2)" },  
    { "trigger": "KJUSTNullPriority (3)" },  
    { "trigger": "KJUSTOverrideLimits (16384)" },  
    { "trigger": "KJUSTOverridePriority (32768)" },  
    { "trigger": "KJUSTOverrideUnlimited (8192)" },  
    { "trigger": "KJUSTPriorityCount (4)" },  
    { "trigger": "KJUSTPriorityMask (3)" },  
    { "trigger": "KJUSTSpacePriority (1)" },  
    { "trigger": "KJUSTStandardFormat (0)" },  
    { "trigger": "KJUSTTag (1786082164)" },  
    { "trigger": "KJUSTUnlimited (4096)" },  
    { "trigger": "KJUSTnoGlyphcode (65535)" },  
    { "trigger": "KJUSTpcConditionalAddAction (2)" },  
    { "trigger": "KJUSTpcDecompositionAction (0)" },  
    { "trigger": "KJUSTpcDuctilityAction (4)" },  
    { "trigger": "KJUSTpcGlyphRepeatAddAction (5)" },  
    { "trigger": "KJUSTpcGlyphStretchAction (3)" },  
    { "trigger": "KJUSTpcUnconditionalAddAction (1)" },  
    { "trigger": "KKERNCrossStream (16384)" },  
    { "trigger": "KKERNCrossStreamResetNote (2)" },  
    { "trigger": "KKERNCurrentVersion (65536)" },  
    { "trigger": "KKERNFormatMask (255)" },  
    { "trigger": "KKERNIndexArray (3)" },  
    { "trigger": "KKERNLineEndKerning (2)" },  
    { "trigger": "KKERNLineStart (1)" },  
    { "trigger": "KKERNNoCrossKerning (4)" },  
    { "trigger": "KKERNNoStakeNote (1)" },  
    { "trigger": "KKERNNotApplied (1)" },  
    { "trigger": "KKERNNotesRequested (8)" },  
    { "trigger": "KKERNOrderedList (0)" },  
    { "trigger": "KKERNResetCrossStream (32768)" },  
    { "trigger": "KKERNSimpleArray (2)" },  
    { "trigger": "KKERNStateTable (1)" },  
    { "trigger": "KKERNTag (1801810542)" },  
    { "trigger": "KKERNUnusedBits (7936)" },  
    { "trigger": "KKERNVariation (8192)" },  
    { "trigger": "KKERNVertical (32768)" },  
    { "trigger": "KKERXActionOffsetMask (2147483647)" },  
    { "trigger": "KKERXControlPoint (4)" },  
    { "trigger": "KKERXCrossStream (1073741824)" },  
    { "trigger": "KKERXCrossStreamResetNote (2)" },  
    { "trigger": "KKERXCurrentVersion (131072)" },  
    { "trigger": "KKERXFormatMask (255)" },  
    { "trigger": "KKERXIndexArray (3)" },  
    { "trigger": "KKERXLineEndKerning (2)" },  
    { "trigger": "KKERXLineStart (1)" },  
    { "trigger": "KKERXNoCrossKerning (4)" },  
    { "trigger": "KKERXNoStakeNote (1)" },  
    { "trigger": "KKERXNotApplied (1)" },  
    { "trigger": "KKERXNotesRequested (8)" },  
    { "trigger": "KKERXOrderedList (0)" },  
    { "trigger": "KKERXResetCrossStream (32768)" },  
    { "trigger": "KKERXSimpleArray (2)" },  
    { "trigger": "KKERXStateTable (1)" },  
    { "trigger": "KKERXTag (1801810552)" },  
    { "trigger": "KKERXUnusedBits (536870656)" },  
    { "trigger": "KKERXUsesCoordinates (-2147483648)" },  
    { "trigger": "KKERXVariation (536870912)" },  
    { "trigger": "KKERXVertical (-2147483648)" },  
    { "trigger": "KKanaSpacingType (25)" },  
    { "trigger": "KKanaToRomanizationSelector (4)" },  
    { "trigger": "KKatakanaToHiraganaSelector (3)" },  
    { "trigger": "KLCARCtlPointFormat (1)" },  
    { "trigger": "KLCARCurrentVersion (65536)" },  
    { "trigger": "KLCARLinearFormat (0)" },  
    { "trigger": "KLCARTag (1818452338)" },  
    { "trigger": "KLastFeatureType (-1)" },  
    { "trigger": "KLetterCaseType (3)" },  
    { "trigger": "KLigaturesType (1)" },  
    { "trigger": "KLineFinalSwashesOffSelector (7)" },  
    { "trigger": "KLineFinalSwashesOnSelector (6)" },  
    { "trigger": "KLineInitialSwashesOffSelector (5)" },  
    { "trigger": "KLineInitialSwashesOnSelector (4)" },  
    { "trigger": "KLinguisticRearrangementOffSelector (1)" },  
    { "trigger": "KLinguisticRearrangementOnSelector (0)" },  
    { "trigger": "KLinguisticRearrangementType (5)" },  
    { "trigger": "KLogosOffSelector (7)" },  
    { "trigger": "KLogosOnSelector (6)" },  
    { "trigger": "KLowerCaseNumbersSelector (0)" },  
    { "trigger": "KMIDIControlType_14Bit (1)" },  
    { "trigger": "KMIDIControlType_14BitNRPN (5)" },  
    { "trigger": "KMIDIControlType_14BitRPN (3)" },  
    { "trigger": "KMIDIControlType_7Bit (0)" },  
    { "trigger": "KMIDIControlType_7BitNRPN (4)" },  
    { "trigger": "KMIDIControlType_7BitRPN (2)" },  
    { "trigger": "KMIDIIDNotUnique (-10843)" },  
    { "trigger": "KMIDIInvalidClient (-10830)" },  
    { "trigger": "KMIDIInvalidPort (-10831)" },  
    { "trigger": "KMIDIInvalidUniqueID (0)" },  
    { "trigger": "KMIDIMessageSendErr (-10838)" },  
    { "trigger": "KMIDIMsgIOError (7)" },  
    { "trigger": "KMIDIMsgObjectAdded (2)" },  
    { "trigger": "KMIDIMsgObjectRemoved (3)" },  
    { "trigger": "KMIDIMsgPropertyChanged (4)" },  
    { "trigger": "KMIDIMsgSerialPortOwnerChanged (6)" },  
    { "trigger": "KMIDIMsgSetupChanged (1)" },  
    { "trigger": "KMIDIMsgThruConnectionsChanged (5)" },  
    { "trigger": "KMIDINoConnection (-10833)" },  
    { "trigger": "KMIDINoCurrentSetup (-10837)" },  
    { "trigger": "KMIDIObjectNotFound (-10842)" },  
    { "trigger": "KMIDIObjectType_Destination (3)" },  
    { "trigger": "KMIDIObjectType_Device (0)" },  
    { "trigger": "KMIDIObjectType_Entity (1)" },  
    { "trigger": "KMIDIObjectType_ExternalDestination (19)" },  
    { "trigger": "KMIDIObjectType_ExternalDevice (16)" },  
    { "trigger": "KMIDIObjectType_ExternalEntity (17)" },  
    { "trigger": "KMIDIObjectType_ExternalMask (16)" },  
    { "trigger": "KMIDIObjectType_ExternalSource (18)" },  
    { "trigger": "KMIDIObjectType_Other (-1)" },  
    { "trigger": "KMIDIObjectType_Source (2)" },  
    { "trigger": "KMIDIPropertyAdvanceScheduleTimeMuSec (CFStringRef)" },  
    { "trigger": "KMIDIPropertyCanRoute (CFStringRef)" },  
    { "trigger": "KMIDIPropertyConnectionUniqueID (CFStringRef)" },  
    { "trigger": "KMIDIPropertyDeviceID (CFStringRef)" },  
    { "trigger": "KMIDIPropertyDisplayName (CFStringRef)" },  
    { "trigger": "KMIDIPropertyDriverDeviceEditorApp (CFStringRef)" },  
    { "trigger": "KMIDIPropertyDriverOwner (CFStringRef)" },  
    { "trigger": "KMIDIPropertyDriverVersion (CFStringRef)" },  
    { "trigger": "KMIDIPropertyImage (CFStringRef)" },  
    { "trigger": "KMIDIPropertyIsBroadcast (CFStringRef)" },  
    { "trigger": "KMIDIPropertyIsDrumMachine (CFStringRef)" },  
    { "trigger": "KMIDIPropertyIsEffectUnit (CFStringRef)" },  
    { "trigger": "KMIDIPropertyIsEmbeddedEntity (CFStringRef)" },  
    { "trigger": "KMIDIPropertyIsMixer (CFStringRef)" },  
    { "trigger": "KMIDIPropertyIsSampler (CFStringRef)" },  
    { "trigger": "KMIDIPropertyManufacturer (CFStringRef)" },  
    { "trigger": "KMIDIPropertyMaxReceiveChannels (CFStringRef)" },  
    { "trigger": "KMIDIPropertyMaxSysExSpeed (CFStringRef)" },  
    { "trigger": "KMIDIPropertyMaxTransmitChannels (CFStringRef)" },  
    { "trigger": "KMIDIPropertyModel (CFStringRef)" },  
    { "trigger": "KMIDIPropertyName (CFStringRef)" },  
    { "trigger": "KMIDIPropertyNameConfiguration (CFStringRef)" },  
    { "trigger": "KMIDIPropertyOffline (CFStringRef)" },  
    { "trigger": "KMIDIPropertyPanDisruptsStereo (CFStringRef)" },  
    { "trigger": "KMIDIPropertyPrivate (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceiveChannels (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceivesBankSelectLSB (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceivesBankSelectMSB (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceivesClock (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceivesMTC (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceivesNotes (CFStringRef)" },  
    { "trigger": "KMIDIPropertyReceivesProgramChanges (CFStringRef)" },  
    { "trigger": "KMIDIPropertySingleRealtimeEntity (CFStringRef)" },  
    { "trigger": "KMIDIPropertySupportsGeneralMIDI (CFStringRef)" },  
    { "trigger": "KMIDIPropertySupportsMMC (CFStringRef)" },  
    { "trigger": "KMIDIPropertySupportsShowControl (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitChannels (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitsBankSelectLSB (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitsBankSelectMSB (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitsClock (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitsMTC (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitsNotes (CFStringRef)" },  
    { "trigger": "KMIDIPropertyTransmitsProgramChanges (CFStringRef)" },  
    { "trigger": "KMIDIPropertyUniqueID (CFStringRef)" },  
    { "trigger": "KMIDIServerStartErr (-10839)" },  
    { "trigger": "KMIDISetupFormatErr (-10840)" },  
    { "trigger": "KMIDIThruConnection_MaxEndpoints (8)" },  
    { "trigger": "KMIDITransform_Add (8)" },  
    { "trigger": "KMIDITransform_FilterOut (1)" },  
    { "trigger": "KMIDITransform_MapControl (2)" },  
    { "trigger": "KMIDITransform_MapValue (12)" },  
    { "trigger": "KMIDITransform_MaxValue (11)" },  
    { "trigger": "KMIDITransform_MinValue (10)" },  
    { "trigger": "KMIDITransform_None (0)" },  
    { "trigger": "KMIDITransform_Scale (9)" },  
    { "trigger": "KMIDIUnknownEndpoint (-10834)" },  
    { "trigger": "KMIDIUnknownProperty (-10835)" },  
    { "trigger": "KMIDIWrongEndpointType (-10832)" },  
    { "trigger": "KMIDIWrongPropertyType (-10836)" },  
    { "trigger": "KMIDIWrongThread (-10841)" },  
    { "trigger": "KMORTContextualType (1)" },  
    { "trigger": "KMORTCoverDescending (16384)" },  
    { "trigger": "KMORTCoverIgnoreVertical (8192)" },  
    { "trigger": "KMORTCoverTypeMask (15)" },  
    { "trigger": "KMORTCoverVertical (32768)" },  
    { "trigger": "KMORTCurrInsertBefore (2048)" },  
    { "trigger": "KMORTCurrInsertCountMask (992)" },  
    { "trigger": "KMORTCurrInsertCountShift (5)" },  
    { "trigger": "KMORTCurrInsertKashidaLike (8192)" },  
    { "trigger": "KMORTCurrJustTableCountMask (127)" },  
    { "trigger": "KMORTCurrJustTableCountShift (0)" },  
    { "trigger": "KMORTCurrentVersion (65536)" },  
    { "trigger": "KMORTDoInsertionsBefore (128)" },  
    { "trigger": "KMORTInsertionType (5)" },  
    { "trigger": "KMORTInsertionsCountMask (63)" },  
    { "trigger": "KMORTIsSplitVowelPiece (64)" },  
    { "trigger": "KMORTLigFormOffsetMask (1073741823)" },  
    { "trigger": "KMORTLigFormOffsetShift (2)" },  
    { "trigger": "KMORTLigLastAction (-2147483648)" },  
    { "trigger": "KMORTLigStoreLigature (1073741824)" },  
    { "trigger": "KMORTLigatureType (2)" },  
    { "trigger": "KMORTMarkInsertBefore (1024)" },  
    { "trigger": "KMORTMarkInsertCountMask (31)" },  
    { "trigger": "KMORTMarkInsertCountShift (0)" },  
    { "trigger": "KMORTMarkInsertKashidaLike (4096)" },  
    { "trigger": "KMORTMarkJustTableCountMask (16256)" },  
    { "trigger": "KMORTMarkJustTableCountShift (7)" },  
    { "trigger": "KMORTRearrangementType (0)" },  
    { "trigger": "KMORTSwashType (4)" },  
    { "trigger": "KMORTTag (1836020340)" },  
    { "trigger": "KMORTraCDx (6)" },  
    { "trigger": "KMORTraCDxA (8)" },  
    { "trigger": "KMORTraCDxAB (12)" },  
    { "trigger": "KMORTraCDxBA (13)" },  
    { "trigger": "KMORTraDCx (7)" },  
    { "trigger": "KMORTraDCxA (9)" },  
    { "trigger": "KMORTraDCxAB (14)" },  
    { "trigger": "KMORTraDCxBA (15)" },  
    { "trigger": "KMORTraDx (2)" },  
    { "trigger": "KMORTraDxA (3)" },  
    { "trigger": "KMORTraDxAB (10)" },  
    { "trigger": "KMORTraDxBA (11)" },  
    { "trigger": "KMORTraNoAction (0)" },  
    { "trigger": "KMORTraxA (1)" },  
    { "trigger": "KMORTraxAB (4)" },  
    { "trigger": "KMORTraxBA (5)" },  
    { "trigger": "KMORXCoverDescending (1073741824)" },  
    { "trigger": "KMORXCoverIgnoreVertical (536870912)" },  
    { "trigger": "KMORXCoverTypeMask (255)" },  
    { "trigger": "KMORXCoverVertical (-2147483648)" },  
    { "trigger": "KMORXCurrentVersion (131072)" },  
    { "trigger": "KMORXTag (1836020344)" },  
    { "trigger": "KMathSymbolsSelector (6)" },  
    { "trigger": "KMathematicalExtrasType (15)" },  
    { "trigger": "KMonospacedNumbersSelector (0)" },  
    { "trigger": "KMonospacedTextSelector (1)" },  
    { "trigger": "KMusicEventType_AUPreset (10)" },  
    { "trigger": "KMusicEventType_ExtendedNote (1)" },  
    { "trigger": "KMusicEventType_ExtendedTempo (3)" },  
    { "trigger": "KMusicEventType_MIDIChannelMessage (7)" },  
    { "trigger": "KMusicEventType_MIDINoteMessage (6)" },  
    { "trigger": "KMusicEventType_MIDIRawData (8)" },  
    { "trigger": "KMusicEventType_Meta (5)" },  
    { "trigger": "KMusicEventType_NULL (0)" },  
    { "trigger": "KMusicEventType_Parameter (9)" },  
    { "trigger": "KMusicEventType_User (4)" },  
    { "trigger": "KMusicSequenceFileFlags_EraseFile (1)" },  
    { "trigger": "KMusicSequenceFile_MIDIType (1835623529)" },  
    { "trigger": "KMusicSequenceFile_iMelodyType (1768777068)" },  
    { "trigger": "KMusicSequenceLoadSMF_ChannelsToTracks (1)" },  
    { "trigger": "KMusicSequenceType_Beats (1650811252)" },  
    { "trigger": "KMusicSequenceType_Samples (1935764848)" },  
    { "trigger": "KMusicSequenceType_Seconds (1936024435)" },  
    { "trigger": "KNeverAuthenticate (0)" },  
    { "trigger": "KNoAlternatesSelector (0)" },  
    { "trigger": "KNoAnnotationSelector (0)" },  
    { "trigger": "KNoCJKItalicRomanSelector (0)" },  
    { "trigger": "KNoCJKSymbolAlternativesSelector (0)" },  
    { "trigger": "KNoFractionsSelector (0)" },  
    { "trigger": "KNoIdeographicAlternativesSelector (0)" },  
    { "trigger": "KNoOrnamentsSelector (0)" },  
    { "trigger": "KNoRubyKanaSelector (0)" },  
    { "trigger": "KNoStyleOptionsSelector (0)" },  
    { "trigger": "KNoTransliterationSelector (0)" },  
    { "trigger": "KNonFinalSwashesOffSelector (9)" },  
    { "trigger": "KNonFinalSwashesOnSelector (8)" },  
    { "trigger": "KNormalPositionSelector (0)" },  
    { "trigger": "KNumberCaseType (21)" },  
    { "trigger": "KNumberSpacingType (6)" },  
    { "trigger": "KOrdinalsSelector (3)" },  
    { "trigger": "KOrnamentSetsType (16)" },  
    { "trigger": "KOverlappingCharactersType (13)" },  
    { "trigger": "KPROPALDirectionClass (2)" },  
    { "trigger": "KPROPANDirectionClass (6)" },  
    { "trigger": "KPROPBNDirectionClass (19)" },  
    { "trigger": "KPROPCSDirectionClass (7)" },  
    { "trigger": "KPROPCanHangLTMask (16384)" },  
    { "trigger": "KPROPCanHangRBMask (8192)" },  
    { "trigger": "KPROPCurrentVersion (196608)" },  
    { "trigger": "KPROPDirectionMask (31)" },  
    { "trigger": "KPROPENDirectionClass (3)" },  
    { "trigger": "KPROPESDirectionClass (4)" },  
    { "trigger": "KPROPETDirectionClass (5)" },  
    { "trigger": "KPROPIsFloaterMask (32768)" },  
    { "trigger": "KPROPLDirectionClass (0)" },  
    { "trigger": "KPROPLREDirectionClass (13)" },  
    { "trigger": "KPROPLRODirectionClass (14)" },  
    { "trigger": "KPROPNSMDirectionClass (18)" },  
    { "trigger": "KPROPNumDirectionClasses (20)" },  
    { "trigger": "KPROPONDirectionClass (11)" },  
    { "trigger": "KPROPPDFDirectionClass (17)" },  
    { "trigger": "KPROPPSDirectionClass (8)" },  
    { "trigger": "KPROPPairOffsetMask (3840)" },  
    { "trigger": "KPROPPairOffsetShift (8)" },  
    { "trigger": "KPROPPairOffsetSign (7)" },  
    { "trigger": "KPROPRDirectionClass (1)" },  
    { "trigger": "KPROPRLEDirectionClass (15)" },  
    { "trigger": "KPROPRLODirectionClass (16)" },  
    { "trigger": "KPROPRightConnectMask (128)" },  
    { "trigger": "KPROPSDirectionClass (9)" },  
    { "trigger": "KPROPSENDirectionClass (12)" },  
    { "trigger": "KPROPTag (1886547824)" },  
    { "trigger": "KPROPUseRLPairMask (4096)" },  
    { "trigger": "KPROPWSDirectionClass (10)" },  
    { "trigger": "KPROPZeroReserved (96)" },  
    { "trigger": "KPanningMode_SoundField (3)" },  
    { "trigger": "KPanningMode_VectorBasedPanning (4)" },  
    { "trigger": "KParenthesisAnnotationSelector (5)" },  
    { "trigger": "KPartiallyConnectedSelector (1)" },  
    { "trigger": "KPeriodAnnotationSelector (6)" },  
    { "trigger": "KPeriodsToEllipsisOffSelector (11)" },  
    { "trigger": "KPeriodsToEllipsisOnSelector (10)" },  
    { "trigger": "KPiCharactersSelector (2)" },  
    { "trigger": "KPreventOverlapOffSelector (1)" },  
    { "trigger": "KPreventOverlapOnSelector (0)" },  
    { "trigger": "KProportionalCJKRomanSelector (1)" },  
    { "trigger": "KProportionalIdeographsSelector (1)" },  
    { "trigger": "KProportionalKanaSelector (1)" },  
    { "trigger": "KProportionalNumbersSelector (1)" },  
    { "trigger": "KProportionalTextSelector (0)" },  
    { "trigger": "KQuarterWidthNumbersSelector (3)" },  
    { "trigger": "KRareLigaturesOffSelector (5)" },  
    { "trigger": "KRareLigaturesOnSelector (4)" },  
    { "trigger": "KRebusPicturesOffSelector (9)" },  
    { "trigger": "KRebusPicturesOnSelector (8)" },  
    { "trigger": "KRequiredLigaturesOffSelector (1)" },  
    { "trigger": "KRequiredLigaturesOnSelector (0)" },  
    { "trigger": "KRomanNumeralAnnotationSelector (7)" },  
    { "trigger": "KRomanizationToHiraganaSelector (5)" },  
    { "trigger": "KRomanizationToKatakanaSelector (6)" },  
    { "trigger": "KRoundedBoxAnnotationSelector (2)" },  
    { "trigger": "KRubyKanaOffSelector (3)" },  
    { "trigger": "KRubyKanaOnSelector (2)" },  
    { "trigger": "KRubyKanaSelector (1)" },  
    { "trigger": "KRubyKanaType (28)" },  
    { "trigger": "KSCBondStatusLinkInvalid (1)" },  
    { "trigger": "KSCBondStatusNoPartner (2)" },  
    { "trigger": "KSCBondStatusNotInActiveGroup (3)" },  
    { "trigger": "KSCBondStatusOK (0)" },  
    { "trigger": "KSCBondStatusUnknown (999)" },  
    { "trigger": "KSCNetworkConnectionConnected (2)" },  
    { "trigger": "KSCNetworkConnectionConnecting (1)" },  
    { "trigger": "KSCNetworkConnectionDisconnected (0)" },  
    { "trigger": "KSCNetworkConnectionDisconnecting (3)" },  
    { "trigger": "KSCNetworkConnectionInvalid (-1)" },  
    { "trigger": "KSCNetworkConnectionPPPAuthenticating (5)" },  
    { "trigger": "KSCNetworkConnectionPPPConnected (8)" },  
    { "trigger": "KSCNetworkConnectionPPPConnectingLink (2)" },  
    { "trigger": "KSCNetworkConnectionPPPDialOnTraffic (3)" },  
    { "trigger": "KSCNetworkConnectionPPPDisconnected (0)" },  
    { "trigger": "KSCNetworkConnectionPPPDisconnectingLink (10)" },  
    { "trigger": "KSCNetworkConnectionPPPHoldingLinkOff (11)" },  
    { "trigger": "KSCNetworkConnectionPPPInitializing (1)" },  
    { "trigger": "KSCNetworkConnectionPPPNegotiatingLink (4)" },  
    { "trigger": "KSCNetworkConnectionPPPNegotiatingNetwork (7)" },  
    { "trigger": "KSCNetworkConnectionPPPSuspended (12)" },  
    { "trigger": "KSCNetworkConnectionPPPTerminating (9)" },  
    { "trigger": "KSCNetworkConnectionPPPWaitingForCallBack (6)" },  
    { "trigger": "KSCNetworkConnectionPPPWaitingForRedial (13)" },  
    { "trigger": "KSCNetworkFlagsConnectionAutomatic (8)" },  
    { "trigger": "KSCNetworkFlagsConnectionRequired (4)" },  
    { "trigger": "KSCNetworkFlagsInterventionRequired (16)" },  
    { "trigger": "KSCNetworkFlagsIsDirect (131072)" },  
    { "trigger": "KSCNetworkFlagsIsLocalAddress (65536)" },  
    { "trigger": "KSCNetworkFlagsReachable (2)" },  
    { "trigger": "KSCNetworkFlagsTransientConnection (1)" },  
    { "trigger": "KSCNetworkReachabilityFlagsConnectionAutomatic (8)" },  
    { "trigger": "KSCNetworkReachabilityFlagsConnectionOnDemand (32)" },  
    { "trigger": "KSCNetworkReachabilityFlagsConnectionOnTraffic (8)" },  
    { "trigger": "KSCNetworkReachabilityFlagsConnectionRequired (4)" },  
    { "trigger": "KSCNetworkReachabilityFlagsInterventionRequired (16)" },  
    { "trigger": "KSCNetworkReachabilityFlagsIsDirect (131072)" },  
    { "trigger": "KSCNetworkReachabilityFlagsIsLocalAddress (65536)" },  
    { "trigger": "KSCNetworkReachabilityFlagsIsWWAN (262144)" },  
    { "trigger": "KSCNetworkReachabilityFlagsReachable (2)" },  
    { "trigger": "KSCNetworkReachabilityFlagsTransientConnection (1)" },  
    { "trigger": "KSCPreferencesNotificationApply (2)" },  
    { "trigger": "KSCPreferencesNotificationCommit (1)" },  
    { "trigger": "KSCStatusAccessError (1003)" },  
    { "trigger": "KSCStatusConnectionNoService (5001)" },  
    { "trigger": "KSCStatusFailed (1001)" },  
    { "trigger": "KSCStatusInvalidArgument (1002)" },  
    { "trigger": "KSCStatusKeyExists (1005)" },  
    { "trigger": "KSCStatusLocked (1006)" },  
    { "trigger": "KSCStatusMaxLink (3006)" },  
    { "trigger": "KSCStatusNeedLock (1007)" },  
    { "trigger": "KSCStatusNoConfigFile (3003)" },  
    { "trigger": "KSCStatusNoKey (1004)" },  
    { "trigger": "KSCStatusNoLink (3004)" },  
    { "trigger": "KSCStatusNoPrefsSession (3001)" },  
    { "trigger": "KSCStatusNoStoreServer (2002)" },  
    { "trigger": "KSCStatusNoStoreSession (2001)" },  
    { "trigger": "KSCStatusNotifierActive (2003)" },  
    { "trigger": "KSCStatusOK (0)" },  
    { "trigger": "KSCStatusPrefsBusy (3002)" },  
    { "trigger": "KSCStatusReachabilityUnknown (4001)" },  
    { "trigger": "KSCStatusStale (3005)" },  
    { "trigger": "KSFNTLookupSegmentArray (4)" },  
    { "trigger": "KSFNTLookupSegmentSingle (2)" },  
    { "trigger": "KSFNTLookupSimpleArray (0)" },  
    { "trigger": "KSFNTLookupSingleTable (6)" },  
    { "trigger": "KSFNTLookupTrimmedArray (8)" },  
    { "trigger": "KSSLAborted (4)" },  
    { "trigger": "KSSLClientCertNone (0)" },  
    { "trigger": "KSSLClientCertRejected (3)" },  
    { "trigger": "KSSLClientCertRequested (1)" },  
    { "trigger": "KSSLClientCertSent (2)" },  
    { "trigger": "KSSLClientSide (1)" },  
    { "trigger": "KSSLClosed (3)" },  
    { "trigger": "KSSLConnected (2)" },  
    { "trigger": "KSSLDatagramType (1)" },  
    { "trigger": "KSSLHandshake (1)" },  
    { "trigger": "KSSLIdle (0)" },  
    { "trigger": "KSSLProtocol2 (1)" },  
    { "trigger": "KSSLProtocol3 (2)" },  
    { "trigger": "KSSLProtocol3Only (3)" },  
    { "trigger": "KSSLProtocolAll (6)" },  
    { "trigger": "KSSLProtocolUnknown (0)" },  
    { "trigger": "KSSLServerSide (0)" },  
    { "trigger": "KSSLSessionOptionBreakOnCertRequested (1)" },  
    { "trigger": "KSSLSessionOptionBreakOnClientAuth (2)" },  
    { "trigger": "KSSLSessionOptionBreakOnServerAuth (0)" },  
    { "trigger": "KSSLStreamType (0)" },  
    { "trigger": "KSTClassDeletedGlyph (2)" },  
    { "trigger": "KSTClassEndOfLine (3)" },  
    { "trigger": "KSTClassEndOfText (0)" },  
    { "trigger": "KSTClassOutOfBounds (1)" },  
    { "trigger": "KSTLigActionMask (16383)" },  
    { "trigger": "KSTMarkEnd (8192)" },  
    { "trigger": "KSTNoAdvance (16384)" },  
    { "trigger": "KSTRearrVerbMask (15)" },  
    { "trigger": "KSTSetMark (32768)" },  
    { "trigger": "KSTXHasLigAction (8192)" },  
    { "trigger": "KSecAttrAccessGroup (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessible (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessibleAfterFirstUnlock (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessibleAfterFirstUnlockThisDeviceOnly (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessibleAlways (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessibleAlwaysThisDeviceOnly (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessibleWhenUnlocked (CFTypeRef)" },  
    { "trigger": "KSecAttrAccessibleWhenUnlockedThisDeviceOnly (CFTypeRef)" },  
    { "trigger": "KSecAttrAccount (CFTypeRef)" },  
    { "trigger": "KSecAttrApplicationLabel (CFTypeRef)" },  
    { "trigger": "KSecAttrApplicationTag (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationType (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeDPA (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeDefault (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeHTMLForm (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeHTTPBasic (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeHTTPDigest (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeMSN (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeNTLM (CFTypeRef)" },  
    { "trigger": "KSecAttrAuthenticationTypeRPA (CFTypeRef)" },  
    { "trigger": "KSecAttrCanDecrypt (CFTypeRef)" },  
    { "trigger": "KSecAttrCanDerive (CFTypeRef)" },  
    { "trigger": "KSecAttrCanEncrypt (CFTypeRef)" },  
    { "trigger": "KSecAttrCanSign (CFTypeRef)" },  
    { "trigger": "KSecAttrCanUnwrap (CFTypeRef)" },  
    { "trigger": "KSecAttrCanVerify (CFTypeRef)" },  
    { "trigger": "KSecAttrCanWrap (CFTypeRef)" },  
    { "trigger": "KSecAttrCertificateEncoding (CFTypeRef)" },  
    { "trigger": "KSecAttrCertificateType (CFTypeRef)" },  
    { "trigger": "KSecAttrComment (CFTypeRef)" },  
    { "trigger": "KSecAttrCreationDate (CFTypeRef)" },  
    { "trigger": "KSecAttrCreator (CFTypeRef)" },  
    { "trigger": "KSecAttrDescription (CFTypeRef)" },  
    { "trigger": "KSecAttrEffectiveKeySize (CFTypeRef)" },  
    { "trigger": "KSecAttrGeneric (CFTypeRef)" },  
    { "trigger": "KSecAttrIsInvisible (CFTypeRef)" },  
    { "trigger": "KSecAttrIsNegative (CFTypeRef)" },  
    { "trigger": "KSecAttrIsPermanent (CFTypeRef)" },  
    { "trigger": "KSecAttrIssuer (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyClass (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyClassPrivate (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyClassPublic (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyClassSymmetric (CFTypeRef)" },  
    { "trigger": "KSecAttrKeySizeInBits (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyType (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyTypeEC (CFTypeRef)" },  
    { "trigger": "KSecAttrKeyTypeRSA (CFTypeRef)" },  
    { "trigger": "KSecAttrLabel (CFTypeRef)" },  
    { "trigger": "KSecAttrModificationDate (CFTypeRef)" },  
    { "trigger": "KSecAttrPath (CFTypeRef)" },  
    { "trigger": "KSecAttrPort (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocol (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolAFP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolAppleTalk (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolDAAP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolEPPC (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolFTP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolFTPAccount (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolFTPProxy (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolFTPS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolHTTP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolHTTPProxy (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolHTTPS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolHTTPSProxy (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolIMAP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolIMAPS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolIPP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolIRC (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolIRCS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolLDAP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolLDAPS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolNNTP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolNNTPS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolPOP3 (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolPOP3S (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolRTSP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolRTSPProxy (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolSMB (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolSMTP (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolSOCKS (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolSSH (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolTelnet (CFTypeRef)" },  
    { "trigger": "KSecAttrProtocolTelnetS (CFTypeRef)" },  
    { "trigger": "KSecAttrPublicKeyHash (CFTypeRef)" },  
    { "trigger": "KSecAttrSecurityDomain (CFTypeRef)" },  
    { "trigger": "KSecAttrSerialNumber (CFTypeRef)" },  
    { "trigger": "KSecAttrServer (CFTypeRef)" },  
    { "trigger": "KSecAttrService (CFTypeRef)" },  
    { "trigger": "KSecAttrSubject (CFTypeRef)" },  
    { "trigger": "KSecAttrSubjectKeyID (CFTypeRef)" },  
    { "trigger": "KSecAttrType (CFTypeRef)" },  
    { "trigger": "KSecClass (CFTypeRef)" },  
    { "trigger": "KSecClassCertificate (CFTypeRef)" },  
    { "trigger": "KSecClassGenericPassword (CFTypeRef)" },  
    { "trigger": "KSecClassIdentity (CFTypeRef)" },  
    { "trigger": "KSecClassInternetPassword (CFTypeRef)" },  
    { "trigger": "KSecClassKey (CFTypeRef)" },  
    { "trigger": "KSecImportExportPassphrase (CFStringRef)" },  
    { "trigger": "KSecImportItemCertChain (CFStringRef)" },  
    { "trigger": "KSecImportItemIdentity (CFStringRef)" },  
    { "trigger": "KSecImportItemKeyID (CFStringRef)" },  
    { "trigger": "KSecImportItemLabel (CFStringRef)" },  
    { "trigger": "KSecImportItemTrust (CFStringRef)" },  
    { "trigger": "KSecMatchCaseInsensitive (CFTypeRef)" },  
    { "trigger": "KSecMatchEmailAddressIfPresent (CFTypeRef)" },  
    { "trigger": "KSecMatchIssuers (CFTypeRef)" },  
    { "trigger": "KSecMatchItemList (CFTypeRef)" },  
    { "trigger": "KSecMatchLimit (CFTypeRef)" },  
    { "trigger": "KSecMatchLimitAll (CFTypeRef)" },  
    { "trigger": "KSecMatchLimitOne (CFTypeRef)" },  
    { "trigger": "KSecMatchPolicy (CFTypeRef)" },  
    { "trigger": "KSecMatchSearchList (CFTypeRef)" },  
    { "trigger": "KSecMatchSubjectContains (CFTypeRef)" },  
    { "trigger": "KSecMatchTrustedOnly (CFTypeRef)" },  
    { "trigger": "KSecMatchValidOnDate (CFTypeRef)" },  
    { "trigger": "KSecPaddingNone (0)" },  
    { "trigger": "KSecPaddingOAEP (2)" },  
    { "trigger": "KSecPaddingPKCS1 (1)" },  
    { "trigger": "KSecPaddingPKCS1MD2 (32768)" },  
    { "trigger": "KSecPaddingPKCS1MD5 (32769)" },  
    { "trigger": "KSecPaddingPKCS1SHA1 (32770)" },  
    { "trigger": "KSecPrivateKeyAttrs (CFTypeRef)" },  
    { "trigger": "KSecPublicKeyAttrs (CFTypeRef)" },  
    { "trigger": "KSecRandomDefault (SecRandomRef)" },  
    { "trigger": "KSecReturnAttributes (CFTypeRef)" },  
    { "trigger": "KSecReturnData (CFTypeRef)" },  
    { "trigger": "KSecReturnPersistentRef (CFTypeRef)" },  
    { "trigger": "KSecReturnRef (CFTypeRef)" },  
    { "trigger": "KSecTrustResultConfirm (2)" },  
    { "trigger": "KSecTrustResultDeny (3)" },  
    { "trigger": "KSecTrustResultFatalTrustFailure (6)" },  
    { "trigger": "KSecTrustResultInvalid (0)" },  
    { "trigger": "KSecTrustResultOtherError (7)" },  
    { "trigger": "KSecTrustResultProceed (1)" },  
    { "trigger": "KSecTrustResultRecoverableTrustFailure (5)" },  
    { "trigger": "KSecTrustResultUnspecified (4)" },  
    { "trigger": "KSecUseItemList (CFTypeRef)" },  
    { "trigger": "KSecValueData (CFTypeRef)" },  
    { "trigger": "KSecValuePersistentRef (CFTypeRef)" },  
    { "trigger": "KSecValueRef (CFTypeRef)" },  
    { "trigger": "KSequenceTrackProperty_AutomatedParameters (4)" },  
    { "trigger": "KSequenceTrackProperty_LoopInfo (0)" },  
    { "trigger": "KSequenceTrackProperty_MuteStatus (2)" },  
    { "trigger": "KSequenceTrackProperty_OffsetTime (1)" },  
    { "trigger": "KSequenceTrackProperty_SoloStatus (3)" },  
    { "trigger": "KSequenceTrackProperty_TimeResolution (6)" },  
    { "trigger": "KSequenceTrackProperty_TrackLength (5)" },  
    { "trigger": "KShowDiacriticsSelector (0)" },  
    { "trigger": "KSimplifiedCharactersSelector (1)" },  
    { "trigger": "KSlashToDivideOffSelector (5)" },  
    { "trigger": "KSlashToDivideOnSelector (4)" },  
    { "trigger": "KSlashedZeroOffSelector (5)" },  
    { "trigger": "KSlashedZeroOnSelector (4)" },  
    { "trigger": "KSmallCapsSelector (3)" },  
    { "trigger": "KSmartQuotesOffSelector (9)" },  
    { "trigger": "KSmartQuotesOnSelector (8)" },  
    { "trigger": "KSmartSwashType (8)" },  
    { "trigger": "KSquaredLigaturesOffSelector (13)" },  
    { "trigger": "KSquaredLigaturesOnSelector (12)" },  
    { "trigger": "KStyleOptionsType (19)" },  
    { "trigger": "KSubstituteVerticalFormsOffSelector (1)" },  
    { "trigger": "KSubstituteVerticalFormsOnSelector (0)" },  
    { "trigger": "KSuperiorsSelector (1)" },  
    { "trigger": "KSymbolLigaturesOffSelector (17)" },  
    { "trigger": "KSymbolLigaturesOnSelector (16)" },  
    { "trigger": "KSystemSoundID_Vibrate (4095)" },  
    { "trigger": "KTLSProtocol1 (4)" },  
    { "trigger": "KTLSProtocol11 (7)" },  
    { "trigger": "KTLSProtocol12 (8)" },  
    { "trigger": "KTLSProtocol1Only (5)" },  
    { "trigger": "KTallCapsSelector (5)" },  
    { "trigger": "KTextSpacingType (22)" },  
    { "trigger": "KThirdWidthNumbersSelector (2)" },  
    { "trigger": "KTitlingCapsSelector (4)" },  
    { "trigger": "KTraditionalAltFiveSelector (9)" },  
    { "trigger": "KTraditionalAltFourSelector (8)" },  
    { "trigger": "KTraditionalAltOneSelector (5)" },  
    { "trigger": "KTraditionalAltThreeSelector (7)" },  
    { "trigger": "KTraditionalAltTwoSelector (6)" },  
    { "trigger": "KTraditionalCharactersSelector (0)" },  
    { "trigger": "KTranscodingCompositionOffSelector (5)" },  
    { "trigger": "KTranscodingCompositionOnSelector (4)" },  
    { "trigger": "KTransliterationType (23)" },  
    { "trigger": "KTryAuthenticate (2)" },  
    { "trigger": "KTypographicExtrasType (14)" },  
    { "trigger": "KUTExportedTypeDeclarationsKey (CFStringRef)" },  
    { "trigger": "KUTImportedTypeDeclarationsKey (CFStringRef)" },  
    { "trigger": "KUTTagClassFilenameExtension (CFStringRef)" },  
    { "trigger": "KUTTagClassMIMEType (CFStringRef)" },  
    { "trigger": "KUTTypeAliasFile (CFStringRef)" },  
    { "trigger": "KUTTypeAliasRecord (CFStringRef)" },  
    { "trigger": "KUTTypeAppleICNS (CFStringRef)" },  
    { "trigger": "KUTTypeAppleProtectedMPEG4Audio (CFStringRef)" },  
    { "trigger": "KUTTypeApplication (CFStringRef)" },  
    { "trigger": "KUTTypeApplicationBundle (CFStringRef)" },  
    { "trigger": "KUTTypeApplicationFile (CFStringRef)" },  
    { "trigger": "KUTTypeArchive (CFStringRef)" },  
    { "trigger": "KUTTypeAudio (CFStringRef)" },  
    { "trigger": "KUTTypeAudiovisualContent (CFStringRef)" },  
    { "trigger": "KUTTypeBMP (CFStringRef)" },  
    { "trigger": "KUTTypeBundle (CFStringRef)" },  
    { "trigger": "KUTTypeCHeader (CFStringRef)" },  
    { "trigger": "KUTTypeCPlusPlusHeader (CFStringRef)" },  
    { "trigger": "KUTTypeCPlusPlusSource (CFStringRef)" },  
    { "trigger": "KUTTypeCSource (CFStringRef)" },  
    { "trigger": "KUTTypeCompositeContent (CFStringRef)" },  
    { "trigger": "KUTTypeConformsToKey (CFStringRef)" },  
    { "trigger": "KUTTypeContact (CFStringRef)" },  
    { "trigger": "KUTTypeContent (CFStringRef)" },  
    { "trigger": "KUTTypeData (CFStringRef)" },  
    { "trigger": "KUTTypeDescriptionKey (CFStringRef)" },  
    { "trigger": "KUTTypeDirectory (CFStringRef)" },  
    { "trigger": "KUTTypeDiskImage (CFStringRef)" },  
    { "trigger": "KUTTypeFileURL (CFStringRef)" },  
    { "trigger": "KUTTypeFlatRTFD (CFStringRef)" },  
    { "trigger": "KUTTypeFolder (CFStringRef)" },  
    { "trigger": "KUTTypeFramework (CFStringRef)" },  
    { "trigger": "KUTTypeGIF (CFStringRef)" },  
    { "trigger": "KUTTypeHTML (CFStringRef)" },  
    { "trigger": "KUTTypeICO (CFStringRef)" },  
    { "trigger": "KUTTypeIconFileKey (CFStringRef)" },  
    { "trigger": "KUTTypeIdentifierKey (CFStringRef)" },  
    { "trigger": "KUTTypeImage (CFStringRef)" },  
    { "trigger": "KUTTypeInkText (CFStringRef)" },  
    { "trigger": "KUTTypeItem (CFStringRef)" },  
    { "trigger": "KUTTypeJPEG (CFStringRef)" },  
    { "trigger": "KUTTypeJPEG2000 (CFStringRef)" },  
    { "trigger": "KUTTypeJavaSource (CFStringRef)" },  
    { "trigger": "KUTTypeMP3 (CFStringRef)" },  
    { "trigger": "KUTTypeMPEG (CFStringRef)" },  
    { "trigger": "KUTTypeMPEG4 (CFStringRef)" },  
    { "trigger": "KUTTypeMPEG4Audio (CFStringRef)" },  
    { "trigger": "KUTTypeMessage (CFStringRef)" },  
    { "trigger": "KUTTypeMountPoint (CFStringRef)" },  
    { "trigger": "KUTTypeMovie (CFStringRef)" },  
    { "trigger": "KUTTypeObjectiveCPlusPlusSource (CFStringRef)" },  
    { "trigger": "KUTTypeObjectiveCSource (CFStringRef)" },  
    { "trigger": "KUTTypePDF (CFStringRef)" },  
    { "trigger": "KUTTypePICT (CFStringRef)" },  
    { "trigger": "KUTTypePNG (CFStringRef)" },  
    { "trigger": "KUTTypePackage (CFStringRef)" },  
    { "trigger": "KUTTypePlainText (CFStringRef)" },  
    { "trigger": "KUTTypeQuickTimeImage (CFStringRef)" },  
    { "trigger": "KUTTypeQuickTimeMovie (CFStringRef)" },  
    { "trigger": "KUTTypeRTF (CFStringRef)" },  
    { "trigger": "KUTTypeRTFD (CFStringRef)" },  
    { "trigger": "KUTTypeReferenceURLKey (CFStringRef)" },  
    { "trigger": "KUTTypeResolvable (CFStringRef)" },  
    { "trigger": "KUTTypeSourceCode (CFStringRef)" },  
    { "trigger": "KUTTypeSymLink (CFStringRef)" },  
    { "trigger": "KUTTypeTIFF (CFStringRef)" },  
    { "trigger": "KUTTypeTXNTextAndMultimediaData (CFStringRef)" },  
    { "trigger": "KUTTypeTagSpecificationKey (CFStringRef)" },  
    { "trigger": "KUTTypeText (CFStringRef)" },  
    { "trigger": "KUTTypeURL (CFStringRef)" },  
    { "trigger": "KUTTypeUTF16ExternalPlainText (CFStringRef)" },  
    { "trigger": "KUTTypeUTF16PlainText (CFStringRef)" },  
    { "trigger": "KUTTypeUTF8PlainText (CFStringRef)" },  
    { "trigger": "KUTTypeVCard (CFStringRef)" },  
    { "trigger": "KUTTypeVersionKey (CFStringRef)" },  
    { "trigger": "KUTTypeVideo (CFStringRef)" },  
    { "trigger": "KUTTypeVolume (CFStringRef)" },  
    { "trigger": "KUTTypeWebArchive (CFStringRef)" },  
    { "trigger": "KUTTypeXML (CFStringRef)" },  
    { "trigger": "KUnconnectedSelector (0)" },  
    { "trigger": "KUnicodeDecompositionType (27)" },  
    { "trigger": "KUpperAndLowerCaseSelector (0)" },  
    { "trigger": "KUpperCaseNumbersSelector (1)" },  
    { "trigger": "KVerticalFractionsSelector (1)" },  
    { "trigger": "KVerticalPositionType (10)" },  
    { "trigger": "KVerticalSubstitutionType (4)" },  
    { "trigger": "KWordFinalSwashesOffSelector (3)" },  
    { "trigger": "KWordFinalSwashesOnSelector (2)" },  
    { "trigger": "KWordInitialSwashesOffSelector (1)" },  
    { "trigger": "KWordInitialSwashesOnSelector (0)" },  
    { "trigger": "MFMailComposeErrorCodeSaveFailed (0)" },  
    { "trigger": "MFMailComposeErrorCodeSendFailed (1)" },  
    { "trigger": "MFMailComposeErrorDomain (NSString*)" },  
    { "trigger": "MFMailComposeResultCancelled (0)" },  
    { "trigger": "MFMailComposeResultFailed (3)" },  
    { "trigger": "MFMailComposeResultSaved (1)" },  
    { "trigger": "MFMailComposeResultSent (2)" },  
    { "trigger": "MFMailComposeViewController" },  
    { "trigger": "MFMailComposeViewControllerDelegate" },  
    { "trigger": "MFMailComposeViewController.canSendMail" },  
    { "trigger": "MFMessageComposeViewController" },  
    { "trigger": "MFMessageComposeViewControllerDelegate" },  
    { "trigger": "MFMessageComposeViewControllerTextMessageAvailabilityDidChangeNotification (NSString*)" },  
    { "trigger": "MFMessageComposeViewControllerTextMessageAvailabilityKey (NSString*)" },  
    { "trigger": "MFMessageComposeViewController.canSendText" },  
    { "trigger": "MIDIClientCreate", "contents": "MIDIClientCreate(${1:CFStringRef name}, ${2:MIDINotifyProc notifyProc}, ${3:void* notifyRefCon}, ${4:MIDIClientRef* outClient})" },  
    { "trigger": "MIDIClientDispose", "contents": "MIDIClientDispose(${1:MIDIClientRef client})" },  
    { "trigger": "MIDIDestinationCreate", "contents": "MIDIDestinationCreate(${1:MIDIClientRef client}, ${2:CFStringRef name}, ${3:MIDIReadProc readProc}, ${4:void* refCon}, ${5:MIDIEndpointRef* outDest})" },  
    { "trigger": "MIDIDeviceAddEntity", "contents": "MIDIDeviceAddEntity(${1:MIDIDeviceRef device}, ${2:CFStringRef name}, ${3:Boolean embedded}, ${4:ItemCount numSourceEndpoints}, ${5:ItemCount numDestinationEndpoints}, ${6:MIDIEntityRef* newEntity})" },  
    { "trigger": "MIDIDeviceCreate", "contents": "MIDIDeviceCreate(${1:MIDIDriverRef owner}, ${2:CFStringRef name}, ${3:CFStringRef manufacturer}, ${4:CFStringRef model}, ${5:MIDIDeviceRef* outDevice})" },  
    { "trigger": "MIDIDeviceDispose", "contents": "MIDIDeviceDispose(${1:MIDIDeviceRef device})" },  
    { "trigger": "MIDIDeviceGetEntity", "contents": "MIDIDeviceGetEntity(${1:MIDIDeviceRef device}, ${2:ItemCount entityIndex0})" },  
    { "trigger": "MIDIDeviceGetNumberOfEntities", "contents": "MIDIDeviceGetNumberOfEntities(${1:MIDIDeviceRef device})" },  
    { "trigger": "MIDIDeviceListAddDevice", "contents": "MIDIDeviceListAddDevice(${1:MIDIDeviceListRef devList}, ${2:MIDIDeviceRef dev})" },  
    { "trigger": "MIDIDeviceListDispose", "contents": "MIDIDeviceListDispose(${1:MIDIDeviceListRef devList})" },  
    { "trigger": "MIDIDeviceListGetDevice", "contents": "MIDIDeviceListGetDevice(${1:MIDIDeviceListRef devList}, ${2:ItemCount index0})" },  
    { "trigger": "MIDIDeviceListGetNumberOfDevices", "contents": "MIDIDeviceListGetNumberOfDevices(${1:MIDIDeviceListRef devList})" },  
    { "trigger": "MIDIDeviceRemoveEntity", "contents": "MIDIDeviceRemoveEntity(${1:MIDIDeviceRef device}, ${2:MIDIEntityRef entity})" },  
    { "trigger": "MIDIEndpointDispose", "contents": "MIDIEndpointDispose(${1:MIDIEndpointRef endpt})" },  
    { "trigger": "MIDIEndpointGetEntity", "contents": "MIDIEndpointGetEntity(${1:MIDIEndpointRef inEndpoint}, ${2:MIDIEntityRef* outEntity})" },  
    { "trigger": "MIDIEndpointGetRefCons", "contents": "MIDIEndpointGetRefCons(${1:MIDIEndpointRef endpt}, ${2:void** ref1}, ${3:void** ref2})" },  
    { "trigger": "MIDIEndpointSetRefCons", "contents": "MIDIEndpointSetRefCons(${1:MIDIEndpointRef endpt}, ${2:void* ref1}, ${3:void* ref2})" },  
    { "trigger": "MIDIEntityAddOrRemoveEndpoints", "contents": "MIDIEntityAddOrRemoveEndpoints(${1:MIDIEntityRef entity}, ${2:ItemCount numSourceEndpoints}, ${3:ItemCount numDestinationEndpoints})" },  
    { "trigger": "MIDIEntityGetDestination", "contents": "MIDIEntityGetDestination(${1:MIDIEntityRef entity}, ${2:ItemCount destIndex0})" },  
    { "trigger": "MIDIEntityGetDevice", "contents": "MIDIEntityGetDevice(${1:MIDIEntityRef inEntity}, ${2:MIDIDeviceRef* outDevice})" },  
    { "trigger": "MIDIEntityGetNumberOfDestinations", "contents": "MIDIEntityGetNumberOfDestinations(${1:MIDIEntityRef entity})" },  
    { "trigger": "MIDIEntityGetNumberOfSources", "contents": "MIDIEntityGetNumberOfSources(${1:MIDIEntityRef entity})" },  
    { "trigger": "MIDIEntityGetSource", "contents": "MIDIEntityGetSource(${1:MIDIEntityRef entity}, ${2:ItemCount sourceIndex0})" },  
    { "trigger": "MIDIExternalDeviceCreate", "contents": "MIDIExternalDeviceCreate(${1:CFStringRef name}, ${2:CFStringRef manufacturer}, ${3:CFStringRef model}, ${4:MIDIDeviceRef* outDevice})" },  
    { "trigger": "MIDIFlushOutput", "contents": "MIDIFlushOutput(${1:MIDIEndpointRef dest})" },  
    { "trigger": "MIDIGetDestination", "contents": "MIDIGetDestination(${1:ItemCount destIndex0})" },  
    { "trigger": "MIDIGetDevice", "contents": "MIDIGetDevice(${1:ItemCount deviceIndex0})" },  
    { "trigger": "MIDIGetDriverDeviceList", "contents": "MIDIGetDriverDeviceList(${1:MIDIDriverRef driver})" },  
    { "trigger": "MIDIGetDriverIORunLoop" },  
    { "trigger": "MIDIGetExternalDevice", "contents": "MIDIGetExternalDevice(${1:ItemCount deviceIndex0})" },  
    { "trigger": "MIDIGetNumberOfDestinations" },  
    { "trigger": "MIDIGetNumberOfDevices" },  
    { "trigger": "MIDIGetNumberOfExternalDevices" },  
    { "trigger": "MIDIGetNumberOfSources" },  
    { "trigger": "MIDIGetSource", "contents": "MIDIGetSource(${1:ItemCount sourceIndex0})" },  
    { "trigger": "MIDIInputPortCreate", "contents": "MIDIInputPortCreate(${1:MIDIClientRef client}, ${2:CFStringRef portName}, ${3:MIDIReadProc readProc}, ${4:void* refCon}, ${5:MIDIPortRef* outPort})" },  
    { "trigger": "MIDINetworkBonjourServiceType (NSString*)" },  
    { "trigger": "MIDINetworkConnection" },  
    { "trigger": "MIDINetworkConnectionPolicy_Anyone (2)" },  
    { "trigger": "MIDINetworkConnectionPolicy_HostsInContactList (1)" },  
    { "trigger": "MIDINetworkConnectionPolicy_NoOne (0)" },  
    { "trigger": "MIDINetworkConnection.connectionWithHost:", "contents": "MIDINetworkConnection.connectionWithHost:(${1:MIDINetworkHost* host})" },  
    { "trigger": "MIDINetworkHost" },  
    { "trigger": "MIDINetworkHost.hostWithName:address:port:", "contents": "MIDINetworkHost.hostWithName:address:port:(${1:NSString* name}, address:${2:NSString* address}, port:${3:NSUInteger port})" },  
    { "trigger": "MIDINetworkHost.hostWithName:netService:", "contents": "MIDINetworkHost.hostWithName:netService:(${1:NSString* name}, netService:${2:NSNetService* netService})" },  
    { "trigger": "MIDINetworkHost.hostWithName:netServiceName:netServiceDomain:", "contents": "MIDINetworkHost.hostWithName:netServiceName:netServiceDomain:(${1:NSString* name}, netServiceName:${2:NSString* netServiceName}, netServiceDomain:${3:NSString* netServiceDomain})" },  
    { "trigger": "MIDINetworkNotificationContactsDidChange (NSString*)" },  
    { "trigger": "MIDINetworkNotificationSessionDidChange (NSString*)" },  
    { "trigger": "MIDINetworkSession" },  
    { "trigger": "MIDINetworkSession.defaultSession" },  
    { "trigger": "MIDIObjectFindByUniqueID", "contents": "MIDIObjectFindByUniqueID(${1:MIDIUniqueID inUniqueID}, ${2:MIDIObjectRef* outObject}, ${3:MIDIObjectType* outObjectType})" },  
    { "trigger": "MIDIObjectGetDataProperty", "contents": "MIDIObjectGetDataProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDataRef* outData})" },  
    { "trigger": "MIDIObjectGetDictionaryProperty", "contents": "MIDIObjectGetDictionaryProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDictionaryRef* outDict})" },  
    { "trigger": "MIDIObjectGetIntegerProperty", "contents": "MIDIObjectGetIntegerProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:SInt32* outValue})" },  
    { "trigger": "MIDIObjectGetProperties", "contents": "MIDIObjectGetProperties(${1:MIDIObjectRef obj}, ${2:CFPropertyListRef* outProperties}, ${3:Boolean deep})" },  
    { "trigger": "MIDIObjectGetStringProperty", "contents": "MIDIObjectGetStringProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFStringRef* str})" },  
    { "trigger": "MIDIObjectRemoveProperty", "contents": "MIDIObjectRemoveProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID})" },  
    { "trigger": "MIDIObjectSetDataProperty", "contents": "MIDIObjectSetDataProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDataRef data})" },  
    { "trigger": "MIDIObjectSetDictionaryProperty", "contents": "MIDIObjectSetDictionaryProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDictionaryRef data})" },  
    { "trigger": "MIDIObjectSetIntegerProperty", "contents": "MIDIObjectSetIntegerProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:SInt32 value})" },  
    { "trigger": "MIDIObjectSetStringProperty", "contents": "MIDIObjectSetStringProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFStringRef str})" },  
    { "trigger": "MIDIOutputPortCreate", "contents": "MIDIOutputPortCreate(${1:MIDIClientRef client}, ${2:CFStringRef portName}, ${3:MIDIPortRef* outPort})" },  
    { "trigger": "MIDIPacketListAdd", "contents": "MIDIPacketListAdd(${1:MIDIPacketList* pktlist}, ${2:ByteCount listSize}, ${3:MIDIPacket* curPacket}, ${4:MIDITimeStamp time}, ${5:ByteCount nData}, ${6:Byte* data})" },  
    { "trigger": "MIDIPacketListInit", "contents": "MIDIPacketListInit(${1:MIDIPacketList* pktlist})" },  
    { "trigger": "MIDIPortConnectSource", "contents": "MIDIPortConnectSource(${1:MIDIPortRef port}, ${2:MIDIEndpointRef source}, ${3:void* connRefCon})" },  
    { "trigger": "MIDIPortDisconnectSource", "contents": "MIDIPortDisconnectSource(${1:MIDIPortRef port}, ${2:MIDIEndpointRef source})" },  
    { "trigger": "MIDIPortDispose", "contents": "MIDIPortDispose(${1:MIDIPortRef port})" },  
    { "trigger": "MIDIReceived", "contents": "MIDIReceived(${1:MIDIEndpointRef src}, ${2:MIDIPacketList* pktlist})" },  
    { "trigger": "MIDIRestart" },  
    { "trigger": "MIDISend", "contents": "MIDISend(${1:MIDIPortRef port}, ${2:MIDIEndpointRef dest}, ${3:MIDIPacketList* pktlist})" },  
    { "trigger": "MIDISendSysex", "contents": "MIDISendSysex(${1:MIDISysexSendRequest* request})" },  
    { "trigger": "MIDISetupAddDevice", "contents": "MIDISetupAddDevice(${1:MIDIDeviceRef device})" },  
    { "trigger": "MIDISetupAddExternalDevice", "contents": "MIDISetupAddExternalDevice(${1:MIDIDeviceRef device})" },  
    { "trigger": "MIDISetupRemoveDevice", "contents": "MIDISetupRemoveDevice(${1:MIDIDeviceRef device})" },  
    { "trigger": "MIDISetupRemoveExternalDevice", "contents": "MIDISetupRemoveExternalDevice(${1:MIDIDeviceRef device})" },  
    { "trigger": "MIDISourceCreate", "contents": "MIDISourceCreate(${1:MIDIClientRef client}, ${2:CFStringRef name}, ${3:MIDIEndpointRef* outSrc})" },  
    { "trigger": "MIDIThruConnectionCreate", "contents": "MIDIThruConnectionCreate(${1:CFStringRef inPersistentOwnerID}, ${2:CFDataRef inConnectionParams}, ${3:MIDIThruConnectionRef* outConnection})" },  
    { "trigger": "MIDIThruConnectionDispose", "contents": "MIDIThruConnectionDispose(${1:MIDIThruConnectionRef connection})" },  
    { "trigger": "MIDIThruConnectionFind", "contents": "MIDIThruConnectionFind(${1:CFStringRef inPersistentOwnerID}, ${2:CFDataRef* outConnectionList})" },  
    { "trigger": "MIDIThruConnectionGetParams", "contents": "MIDIThruConnectionGetParams(${1:MIDIThruConnectionRef connection}, ${2:CFDataRef* outConnectionParams})" },  
    { "trigger": "MIDIThruConnectionParamsInitialize", "contents": "MIDIThruConnectionParamsInitialize(${1:MIDIThruConnectionParams* inConnectionParams})" },  
    { "trigger": "MIDIThruConnectionSetParams", "contents": "MIDIThruConnectionSetParams(${1:MIDIThruConnectionRef connection}, ${2:CFDataRef inConnectionParams})" },  
    { "trigger": "MIMEType" },  
    { "trigger": "MKAnnotation" },  
    { "trigger": "MKAnnotationCalloutInfoDidChangeNotification (NSString*)" },  
    { "trigger": "MKAnnotationView" },  
    { "trigger": "MKAnnotationViewDragStateCanceling (3)" },  
    { "trigger": "MKAnnotationViewDragStateDragging (2)" },  
    { "trigger": "MKAnnotationViewDragStateEnding (4)" },  
    { "trigger": "MKAnnotationViewDragStateNone (0)" },  
    { "trigger": "MKAnnotationViewDragStateStarting (1)" },  
    { "trigger": "MKCircle" },  
    { "trigger": "MKCircleView" },  
    { "trigger": "MKCircle.circleWithCenterCoordinate:radius:", "contents": "MKCircle.circleWithCenterCoordinate:radius:(${1:CLLocationCoordinate2D coord}, radius:${2:CLLocationDistance radius})" },  
    { "trigger": "MKCircle.circleWithMapRect:", "contents": "MKCircle.circleWithMapRect:(${1:MKMapRect mapRect})" },  
    { "trigger": "MKCoordinateForMapPoint", "contents": "MKCoordinateForMapPoint(${1:MKMapPoint mapPoint})" },  
    { "trigger": "MKCoordinateRegionForMapRect", "contents": "MKCoordinateRegionForMapRect(${1:MKMapRect rect})" },  
    { "trigger": "MKCoordinateRegionMake", "contents": "MKCoordinateRegionMake(${1:CLLocationCoordinate2D centerCoordinate}, ${2:MKCoordinateSpan span})" },  
    { "trigger": "MKCoordinateRegionMakeWithDistance", "contents": "MKCoordinateRegionMakeWithDistance(${1:CLLocationCoordinate2D centerCoordinate}, ${2:CLLocationDistance latitudinalMeters}, ${3:CLLocationDistance longitudinalMeters})" },  
    { "trigger": "MKCoordinateSpanMake", "contents": "MKCoordinateSpanMake(${1:CLLocationDegrees latitudeDelta}, ${2:CLLocationDegrees longitudeDelta})" },  
    { "trigger": "MKErrorDomain (NSString*)" },  
    { "trigger": "MKErrorLoadingThrottled (3)" },  
    { "trigger": "MKErrorPlacemarkNotFound (4)" },  
    { "trigger": "MKErrorServerFailure (2)" },  
    { "trigger": "MKErrorUnknown (1)" },  
    { "trigger": "MKMapPointEqualToPoint", "contents": "MKMapPointEqualToPoint(${1:MKMapPoint point1}, ${2:MKMapPoint point2})" },  
    { "trigger": "MKMapPointForCoordinate", "contents": "MKMapPointForCoordinate(${1:CLLocationCoordinate2D coordinate})" },  
    { "trigger": "MKMapPointMake", "contents": "MKMapPointMake(${1:double x}, ${2:double y})" },  
    { "trigger": "MKMapPointsPerMeterAtLatitude", "contents": "MKMapPointsPerMeterAtLatitude(${1:CLLocationDegrees latitude})" },  
    { "trigger": "MKMapRectContainsPoint", "contents": "MKMapRectContainsPoint(${1:MKMapRect rect}, ${2:MKMapPoint point})" },  
    { "trigger": "MKMapRectContainsRect", "contents": "MKMapRectContainsRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})" },  
    { "trigger": "MKMapRectDivide", "contents": "MKMapRectDivide(${1:MKMapRect rect}, ${2:MKMapRect* slice}, ${3:MKMapRect* remainder}, ${4:double amount}, ${5:CGRectEdge edge})" },  
    { "trigger": "MKMapRectEqualToRect", "contents": "MKMapRectEqualToRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})" },  
    { "trigger": "MKMapRectGetHeight", "contents": "MKMapRectGetHeight(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetMaxX", "contents": "MKMapRectGetMaxX(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetMaxY", "contents": "MKMapRectGetMaxY(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetMidX", "contents": "MKMapRectGetMidX(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetMidY", "contents": "MKMapRectGetMidY(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetMinX", "contents": "MKMapRectGetMinX(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetMinY", "contents": "MKMapRectGetMinY(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectGetWidth", "contents": "MKMapRectGetWidth(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectInset", "contents": "MKMapRectInset(${1:MKMapRect rect}, ${2:double dx}, ${3:double dy})" },  
    { "trigger": "MKMapRectIntersection", "contents": "MKMapRectIntersection(${1:MKMapRect rect1}, ${2:MKMapRect rect2})" },  
    { "trigger": "MKMapRectIntersectsRect", "contents": "MKMapRectIntersectsRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})" },  
    { "trigger": "MKMapRectIsEmpty", "contents": "MKMapRectIsEmpty(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectIsNull", "contents": "MKMapRectIsNull(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectMake", "contents": "MKMapRectMake(${1:double x}, ${2:double y}, ${3:double width}, ${4:double height})" },  
    { "trigger": "MKMapRectNull (MKMapRect)" },  
    { "trigger": "MKMapRectOffset", "contents": "MKMapRectOffset(${1:MKMapRect rect}, ${2:double dx}, ${3:double dy})" },  
    { "trigger": "MKMapRectRemainder", "contents": "MKMapRectRemainder(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectSpans180thMeridian", "contents": "MKMapRectSpans180thMeridian(${1:MKMapRect rect})" },  
    { "trigger": "MKMapRectUnion", "contents": "MKMapRectUnion(${1:MKMapRect rect1}, ${2:MKMapRect rect2})" },  
    { "trigger": "MKMapRectWorld (MKMapRect)" },  
    { "trigger": "MKMapSizeEqualToSize", "contents": "MKMapSizeEqualToSize(${1:MKMapSize size1}, ${2:MKMapSize size2})" },  
    { "trigger": "MKMapSizeMake", "contents": "MKMapSizeMake(${1:double width}, ${2:double height})" },  
    { "trigger": "MKMapSizeWorld (MKMapSize)" },  
    { "trigger": "MKMapTypeHybrid (2)" },  
    { "trigger": "MKMapTypeSatellite (1)" },  
    { "trigger": "MKMapTypeStandard (0)" },  
    { "trigger": "MKMapView" },  
    { "trigger": "MKMapViewDelegate" },  
    { "trigger": "MKMetersBetweenMapPoints", "contents": "MKMetersBetweenMapPoints(${1:MKMapPoint a}, ${2:MKMapPoint b})" },  
    { "trigger": "MKMetersPerMapPointAtLatitude", "contents": "MKMetersPerMapPointAtLatitude(${1:CLLocationDegrees latitude})" },  
    { "trigger": "MKMultiPoint" },  
    { "trigger": "MKOverlay" },  
    { "trigger": "MKOverlayPathView" },  
    { "trigger": "MKOverlayView" },  
    { "trigger": "MKPinAnnotationColorGreen (1)" },  
    { "trigger": "MKPinAnnotationColorPurple (2)" },  
    { "trigger": "MKPinAnnotationColorRed (0)" },  
    { "trigger": "MKPinAnnotationView" },  
    { "trigger": "MKPlacemark" },  
    { "trigger": "MKPointAnnotation" },  
    { "trigger": "MKPolygon" },  
    { "trigger": "MKPolygonView" },  
    { "trigger": "MKPolygon.polygonWithCoordinates:count:", "contents": "MKPolygon.polygonWithCoordinates:count:(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})" },  
    { "trigger": "MKPolygon.polygonWithCoordinates:count:interiorPolygons:", "contents": "MKPolygon.polygonWithCoordinates:count:interiorPolygons:(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count}, interiorPolygons:${3:NSArray* interiorPolygons})" },  
    { "trigger": "MKPolygon.polygonWithPoints:count:", "contents": "MKPolygon.polygonWithPoints:count:(${1:MKMapPoint* points}, count:${2:NSUInteger count})" },  
    { "trigger": "MKPolygon.polygonWithPoints:count:interiorPolygons:", "contents": "MKPolygon.polygonWithPoints:count:interiorPolygons:(${1:MKMapPoint* points}, count:${2:NSUInteger count}, interiorPolygons:${3:NSArray* interiorPolygons})" },  
    { "trigger": "MKPolyline" },  
    { "trigger": "MKPolylineView" },  
    { "trigger": "MKPolyline.polylineWithCoordinates:count:", "contents": "MKPolyline.polylineWithCoordinates:count:(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})" },  
    { "trigger": "MKPolyline.polylineWithPoints:count:", "contents": "MKPolyline.polylineWithPoints:count:(${1:MKMapPoint* points}, count:${2:NSUInteger count})" },  
    { "trigger": "MKReverseGeocoder" },  
    { "trigger": "MKReverseGeocoderDelegate" },  
    { "trigger": "MKRoadWidthAtZoomScale", "contents": "MKRoadWidthAtZoomScale(${1:MKZoomScale zoomScale})" },  
    { "trigger": "MKShape" },  
    { "trigger": "MKStringFromMapPoint", "contents": "MKStringFromMapPoint(${1:MKMapPoint point})" },  
    { "trigger": "MKStringFromMapRect", "contents": "MKStringFromMapRect(${1:MKMapRect rect})" },  
    { "trigger": "MKStringFromMapSize", "contents": "MKStringFromMapSize(${1:MKMapSize size})" },  
    { "trigger": "MKUserLocation" },  
    { "trigger": "MKUserTrackingBarButtonItem" },  
    { "trigger": "MKUserTrackingModeFollow (1)" },  
    { "trigger": "MKUserTrackingModeFollowWithHeading (2)" },  
    { "trigger": "MKUserTrackingModeNone (0)" },  
    { "trigger": "MPMediaEntity" },  
    { "trigger": "MPMediaEntityPropertyPersistentID (NSString*)" },  
    { "trigger": "MPMediaEntity.canFilterByProperty:", "contents": "MPMediaEntity.canFilterByProperty:(${1:NSString* property})" },  
    { "trigger": "MPMediaGroupingAlbum (1)" },  
    { "trigger": "MPMediaGroupingAlbumArtist (3)" },  
    { "trigger": "MPMediaGroupingArtist (2)" },  
    { "trigger": "MPMediaGroupingComposer (4)" },  
    { "trigger": "MPMediaGroupingGenre (5)" },  
    { "trigger": "MPMediaGroupingPlaylist (6)" },  
    { "trigger": "MPMediaGroupingPodcastTitle (7)" },  
    { "trigger": "MPMediaGroupingTitle (0)" },  
    { "trigger": "MPMediaItem" },  
    { "trigger": "MPMediaItemArtwork" },  
    { "trigger": "MPMediaItemCollection" },  
    { "trigger": "MPMediaItemCollection.collectionWithItems:", "contents": "MPMediaItemCollection.collectionWithItems:(${1:NSArray* items})" },  
    { "trigger": "MPMediaItemPropertyAlbumArtist (NSString*)" },  
    { "trigger": "MPMediaItemPropertyAlbumArtistPersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyAlbumPersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyAlbumTitle (NSString*)" },  
    { "trigger": "MPMediaItemPropertyAlbumTrackCount (NSString*)" },  
    { "trigger": "MPMediaItemPropertyAlbumTrackNumber (NSString*)" },  
    { "trigger": "MPMediaItemPropertyArtist (NSString*)" },  
    { "trigger": "MPMediaItemPropertyArtistPersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyArtwork (NSString*)" },  
    { "trigger": "MPMediaItemPropertyAssetURL (NSString*)" },  
    { "trigger": "MPMediaItemPropertyBeatsPerMinute (NSString*)" },  
    { "trigger": "MPMediaItemPropertyComments (NSString*)" },  
    { "trigger": "MPMediaItemPropertyComposer (NSString*)" },  
    { "trigger": "MPMediaItemPropertyComposerPersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyDiscCount (NSString*)" },  
    { "trigger": "MPMediaItemPropertyDiscNumber (NSString*)" },  
    { "trigger": "MPMediaItemPropertyGenre (NSString*)" },  
    { "trigger": "MPMediaItemPropertyGenrePersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyIsCompilation (NSString*)" },  
    { "trigger": "MPMediaItemPropertyLastPlayedDate (NSString*)" },  
    { "trigger": "MPMediaItemPropertyLyrics (NSString*)" },  
    { "trigger": "MPMediaItemPropertyMediaType (NSString*)" },  
    { "trigger": "MPMediaItemPropertyPersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyPlayCount (NSString*)" },  
    { "trigger": "MPMediaItemPropertyPlaybackDuration (NSString*)" },  
    { "trigger": "MPMediaItemPropertyPodcastPersistentID (NSString*)" },  
    { "trigger": "MPMediaItemPropertyPodcastTitle (NSString*)" },  
    { "trigger": "MPMediaItemPropertyRating (NSString*)" },  
    { "trigger": "MPMediaItemPropertyReleaseDate (NSString*)" },  
    { "trigger": "MPMediaItemPropertySkipCount (NSString*)" },  
    { "trigger": "MPMediaItemPropertyTitle (NSString*)" },  
    { "trigger": "MPMediaItemPropertyUserGrouping (NSString*)" },  
    { "trigger": "MPMediaItem.persistentIDPropertyForGroupingType:", "contents": "MPMediaItem.persistentIDPropertyForGroupingType:(${1:MPMediaGrouping groupingType})" },  
    { "trigger": "MPMediaItem.titlePropertyForGroupingType:", "contents": "MPMediaItem.titlePropertyForGroupingType:(${1:MPMediaGrouping groupingType})" },  
    { "trigger": "MPMediaLibrary" },  
    { "trigger": "MPMediaLibraryDidChangeNotification (NSString*)" },  
    { "trigger": "MPMediaLibrary.defaultMediaLibrary" },  
    { "trigger": "MPMediaPickerController" },  
    { "trigger": "MPMediaPickerControllerDelegate" },  
    { "trigger": "MPMediaPlayback" },  
    { "trigger": "MPMediaPlaybackIsPreparedToPlayDidChangeNotification (NSString*)" },  
    { "trigger": "MPMediaPlaylistAttributeGenius (4)" },  
    { "trigger": "MPMediaPlaylistAttributeNone (0)" },  
    { "trigger": "MPMediaPlaylistAttributeOnTheGo (1)" },  
    { "trigger": "MPMediaPlaylistAttributeSmart (2)" },  
    { "trigger": "MPMediaPlaylistPropertyName (NSString*)" },  
    { "trigger": "MPMediaPlaylistPropertyPersistentID (NSString*)" },  
    { "trigger": "MPMediaPlaylistPropertyPlaylistAttributes (NSString*)" },  
    { "trigger": "MPMediaPlaylistPropertySeedItems (NSString*)" },  
    { "trigger": "MPMediaPredicateComparisonContains (1)" },  
    { "trigger": "MPMediaPredicateComparisonEqualTo (0)" },  
    { "trigger": "MPMediaPropertyPredicate" },  
    { "trigger": "MPMediaPropertyPredicate.predicateWithValue:forProperty:", "contents": "MPMediaPropertyPredicate.predicateWithValue:forProperty:(${1:id value}, forProperty:${2:NSString* property})" },  
    { "trigger": "MPMediaPropertyPredicate.predicateWithValue:forProperty:comparisonType:", "contents": "MPMediaPropertyPredicate.predicateWithValue:forProperty:comparisonType:(${1:id value}, forProperty:${2:NSString* property}, comparisonType:${3:MPMediaPredicateComparison comparisonType})" },  
    { "trigger": "MPMediaQuery" },  
    { "trigger": "MPMediaQuerySection" },  
    { "trigger": "MPMediaQuery.albumsQuery" },  
    { "trigger": "MPMediaQuery.artistsQuery" },  
    { "trigger": "MPMediaQuery.audiobooksQuery" },  
    { "trigger": "MPMediaQuery.compilationsQuery" },  
    { "trigger": "MPMediaQuery.composersQuery" },  
    { "trigger": "MPMediaQuery.genresQuery" },  
    { "trigger": "MPMediaQuery.playlistsQuery" },  
    { "trigger": "MPMediaQuery.podcastsQuery" },  
    { "trigger": "MPMediaQuery.songsQuery" },  
    { "trigger": "MPMediaTypeAny (-1)" },  
    { "trigger": "MPMediaTypeAnyAudio (255)" },  
    { "trigger": "MPMediaTypeAnyVideo (65280)" },  
    { "trigger": "MPMediaTypeAudioBook (4)" },  
    { "trigger": "MPMediaTypeAudioITunesU (8)" },  
    { "trigger": "MPMediaTypeMovie (256)" },  
    { "trigger": "MPMediaTypeMusic (1)" },  
    { "trigger": "MPMediaTypeMusicVideo (2048)" },  
    { "trigger": "MPMediaTypePodcast (2)" },  
    { "trigger": "MPMediaTypeTVShow (512)" },  
    { "trigger": "MPMediaTypeVideoITunesU (4096)" },  
    { "trigger": "MPMediaTypeVideoPodcast (1024)" },  
    { "trigger": "MPMovieAccessLog" },  
    { "trigger": "MPMovieAccessLogEvent" },  
    { "trigger": "MPMovieControlModeDefault (0)" },  
    { "trigger": "MPMovieControlModeHidden (2)" },  
    { "trigger": "MPMovieControlModeVolumeOnly (1)" },  
    { "trigger": "MPMovieControlStyleDefault (1)" },  
    { "trigger": "MPMovieControlStyleEmbedded (1)" },  
    { "trigger": "MPMovieControlStyleFullscreen (2)" },  
    { "trigger": "MPMovieControlStyleNone (0)" },  
    { "trigger": "MPMovieDurationAvailableNotification (NSString*)" },  
    { "trigger": "MPMovieErrorLog" },  
    { "trigger": "MPMovieErrorLogEvent" },  
    { "trigger": "MPMovieFinishReasonPlaybackEnded (0)" },  
    { "trigger": "MPMovieFinishReasonPlaybackError (1)" },  
    { "trigger": "MPMovieFinishReasonUserExited (2)" },  
    { "trigger": "MPMovieLoadStatePlayable (1)" },  
    { "trigger": "MPMovieLoadStatePlaythroughOK (2)" },  
    { "trigger": "MPMovieLoadStateStalled (4)" },  
    { "trigger": "MPMovieLoadStateUnknown (0)" },  
    { "trigger": "MPMovieMediaTypeMaskAudio (2)" },  
    { "trigger": "MPMovieMediaTypeMaskNone (0)" },  
    { "trigger": "MPMovieMediaTypeMaskVideo (1)" },  
    { "trigger": "MPMovieMediaTypesAvailableNotification (NSString*)" },  
    { "trigger": "MPMovieNaturalSizeAvailableNotification (NSString*)" },  
    { "trigger": "MPMoviePlaybackStateInterrupted (3)" },  
    { "trigger": "MPMoviePlaybackStatePaused (2)" },  
    { "trigger": "MPMoviePlaybackStatePlaying (1)" },  
    { "trigger": "MPMoviePlaybackStateSeekingBackward (5)" },  
    { "trigger": "MPMoviePlaybackStateSeekingForward (4)" },  
    { "trigger": "MPMoviePlaybackStateStopped (0)" },  
    { "trigger": "MPMoviePlayerContentPreloadDidFinishNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerController" },  
    { "trigger": "MPMoviePlayerDidEnterFullscreenNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerDidExitFullscreenNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerFullscreenAnimationCurveUserInfoKey (NSString*)" },  
    { "trigger": "MPMoviePlayerFullscreenAnimationDurationUserInfoKey (NSString*)" },  
    { "trigger": "MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerLoadStateDidChangeNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerNowPlayingMovieDidChangeNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerPlaybackDidFinishNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerPlaybackDidFinishReasonUserInfoKey (NSString*)" },  
    { "trigger": "MPMoviePlayerPlaybackStateDidChangeNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerScalingModeDidChangeNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerThumbnailErrorKey (NSString*)" },  
    { "trigger": "MPMoviePlayerThumbnailImageKey (NSString*)" },  
    { "trigger": "MPMoviePlayerThumbnailImageRequestDidFinishNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerThumbnailTimeKey (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataKeyDataType (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataKeyInfo (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataKeyLanguageCode (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataKeyMIMEType (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataKeyName (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataUpdatedNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerTimedMetadataUserInfoKey (NSString*)" },  
    { "trigger": "MPMoviePlayerViewController" },  
    { "trigger": "MPMoviePlayerWillEnterFullscreenNotification (NSString*)" },  
    { "trigger": "MPMoviePlayerWillExitFullscreenNotification (NSString*)" },  
    { "trigger": "MPMovieRepeatModeNone (0)" },  
    { "trigger": "MPMovieRepeatModeOne (1)" },  
    { "trigger": "MPMovieScalingModeAspectFill (2)" },  
    { "trigger": "MPMovieScalingModeAspectFit (1)" },  
    { "trigger": "MPMovieScalingModeFill (3)" },  
    { "trigger": "MPMovieScalingModeNone (0)" },  
    { "trigger": "MPMovieSourceTypeAvailableNotification (NSString*)" },  
    { "trigger": "MPMovieSourceTypeFile (1)" },  
    { "trigger": "MPMovieSourceTypeStreaming (2)" },  
    { "trigger": "MPMovieSourceTypeUnknown (0)" },  
    { "trigger": "MPMovieTimeOptionExact (1)" },  
    { "trigger": "MPMovieTimeOptionNearestKeyFrame (0)" },  
    { "trigger": "MPMusicPlaybackStateInterrupted (3)" },  
    { "trigger": "MPMusicPlaybackStatePaused (2)" },  
    { "trigger": "MPMusicPlaybackStatePlaying (1)" },  
    { "trigger": "MPMusicPlaybackStateSeekingBackward (5)" },  
    { "trigger": "MPMusicPlaybackStateSeekingForward (4)" },  
    { "trigger": "MPMusicPlaybackStateStopped (0)" },  
    { "trigger": "MPMusicPlayerController" },  
    { "trigger": "MPMusicPlayerControllerNowPlayingItemDidChangeNotification (NSString*)" },  
    { "trigger": "MPMusicPlayerControllerPlaybackStateDidChangeNotification (NSString*)" },  
    { "trigger": "MPMusicPlayerControllerVolumeDidChangeNotification (NSString*)" },  
    { "trigger": "MPMusicPlayerController.applicationMusicPlayer" },  
    { "trigger": "MPMusicPlayerController.iPodMusicPlayer" },  
    { "trigger": "MPMusicRepeatModeAll (3)" },  
    { "trigger": "MPMusicRepeatModeDefault (0)" },  
    { "trigger": "MPMusicRepeatModeNone (1)" },  
    { "trigger": "MPMusicRepeatModeOne (2)" },  
    { "trigger": "MPMusicShuffleModeAlbums (3)" },  
    { "trigger": "MPMusicShuffleModeDefault (0)" },  
    { "trigger": "MPMusicShuffleModeOff (1)" },  
    { "trigger": "MPMusicShuffleModeSongs (2)" },  
    { "trigger": "MPNowPlayingInfoCenter" },  
    { "trigger": "MPNowPlayingInfoCenter.defaultCenter" },  
    { "trigger": "MPNowPlayingInfoPropertyChapterCount (NSString*)" },  
    { "trigger": "MPNowPlayingInfoPropertyChapterNumber (NSString*)" },  
    { "trigger": "MPNowPlayingInfoPropertyElapsedPlaybackTime (NSString*)" },  
    { "trigger": "MPNowPlayingInfoPropertyPlaybackQueueCount (NSString*)" },  
    { "trigger": "MPNowPlayingInfoPropertyPlaybackQueueIndex (NSString*)" },  
    { "trigger": "MPNowPlayingInfoPropertyPlaybackRate (NSString*)" },  
    { "trigger": "MPTimedMetadata" },  
    { "trigger": "MPVolumeSettingsAlertHide" },  
    { "trigger": "MPVolumeSettingsAlertIsVisible" },  
    { "trigger": "MPVolumeSettingsAlertShow" },  
    { "trigger": "MPVolumeView" },  
    { "trigger": "MessageComposeResultCancelled (0)" },  
    { "trigger": "MessageComposeResultFailed (2)" },  
    { "trigger": "MessageComposeResultSent (1)" },  
    { "trigger": "MusicEventIteratorDeleteEvent", "contents": "MusicEventIteratorDeleteEvent(${1:MusicEventIterator inIterator})" },  
    { "trigger": "MusicEventIteratorGetEventInfo", "contents": "MusicEventIteratorGetEventInfo(${1:MusicEventIterator inIterator}, ${2:MusicTimeStamp* outTimeStamp}, ${3:MusicEventType* outEventType}, ${4:void** outEventData}, ${5:UInt32* outEventDataSize})" },  
    { "trigger": "MusicEventIteratorHasCurrentEvent", "contents": "MusicEventIteratorHasCurrentEvent(${1:MusicEventIterator inIterator}, ${2:Boolean* outHasCurEvent})" },  
    { "trigger": "MusicEventIteratorHasNextEvent", "contents": "MusicEventIteratorHasNextEvent(${1:MusicEventIterator inIterator}, ${2:Boolean* outHasNextEvent})" },  
    { "trigger": "MusicEventIteratorHasPreviousEvent", "contents": "MusicEventIteratorHasPreviousEvent(${1:MusicEventIterator inIterator}, ${2:Boolean* outHasPrevEvent})" },  
    { "trigger": "MusicEventIteratorNextEvent", "contents": "MusicEventIteratorNextEvent(${1:MusicEventIterator inIterator})" },  
    { "trigger": "MusicEventIteratorPreviousEvent", "contents": "MusicEventIteratorPreviousEvent(${1:MusicEventIterator inIterator})" },  
    { "trigger": "MusicEventIteratorSeek", "contents": "MusicEventIteratorSeek(${1:MusicEventIterator inIterator}, ${2:MusicTimeStamp inTimeStamp})" },  
    { "trigger": "MusicEventIteratorSetEventInfo", "contents": "MusicEventIteratorSetEventInfo(${1:MusicEventIterator inIterator}, ${2:MusicEventType inEventType}, ${3:void* inEventData})" },  
    { "trigger": "MusicEventIteratorSetEventTime", "contents": "MusicEventIteratorSetEventTime(${1:MusicEventIterator inIterator}, ${2:MusicTimeStamp inTimeStamp})" },  
    { "trigger": "MusicPlayerGetBeatsForHostTime", "contents": "MusicPlayerGetBeatsForHostTime(${1:MusicPlayer inPlayer}, ${2:UInt64 inHostTime}, ${3:MusicTimeStamp* outBeats})" },  
    { "trigger": "MusicPlayerGetHostTimeForBeats", "contents": "MusicPlayerGetHostTimeForBeats(${1:MusicPlayer inPlayer}, ${2:MusicTimeStamp inBeats}, ${3:UInt64* outHostTime})" },  
    { "trigger": "MusicPlayerGetPlayRateScalar", "contents": "MusicPlayerGetPlayRateScalar(${1:MusicPlayer inPlayer}, ${2:Float64* outScaleRate})" },  
    { "trigger": "MusicPlayerGetSequence", "contents": "MusicPlayerGetSequence(${1:MusicPlayer inPlayer}, ${2:MusicSequence* outSequence})" },  
    { "trigger": "MusicPlayerGetTime", "contents": "MusicPlayerGetTime(${1:MusicPlayer inPlayer}, ${2:MusicTimeStamp* outTime})" },  
    { "trigger": "MusicPlayerIsPlaying", "contents": "MusicPlayerIsPlaying(${1:MusicPlayer inPlayer}, ${2:Boolean* outIsPlaying})" },  
    { "trigger": "MusicPlayerPreroll", "contents": "MusicPlayerPreroll(${1:MusicPlayer inPlayer})" },  
    { "trigger": "MusicPlayerSetPlayRateScalar", "contents": "MusicPlayerSetPlayRateScalar(${1:MusicPlayer inPlayer}, ${2:Float64 inScaleRate})" },  
    { "trigger": "MusicPlayerSetSequence", "contents": "MusicPlayerSetSequence(${1:MusicPlayer inPlayer}, ${2:MusicSequence inSequence})" },  
    { "trigger": "MusicPlayerSetTime", "contents": "MusicPlayerSetTime(${1:MusicPlayer inPlayer}, ${2:MusicTimeStamp inTime})" },  
    { "trigger": "MusicPlayerStart", "contents": "MusicPlayerStart(${1:MusicPlayer inPlayer})" },  
    { "trigger": "MusicPlayerStop", "contents": "MusicPlayerStop(${1:MusicPlayer inPlayer})" },  
    { "trigger": "MusicSequenceBarBeatTimeToBeats", "contents": "MusicSequenceBarBeatTimeToBeats(${1:MusicSequence inSequence}, ${2:CABarBeatTime* inBarBeatTime}, ${3:MusicTimeStamp* outBeats})" },  
    { "trigger": "MusicSequenceBeatsToBarBeatTime", "contents": "MusicSequenceBeatsToBarBeatTime(${1:MusicSequence inSequence}, ${2:MusicTimeStamp inBeats}, ${3:UInt32 inSubbeatDivisor}, ${4:CABarBeatTime* outBarBeatTime})" },  
    { "trigger": "MusicSequenceDisposeTrack", "contents": "MusicSequenceDisposeTrack(${1:MusicSequence inSequence}, ${2:MusicTrack inTrack})" },  
    { "trigger": "MusicSequenceFileCreate", "contents": "MusicSequenceFileCreate(${1:MusicSequence inSequence}, ${2:CFURLRef inFileRef}, ${3:MusicSequenceFileTypeID inFileType}, ${4:MusicSequenceFileFlags inFlags}, ${5:SInt16 inResolution})" },  
    { "trigger": "MusicSequenceFileCreateData", "contents": "MusicSequenceFileCreateData(${1:MusicSequence inSequence}, ${2:MusicSequenceFileTypeID inFileType}, ${3:MusicSequenceFileFlags inFlags}, ${4:SInt16 inResolution}, ${5:CFDataRef* outData})" },  
    { "trigger": "MusicSequenceFileLoad", "contents": "MusicSequenceFileLoad(${1:MusicSequence inSequence}, ${2:CFURLRef inFileRef}, ${3:MusicSequenceFileTypeID inFileTypeHint}, ${4:MusicSequenceLoadFlags inFlags})" },  
    { "trigger": "MusicSequenceFileLoadData", "contents": "MusicSequenceFileLoadData(${1:MusicSequence inSequence}, ${2:CFDataRef inData}, ${3:MusicSequenceFileTypeID inFileTypeHint}, ${4:MusicSequenceLoadFlags inFlags})" },  
    { "trigger": "MusicSequenceGetAUGraph", "contents": "MusicSequenceGetAUGraph(${1:MusicSequence inSequence}, ${2:AUGraph* outGraph})" },  
    { "trigger": "MusicSequenceGetBeatsForSeconds", "contents": "MusicSequenceGetBeatsForSeconds(${1:MusicSequence inSequence}, ${2:Float64 inSeconds}, ${3:MusicTimeStamp* outBeats})" },  
    { "trigger": "MusicSequenceGetIndTrack", "contents": "MusicSequenceGetIndTrack(${1:MusicSequence inSequence}, ${2:UInt32 inTrackIndex}, ${3:MusicTrack* outTrack})" },  
    { "trigger": "MusicSequenceGetInfoDictionary", "contents": "MusicSequenceGetInfoDictionary(${1:MusicSequence inSequence})" },  
    { "trigger": "MusicSequenceGetSMPTEResolution", "contents": "MusicSequenceGetSMPTEResolution(${1:SInt16 inRes}, ${2:SignedByte* fps}, ${3:Byte* ticks})" },  
    { "trigger": "MusicSequenceGetSecondsForBeats", "contents": "MusicSequenceGetSecondsForBeats(${1:MusicSequence inSequence}, ${2:MusicTimeStamp inBeats}, ${3:Float64* outSeconds})" },  
    { "trigger": "MusicSequenceGetSequenceType", "contents": "MusicSequenceGetSequenceType(${1:MusicSequence inSequence}, ${2:MusicSequenceType* outType})" },  
    { "trigger": "MusicSequenceGetTempoTrack", "contents": "MusicSequenceGetTempoTrack(${1:MusicSequence inSequence}, ${2:MusicTrack* outTrack})" },  
    { "trigger": "MusicSequenceGetTrackCount", "contents": "MusicSequenceGetTrackCount(${1:MusicSequence inSequence}, ${2:UInt32* outNumberOfTracks})" },  
    { "trigger": "MusicSequenceGetTrackIndex", "contents": "MusicSequenceGetTrackIndex(${1:MusicSequence inSequence}, ${2:MusicTrack inTrack}, ${3:UInt32* outTrackIndex})" },  
    { "trigger": "MusicSequenceNewTrack", "contents": "MusicSequenceNewTrack(${1:MusicSequence inSequence}, ${2:MusicTrack* outTrack})" },  
    { "trigger": "MusicSequenceReverse", "contents": "MusicSequenceReverse(${1:MusicSequence inSequence})" },  
    { "trigger": "MusicSequenceSetAUGraph", "contents": "MusicSequenceSetAUGraph(${1:MusicSequence inSequence}, ${2:AUGraph inGraph})" },  
    { "trigger": "MusicSequenceSetMIDIEndpoint", "contents": "MusicSequenceSetMIDIEndpoint(${1:MusicSequence inSequence}, ${2:MIDIEndpointRef inEndpoint})" },  
    { "trigger": "MusicSequenceSetSMPTEResolution", "contents": "MusicSequenceSetSMPTEResolution(${1:SignedByte fps}, ${2:Byte ticks})" },  
    { "trigger": "MusicSequenceSetSequenceType", "contents": "MusicSequenceSetSequenceType(${1:MusicSequence inSequence}, ${2:MusicSequenceType inType})" },  
    { "trigger": "MusicSequenceSetUserCallback", "contents": "MusicSequenceSetUserCallback(${1:MusicSequence inSequence}, ${2:MusicSequenceUserCallback inCallback}, ${3:void* inClientData})" },  
    { "trigger": "MusicTrackClear", "contents": "MusicTrackClear(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inStartTime}, ${3:MusicTimeStamp inEndTime})" },  
    { "trigger": "MusicTrackCopyInsert", "contents": "MusicTrackCopyInsert(${1:MusicTrack inSourceTrack}, ${2:MusicTimeStamp inSourceStartTime}, ${3:MusicTimeStamp inSourceEndTime}, ${4:MusicTrack inDestTrack}, ${5:MusicTimeStamp inDestInsertTime})" },  
    { "trigger": "MusicTrackCut", "contents": "MusicTrackCut(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inStartTime}, ${3:MusicTimeStamp inEndTime})" },  
    { "trigger": "MusicTrackGetDestMIDIEndpoint", "contents": "MusicTrackGetDestMIDIEndpoint(${1:MusicTrack inTrack}, ${2:MIDIEndpointRef* outEndpoint})" },  
    { "trigger": "MusicTrackGetDestNode", "contents": "MusicTrackGetDestNode(${1:MusicTrack inTrack}, ${2:AUNode* outNode})" },  
    { "trigger": "MusicTrackGetProperty", "contents": "MusicTrackGetProperty(${1:MusicTrack inTrack}, ${2:UInt32 inPropertyID}, ${3:void* outData}, ${4:UInt32* ioLength})" },  
    { "trigger": "MusicTrackGetSequence", "contents": "MusicTrackGetSequence(${1:MusicTrack inTrack}, ${2:MusicSequence* outSequence})" },  
    { "trigger": "MusicTrackMerge", "contents": "MusicTrackMerge(${1:MusicTrack inSourceTrack}, ${2:MusicTimeStamp inSourceStartTime}, ${3:MusicTimeStamp inSourceEndTime}, ${4:MusicTrack inDestTrack}, ${5:MusicTimeStamp inDestInsertTime})" },  
    { "trigger": "MusicTrackMoveEvents", "contents": "MusicTrackMoveEvents(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inStartTime}, ${3:MusicTimeStamp inEndTime}, ${4:MusicTimeStamp inMoveTime})" },  
    { "trigger": "MusicTrackNewAUPresetEvent", "contents": "MusicTrackNewAUPresetEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:AUPresetEvent* inPresetEvent})" },  
    { "trigger": "MusicTrackNewExtendedNoteEvent", "contents": "MusicTrackNewExtendedNoteEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:ExtendedNoteOnEvent* inInfo})" },  
    { "trigger": "MusicTrackNewExtendedTempoEvent", "contents": "MusicTrackNewExtendedTempoEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:Float64 inBPM})" },  
    { "trigger": "MusicTrackNewMIDIChannelEvent", "contents": "MusicTrackNewMIDIChannelEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDIChannelMessage* inMessage})" },  
    { "trigger": "MusicTrackNewMIDINoteEvent", "contents": "MusicTrackNewMIDINoteEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDINoteMessage* inMessage})" },  
    { "trigger": "MusicTrackNewMIDIRawDataEvent", "contents": "MusicTrackNewMIDIRawDataEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDIRawData* inRawData})" },  
    { "trigger": "MusicTrackNewMetaEvent", "contents": "MusicTrackNewMetaEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDIMetaEvent* inMetaEvent})" },  
    { "trigger": "MusicTrackNewParameterEvent", "contents": "MusicTrackNewParameterEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:ParameterEvent* inInfo})" },  
    { "trigger": "MusicTrackNewUserEvent", "contents": "MusicTrackNewUserEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MusicEventUserData* inUserData})" },  
    { "trigger": "MusicTrackSetDestMIDIEndpoint", "contents": "MusicTrackSetDestMIDIEndpoint(${1:MusicTrack inTrack}, ${2:MIDIEndpointRef inEndpoint})" },  
    { "trigger": "MusicTrackSetDestNode", "contents": "MusicTrackSetDestNode(${1:MusicTrack inTrack}, ${2:AUNode inNode})" },  
    { "trigger": "MusicTrackSetProperty", "contents": "MusicTrackSetProperty(${1:MusicTrack inTrack}, ${2:UInt32 inPropertyID}, ${3:void* inData}, ${4:UInt32 inLength})" },  
    { "trigger": "NKAssetDownload" },  
    { "trigger": "NKIssue" },  
    { "trigger": "NKIssueContentStatusAvailable (2)" },  
    { "trigger": "NKIssueContentStatusDownloading (1)" },  
    { "trigger": "NKIssueContentStatusNone (0)" },  
    { "trigger": "NKIssueDownloadCompletedNotification (NSString*)" },  
    { "trigger": "NKLibrary" },  
    { "trigger": "NKLibrary.sharedLibrary" },  
    { "trigger": "NSASCIIStringEncoding (1)" },  
    { "trigger": "NSAddEntityMappingType (2)" },  
    { "trigger": "NSAddedPersistentStoresKey (NSString*)" },  
    { "trigger": "NSAdminApplicationDirectory (4)" },  
    { "trigger": "NSAffectedObjectsErrorKey (NSString*)" },  
    { "trigger": "NSAffectedStoresErrorKey (NSString*)" },  
    { "trigger": "NSAggregateExpressionType (14)" },  
    { "trigger": "NSAllApplicationsDirectory (100)" },  
    { "trigger": "NSAllDomainsMask (65535)" },  
    { "trigger": "NSAllLibrariesDirectory (101)" },  
    { "trigger": "NSAllPredicateModifier (1)" },  
    { "trigger": "NSAllocateMemoryPages", "contents": "NSAllocateMemoryPages(${1:NSUInteger bytes})" },  
    { "trigger": "NSAllocateObject", "contents": "NSAllocateObject(${1:Class aClass}, ${2:NSUInteger extraBytes}, ${3:NSZone* zone})" },  
    { "trigger": "NSAnchoredSearch (8)" },  
    { "trigger": "NSAndPredicateType (1)" },  
    { "trigger": "NSAnyPredicateModifier (2)" },  
    { "trigger": "NSApplicationDirectory (1)" },  
    { "trigger": "NSApplicationSupportDirectory (14)" },  
    { "trigger": "NSArgumentDomain (NSString*)" },  
    { "trigger": "NSArray" },  
    { "trigger": "NSArray.array" },  
    { "trigger": "NSArray.arrayWithArray:", "contents": "NSArray.arrayWithArray:(${1:NSArray* array})" },  
    { "trigger": "NSArray.arrayWithContentsOfFile:", "contents": "NSArray.arrayWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "NSArray.arrayWithContentsOfURL:", "contents": "NSArray.arrayWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "NSArray.arrayWithObject:", "contents": "NSArray.arrayWithObject:(${1:id anObject})" },  
    { "trigger": "NSArray.arrayWithObjects:", "contents": "NSArray.arrayWithObjects:(${1:id firstObj})" },  
    { "trigger": "NSArray.arrayWithObjects:count:", "contents": "NSArray.arrayWithObjects:count:(${1:id* objects}, count:${2:NSUInteger cnt})" },  
    { "trigger": "NSAssertionHandler" },  
    { "trigger": "NSAssertionHandlerKey (NSString*)" },  
    { "trigger": "NSAssertionHandler.currentHandler" },  
    { "trigger": "NSAtomicStore" },  
    { "trigger": "NSAtomicStoreCacheNode" },  
    { "trigger": "NSAtomicWrite (1)" },  
    { "trigger": "NSAttributeDescription" },  
    { "trigger": "NSAttributedString" },  
    { "trigger": "NSAttributedStringEnumerationLongestEffectiveRangeNotRequired (1048576)" },  
    { "trigger": "NSAttributedStringEnumerationReverse (2)" },  
    { "trigger": "NSAutoreleasePool" },  
    { "trigger": "NSAutoreleasePool.addObject:", "contents": "NSAutoreleasePool.addObject:(${1:id anObject})" },  
    { "trigger": "NSAutosavedInformationDirectory (11)" },  
    { "trigger": "NSAverageKeyValueOperator (NSString*)" },  
    { "trigger": "NSBackwardsSearch (4)" },  
    { "trigger": "NSBeginsWithPredicateOperatorType (8)" },  
    { "trigger": "NSBetweenPredicateOperatorType (100)" },  
    { "trigger": "NSBinaryDataAttributeType (1000)" },  
    { "trigger": "NSBinarySearchingFirstEqual (256)" },  
    { "trigger": "NSBinarySearchingInsertionIndex (1024)" },  
    { "trigger": "NSBinarySearchingLastEqual (512)" },  
    { "trigger": "NSBinaryStoreType (NSString*)" },  
    { "trigger": "NSBlockExpressionType (19)" },  
    { "trigger": "NSBlockOperation" },  
    { "trigger": "NSBlockOperation.blockOperationWithBlock:", "contents": "NSBlockOperation.blockOperationWithBlock:(${1:void (^)(void) block})" },  
    { "trigger": "NSBooleanAttributeType (800)" },  
    { "trigger": "NSBuddhistCalendar (NSString*)" },  
    { "trigger": "NSBundle" },  
    { "trigger": "NSBundle" },  
    { "trigger": "NSBundleDidLoadNotification (NSString*)" },  
    { "trigger": "NSBundleExecutableArchitectureI386 (7)" },  
    { "trigger": "NSBundleExecutableArchitecturePPC (18)" },  
    { "trigger": "NSBundleExecutableArchitecturePPC64 (16777234)" },  
    { "trigger": "NSBundleExecutableArchitectureX86_64 (16777223)" },  
    { "trigger": "NSBundle.URLForResource:withExtension:subdirectory:inBundleWithURL:", "contents": "NSBundle.URLForResource:withExtension:subdirectory:inBundleWithURL:(${1:NSString* name}, withExtension:${2:NSString* ext}, subdirectory:${3:NSString* subpath}, inBundleWithURL:${4:NSURL* bundleURL})" },  
    { "trigger": "NSBundle.URLsForResourcesWithExtension:subdirectory:inBundleWithURL:", "contents": "NSBundle.URLsForResourcesWithExtension:subdirectory:inBundleWithURL:(${1:NSString* ext}, subdirectory:${2:NSString* subpath}, inBundleWithURL:${3:NSURL* bundleURL})" },  
    { "trigger": "NSBundle.allBundles" },  
    { "trigger": "NSBundle.allFrameworks" },  
    { "trigger": "NSBundle.bundleForClass:", "contents": "NSBundle.bundleForClass:(${1:Class aClass})" },  
    { "trigger": "NSBundle.bundleWithIdentifier:", "contents": "NSBundle.bundleWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "NSBundle.bundleWithPath:", "contents": "NSBundle.bundleWithPath:(${1:NSString* path})" },  
    { "trigger": "NSBundle.bundleWithURL:", "contents": "NSBundle.bundleWithURL:(${1:NSURL* url})" },  
    { "trigger": "NSBundle.mainBundle" },  
    { "trigger": "NSBundle.pathForResource:ofType:inDirectory:", "contents": "NSBundle.pathForResource:ofType:inDirectory:(${1:NSString* name}, ofType:${2:NSString* ext}, inDirectory:${3:NSString* bundlePath})" },  
    { "trigger": "NSBundle.pathsForResourcesOfType:inDirectory:", "contents": "NSBundle.pathsForResourcesOfType:inDirectory:(${1:NSString* ext}, inDirectory:${2:NSString* bundlePath})" },  
    { "trigger": "NSBundle.preferredLocalizationsFromArray:", "contents": "NSBundle.preferredLocalizationsFromArray:(${1:NSArray* localizationsArray})" },  
    { "trigger": "NSBundle.preferredLocalizationsFromArray:forPreferences:", "contents": "NSBundle.preferredLocalizationsFromArray:forPreferences:(${1:NSArray* localizationsArray}, forPreferences:${2:NSArray* preferencesArray})" },  
    { "trigger": "NSCache" },  
    { "trigger": "NSCacheDelegate" },  
    { "trigger": "NSCachedURLResponse" },  
    { "trigger": "NSCachesDirectory (13)" },  
    { "trigger": "NSCalculationDivideByZero (4)" },  
    { "trigger": "NSCalculationLossOfPrecision (1)" },  
    { "trigger": "NSCalculationNoError (0)" },  
    { "trigger": "NSCalculationOverflow (3)" },  
    { "trigger": "NSCalculationUnderflow (2)" },  
    { "trigger": "NSCalendar" },  
    { "trigger": "NSCalendarCalendarUnit (1048576)" },  
    { "trigger": "NSCalendar.autoupdatingCurrentCalendar" },  
    { "trigger": "NSCalendar.currentCalendar" },  
    { "trigger": "NSCascadeDeleteRule (2)" },  
    { "trigger": "NSCaseInsensitivePredicateOption (1)" },  
    { "trigger": "NSCaseInsensitiveSearch (1)" },  
    { "trigger": "NSCharacterConversionException (NSString*)" },  
    { "trigger": "NSCharacterSet" },  
    { "trigger": "NSCharacterSet.alphanumericCharacterSet" },  
    { "trigger": "NSCharacterSet.capitalizedLetterCharacterSet" },  
    { "trigger": "NSCharacterSet.characterSetWithBitmapRepresentation:", "contents": "NSCharacterSet.characterSetWithBitmapRepresentation:(${1:NSData* data})" },  
    { "trigger": "NSCharacterSet.characterSetWithCharactersInString:", "contents": "NSCharacterSet.characterSetWithCharactersInString:(${1:NSString* aString})" },  
    { "trigger": "NSCharacterSet.characterSetWithContentsOfFile:", "contents": "NSCharacterSet.characterSetWithContentsOfFile:(${1:NSString* fName})" },  
    { "trigger": "NSCharacterSet.characterSetWithRange:", "contents": "NSCharacterSet.characterSetWithRange:(${1:NSRange aRange})" },  
    { "trigger": "NSCharacterSet.controlCharacterSet" },  
    { "trigger": "NSCharacterSet.decimalDigitCharacterSet" },  
    { "trigger": "NSCharacterSet.decomposableCharacterSet" },  
    { "trigger": "NSCharacterSet.illegalCharacterSet" },  
    { "trigger": "NSCharacterSet.letterCharacterSet" },  
    { "trigger": "NSCharacterSet.lowercaseLetterCharacterSet" },  
    { "trigger": "NSCharacterSet.newlineCharacterSet" },  
    { "trigger": "NSCharacterSet.nonBaseCharacterSet" },  
    { "trigger": "NSCharacterSet.punctuationCharacterSet" },  
    { "trigger": "NSCharacterSet.symbolCharacterSet" },  
    { "trigger": "NSCharacterSet.uppercaseLetterCharacterSet" },  
    { "trigger": "NSCharacterSet.whitespaceAndNewlineCharacterSet" },  
    { "trigger": "NSCharacterSet.whitespaceCharacterSet" },  
    { "trigger": "NSChineseCalendar (NSString*)" },  
    { "trigger": "NSClassFromString", "contents": "NSClassFromString(${1:NSString* aClassName})" },  
    { "trigger": "NSCocoaErrorDomain (NSString*)" },  
    { "trigger": "NSCoder" },  
    { "trigger": "NSCoder" },  
    { "trigger": "NSCoder" },  
    { "trigger": "NSCoderMethods" },  
    { "trigger": "NSCoderMethods.setVersion:", "contents": "NSCoderMethods.setVersion:(${1:NSInteger aVersion})" },  
    { "trigger": "NSCoderMethods.version" },  
    { "trigger": "NSCoding" },  
    { "trigger": "NSComparisonPredicate" },  
    { "trigger": "NSComparisonPredicate.predicateWithLeftExpression:rightExpression:customSelector:", "contents": "NSComparisonPredicate.predicateWithLeftExpression:rightExpression:customSelector:(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, customSelector:${3:SEL selector})" },  
    { "trigger": "NSComparisonPredicate.predicateWithLeftExpression:rightExpression:modifier:type:options:", "contents": "NSComparisonPredicate.predicateWithLeftExpression:rightExpression:modifier:type:options:(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, modifier:${3:NSComparisonPredicateModifier modifier}, type:${4:NSPredicateOperatorType type}, options:${5:NSComparisonPredicateOptions options})" },  
    { "trigger": "NSCompoundPredicate" },  
    { "trigger": "NSCompoundPredicate.andPredicateWithSubpredicates:", "contents": "NSCompoundPredicate.andPredicateWithSubpredicates:(${1:NSArray* subpredicates})" },  
    { "trigger": "NSCompoundPredicate.notPredicateWithSubpredicate:", "contents": "NSCompoundPredicate.notPredicateWithSubpredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "NSCompoundPredicate.orPredicateWithSubpredicates:", "contents": "NSCompoundPredicate.orPredicateWithSubpredicates:(${1:NSArray* subpredicates})" },  
    { "trigger": "NSCondition" },  
    { "trigger": "NSConditionLock" },  
    { "trigger": "NSConfinementConcurrencyType (0)" },  
    { "trigger": "NSConstantValueExpressionType (0)" },  
    { "trigger": "NSContainsPredicateOperatorType (99)" },  
    { "trigger": "NSConvertHostDoubleToSwapped", "contents": "NSConvertHostDoubleToSwapped(${1:double x})" },  
    { "trigger": "NSConvertHostFloatToSwapped", "contents": "NSConvertHostFloatToSwapped(${1:float x})" },  
    { "trigger": "NSConvertSwappedDoubleToHost", "contents": "NSConvertSwappedDoubleToHost(${1:NSSwappedDouble x})" },  
    { "trigger": "NSConvertSwappedFloatToHost", "contents": "NSConvertSwappedFloatToHost(${1:NSSwappedFloat x})" },  
    { "trigger": "NSCopyEntityMappingType (4)" },  
    { "trigger": "NSCopyLinkMoveHandler" },  
    { "trigger": "NSCopyMemoryPages", "contents": "NSCopyMemoryPages(${1:void* source}, ${2:void* dest}, ${3:NSUInteger bytes})" },  
    { "trigger": "NSCopyObject", "contents": "NSCopyObject(${1:id object}, ${2:NSUInteger extraBytes}, ${3:NSZone* zone})" },  
    { "trigger": "NSCopying" },  
    { "trigger": "NSCoreDataError (134060)" },  
    { "trigger": "NSCoreDataVersionNumber (double)" },  
    { "trigger": "NSCoreDataVersionNumber10_4 (46.0)" },  
    { "trigger": "NSCoreDataVersionNumber10_4_3 (77.0)" },  
    { "trigger": "NSCoreDataVersionNumber10_5 (185.0)" },  
    { "trigger": "NSCoreDataVersionNumber10_5_3 (186.0)" },  
    { "trigger": "NSCoreDataVersionNumber10_6 (246.0)" },  
    { "trigger": "NSCoreDataVersionNumber10_6_2 (250.0)" },  
    { "trigger": "NSCoreDataVersionNumber10_6_3 (251.0)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_3_0 (241.0)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_3_1 (248.0)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_3_2 (310.2)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_0 (320.5)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_1 (320.11)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_2 (320.15)" },  
    { "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_3 (320.17)" },  
    { "trigger": "NSCoreServiceDirectory (10)" },  
    { "trigger": "NSCountKeyValueOperator (NSString*)" },  
    { "trigger": "NSCountResultType (4)" },  
    { "trigger": "NSCountedSet" },  
    { "trigger": "NSCreateZone", "contents": "NSCreateZone(${1:NSUInteger startSize}, ${2:NSUInteger granularity}, ${3:BOOL canFree})" },  
    { "trigger": "NSCurrentLocaleDidChangeNotification (NSString*)" },  
    { "trigger": "NSCustomEntityMappingType (1)" },  
    { "trigger": "NSCustomSelectorPredicateOperatorType (11)" },  
    { "trigger": "NSData" },  
    { "trigger": "NSDataDetector" },  
    { "trigger": "NSDataDetector.dataDetectorWithTypes:error:", "contents": "NSDataDetector.dataDetectorWithTypes:error:(${1:NSTextCheckingTypes checkingTypes}, error:${2:NSError** error})" },  
    { "trigger": "NSDataReadingMapped (1)" },  
    { "trigger": "NSDataReadingMappedAlways (8)" },  
    { "trigger": "NSDataReadingMappedIfSafe (1)" },  
    { "trigger": "NSDataReadingUncached (2)" },  
    { "trigger": "NSDataSearchAnchored (2)" },  
    { "trigger": "NSDataSearchBackwards (1)" },  
    { "trigger": "NSDataWritingAtomic (1)" },  
    { "trigger": "NSDataWritingFileProtectionComplete (536870912)" },  
    { "trigger": "NSDataWritingFileProtectionCompleteUnlessOpen (805306368)" },  
    { "trigger": "NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication (1073741824)" },  
    { "trigger": "NSDataWritingFileProtectionMask (4026531840)" },  
    { "trigger": "NSDataWritingFileProtectionNone (268435456)" },  
    { "trigger": "NSData.data" },  
    { "trigger": "NSData.dataWithBytesNoCopy:length:", "contents": "NSData.dataWithBytesNoCopy:length:(${1:void* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "NSData.dataWithBytesNoCopy:length:freeWhenDone:", "contents": "NSData.dataWithBytesNoCopy:length:freeWhenDone:(${1:void* bytes}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL b})" },  
    { "trigger": "NSData.dataWithBytes:length:", "contents": "NSData.dataWithBytes:length:(${1:void* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "NSData.dataWithContentsOfFile:", "contents": "NSData.dataWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "NSData.dataWithContentsOfFile:options:error:", "contents": "NSData.dataWithContentsOfFile:options:error:(${1:NSString* path}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})" },  
    { "trigger": "NSData.dataWithContentsOfMappedFile:", "contents": "NSData.dataWithContentsOfMappedFile:(${1:NSString* path})" },  
    { "trigger": "NSData.dataWithContentsOfURL:", "contents": "NSData.dataWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "NSData.dataWithContentsOfURL:options:error:", "contents": "NSData.dataWithContentsOfURL:options:error:(${1:NSURL* url}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})" },  
    { "trigger": "NSData.dataWithData:", "contents": "NSData.dataWithData:(${1:NSData* data})" },  
    { "trigger": "NSDate" },  
    { "trigger": "NSDateAttributeType (900)" },  
    { "trigger": "NSDateComponents" },  
    { "trigger": "NSDateFormatter" },  
    { "trigger": "NSDateFormatterBehavior10_4 (1040)" },  
    { "trigger": "NSDateFormatterBehaviorDefault (0)" },  
    { "trigger": "NSDateFormatterFullStyle (4)" },  
    { "trigger": "NSDateFormatterLongStyle (3)" },  
    { "trigger": "NSDateFormatterMediumStyle (2)" },  
    { "trigger": "NSDateFormatterNoStyle (0)" },  
    { "trigger": "NSDateFormatterShortStyle (1)" },  
    { "trigger": "NSDateFormatter.dateFormatFromTemplate:options:locale:", "contents": "NSDateFormatter.dateFormatFromTemplate:options:locale:(${1:NSString* tmplate}, options:${2:NSUInteger opts}, locale:${3:NSLocale* locale})" },  
    { "trigger": "NSDateFormatter.defaultFormatterBehavior" },  
    { "trigger": "NSDateFormatter.localizedStringFromDate:dateStyle:timeStyle:", "contents": "NSDateFormatter.localizedStringFromDate:dateStyle:timeStyle:(${1:NSDate* date}, dateStyle:${2:NSDateFormatterStyle dstyle}, timeStyle:${3:NSDateFormatterStyle tstyle})" },  
    { "trigger": "NSDateFormatter.setDefaultFormatterBehavior:", "contents": "NSDateFormatter.setDefaultFormatterBehavior:(${1:NSDateFormatterBehavior behavior})" },  
    { "trigger": "NSDate.date" },  
    { "trigger": "NSDate.dateWithTimeIntervalSince1970:", "contents": "NSDate.dateWithTimeIntervalSince1970:(${1:NSTimeInterval secs})" },  
    { "trigger": "NSDate.dateWithTimeIntervalSinceNow:", "contents": "NSDate.dateWithTimeIntervalSinceNow:(${1:NSTimeInterval secs})" },  
    { "trigger": "NSDate.dateWithTimeIntervalSinceReferenceDate:", "contents": "NSDate.dateWithTimeIntervalSinceReferenceDate:(${1:NSTimeInterval secs})" },  
    { "trigger": "NSDate.dateWithTimeInterval:sinceDate:", "contents": "NSDate.dateWithTimeInterval:sinceDate:(${1:NSTimeInterval ti}, sinceDate:${2:NSDate* date})" },  
    { "trigger": "NSDate.distantFuture" },  
    { "trigger": "NSDate.distantPast" },  
    { "trigger": "NSDate.timeIntervalSinceReferenceDate" },  
    { "trigger": "NSDayCalendarUnit (16)" },  
    { "trigger": "NSDeallocateMemoryPages", "contents": "NSDeallocateMemoryPages(${1:void* ptr}, ${2:NSUInteger bytes})" },  
    { "trigger": "NSDeallocateObject", "contents": "NSDeallocateObject(${1:id object})" },  
    { "trigger": "NSDecimalAdd", "contents": "NSDecimalAdd(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalAttributeType (400)" },  
    { "trigger": "NSDecimalCompact", "contents": "NSDecimalCompact(${1:NSDecimal* number})" },  
    { "trigger": "NSDecimalCompare", "contents": "NSDecimalCompare(${1:NSDecimal* leftOperand}, ${2:NSDecimal* rightOperand})" },  
    { "trigger": "NSDecimalCopy", "contents": "NSDecimalCopy(${1:NSDecimal* destination}, ${2:NSDecimal* source})" },  
    { "trigger": "NSDecimalDivide", "contents": "NSDecimalDivide(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalIsNotANumber", "contents": "NSDecimalIsNotANumber(${1:NSDecimal* dcm})" },  
    { "trigger": "NSDecimalMaxSize (8)" },  
    { "trigger": "NSDecimalMultiply", "contents": "NSDecimalMultiply(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalMultiplyByPowerOf10", "contents": "NSDecimalMultiplyByPowerOf10(${1:NSDecimal* result}, ${2:NSDecimal* number}, ${3:short power}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalNoScale (32767)" },  
    { "trigger": "NSDecimalNormalize", "contents": "NSDecimalNormalize(${1:NSDecimal* number1}, ${2:NSDecimal* number2}, ${3:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalNumber" },  
    { "trigger": "NSDecimalNumberBehaviors" },  
    { "trigger": "NSDecimalNumberDivideByZeroException (NSString*)" },  
    { "trigger": "NSDecimalNumberExactnessException (NSString*)" },  
    { "trigger": "NSDecimalNumberHandler" },  
    { "trigger": "NSDecimalNumberHandler.decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", "contents": "NSDecimalNumberHandler.decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:(${1:NSRoundingMode roundingMode}, scale:${2:short scale}, raiseOnExactness:${3:BOOL exact}, raiseOnOverflow:${4:BOOL overflow}, raiseOnUnderflow:${5:BOOL underflow}, raiseOnDivideByZero:${6:BOOL divideByZero})" },  
    { "trigger": "NSDecimalNumberHandler.defaultDecimalNumberHandler" },  
    { "trigger": "NSDecimalNumberOverflowException (NSString*)" },  
    { "trigger": "NSDecimalNumberUnderflowException (NSString*)" },  
    { "trigger": "NSDecimalNumber.decimalNumberWithDecimal:", "contents": "NSDecimalNumber.decimalNumberWithDecimal:(${1:NSDecimal dcm})" },  
    { "trigger": "NSDecimalNumber.decimalNumberWithMantissa:exponent:isNegative:", "contents": "NSDecimalNumber.decimalNumberWithMantissa:exponent:isNegative:(${1:unsigned long long mantissa}, exponent:${2:short exponent}, isNegative:${3:BOOL flag})" },  
    { "trigger": "NSDecimalNumber.decimalNumberWithString:", "contents": "NSDecimalNumber.decimalNumberWithString:(${1:NSString* numberValue})" },  
    { "trigger": "NSDecimalNumber.decimalNumberWithString:locale:", "contents": "NSDecimalNumber.decimalNumberWithString:locale:(${1:NSString* numberValue}, locale:${2:id locale})" },  
    { "trigger": "NSDecimalNumber.defaultBehavior" },  
    { "trigger": "NSDecimalNumber.maximumDecimalNumber" },  
    { "trigger": "NSDecimalNumber.minimumDecimalNumber" },  
    { "trigger": "NSDecimalNumber.notANumber" },  
    { "trigger": "NSDecimalNumber.one" },  
    { "trigger": "NSDecimalNumber.setDefaultBehavior:", "contents": "NSDecimalNumber.setDefaultBehavior:(${1:id behavior})" },  
    { "trigger": "NSDecimalNumber.zero" },  
    { "trigger": "NSDecimalPower", "contents": "NSDecimalPower(${1:NSDecimal* result}, ${2:NSDecimal* number}, ${3:NSUInteger power}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalRound", "contents": "NSDecimalRound(${1:NSDecimal* result}, ${2:NSDecimal* number}, ${3:NSInteger scale}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecimalString", "contents": "NSDecimalString(${1:NSDecimal* dcm}, ${2:id locale})" },  
    { "trigger": "NSDecimalSubtract", "contents": "NSDecimalSubtract(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})" },  
    { "trigger": "NSDecrementExtraRefCountWasZero", "contents": "NSDecrementExtraRefCountWasZero(${1:id object})" },  
    { "trigger": "NSDefaultMallocZone" },  
    { "trigger": "NSDefaultRunLoopMode (NSString*)" },  
    { "trigger": "NSDelayedPerforming" },  
    { "trigger": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget:", "contents": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget:(${1:id aTarget})" },  
    { "trigger": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget:selector:object:", "contents": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget:selector:object:(${1:id aTarget}, selector:${2:SEL aSelector}, object:${3:id anArgument})" },  
    { "trigger": "NSDeletedObjectsKey (NSString*)" },  
    { "trigger": "NSDemoApplicationDirectory (2)" },  
    { "trigger": "NSDenyDeleteRule (3)" },  
    { "trigger": "NSDesktopDirectory (12)" },  
    { "trigger": "NSDestinationInvalidException (NSString*)" },  
    { "trigger": "NSDetailedErrorsKey (NSString*)" },  
    { "trigger": "NSDeveloperApplicationDirectory (3)" },  
    { "trigger": "NSDeveloperDirectory (6)" },  
    { "trigger": "NSDiacriticInsensitivePredicateOption (2)" },  
    { "trigger": "NSDiacriticInsensitiveSearch (128)" },  
    { "trigger": "NSDictionary" },  
    { "trigger": "NSDictionaryResultType (2)" },  
    { "trigger": "NSDictionary.dictionary" },  
    { "trigger": "NSDictionary.dictionaryWithContentsOfFile:", "contents": "NSDictionary.dictionaryWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "NSDictionary.dictionaryWithContentsOfURL:", "contents": "NSDictionary.dictionaryWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "NSDictionary.dictionaryWithDictionary:", "contents": "NSDictionary.dictionaryWithDictionary:(${1:NSDictionary* dict})" },  
    { "trigger": "NSDictionary.dictionaryWithObject:forKey:", "contents": "NSDictionary.dictionaryWithObject:forKey:(${1:id object}, forKey:${2:id key})" },  
    { "trigger": "NSDictionary.dictionaryWithObjectsAndKeys:", "contents": "NSDictionary.dictionaryWithObjectsAndKeys:(${1:id firstObject})" },  
    { "trigger": "NSDictionary.dictionaryWithObjects:forKeys:", "contents": "NSDictionary.dictionaryWithObjects:forKeys:(${1:NSArray* objects}, forKeys:${2:NSArray* keys})" },  
    { "trigger": "NSDictionary.dictionaryWithObjects:forKeys:count:", "contents": "NSDictionary.dictionaryWithObjects:forKeys:count:(${1:id* objects}, forKeys:${2:id* keys}, count:${3:NSUInteger cnt})" },  
    { "trigger": "NSDidBecomeSingleThreadedNotification (NSString*)" },  
    { "trigger": "NSDirectPredicateModifier (0)" },  
    { "trigger": "NSDirectoryEnumerationSkipsHiddenFiles (4)" },  
    { "trigger": "NSDirectoryEnumerationSkipsPackageDescendants (2)" },  
    { "trigger": "NSDirectoryEnumerationSkipsSubdirectoryDescendants (1)" },  
    { "trigger": "NSDirectoryEnumerator" },  
    { "trigger": "NSDiscardableContent" },  
    { "trigger": "NSDiscardableContentProxy" },  
    { "trigger": "NSDistinctUnionOfArraysKeyValueOperator (NSString*)" },  
    { "trigger": "NSDistinctUnionOfObjectsKeyValueOperator (NSString*)" },  
    { "trigger": "NSDistinctUnionOfSetsKeyValueOperator (NSString*)" },  
    { "trigger": "NSDocumentDirectory (9)" },  
    { "trigger": "NSDocumentationDirectory (8)" },  
    { "trigger": "NSDoubleAttributeType (500)" },  
    { "trigger": "NSDownloadsDirectory (15)" },  
    { "trigger": "NSEndsWithPredicateOperatorType (9)" },  
    { "trigger": "NSEntityDescription" },  
    { "trigger": "NSEntityDescription.entityForName:inManagedObjectContext:", "contents": "NSEntityDescription.entityForName:inManagedObjectContext:(${1:NSString* entityName}, inManagedObjectContext:${2:NSManagedObjectContext* context})" },  
    { "trigger": "NSEntityDescription.insertNewObjectForEntityForName:inManagedObjectContext:", "contents": "NSEntityDescription.insertNewObjectForEntityForName:inManagedObjectContext:(${1:NSString* entityName}, inManagedObjectContext:${2:NSManagedObjectContext* context})" },  
    { "trigger": "NSEntityMapping" },  
    { "trigger": "NSEntityMigrationPolicy" },  
    { "trigger": "NSEntityMigrationPolicyError (134170)" },  
    { "trigger": "NSEnumerationConcurrent (1)" },  
    { "trigger": "NSEnumerationReverse (2)" },  
    { "trigger": "NSEnumerator" },  
    { "trigger": "NSEqualRanges", "contents": "NSEqualRanges(${1:NSRange range1}, ${2:NSRange range2})" },  
    { "trigger": "NSEqualToPredicateOperatorType (4)" },  
    { "trigger": "NSEraCalendarUnit (2)" },  
    { "trigger": "NSError" },  
    { "trigger": "NSErrorFailingURLStringKey (NSString*)" },  
    { "trigger": "NSErrorMergePolicy (id)" },  
    { "trigger": "NSErrorMergePolicyType (0)" },  
    { "trigger": "NSErrorRecoveryAttempting" },  
    { "trigger": "NSError.errorWithDomain:code:userInfo:", "contents": "NSError.errorWithDomain:code:userInfo:(${1:NSString* domain}, code:${2:NSInteger code}, userInfo:${3:NSDictionary* dict})" },  
    { "trigger": "NSEvaluatedObjectExpressionType (1)" },  
    { "trigger": "NSException" },  
    { "trigger": "NSException.exceptionWithName:reason:userInfo:", "contents": "NSException.exceptionWithName:reason:userInfo:(${1:NSString* name}, reason:${2:NSString* reason}, userInfo:${3:NSDictionary* userInfo})" },  
    { "trigger": "NSException.raise:format:", "contents": "NSException.raise:format:(${1:NSString* name}, format:${2:NSString* format})" },  
    { "trigger": "NSException.raise:format:arguments:", "contents": "NSException.raise:format:arguments:(${1:NSString* name}, format:${2:NSString* format}, arguments:${3:va_list argList})" },  
    { "trigger": "NSExecutableArchitectureMismatchError (3585)" },  
    { "trigger": "NSExecutableErrorMaximum (3839)" },  
    { "trigger": "NSExecutableErrorMinimum (3584)" },  
    { "trigger": "NSExecutableLinkError (3588)" },  
    { "trigger": "NSExecutableLoadError (3587)" },  
    { "trigger": "NSExecutableNotLoadableError (3584)" },  
    { "trigger": "NSExecutableRuntimeMismatchError (3586)" },  
    { "trigger": "NSExpression" },  
    { "trigger": "NSExpressionDescription" },  
    { "trigger": "NSExpression.expressionForAggregate:", "contents": "NSExpression.expressionForAggregate:(${1:NSArray* subexpressions})" },  
    { "trigger": "NSExpression.expressionForBlock:arguments:", "contents": "NSExpression.expressionForBlock:arguments:(${1:id (^)(id, NSArray *, NSMutableDictionary *) block}, arguments:${2:NSArray* arguments})" },  
    { "trigger": "NSExpression.expressionForConstantValue:", "contents": "NSExpression.expressionForConstantValue:(${1:id obj})" },  
    { "trigger": "NSExpression.expressionForEvaluatedObject" },  
    { "trigger": "NSExpression.expressionForFunction:arguments:", "contents": "NSExpression.expressionForFunction:arguments:(${1:NSString* name}, arguments:${2:NSArray* parameters})" },  
    { "trigger": "NSExpression.expressionForFunction:selectorName:arguments:", "contents": "NSExpression.expressionForFunction:selectorName:arguments:(${1:NSExpression* target}, selectorName:${2:NSString* name}, arguments:${3:NSArray* parameters})" },  
    { "trigger": "NSExpression.expressionForIntersectSet:with:", "contents": "NSExpression.expressionForIntersectSet:with:(${1:NSExpression* left}, with:${2:NSExpression* right})" },  
    { "trigger": "NSExpression.expressionForKeyPath:", "contents": "NSExpression.expressionForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "NSExpression.expressionForMinusSet:with:", "contents": "NSExpression.expressionForMinusSet:with:(${1:NSExpression* left}, with:${2:NSExpression* right})" },  
    { "trigger": "NSExpression.expressionForSubquery:usingIteratorVariable:predicate:", "contents": "NSExpression.expressionForSubquery:usingIteratorVariable:predicate:(${1:NSExpression* expression}, usingIteratorVariable:${2:NSString* variable}, predicate:${3:id predicate})" },  
    { "trigger": "NSExpression.expressionForUnionSet:with:", "contents": "NSExpression.expressionForUnionSet:with:(${1:NSExpression* left}, with:${2:NSExpression* right})" },  
    { "trigger": "NSExpression.expressionForVariable:", "contents": "NSExpression.expressionForVariable:(${1:NSString* string})" },  
    { "trigger": "NSExpression.expressionWithFormat:", "contents": "NSExpression.expressionWithFormat:(${1:NSString* expressionFormat})" },  
    { "trigger": "NSExpression.expressionWithFormat:argumentArray:", "contents": "NSExpression.expressionWithFormat:argumentArray:(${1:NSString* expressionFormat}, argumentArray:${2:NSArray* arguments})" },  
    { "trigger": "NSExpression.expressionWithFormat:arguments:", "contents": "NSExpression.expressionWithFormat:arguments:(${1:NSString* expressionFormat}, arguments:${2:va_list argList})" },  
    { "trigger": "NSExternalRecordImportError (134200)" },  
    { "trigger": "NSExtraRefCount", "contents": "NSExtraRefCount(${1:id object})" },  
    { "trigger": "NSFastEnumeration" },  
    { "trigger": "NSFetchRequest" },  
    { "trigger": "NSFetchRequestExpression" },  
    { "trigger": "NSFetchRequestExpressionType (50)" },  
    { "trigger": "NSFetchRequestExpression.expressionForFetch:context:countOnly:", "contents": "NSFetchRequestExpression.expressionForFetch:context:countOnly:(${1:NSExpression* fetch}, context:${2:NSExpression* context}, countOnly:${3:BOOL countFlag})" },  
    { "trigger": "NSFetchRequestType (1)" },  
    { "trigger": "NSFetchRequest.fetchRequestWithEntityName:", "contents": "NSFetchRequest.fetchRequestWithEntityName:(${1:NSString* entityName})" },  
    { "trigger": "NSFetchedPropertyDescription" },  
    { "trigger": "NSFetchedResultsChangeDelete (2)" },  
    { "trigger": "NSFetchedResultsChangeInsert (1)" },  
    { "trigger": "NSFetchedResultsChangeMove (3)" },  
    { "trigger": "NSFetchedResultsChangeUpdate (4)" },  
    { "trigger": "NSFetchedResultsController" },  
    { "trigger": "NSFetchedResultsControllerDelegate" },  
    { "trigger": "NSFetchedResultsController.deleteCacheWithName:", "contents": "NSFetchedResultsController.deleteCacheWithName:(${1:NSString* name})" },  
    { "trigger": "NSFetchedResultsSectionInfo" },  
    { "trigger": "NSFileAppendOnly (NSString*)" },  
    { "trigger": "NSFileBusy (NSString*)" },  
    { "trigger": "NSFileCoordinator" },  
    { "trigger": "NSFileCoordinatorReadingResolvesSymbolicLink (2)" },  
    { "trigger": "NSFileCoordinatorReadingWithoutChanges (1)" },  
    { "trigger": "NSFileCoordinatorWritingForDeleting (1)" },  
    { "trigger": "NSFileCoordinatorWritingForMerging (4)" },  
    { "trigger": "NSFileCoordinatorWritingForMoving (2)" },  
    { "trigger": "NSFileCoordinatorWritingForReplacing (8)" },  
    { "trigger": "NSFileCoordinator.addFilePresenter:", "contents": "NSFileCoordinator.addFilePresenter:(${1:id filePresenter})" },  
    { "trigger": "NSFileCoordinator.filePresenters" },  
    { "trigger": "NSFileCoordinator.removeFilePresenter:", "contents": "NSFileCoordinator.removeFilePresenter:(${1:id filePresenter})" },  
    { "trigger": "NSFileCreationDate (NSString*)" },  
    { "trigger": "NSFileDeviceIdentifier (NSString*)" },  
    { "trigger": "NSFileErrorMaximum (1023)" },  
    { "trigger": "NSFileErrorMinimum (0)" },  
    { "trigger": "NSFileExtensionHidden (NSString*)" },  
    { "trigger": "NSFileGroupOwnerAccountID (NSString*)" },  
    { "trigger": "NSFileGroupOwnerAccountName (NSString*)" },  
    { "trigger": "NSFileHFSCreatorCode (NSString*)" },  
    { "trigger": "NSFileHFSTypeCode (NSString*)" },  
    { "trigger": "NSFileHandle" },  
    { "trigger": "NSFileHandleConnectionAcceptedNotification (NSString*)" },  
    { "trigger": "NSFileHandleDataAvailableNotification (NSString*)" },  
    { "trigger": "NSFileHandleNotificationDataItem (NSString*)" },  
    { "trigger": "NSFileHandleNotificationFileHandleItem (NSString*)" },  
    { "trigger": "NSFileHandleNotificationMonitorModes (NSString*)" },  
    { "trigger": "NSFileHandleOperationException (NSString*)" },  
    { "trigger": "NSFileHandleReadCompletionNotification (NSString*)" },  
    { "trigger": "NSFileHandleReadToEndOfFileCompletionNotification (NSString*)" },  
    { "trigger": "NSFileHandle.fileHandleForReadingAtPath:", "contents": "NSFileHandle.fileHandleForReadingAtPath:(${1:NSString* path})" },  
    { "trigger": "NSFileHandle.fileHandleForReadingFromURL:error:", "contents": "NSFileHandle.fileHandleForReadingFromURL:error:(${1:NSURL* url}, error:${2:NSError** error})" },  
    { "trigger": "NSFileHandle.fileHandleForUpdatingAtPath:", "contents": "NSFileHandle.fileHandleForUpdatingAtPath:(${1:NSString* path})" },  
    { "trigger": "NSFileHandle.fileHandleForUpdatingURL:error:", "contents": "NSFileHandle.fileHandleForUpdatingURL:error:(${1:NSURL* url}, error:${2:NSError** error})" },  
    { "trigger": "NSFileHandle.fileHandleForWritingAtPath:", "contents": "NSFileHandle.fileHandleForWritingAtPath:(${1:NSString* path})" },  
    { "trigger": "NSFileHandle.fileHandleForWritingToURL:error:", "contents": "NSFileHandle.fileHandleForWritingToURL:error:(${1:NSURL* url}, error:${2:NSError** error})" },  
    { "trigger": "NSFileHandle.fileHandleWithNullDevice" },  
    { "trigger": "NSFileHandle.fileHandleWithStandardError" },  
    { "trigger": "NSFileHandle.fileHandleWithStandardInput" },  
    { "trigger": "NSFileHandle.fileHandleWithStandardOutput" },  
    { "trigger": "NSFileImmutable (NSString*)" },  
    { "trigger": "NSFileLockingError (255)" },  
    { "trigger": "NSFileManager" },  
    { "trigger": "NSFileManagerDelegate" },  
    { "trigger": "NSFileManagerItemReplacementUsingNewMetadataOnly (1)" },  
    { "trigger": "NSFileManagerItemReplacementWithoutDeletingBackupItem (2)" },  
    { "trigger": "NSFileManager.defaultManager" },  
    { "trigger": "NSFileModificationDate (NSString*)" },  
    { "trigger": "NSFileNoSuchFileError (4)" },  
    { "trigger": "NSFileOwnerAccountID (NSString*)" },  
    { "trigger": "NSFileOwnerAccountName (NSString*)" },  
    { "trigger": "NSFilePathErrorKey (NSString*)" },  
    { "trigger": "NSFilePosixPermissions (NSString*)" },  
    { "trigger": "NSFilePresenter" },  
    { "trigger": "NSFileProtectionComplete (NSString*)" },  
    { "trigger": "NSFileProtectionCompleteUnlessOpen (NSString*)" },  
    { "trigger": "NSFileProtectionCompleteUntilFirstUserAuthentication (NSString*)" },  
    { "trigger": "NSFileProtectionKey (NSString*)" },  
    { "trigger": "NSFileProtectionNone (NSString*)" },  
    { "trigger": "NSFileReadCorruptFileError (259)" },  
    { "trigger": "NSFileReadInapplicableStringEncodingError (261)" },  
    { "trigger": "NSFileReadInvalidFileNameError (258)" },  
    { "trigger": "NSFileReadNoPermissionError (257)" },  
    { "trigger": "NSFileReadNoSuchFileError (260)" },  
    { "trigger": "NSFileReadTooLargeError (263)" },  
    { "trigger": "NSFileReadUnknownError (256)" },  
    { "trigger": "NSFileReadUnknownStringEncodingError (264)" },  
    { "trigger": "NSFileReadUnsupportedSchemeError (262)" },  
    { "trigger": "NSFileReferenceCount (NSString*)" },  
    { "trigger": "NSFileSize (NSString*)" },  
    { "trigger": "NSFileSystemFileNumber (NSString*)" },  
    { "trigger": "NSFileSystemFreeNodes (NSString*)" },  
    { "trigger": "NSFileSystemFreeSize (NSString*)" },  
    { "trigger": "NSFileSystemNodes (NSString*)" },  
    { "trigger": "NSFileSystemNumber (NSString*)" },  
    { "trigger": "NSFileSystemSize (NSString*)" },  
    { "trigger": "NSFileType (NSString*)" },  
    { "trigger": "NSFileTypeBlockSpecial (NSString*)" },  
    { "trigger": "NSFileTypeCharacterSpecial (NSString*)" },  
    { "trigger": "NSFileTypeDirectory (NSString*)" },  
    { "trigger": "NSFileTypeRegular (NSString*)" },  
    { "trigger": "NSFileTypeSocket (NSString*)" },  
    { "trigger": "NSFileTypeSymbolicLink (NSString*)" },  
    { "trigger": "NSFileTypeUnknown (NSString*)" },  
    { "trigger": "NSFileVersion" },  
    { "trigger": "NSFileVersionAddingByMoving (1)" },  
    { "trigger": "NSFileVersionReplacingByMoving (1)" },  
    { "trigger": "NSFileVersion.currentVersionOfItemAtURL:", "contents": "NSFileVersion.currentVersionOfItemAtURL:(${1:NSURL* url})" },  
    { "trigger": "NSFileVersion.otherVersionsOfItemAtURL:", "contents": "NSFileVersion.otherVersionsOfItemAtURL:(${1:NSURL* url})" },  
    { "trigger": "NSFileVersion.removeOtherVersionsOfItemAtURL:error:", "contents": "NSFileVersion.removeOtherVersionsOfItemAtURL:error:(${1:NSURL* url}, error:${2:NSError** outError})" },  
    { "trigger": "NSFileVersion.unresolvedConflictVersionsOfItemAtURL:", "contents": "NSFileVersion.unresolvedConflictVersionsOfItemAtURL:(${1:NSURL* url})" },  
    { "trigger": "NSFileVersion.versionOfItemAtURL:forPersistentIdentifier:", "contents": "NSFileVersion.versionOfItemAtURL:forPersistentIdentifier:(${1:NSURL* url}, forPersistentIdentifier:${2:id persistentIdentifier})" },  
    { "trigger": "NSFileWrapper" },  
    { "trigger": "NSFileWrapperReadingImmediate (1)" },  
    { "trigger": "NSFileWrapperReadingWithoutMapping (2)" },  
    { "trigger": "NSFileWrapperWritingAtomic (1)" },  
    { "trigger": "NSFileWrapperWritingWithNameUpdating (2)" },  
    { "trigger": "NSFileWriteFileExistsError (516)" },  
    { "trigger": "NSFileWriteInapplicableStringEncodingError (517)" },  
    { "trigger": "NSFileWriteInvalidFileNameError (514)" },  
    { "trigger": "NSFileWriteNoPermissionError (513)" },  
    { "trigger": "NSFileWriteOutOfSpaceError (640)" },  
    { "trigger": "NSFileWriteUnknownError (512)" },  
    { "trigger": "NSFileWriteUnsupportedSchemeError (518)" },  
    { "trigger": "NSFileWriteVolumeReadOnlyError (642)" },  
    { "trigger": "NSFloatAttributeType (600)" },  
    { "trigger": "NSForcedOrderingSearch (512)" },  
    { "trigger": "NSFormatter" },  
    { "trigger": "NSFormattingError (2048)" },  
    { "trigger": "NSFormattingErrorMaximum (2559)" },  
    { "trigger": "NSFormattingErrorMinimum (2048)" },  
    { "trigger": "NSFoundationVersionNumber (double)" },  
    { "trigger": "NSFoundationVersionNumber10_0 (397.40)" },  
    { "trigger": "NSFoundationVersionNumber10_1 (425.00)" },  
    { "trigger": "NSFoundationVersionNumber10_1_1 (425.00)" },  
    { "trigger": "NSFoundationVersionNumber10_1_2 (425.00)" },  
    { "trigger": "NSFoundationVersionNumber10_1_3 (425.00)" },  
    { "trigger": "NSFoundationVersionNumber10_1_4 (425.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_1 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_2 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_3 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_4 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_5 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_6 (462.00)" },  
    { "trigger": "NSFoundationVersionNumber10_2_7 (462.70)" },  
    { "trigger": "NSFoundationVersionNumber10_2_8 (462.70)" },  
    { "trigger": "NSFoundationVersionNumber10_3 (500.00)" },  
    { "trigger": "NSFoundationVersionNumber10_3_1 (500.00)" },  
    { "trigger": "NSFoundationVersionNumber10_3_2 (500.30)" },  
    { "trigger": "NSFoundationVersionNumber10_3_3 (500.54)" },  
    { "trigger": "NSFoundationVersionNumber10_3_4 (500.56)" },  
    { "trigger": "NSFoundationVersionNumber10_3_5 (500.56)" },  
    { "trigger": "NSFoundationVersionNumber10_3_6 (500.56)" },  
    { "trigger": "NSFoundationVersionNumber10_3_7 (500.56)" },  
    { "trigger": "NSFoundationVersionNumber10_3_8 (500.56)" },  
    { "trigger": "NSFoundationVersionNumber10_3_9 (500.58)" },  
    { "trigger": "NSFoundationVersionNumber10_4 (567.00)" },  
    { "trigger": "NSFoundationVersionNumber10_4_1 (567.00)" },  
    { "trigger": "NSFoundationVersionNumber10_4_10 (567.29)" },  
    { "trigger": "NSFoundationVersionNumber10_4_11 (567.36)" },  
    { "trigger": "NSFoundationVersionNumber10_4_2 (567.12)" },  
    { "trigger": "NSFoundationVersionNumber10_4_3 (567.21)" },  
    { "trigger": "NSFoundationVersionNumber10_4_4_Intel (567.23)" },  
    { "trigger": "NSFoundationVersionNumber10_4_4_PowerPC (567.21)" },  
    { "trigger": "NSFoundationVersionNumber10_4_5 (567.25)" },  
    { "trigger": "NSFoundationVersionNumber10_4_6 (567.26)" },  
    { "trigger": "NSFoundationVersionNumber10_4_7 (567.27)" },  
    { "trigger": "NSFoundationVersionNumber10_4_8 (567.28)" },  
    { "trigger": "NSFoundationVersionNumber10_4_9 (567.29)" },  
    { "trigger": "NSFoundationVersionNumber10_5 (677.00)" },  
    { "trigger": "NSFoundationVersionNumber10_5_1 (677.10)" },  
    { "trigger": "NSFoundationVersionNumber10_5_2 (677.15)" },  
    { "trigger": "NSFoundationVersionNumber10_5_3 (677.19)" },  
    { "trigger": "NSFoundationVersionNumber10_5_4 (677.19)" },  
    { "trigger": "NSFoundationVersionNumber10_5_5 (677.21)" },  
    { "trigger": "NSFoundationVersionNumber10_5_6 (677.22)" },  
    { "trigger": "NSFoundationVersionNumber10_5_7 (677.24)" },  
    { "trigger": "NSFoundationVersionNumber10_5_8 (677.26)" },  
    { "trigger": "NSFoundationVersionNumber10_6 (751.00)" },  
    { "trigger": "NSFoundationVersionNumber10_6_1 (751.00)" },  
    { "trigger": "NSFoundationVersionNumber10_6_2 (751.14)" },  
    { "trigger": "NSFoundationVersionNumber10_6_3 (751.21)" },  
    { "trigger": "NSFoundationVersionNumber10_6_4 (751.29)" },  
    { "trigger": "NSFoundationVersionNumber10_6_5 (751.42)" },  
    { "trigger": "NSFoundationVersionNumber_iOS_4_0 (751.32)" },  
    { "trigger": "NSFoundationVersionNumber_iOS_4_1 (751.37)" },  
    { "trigger": "NSFoundationVersionNumber_iOS_4_2 (751.49)" },  
    { "trigger": "NSFoundationVersionNumber_iPhoneOS_2_0 (678.24)" },  
    { "trigger": "NSFoundationVersionNumber_iPhoneOS_2_1 (678.26)" },  
    { "trigger": "NSFoundationVersionNumber_iPhoneOS_2_2 (678.29)" },  
    { "trigger": "NSFoundationVersionNumber_iPhoneOS_3_0 (678.47)" },  
    { "trigger": "NSFoundationVersionNumber_iPhoneOS_3_1 (678.51)" },  
    { "trigger": "NSFoundationVersionNumber_iPhoneOS_3_2 (678.60)" },  
    { "trigger": "NSFoundationVersionWithFileManagerResourceForkSupport (412)" },  
    { "trigger": "NSFullUserName" },  
    { "trigger": "NSFunctionExpressionType (4)" },  
    { "trigger": "NSGenericException (NSString*)" },  
    { "trigger": "NSGetSizeAndAlignment", "contents": "NSGetSizeAndAlignment(${1:char* typePtr}, ${2:NSUInteger* sizep}, ${3:NSUInteger* alignp})" },  
    { "trigger": "NSGetUncaughtExceptionHandler" },  
    { "trigger": "NSGlobalDomain (NSString*)" },  
    { "trigger": "NSGreaterThanOrEqualToPredicateOperatorType (3)" },  
    { "trigger": "NSGreaterThanPredicateOperatorType (2)" },  
    { "trigger": "NSGregorianCalendar (NSString*)" },  
    { "trigger": "NSHPUXOperatingSystem (4)" },  
    { "trigger": "NSHTTPCookie" },  
    { "trigger": "NSHTTPCookieAcceptPolicyAlways (0)" },  
    { "trigger": "NSHTTPCookieAcceptPolicyNever (1)" },  
    { "trigger": "NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain (2)" },  
    { "trigger": "NSHTTPCookieComment (NSString*)" },  
    { "trigger": "NSHTTPCookieCommentURL (NSString*)" },  
    { "trigger": "NSHTTPCookieDiscard (NSString*)" },  
    { "trigger": "NSHTTPCookieDomain (NSString*)" },  
    { "trigger": "NSHTTPCookieExpires (NSString*)" },  
    { "trigger": "NSHTTPCookieManagerAcceptPolicyChangedNotification (NSString*)" },  
    { "trigger": "NSHTTPCookieManagerCookiesChangedNotification (NSString*)" },  
    { "trigger": "NSHTTPCookieMaximumAge (NSString*)" },  
    { "trigger": "NSHTTPCookieName (NSString*)" },  
    { "trigger": "NSHTTPCookieOriginURL (NSString*)" },  
    { "trigger": "NSHTTPCookiePath (NSString*)" },  
    { "trigger": "NSHTTPCookiePort (NSString*)" },  
    { "trigger": "NSHTTPCookieSecure (NSString*)" },  
    { "trigger": "NSHTTPCookieStorage" },  
    { "trigger": "NSHTTPCookieStorage.sharedHTTPCookieStorage" },  
    { "trigger": "NSHTTPCookieValue (NSString*)" },  
    { "trigger": "NSHTTPCookieVersion (NSString*)" },  
    { "trigger": "NSHTTPCookie.cookieWithProperties:", "contents": "NSHTTPCookie.cookieWithProperties:(${1:NSDictionary* properties})" },  
    { "trigger": "NSHTTPCookie.cookiesWithResponseHeaderFields:forURL:", "contents": "NSHTTPCookie.cookiesWithResponseHeaderFields:forURL:(${1:NSDictionary* headerFields}, forURL:${2:NSURL* URL})" },  
    { "trigger": "NSHTTPCookie.requestHeaderFieldsWithCookies:", "contents": "NSHTTPCookie.requestHeaderFieldsWithCookies:(${1:NSArray* cookies})" },  
    { "trigger": "NSHTTPURLResponse" },  
    { "trigger": "NSHTTPURLResponse.localizedStringForStatusCode:", "contents": "NSHTTPURLResponse.localizedStringForStatusCode:(${1:NSInteger statusCode})" },  
    { "trigger": "NSHebrewCalendar (NSString*)" },  
    { "trigger": "NSHelpAnchorErrorKey (NSString*)" },  
    { "trigger": "NSHomeDirectory" },  
    { "trigger": "NSHomeDirectoryForUser", "contents": "NSHomeDirectoryForUser(${1:NSString* userName})" },  
    { "trigger": "NSHostByteOrder" },  
    { "trigger": "NSHourCalendarUnit (32)" },  
    { "trigger": "NSINTEGER_DEFINED (1)" },  
    { "trigger": "NSISO2022JPStringEncoding (21)" },  
    { "trigger": "NSISO8601Calendar (NSString*)" },  
    { "trigger": "NSISOLatin1StringEncoding (5)" },  
    { "trigger": "NSISOLatin2StringEncoding (9)" },  
    { "trigger": "NSIgnorePersistentStoreVersioningOption (NSString*)" },  
    { "trigger": "NSInMemoryStoreType (NSString*)" },  
    { "trigger": "NSInPredicateOperatorType (10)" },  
    { "trigger": "NSIncrementExtraRefCount", "contents": "NSIncrementExtraRefCount(${1:id object})" },  
    { "trigger": "NSIncrementalStore" },  
    { "trigger": "NSIncrementalStoreNode" },  
    { "trigger": "NSIncrementalStore.identifierForNewStoreAtURL:", "contents": "NSIncrementalStore.identifierForNewStoreAtURL:(${1:NSURL* storeURL})" },  
    { "trigger": "NSIndexPath" },  
    { "trigger": "NSIndexPath" },  
    { "trigger": "NSIndexPath.indexPathForRow:inSection:", "contents": "NSIndexPath.indexPathForRow:inSection:(${1:NSInteger row}, inSection:${2:NSInteger section})" },  
    { "trigger": "NSIndexPath.indexPathWithIndex:", "contents": "NSIndexPath.indexPathWithIndex:(${1:NSUInteger index})" },  
    { "trigger": "NSIndexPath.indexPathWithIndexes:length:", "contents": "NSIndexPath.indexPathWithIndexes:length:(${1:NSUInteger* indexes}, length:${2:NSUInteger length})" },  
    { "trigger": "NSIndexSet" },  
    { "trigger": "NSIndexSet.indexSet" },  
    { "trigger": "NSIndexSet.indexSetWithIndex:", "contents": "NSIndexSet.indexSetWithIndex:(${1:NSUInteger value})" },  
    { "trigger": "NSIndexSet.indexSetWithIndexesInRange:", "contents": "NSIndexSet.indexSetWithIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "NSIndianCalendar (NSString*)" },  
    { "trigger": "NSInferMappingModelAutomaticallyOption (NSString*)" },  
    { "trigger": "NSInferredMappingModelError (134190)" },  
    { "trigger": "NSInputMethodsDirectory (16)" },  
    { "trigger": "NSInputStream" },  
    { "trigger": "NSInputStream.inputStreamWithData:", "contents": "NSInputStream.inputStreamWithData:(${1:NSData* data})" },  
    { "trigger": "NSInputStream.inputStreamWithFileAtPath:", "contents": "NSInputStream.inputStreamWithFileAtPath:(${1:NSString* path})" },  
    { "trigger": "NSInputStream.inputStreamWithURL:", "contents": "NSInputStream.inputStreamWithURL:(${1:NSURL* url})" },  
    { "trigger": "NSInsertedObjectsKey (NSString*)" },  
    { "trigger": "NSInteger16AttributeType (100)" },  
    { "trigger": "NSInteger32AttributeType (200)" },  
    { "trigger": "NSInteger64AttributeType (300)" },  
    { "trigger": "NSIntegerMax (2147483647)" },  
    { "trigger": "NSIntegerMin (-2147483648)" },  
    { "trigger": "NSInternalInconsistencyException (NSString*)" },  
    { "trigger": "NSIntersectSetExpressionType (6)" },  
    { "trigger": "NSIntersectionRange", "contents": "NSIntersectionRange(${1:NSRange range1}, ${2:NSRange range2})" },  
    { "trigger": "NSInvalidArchiveOperationException (NSString*)" },  
    { "trigger": "NSInvalidArgumentException (NSString*)" },  
    { "trigger": "NSInvalidReceivePortException (NSString*)" },  
    { "trigger": "NSInvalidSendPortException (NSString*)" },  
    { "trigger": "NSInvalidUnarchiveOperationException (NSString*)" },  
    { "trigger": "NSInvalidatedAllObjectsKey (NSString*)" },  
    { "trigger": "NSInvalidatedObjectsKey (NSString*)" },  
    { "trigger": "NSInvocation" },  
    { "trigger": "NSInvocationOperation" },  
    { "trigger": "NSInvocationOperationCancelledException (NSString*)" },  
    { "trigger": "NSInvocationOperationVoidResultException (NSString*)" },  
    { "trigger": "NSInvocation.invocationWithMethodSignature:", "contents": "NSInvocation.invocationWithMethodSignature:(${1:NSMethodSignature* sig})" },  
    { "trigger": "NSIsNilTransformerName (NSString*)" },  
    { "trigger": "NSIsNotNilTransformerName (NSString*)" },  
    { "trigger": "NSIslamicCalendar (NSString*)" },  
    { "trigger": "NSIslamicCivilCalendar (NSString*)" },  
    { "trigger": "NSItemReplacementDirectory (99)" },  
    { "trigger": "NSJSONReadingAllowFragments (4)" },  
    { "trigger": "NSJSONReadingMutableContainers (1)" },  
    { "trigger": "NSJSONReadingMutableLeaves (2)" },  
    { "trigger": "NSJSONSerialization" },  
    { "trigger": "NSJSONSerialization.JSONObjectWithData:options:error:", "contents": "NSJSONSerialization.JSONObjectWithData:options:error:(${1:NSData* data}, options:${2:NSJSONReadingOptions opt}, error:${3:NSError** error})" },  
    { "trigger": "NSJSONSerialization.JSONObjectWithStream:options:error:", "contents": "NSJSONSerialization.JSONObjectWithStream:options:error:(${1:NSInputStream* stream}, options:${2:NSJSONReadingOptions opt}, error:${3:NSError** error})" },  
    { "trigger": "NSJSONSerialization.dataWithJSONObject:options:error:", "contents": "NSJSONSerialization.dataWithJSONObject:options:error:(${1:id obj}, options:${2:NSJSONWritingOptions opt}, error:${3:NSError** error})" },  
    { "trigger": "NSJSONSerialization.isValidJSONObject:", "contents": "NSJSONSerialization.isValidJSONObject:(${1:id obj})" },  
    { "trigger": "NSJSONSerialization.writeJSONObject:toStream:options:error:", "contents": "NSJSONSerialization.writeJSONObject:toStream:options:error:(${1:id obj}, toStream:${2:NSOutputStream* stream}, options:${3:NSJSONWritingOptions opt}, error:${4:NSError** error})" },  
    { "trigger": "NSJSONWritingPrettyPrinted (1)" },  
    { "trigger": "NSJapaneseCalendar (NSString*)" },  
    { "trigger": "NSJapaneseEUCStringEncoding (3)" },  
    { "trigger": "NSKeyPathExpressionType (3)" },  
    { "trigger": "NSKeyValueChangeIndexesKey (NSString*)" },  
    { "trigger": "NSKeyValueChangeInsertion (2)" },  
    { "trigger": "NSKeyValueChangeKindKey (NSString*)" },  
    { "trigger": "NSKeyValueChangeNewKey (NSString*)" },  
    { "trigger": "NSKeyValueChangeNotificationIsPriorKey (NSString*)" },  
    { "trigger": "NSKeyValueChangeOldKey (NSString*)" },  
    { "trigger": "NSKeyValueChangeRemoval (3)" },  
    { "trigger": "NSKeyValueChangeReplacement (4)" },  
    { "trigger": "NSKeyValueChangeSetting (1)" },  
    { "trigger": "NSKeyValueCoding" },  
    { "trigger": "NSKeyValueCoding.accessInstanceVariablesDirectly" },  
    { "trigger": "NSKeyValueIntersectSetMutation (3)" },  
    { "trigger": "NSKeyValueMinusSetMutation (2)" },  
    { "trigger": "NSKeyValueObserverNotification" },  
    { "trigger": "NSKeyValueObserverRegistration" },  
    { "trigger": "NSKeyValueObserving" },  
    { "trigger": "NSKeyValueObservingCustomization" },  
    { "trigger": "NSKeyValueObservingCustomization.automaticallyNotifiesObserversForKey:", "contents": "NSKeyValueObservingCustomization.automaticallyNotifiesObserversForKey:(${1:NSString* key})" },  
    { "trigger": "NSKeyValueObservingCustomization.keyPathsForValuesAffectingValueForKey:", "contents": "NSKeyValueObservingCustomization.keyPathsForValuesAffectingValueForKey:(${1:NSString* key})" },  
    { "trigger": "NSKeyValueObservingOptionInitial (4)" },  
    { "trigger": "NSKeyValueObservingOptionNew (1)" },  
    { "trigger": "NSKeyValueObservingOptionOld (2)" },  
    { "trigger": "NSKeyValueObservingOptionPrior (8)" },  
    { "trigger": "NSKeyValueSetSetMutation (4)" },  
    { "trigger": "NSKeyValueUnionSetMutation (1)" },  
    { "trigger": "NSKeyValueValidationError (1024)" },  
    { "trigger": "NSKeyedArchiver" },  
    { "trigger": "NSKeyedArchiverDelegate" },  
    { "trigger": "NSKeyedArchiverObjectSubstitution" },  
    { "trigger": "NSKeyedArchiverObjectSubstitution.classFallbacksForKeyedArchiver" },  
    { "trigger": "NSKeyedArchiver.archiveRootObject:toFile:", "contents": "NSKeyedArchiver.archiveRootObject:toFile:(${1:id rootObject}, toFile:${2:NSString* path})" },  
    { "trigger": "NSKeyedArchiver.archivedDataWithRootObject:", "contents": "NSKeyedArchiver.archivedDataWithRootObject:(${1:id rootObject})" },  
    { "trigger": "NSKeyedArchiver.classNameForClass:", "contents": "NSKeyedArchiver.classNameForClass:(${1:Class cls})" },  
    { "trigger": "NSKeyedArchiver.setClassName:forClass:", "contents": "NSKeyedArchiver.setClassName:forClass:(${1:NSString* codedName}, forClass:${2:Class cls})" },  
    { "trigger": "NSKeyedUnarchiveFromDataTransformerName (NSString*)" },  
    { "trigger": "NSKeyedUnarchiver" },  
    { "trigger": "NSKeyedUnarchiverDelegate" },  
    { "trigger": "NSKeyedUnarchiverObjectSubstitution" },  
    { "trigger": "NSKeyedUnarchiverObjectSubstitution.classForKeyedUnarchiver" },  
    { "trigger": "NSKeyedUnarchiver.classForClassName:", "contents": "NSKeyedUnarchiver.classForClassName:(${1:NSString* codedName})" },  
    { "trigger": "NSKeyedUnarchiver.setClass:forClassName:", "contents": "NSKeyedUnarchiver.setClass:forClassName:(${1:Class cls}, forClassName:${2:NSString* codedName})" },  
    { "trigger": "NSKeyedUnarchiver.unarchiveObjectWithData:", "contents": "NSKeyedUnarchiver.unarchiveObjectWithData:(${1:NSData* data})" },  
    { "trigger": "NSKeyedUnarchiver.unarchiveObjectWithFile:", "contents": "NSKeyedUnarchiver.unarchiveObjectWithFile:(${1:NSString* path})" },  
    { "trigger": "NSLessThanOrEqualToPredicateOperatorType (1)" },  
    { "trigger": "NSLessThanPredicateOperatorType (0)" },  
    { "trigger": "NSLibraryDirectory (5)" },  
    { "trigger": "NSLikePredicateOperatorType (7)" },  
    { "trigger": "NSLinguisticTagAdjective (NSString*)" },  
    { "trigger": "NSLinguisticTagAdverb (NSString*)" },  
    { "trigger": "NSLinguisticTagClassifier (NSString*)" },  
    { "trigger": "NSLinguisticTagCloseParenthesis (NSString*)" },  
    { "trigger": "NSLinguisticTagCloseQuote (NSString*)" },  
    { "trigger": "NSLinguisticTagConjunction (NSString*)" },  
    { "trigger": "NSLinguisticTagDash (NSString*)" },  
    { "trigger": "NSLinguisticTagDeterminer (NSString*)" },  
    { "trigger": "NSLinguisticTagIdiom (NSString*)" },  
    { "trigger": "NSLinguisticTagInterjection (NSString*)" },  
    { "trigger": "NSLinguisticTagNoun (NSString*)" },  
    { "trigger": "NSLinguisticTagNumber (NSString*)" },  
    { "trigger": "NSLinguisticTagOpenParenthesis (NSString*)" },  
    { "trigger": "NSLinguisticTagOpenQuote (NSString*)" },  
    { "trigger": "NSLinguisticTagOrganizationName (NSString*)" },  
    { "trigger": "NSLinguisticTagOther (NSString*)" },  
    { "trigger": "NSLinguisticTagOtherPunctuation (NSString*)" },  
    { "trigger": "NSLinguisticTagOtherWhitespace (NSString*)" },  
    { "trigger": "NSLinguisticTagOtherWord (NSString*)" },  
    { "trigger": "NSLinguisticTagParagraphBreak (NSString*)" },  
    { "trigger": "NSLinguisticTagParticle (NSString*)" },  
    { "trigger": "NSLinguisticTagPersonalName (NSString*)" },  
    { "trigger": "NSLinguisticTagPlaceName (NSString*)" },  
    { "trigger": "NSLinguisticTagPreposition (NSString*)" },  
    { "trigger": "NSLinguisticTagPronoun (NSString*)" },  
    { "trigger": "NSLinguisticTagPunctuation (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeLanguage (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeLemma (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeLexicalClass (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeNameType (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeNameTypeOrLexicalClass (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeScript (NSString*)" },  
    { "trigger": "NSLinguisticTagSchemeTokenType (NSString*)" },  
    { "trigger": "NSLinguisticTagSentenceTerminator (NSString*)" },  
    { "trigger": "NSLinguisticTagVerb (NSString*)" },  
    { "trigger": "NSLinguisticTagWhitespace (NSString*)" },  
    { "trigger": "NSLinguisticTagWord (NSString*)" },  
    { "trigger": "NSLinguisticTagWordJoiner (NSString*)" },  
    { "trigger": "NSLinguisticTagger" },  
    { "trigger": "NSLinguisticTaggerJoinNames (16)" },  
    { "trigger": "NSLinguisticTaggerOmitOther (8)" },  
    { "trigger": "NSLinguisticTaggerOmitPunctuation (2)" },  
    { "trigger": "NSLinguisticTaggerOmitWhitespace (4)" },  
    { "trigger": "NSLinguisticTaggerOmitWords (1)" },  
    { "trigger": "NSLinguisticTagger.availableTagSchemesForLanguage:", "contents": "NSLinguisticTagger.availableTagSchemesForLanguage:(${1:NSString* language})" },  
    { "trigger": "NSLiteralSearch (2)" },  
    { "trigger": "NSLoadedClasses (NSString*)" },  
    { "trigger": "NSLocalDomainMask (2)" },  
    { "trigger": "NSLocale" },  
    { "trigger": "NSLocaleAlternateQuotationBeginDelimiterKey (NSString*)" },  
    { "trigger": "NSLocaleAlternateQuotationEndDelimiterKey (NSString*)" },  
    { "trigger": "NSLocaleCalendar (NSString*)" },  
    { "trigger": "NSLocaleCollationIdentifier (NSString*)" },  
    { "trigger": "NSLocaleCollatorIdentifier (NSString*)" },  
    { "trigger": "NSLocaleCountryCode (NSString*)" },  
    { "trigger": "NSLocaleCurrencyCode (NSString*)" },  
    { "trigger": "NSLocaleCurrencySymbol (NSString*)" },  
    { "trigger": "NSLocaleDecimalSeparator (NSString*)" },  
    { "trigger": "NSLocaleExemplarCharacterSet (NSString*)" },  
    { "trigger": "NSLocaleGroupingSeparator (NSString*)" },  
    { "trigger": "NSLocale.ISOCountryCodes" },  
    { "trigger": "NSLocale.ISOCurrencyCodes" },  
    { "trigger": "NSLocale.ISOLanguageCodes" },  
    { "trigger": "NSLocaleIdentifier (NSString*)" },  
    { "trigger": "NSLocaleLanguageCode (NSString*)" },  
    { "trigger": "NSLocaleLanguageDirectionBottomToTop (4)" },  
    { "trigger": "NSLocaleLanguageDirectionLeftToRight (1)" },  
    { "trigger": "NSLocaleLanguageDirectionRightToLeft (2)" },  
    { "trigger": "NSLocaleLanguageDirectionTopToBottom (3)" },  
    { "trigger": "NSLocaleLanguageDirectionUnknown (0)" },  
    { "trigger": "NSLocaleMeasurementSystem (NSString*)" },  
    { "trigger": "NSLocaleQuotationBeginDelimiterKey (NSString*)" },  
    { "trigger": "NSLocaleQuotationEndDelimiterKey (NSString*)" },  
    { "trigger": "NSLocaleScriptCode (NSString*)" },  
    { "trigger": "NSLocaleUsesMetricSystem (NSString*)" },  
    { "trigger": "NSLocaleVariantCode (NSString*)" },  
    { "trigger": "NSLocale.autoupdatingCurrentLocale" },  
    { "trigger": "NSLocale.availableLocaleIdentifiers" },  
    { "trigger": "NSLocale.canonicalLanguageIdentifierFromString:", "contents": "NSLocale.canonicalLanguageIdentifierFromString:(${1:NSString* string})" },  
    { "trigger": "NSLocale.canonicalLocaleIdentifierFromString:", "contents": "NSLocale.canonicalLocaleIdentifierFromString:(${1:NSString* string})" },  
    { "trigger": "NSLocale.characterDirectionForLanguage:", "contents": "NSLocale.characterDirectionForLanguage:(${1:NSString* isoLangCode})" },  
    { "trigger": "NSLocale.commonISOCurrencyCodes" },  
    { "trigger": "NSLocale.componentsFromLocaleIdentifier:", "contents": "NSLocale.componentsFromLocaleIdentifier:(${1:NSString* string})" },  
    { "trigger": "NSLocale.currentLocale" },  
    { "trigger": "NSLocale.lineDirectionForLanguage:", "contents": "NSLocale.lineDirectionForLanguage:(${1:NSString* isoLangCode})" },  
    { "trigger": "NSLocale.localeIdentifierFromComponents:", "contents": "NSLocale.localeIdentifierFromComponents:(${1:NSDictionary* dict})" },  
    { "trigger": "NSLocale.localeIdentifierFromWindowsLocaleCode:", "contents": "NSLocale.localeIdentifierFromWindowsLocaleCode:(${1:uint32_t lcid})" },  
    { "trigger": "NSLocale.preferredLanguages" },  
    { "trigger": "NSLocale.systemLocale" },  
    { "trigger": "NSLocale.windowsLocaleCodeFromLocaleIdentifier:", "contents": "NSLocale.windowsLocaleCodeFromLocaleIdentifier:(${1:NSString* localeIdentifier})" },  
    { "trigger": "NSLocalizedDescriptionKey (NSString*)" },  
    { "trigger": "NSLocalizedFailureReasonErrorKey (NSString*)" },  
    { "trigger": "NSLocalizedRecoveryOptionsErrorKey (NSString*)" },  
    { "trigger": "NSLocalizedRecoverySuggestionErrorKey (NSString*)" },  
    { "trigger": "NSLocationInRange", "contents": "NSLocationInRange(${1:NSUInteger loc}, ${2:NSRange range})" },  
    { "trigger": "NSLock" },  
    { "trigger": "NSLocking" },  
    { "trigger": "NSLog", "contents": "NSLog(${1:NSString* format})" },  
    { "trigger": "NSLogPageSize" },  
    { "trigger": "NSLogv", "contents": "NSLogv(${1:NSString* format}, ${2:va_list args})" },  
    { "trigger": "NSMACHOperatingSystem (5)" },  
    { "trigger": "NSMacOSRomanStringEncoding (30)" },  
    { "trigger": "NSMachErrorDomain (NSString*)" },  
    { "trigger": "NSMachPort" },  
    { "trigger": "NSMachPortDeallocateNone (0)" },  
    { "trigger": "NSMachPortDeallocateReceiveRight (2)" },  
    { "trigger": "NSMachPortDeallocateSendRight (1)" },  
    { "trigger": "NSMachPortDelegate" },  
    { "trigger": "NSMachPort.portWithMachPort:", "contents": "NSMachPort.portWithMachPort:(${1:uint32_t machPort})" },  
    { "trigger": "NSMachPort.portWithMachPort:options:", "contents": "NSMachPort.portWithMachPort:options:(${1:uint32_t machPort}, options:${2:NSUInteger f})" },  
    { "trigger": "NSMainQueueConcurrencyType (2)" },  
    { "trigger": "NSMakeCollectable", "contents": "NSMakeCollectable(${1:CFTypeRef cf})" },  
    { "trigger": "NSMakeRange", "contents": "NSMakeRange(${1:NSUInteger loc}, ${2:NSUInteger len})" },  
    { "trigger": "NSMallocException (NSString*)" },  
    { "trigger": "NSManagedObject" },  
    { "trigger": "NSManagedObjectContext" },  
    { "trigger": "NSManagedObjectContextDidSaveNotification (NSString*)" },  
    { "trigger": "NSManagedObjectContextLockingError (132000)" },  
    { "trigger": "NSManagedObjectContextObjectsDidChangeNotification (NSString*)" },  
    { "trigger": "NSManagedObjectContextWillSaveNotification (NSString*)" },  
    { "trigger": "NSManagedObjectExternalRelationshipError (133010)" },  
    { "trigger": "NSManagedObjectID" },  
    { "trigger": "NSManagedObjectIDResultType (1)" },  
    { "trigger": "NSManagedObjectMergeError (133020)" },  
    { "trigger": "NSManagedObjectModel" },  
    { "trigger": "NSManagedObjectModel.mergedModelFromBundles:", "contents": "NSManagedObjectModel.mergedModelFromBundles:(${1:NSArray* bundles})" },  
    { "trigger": "NSManagedObjectModel.mergedModelFromBundles:forStoreMetadata:", "contents": "NSManagedObjectModel.mergedModelFromBundles:forStoreMetadata:(${1:NSArray* bundles}, forStoreMetadata:${2:NSDictionary* metadata})" },  
    { "trigger": "NSManagedObjectModel.modelByMergingModels:", "contents": "NSManagedObjectModel.modelByMergingModels:(${1:NSArray* models})" },  
    { "trigger": "NSManagedObjectModel.modelByMergingModels:forStoreMetadata:", "contents": "NSManagedObjectModel.modelByMergingModels:forStoreMetadata:(${1:NSArray* models}, forStoreMetadata:${2:NSDictionary* metadata})" },  
    { "trigger": "NSManagedObjectReferentialIntegrityError (133000)" },  
    { "trigger": "NSManagedObjectResultType (0)" },  
    { "trigger": "NSManagedObjectValidationError (1550)" },  
    { "trigger": "NSManagedObject.contextShouldIgnoreUnmodeledPropertyChanges" },  
    { "trigger": "NSMappedRead (1)" },  
    { "trigger": "NSMappingModel" },  
    { "trigger": "NSMappingModel.inferredMappingModelForSourceModel:destinationModel:error:", "contents": "NSMappingModel.inferredMappingModelForSourceModel:destinationModel:error:(${1:NSManagedObjectModel* sourceModel}, destinationModel:${2:NSManagedObjectModel* destinationModel}, error:${3:NSError** error})" },  
    { "trigger": "NSMappingModel.mappingModelFromBundles:forSourceModel:destinationModel:", "contents": "NSMappingModel.mappingModelFromBundles:forSourceModel:destinationModel:(${1:NSArray* bundles}, forSourceModel:${2:NSManagedObjectModel* sourceModel}, destinationModel:${3:NSManagedObjectModel* destinationModel})" },  
    { "trigger": "NSMatchesPredicateOperatorType (6)" },  
    { "trigger": "NSMatchingAnchored (4)" },  
    { "trigger": "NSMatchingCompleted (2)" },  
    { "trigger": "NSMatchingHitEnd (4)" },  
    { "trigger": "NSMatchingInternalError (16)" },  
    { "trigger": "NSMatchingProgress (1)" },  
    { "trigger": "NSMatchingReportCompletion (2)" },  
    { "trigger": "NSMatchingReportProgress (1)" },  
    { "trigger": "NSMatchingRequiredEnd (8)" },  
    { "trigger": "NSMatchingWithTransparentBounds (8)" },  
    { "trigger": "NSMatchingWithoutAnchoringBounds (16)" },  
    { "trigger": "NSMaxRange", "contents": "NSMaxRange(${1:NSRange range})" },  
    { "trigger": "NSMaximumKeyValueOperator (NSString*)" },  
    { "trigger": "NSMaximumStringLength (2147483646)" },  
    { "trigger": "NSMergeByPropertyObjectTrumpMergePolicy (id)" },  
    { "trigger": "NSMergeByPropertyObjectTrumpMergePolicyType (2)" },  
    { "trigger": "NSMergeByPropertyStoreTrumpMergePolicy (id)" },  
    { "trigger": "NSMergeByPropertyStoreTrumpMergePolicyType (1)" },  
    { "trigger": "NSMergeConflict" },  
    { "trigger": "NSMergePolicy" },  
    { "trigger": "NSMetadataItem" },  
    { "trigger": "NSMetadataItemDisplayNameKey (NSString*)" },  
    { "trigger": "NSMetadataItemFSContentChangeDateKey (NSString*)" },  
    { "trigger": "NSMetadataItemFSCreationDateKey (NSString*)" },  
    { "trigger": "NSMetadataItemFSNameKey (NSString*)" },  
    { "trigger": "NSMetadataItemFSSizeKey (NSString*)" },  
    { "trigger": "NSMetadataItemIsUbiquitousKey (NSString*)" },  
    { "trigger": "NSMetadataItemPathKey (NSString*)" },  
    { "trigger": "NSMetadataItemURLKey (NSString*)" },  
    { "trigger": "NSMetadataQuery" },  
    { "trigger": "NSMetadataQueryAttributeValueTuple" },  
    { "trigger": "NSMetadataQueryDelegate" },  
    { "trigger": "NSMetadataQueryDidFinishGatheringNotification (NSString*)" },  
    { "trigger": "NSMetadataQueryDidStartGatheringNotification (NSString*)" },  
    { "trigger": "NSMetadataQueryDidUpdateNotification (NSString*)" },  
    { "trigger": "NSMetadataQueryGatheringProgressNotification (NSString*)" },  
    { "trigger": "NSMetadataQueryResultContentRelevanceAttribute (NSString*)" },  
    { "trigger": "NSMetadataQueryResultGroup" },  
    { "trigger": "NSMetadataQueryUbiquitousDataScope (NSString*)" },  
    { "trigger": "NSMetadataQueryUbiquitousDocumentsScope (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemHasUnresolvedConflictsKey (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemIsDownloadedKey (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemIsDownloadingKey (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemIsUploadedKey (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemIsUploadingKey (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemPercentDownloadedKey (NSString*)" },  
    { "trigger": "NSMetadataUbiquitousItemPercentUploadedKey (NSString*)" },  
    { "trigger": "NSMethodSignature" },  
    { "trigger": "NSMethodSignature.signatureWithObjCTypes:", "contents": "NSMethodSignature.signatureWithObjCTypes:(${1:char* types})" },  
    { "trigger": "NSMigratePersistentStoresAutomaticallyOption (NSString*)" },  
    { "trigger": "NSMigrationCancelledError (134120)" },  
    { "trigger": "NSMigrationDestinationObjectKey (NSString*)" },  
    { "trigger": "NSMigrationEntityMappingKey (NSString*)" },  
    { "trigger": "NSMigrationEntityPolicyKey (NSString*)" },  
    { "trigger": "NSMigrationError (134110)" },  
    { "trigger": "NSMigrationManager" },  
    { "trigger": "NSMigrationManagerDestinationStoreError (134160)" },  
    { "trigger": "NSMigrationManagerKey (NSString*)" },  
    { "trigger": "NSMigrationManagerSourceStoreError (134150)" },  
    { "trigger": "NSMigrationMissingMappingModelError (134140)" },  
    { "trigger": "NSMigrationMissingSourceModelError (134130)" },  
    { "trigger": "NSMigrationPropertyMappingKey (NSString*)" },  
    { "trigger": "NSMigrationSourceObjectKey (NSString*)" },  
    { "trigger": "NSMinimumKeyValueOperator (NSString*)" },  
    { "trigger": "NSMinusSetExpressionType (7)" },  
    { "trigger": "NSMinuteCalendarUnit (64)" },  
    { "trigger": "NSMonthCalendarUnit (8)" },  
    { "trigger": "NSMoviesDirectory (17)" },  
    { "trigger": "NSMusicDirectory (18)" },  
    { "trigger": "NSMutableArray" },  
    { "trigger": "NSMutableArray.arrayWithCapacity:", "contents": "NSMutableArray.arrayWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "NSMutableAttributedString" },  
    { "trigger": "NSMutableCharacterSet" },  
    { "trigger": "NSMutableCopying" },  
    { "trigger": "NSMutableData" },  
    { "trigger": "NSMutableData.dataWithCapacity:", "contents": "NSMutableData.dataWithCapacity:(${1:NSUInteger aNumItems})" },  
    { "trigger": "NSMutableData.dataWithLength:", "contents": "NSMutableData.dataWithLength:(${1:NSUInteger length})" },  
    { "trigger": "NSMutableDictionary" },  
    { "trigger": "NSMutableDictionary.dictionaryWithCapacity:", "contents": "NSMutableDictionary.dictionaryWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "NSMutableIndexSet" },  
    { "trigger": "NSMutableOrderedSet" },  
    { "trigger": "NSMutableOrderedSet.orderedSetWithCapacity:", "contents": "NSMutableOrderedSet.orderedSetWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "NSMutableSet" },  
    { "trigger": "NSMutableSet.setWithCapacity:", "contents": "NSMutableSet.setWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "NSMutableString" },  
    { "trigger": "NSMutableString.stringWithCapacity:", "contents": "NSMutableString.stringWithCapacity:(${1:NSUInteger capacity})" },  
    { "trigger": "NSMutableURLRequest" },  
    { "trigger": "NSNEXTSTEPStringEncoding (2)" },  
    { "trigger": "NSNegateBooleanTransformerName (NSString*)" },  
    { "trigger": "NSNetService" },  
    { "trigger": "NSNetServiceBrowser" },  
    { "trigger": "NSNetServiceBrowserDelegate" },  
    { "trigger": "NSNetServiceDelegate" },  
    { "trigger": "NSNetServiceNoAutoRename (1)" },  
    { "trigger": "NSNetService.dataFromTXTRecordDictionary:", "contents": "NSNetService.dataFromTXTRecordDictionary:(${1:NSDictionary* txtDictionary})" },  
    { "trigger": "NSNetService.dictionaryFromTXTRecordData:", "contents": "NSNetService.dictionaryFromTXTRecordData:(${1:NSData* txtData})" },  
    { "trigger": "NSNetServicesActivityInProgress (-72003)" },  
    { "trigger": "NSNetServicesBadArgumentError (-72004)" },  
    { "trigger": "NSNetServicesCancelledError (-72005)" },  
    { "trigger": "NSNetServicesCollisionError (-72001)" },  
    { "trigger": "NSNetServicesErrorCode (NSString*)" },  
    { "trigger": "NSNetServicesErrorDomain (NSString*)" },  
    { "trigger": "NSNetServicesInvalidError (-72006)" },  
    { "trigger": "NSNetServicesNotFoundError (-72002)" },  
    { "trigger": "NSNetServicesTimeoutError (-72007)" },  
    { "trigger": "NSNetServicesUnknownError (-72000)" },  
    { "trigger": "NSNetworkDomainMask (4)" },  
    { "trigger": "NSNoActionDeleteRule (0)" },  
    { "trigger": "NSNonLossyASCIIStringEncoding (7)" },  
    { "trigger": "NSNormalizedPredicateOption (4)" },  
    { "trigger": "NSNotEqualToPredicateOperatorType (5)" },  
    { "trigger": "NSNotFound (2147483647)" },  
    { "trigger": "NSNotPredicateType (0)" },  
    { "trigger": "NSNotification" },  
    { "trigger": "NSNotificationCenter" },  
    { "trigger": "NSNotificationCenter.defaultCenter" },  
    { "trigger": "NSNotificationCoalescingOnName (1)" },  
    { "trigger": "NSNotificationCoalescingOnSender (2)" },  
    { "trigger": "NSNotificationNoCoalescing (0)" },  
    { "trigger": "NSNotificationQueue" },  
    { "trigger": "NSNotificationQueue.defaultQueue" },  
    { "trigger": "NSNotification.notificationWithName:object:", "contents": "NSNotification.notificationWithName:object:(${1:NSString* aName}, object:${2:id anObject})" },  
    { "trigger": "NSNotification.notificationWithName:object:userInfo:", "contents": "NSNotification.notificationWithName:object:userInfo:(${1:NSString* aName}, object:${2:id anObject}, userInfo:${3:NSDictionary* aUserInfo})" },  
    { "trigger": "NSNull" },  
    { "trigger": "NSNullifyDeleteRule (1)" },  
    { "trigger": "NSNull.null" },  
    { "trigger": "NSNumber" },  
    { "trigger": "NSNumberFormatter" },  
    { "trigger": "NSNumberFormatterBehavior10_4 (1040)" },  
    { "trigger": "NSNumberFormatterBehaviorDefault (0)" },  
    { "trigger": "NSNumberFormatterCurrencyStyle (2)" },  
    { "trigger": "NSNumberFormatterDecimalStyle (1)" },  
    { "trigger": "NSNumberFormatterNoStyle (0)" },  
    { "trigger": "NSNumberFormatterPadAfterPrefix (1)" },  
    { "trigger": "NSNumberFormatterPadAfterSuffix (3)" },  
    { "trigger": "NSNumberFormatterPadBeforePrefix (0)" },  
    { "trigger": "NSNumberFormatterPadBeforeSuffix (2)" },  
    { "trigger": "NSNumberFormatterPercentStyle (3)" },  
    { "trigger": "NSNumberFormatterRoundCeiling (0)" },  
    { "trigger": "NSNumberFormatterRoundDown (2)" },  
    { "trigger": "NSNumberFormatterRoundFloor (1)" },  
    { "trigger": "NSNumberFormatterRoundHalfDown (5)" },  
    { "trigger": "NSNumberFormatterRoundHalfEven (4)" },  
    { "trigger": "NSNumberFormatterRoundHalfUp (6)" },  
    { "trigger": "NSNumberFormatterRoundUp (3)" },  
    { "trigger": "NSNumberFormatterScientificStyle (4)" },  
    { "trigger": "NSNumberFormatterSpellOutStyle (5)" },  
    { "trigger": "NSNumberFormatter.defaultFormatterBehavior" },  
    { "trigger": "NSNumberFormatter.localizedStringFromNumber:numberStyle:", "contents": "NSNumberFormatter.localizedStringFromNumber:numberStyle:(${1:NSNumber* num}, numberStyle:${2:NSNumberFormatterStyle nstyle})" },  
    { "trigger": "NSNumberFormatter.setDefaultFormatterBehavior:", "contents": "NSNumberFormatter.setDefaultFormatterBehavior:(${1:NSNumberFormatterBehavior behavior})" },  
    { "trigger": "NSNumber.numberWithBool:", "contents": "NSNumber.numberWithBool:(${1:BOOL value})" },  
    { "trigger": "NSNumber.numberWithChar:", "contents": "NSNumber.numberWithChar:(${1:char value})" },  
    { "trigger": "NSNumber.numberWithDouble:", "contents": "NSNumber.numberWithDouble:(${1:double value})" },  
    { "trigger": "NSNumber.numberWithFloat:", "contents": "NSNumber.numberWithFloat:(${1:float value})" },  
    { "trigger": "NSNumber.numberWithInt:", "contents": "NSNumber.numberWithInt:(${1:int value})" },  
    { "trigger": "NSNumber.numberWithInteger:", "contents": "NSNumber.numberWithInteger:(${1:NSInteger value})" },  
    { "trigger": "NSNumber.numberWithLong:", "contents": "NSNumber.numberWithLong:(${1:long value})" },  
    { "trigger": "NSNumber.numberWithLongLong:", "contents": "NSNumber.numberWithLongLong:(${1:long long value})" },  
    { "trigger": "NSNumber.numberWithShort:", "contents": "NSNumber.numberWithShort:(${1:short value})" },  
    { "trigger": "NSNumber.numberWithUnsignedChar:", "contents": "NSNumber.numberWithUnsignedChar:(${1:unsigned char value})" },  
    { "trigger": "NSNumber.numberWithUnsignedInt:", "contents": "NSNumber.numberWithUnsignedInt:(${1:unsigned int value})" },  
    { "trigger": "NSNumber.numberWithUnsignedInteger:", "contents": "NSNumber.numberWithUnsignedInteger:(${1:NSUInteger value})" },  
    { "trigger": "NSNumber.numberWithUnsignedLong:", "contents": "NSNumber.numberWithUnsignedLong:(${1:unsigned long value})" },  
    { "trigger": "NSNumber.numberWithUnsignedLongLong:", "contents": "NSNumber.numberWithUnsignedLongLong:(${1:unsigned long long value})" },  
    { "trigger": "NSNumber.numberWithUnsignedShort:", "contents": "NSNumber.numberWithUnsignedShort:(${1:unsigned short value})" },  
    { "trigger": "NSNumericSearch (64)" },  
    { "trigger": "NSOSF1OperatingSystem (7)" },  
    { "trigger": "NSOSStatusErrorDomain (NSString*)" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObject" },  
    { "trigger": "NSObjectIDAttributeType (2000)" },  
    { "trigger": "NSObjectInaccessibleException (NSString*)" },  
    { "trigger": "NSObjectNotAvailableException (NSString*)" },  
    { "trigger": "NSObject.accessInstanceVariablesDirectly" },  
    { "trigger": "NSObject.alloc" },  
    { "trigger": "NSObject.allocWithZone:", "contents": "NSObject.allocWithZone:(${1:NSZone* zone})" },  
    { "trigger": "NSObject.appearance" },  
    { "trigger": "NSObject.appearanceWhenContainedIn:", "contents": "NSObject.appearanceWhenContainedIn:(${1:Class* ContainerClass})" },  
    { "trigger": "NSObject.automaticallyNotifiesObserversForKey:", "contents": "NSObject.automaticallyNotifiesObserversForKey:(${1:NSString* key})" },  
    { "trigger": "NSObject.cancelPreviousPerformRequestsWithTarget:", "contents": "NSObject.cancelPreviousPerformRequestsWithTarget:(${1:id aTarget})" },  
    { "trigger": "NSObject.cancelPreviousPerformRequestsWithTarget:selector:object:", "contents": "NSObject.cancelPreviousPerformRequestsWithTarget:selector:object:(${1:id aTarget}, selector:${2:SEL aSelector}, object:${3:id anArgument})" },  
    { "trigger": "NSObject.class" },  
    { "trigger": "NSObject.classFallbacksForKeyedArchiver" },  
    { "trigger": "NSObject.classForKeyedUnarchiver" },  
    { "trigger": "NSObject.conformsToProtocol:", "contents": "NSObject.conformsToProtocol:(${1:Protocol* protocol})" },  
    { "trigger": "NSObject.copyWithZone:", "contents": "NSObject.copyWithZone:(${1:NSZone* zone})" },  
    { "trigger": "NSObject.description" },  
    { "trigger": "NSObject.initialize" },  
    { "trigger": "NSObject.instanceMethodForSelector:", "contents": "NSObject.instanceMethodForSelector:(${1:SEL aSelector})" },  
    { "trigger": "NSObject.instanceMethodSignatureForSelector:", "contents": "NSObject.instanceMethodSignatureForSelector:(${1:SEL aSelector})" },  
    { "trigger": "NSObject.instancesRespondToSelector:", "contents": "NSObject.instancesRespondToSelector:(${1:SEL aSelector})" },  
    { "trigger": "NSObject.isSubclassOfClass:", "contents": "NSObject.isSubclassOfClass:(${1:Class aClass})" },  
    { "trigger": "NSObject.keyPathsForValuesAffectingValueForKey:", "contents": "NSObject.keyPathsForValuesAffectingValueForKey:(${1:NSString* key})" },  
    { "trigger": "NSObject.load" },  
    { "trigger": "NSObject.mutableCopyWithZone:", "contents": "NSObject.mutableCopyWithZone:(${1:NSZone* zone})" },  
    { "trigger": "NSObject.new" },  
    { "trigger": "NSObject.resolveClassMethod:", "contents": "NSObject.resolveClassMethod:(${1:SEL sel})" },  
    { "trigger": "NSObject.resolveInstanceMethod:", "contents": "NSObject.resolveInstanceMethod:(${1:SEL sel})" },  
    { "trigger": "NSObject.setVersion:", "contents": "NSObject.setVersion:(${1:NSInteger aVersion})" },  
    { "trigger": "NSObject.superclass" },  
    { "trigger": "NSObject.version" },  
    { "trigger": "NSOldStyleException (NSString*)" },  
    { "trigger": "NSOpenStepRootDirectory" },  
    { "trigger": "NSOpenStepUnicodeReservedBase (62464)" },  
    { "trigger": "NSOperation" },  
    { "trigger": "NSOperationQueue" },  
    { "trigger": "NSOperationQueueDefaultMaxConcurrentOperationCount (-1)" },  
    { "trigger": "NSOperationQueuePriorityHigh (4)" },  
    { "trigger": "NSOperationQueuePriorityLow (-4)" },  
    { "trigger": "NSOperationQueuePriorityNormal (0)" },  
    { "trigger": "NSOperationQueuePriorityVeryHigh (8)" },  
    { "trigger": "NSOperationQueuePriorityVeryLow (-8)" },  
    { "trigger": "NSOperationQueue.currentQueue" },  
    { "trigger": "NSOperationQueue.mainQueue" },  
    { "trigger": "NSOrPredicateType (2)" },  
    { "trigger": "NSOrderedAscending (-1)" },  
    { "trigger": "NSOrderedDescending (1)" },  
    { "trigger": "NSOrderedSame (0)" },  
    { "trigger": "NSOrderedSet" },  
    { "trigger": "NSOrderedSet.orderedSet" },  
    { "trigger": "NSOrderedSet.orderedSetWithArray:", "contents": "NSOrderedSet.orderedSetWithArray:(${1:NSArray* array})" },  
    { "trigger": "NSOrderedSet.orderedSetWithArray:range:copyItems:", "contents": "NSOrderedSet.orderedSetWithArray:range:copyItems:(${1:NSArray* array}, range:${2:NSRange range}, copyItems:${3:BOOL flag})" },  
    { "trigger": "NSOrderedSet.orderedSetWithObject:", "contents": "NSOrderedSet.orderedSetWithObject:(${1:id object})" },  
    { "trigger": "NSOrderedSet.orderedSetWithObjects:", "contents": "NSOrderedSet.orderedSetWithObjects:(${1:id firstObj})" },  
    { "trigger": "NSOrderedSet.orderedSetWithObjects:count:", "contents": "NSOrderedSet.orderedSetWithObjects:count:(${1:id* objects}, count:${2:NSUInteger cnt})" },  
    { "trigger": "NSOrderedSet.orderedSetWithOrderedSet:", "contents": "NSOrderedSet.orderedSetWithOrderedSet:(${1:NSOrderedSet* set})" },  
    { "trigger": "NSOrderedSet.orderedSetWithOrderedSet:range:copyItems:", "contents": "NSOrderedSet.orderedSetWithOrderedSet:range:copyItems:(${1:NSOrderedSet* set}, range:${2:NSRange range}, copyItems:${3:BOOL flag})" },  
    { "trigger": "NSOrderedSet.orderedSetWithSet:", "contents": "NSOrderedSet.orderedSetWithSet:(${1:NSSet* set})" },  
    { "trigger": "NSOrderedSet.orderedSetWithSet:copyItems:", "contents": "NSOrderedSet.orderedSetWithSet:copyItems:(${1:NSSet* set}, copyItems:${2:BOOL flag})" },  
    { "trigger": "NSOrthography" },  
    { "trigger": "NSOrthography.orthographyWithDominantScript:languageMap:", "contents": "NSOrthography.orthographyWithDominantScript:languageMap:(${1:NSString* script}, languageMap:${2:NSDictionary* map})" },  
    { "trigger": "NSOutputStream" },  
    { "trigger": "NSOutputStream.outputStreamToBuffer:capacity:", "contents": "NSOutputStream.outputStreamToBuffer:capacity:(${1:uint8_t* buffer}, capacity:${2:NSUInteger capacity})" },  
    { "trigger": "NSOutputStream.outputStreamToFileAtPath:append:", "contents": "NSOutputStream.outputStreamToFileAtPath:append:(${1:NSString* path}, append:${2:BOOL shouldAppend})" },  
    { "trigger": "NSOutputStream.outputStreamToMemory" },  
    { "trigger": "NSOutputStream.outputStreamWithURL:append:", "contents": "NSOutputStream.outputStreamWithURL:append:(${1:NSURL* url}, append:${2:BOOL shouldAppend})" },  
    { "trigger": "NSOverwriteMergePolicy (id)" },  
    { "trigger": "NSOverwriteMergePolicyType (3)" },  
    { "trigger": "NSPOSIXErrorDomain (NSString*)" },  
    { "trigger": "NSPageSize" },  
    { "trigger": "NSParseErrorException (NSString*)" },  
    { "trigger": "NSPersianCalendar (NSString*)" },  
    { "trigger": "NSPersistentStore" },  
    { "trigger": "NSPersistentStoreCoordinator" },  
    { "trigger": "NSPersistentStoreCoordinatorLockingError (132010)" },  
    { "trigger": "NSPersistentStoreCoordinatorStoresDidChangeNotification (NSString*)" },  
    { "trigger": "NSPersistentStoreCoordinatorWillRemoveStoreNotification (NSString*)" },  
    { "trigger": "NSPersistentStoreCoordinator.metadataForPersistentStoreOfType:URL:error:", "contents": "NSPersistentStoreCoordinator.metadataForPersistentStoreOfType:URL:error:(${1:NSString* storeType}, URL:${2:NSURL* url}, error:${3:NSError** error})" },  
    { "trigger": "NSPersistentStoreCoordinator.registerStoreClass:forStoreType:", "contents": "NSPersistentStoreCoordinator.registerStoreClass:forStoreType:(${1:Class storeClass}, forStoreType:${2:NSString* storeType})" },  
    { "trigger": "NSPersistentStoreCoordinator.registeredStoreTypes" },  
    { "trigger": "NSPersistentStoreCoordinator.setMetadata:forPersistentStoreOfType:URL:error:", "contents": "NSPersistentStoreCoordinator.setMetadata:forPersistentStoreOfType:URL:error:(${1:NSDictionary* metadata}, forPersistentStoreOfType:${2:NSString* storeType}, URL:${3:NSURL* url}, error:${4:NSError** error})" },  
    { "trigger": "NSPersistentStoreDidImportUbiquitousContentChangesNotification (NSString*)" },  
    { "trigger": "NSPersistentStoreFileProtectionKey (NSString*)" },  
    { "trigger": "NSPersistentStoreIncompatibleSchemaError (134020)" },  
    { "trigger": "NSPersistentStoreIncompatibleVersionHashError (134100)" },  
    { "trigger": "NSPersistentStoreIncompleteSaveError (134040)" },  
    { "trigger": "NSPersistentStoreInvalidTypeError (134000)" },  
    { "trigger": "NSPersistentStoreOSCompatibility (NSString*)" },  
    { "trigger": "NSPersistentStoreOpenError (134080)" },  
    { "trigger": "NSPersistentStoreOperationError (134070)" },  
    { "trigger": "NSPersistentStoreRequest" },  
    { "trigger": "NSPersistentStoreSaveConflictsError (134050)" },  
    { "trigger": "NSPersistentStoreSaveConflictsErrorKey (NSString*)" },  
    { "trigger": "NSPersistentStoreSaveError (134030)" },  
    { "trigger": "NSPersistentStoreTimeoutError (134090)" },  
    { "trigger": "NSPersistentStoreTimeoutOption (NSString*)" },  
    { "trigger": "NSPersistentStoreTypeMismatchError (134010)" },  
    { "trigger": "NSPersistentStoreUbiquitousContentNameKey (NSString*)" },  
    { "trigger": "NSPersistentStoreUbiquitousContentURLKey (NSString*)" },  
    { "trigger": "NSPersistentStoreUnsupportedRequestTypeError (134091)" },  
    { "trigger": "NSPersistentStore.metadataForPersistentStoreWithURL:error:", "contents": "NSPersistentStore.metadataForPersistentStoreWithURL:error:(${1:NSURL* url}, error:${2:NSError** error})" },  
    { "trigger": "NSPersistentStore.migrationManagerClass" },  
    { "trigger": "NSPersistentStore.setMetadata:forPersistentStoreWithURL:error:", "contents": "NSPersistentStore.setMetadata:forPersistentStoreWithURL:error:(${1:NSDictionary* metadata}, forPersistentStoreWithURL:${2:NSURL* url}, error:${3:NSError** error})" },  
    { "trigger": "NSPicturesDirectory (19)" },  
    { "trigger": "NSPipe" },  
    { "trigger": "NSPipe.pipe" },  
    { "trigger": "NSPort" },  
    { "trigger": "NSPortDelegate" },  
    { "trigger": "NSPortDidBecomeInvalidNotification (NSString*)" },  
    { "trigger": "NSPortReceiveException (NSString*)" },  
    { "trigger": "NSPortSendException (NSString*)" },  
    { "trigger": "NSPortTimeoutException (NSString*)" },  
    { "trigger": "NSPort.port" },  
    { "trigger": "NSPostASAP (2)" },  
    { "trigger": "NSPostNow (3)" },  
    { "trigger": "NSPostWhenIdle (1)" },  
    { "trigger": "NSPredicate" },  
    { "trigger": "NSPredicate.predicateWithBlock:", "contents": "NSPredicate.predicateWithBlock:(${1:BOOL (^)(id, NSDictionary *) block})" },  
    { "trigger": "NSPredicate.predicateWithFormat:", "contents": "NSPredicate.predicateWithFormat:(${1:NSString* predicateFormat})" },  
    { "trigger": "NSPredicate.predicateWithFormat:argumentArray:", "contents": "NSPredicate.predicateWithFormat:argumentArray:(${1:NSString* predicateFormat}, argumentArray:${2:NSArray* arguments})" },  
    { "trigger": "NSPredicate.predicateWithFormat:arguments:", "contents": "NSPredicate.predicateWithFormat:arguments:(${1:NSString* predicateFormat}, arguments:${2:va_list argList})" },  
    { "trigger": "NSPredicate.predicateWithValue:", "contents": "NSPredicate.predicateWithValue:(${1:BOOL value})" },  
    { "trigger": "NSPreferencePanesDirectory (22)" },  
    { "trigger": "NSPrinterDescriptionDirectory (20)" },  
    { "trigger": "NSPrivateQueueConcurrencyType (1)" },  
    { "trigger": "NSProcessInfo" },  
    { "trigger": "NSProcessInfo.processInfo" },  
    { "trigger": "NSPropertyDescription" },  
    { "trigger": "NSPropertyListBinaryFormat_v1_0 (200)" },  
    { "trigger": "NSPropertyListErrorMaximum (4095)" },  
    { "trigger": "NSPropertyListErrorMinimum (3840)" },  
    { "trigger": "NSPropertyListImmutable (0)" },  
    { "trigger": "NSPropertyListMutableContainers (1)" },  
    { "trigger": "NSPropertyListMutableContainersAndLeaves (2)" },  
    { "trigger": "NSPropertyListOpenStepFormat (1)" },  
    { "trigger": "NSPropertyListReadCorruptError (3840)" },  
    { "trigger": "NSPropertyListReadStreamError (3842)" },  
    { "trigger": "NSPropertyListReadUnknownVersionError (3841)" },  
    { "trigger": "NSPropertyListSerialization" },  
    { "trigger": "NSPropertyListSerialization.dataFromPropertyList:format:errorDescription:", "contents": "NSPropertyListSerialization.dataFromPropertyList:format:errorDescription:(${1:id plist}, format:${2:NSPropertyListFormat format}, errorDescription:${3:NSString** errorString})" },  
    { "trigger": "NSPropertyListSerialization.dataWithPropertyList:format:options:error:", "contents": "NSPropertyListSerialization.dataWithPropertyList:format:options:error:(${1:id plist}, format:${2:NSPropertyListFormat format}, options:${3:NSPropertyListWriteOptions opt}, error:${4:NSError** error})" },  
    { "trigger": "NSPropertyListSerialization.propertyListFromData:mutabilityOption:format:errorDescription:", "contents": "NSPropertyListSerialization.propertyListFromData:mutabilityOption:format:errorDescription:(${1:NSData* data}, mutabilityOption:${2:NSPropertyListMutabilityOptions opt}, format:${3:NSPropertyListFormat* format}, errorDescription:${4:NSString** errorString})" },  
    { "trigger": "NSPropertyListSerialization.propertyListWithData:options:format:error:", "contents": "NSPropertyListSerialization.propertyListWithData:options:format:error:(${1:NSData* data}, options:${2:NSPropertyListReadOptions opt}, format:${3:NSPropertyListFormat* format}, error:${4:NSError** error})" },  
    { "trigger": "NSPropertyListSerialization.propertyListWithStream:options:format:error:", "contents": "NSPropertyListSerialization.propertyListWithStream:options:format:error:(${1:NSInputStream* stream}, options:${2:NSPropertyListReadOptions opt}, format:${3:NSPropertyListFormat* format}, error:${4:NSError** error})" },  
    { "trigger": "NSPropertyListSerialization.propertyList:isValidForFormat:", "contents": "NSPropertyListSerialization.propertyList:isValidForFormat:(${1:id plist}, isValidForFormat:${2:NSPropertyListFormat format})" },  
    { "trigger": "NSPropertyListSerialization.writePropertyList:toStream:format:options:error:", "contents": "NSPropertyListSerialization.writePropertyList:toStream:format:options:error:(${1:id plist}, toStream:${2:NSOutputStream* stream}, format:${3:NSPropertyListFormat format}, options:${4:NSPropertyListWriteOptions opt}, error:${5:NSError** error})" },  
    { "trigger": "NSPropertyListWriteStreamError (3851)" },  
    { "trigger": "NSPropertyListXMLFormat_v1_0 (100)" },  
    { "trigger": "NSPropertyMapping" },  
    { "trigger": "NSProprietaryStringEncoding (65536)" },  
    { "trigger": "NSProtocolFromString", "contents": "NSProtocolFromString(${1:NSString* namestr})" },  
    { "trigger": "NSProxy" },  
    { "trigger": "NSProxy.alloc" },  
    { "trigger": "NSProxy.allocWithZone:", "contents": "NSProxy.allocWithZone:(${1:NSZone* zone})" },  
    { "trigger": "NSProxy.class" },  
    { "trigger": "NSProxy.respondsToSelector:", "contents": "NSProxy.respondsToSelector:(${1:SEL aSelector})" },  
    { "trigger": "NSQuarterCalendarUnit (2048)" },  
    { "trigger": "NSRangeException (NSString*)" },  
    { "trigger": "NSRangeFromString", "contents": "NSRangeFromString(${1:NSString* aString})" },  
    { "trigger": "NSReadOnlyPersistentStoreOption (NSString*)" },  
    { "trigger": "NSRealMemoryAvailable" },  
    { "trigger": "NSRecoveryAttempterErrorKey (NSString*)" },  
    { "trigger": "NSRecursiveLock" },  
    { "trigger": "NSRecycleZone", "contents": "NSRecycleZone(${1:NSZone* zone})" },  
    { "trigger": "NSRefreshedObjectsKey (NSString*)" },  
    { "trigger": "NSRegistrationDomain (NSString*)" },  
    { "trigger": "NSRegularExpression" },  
    { "trigger": "NSRegularExpressionAllowCommentsAndWhitespace (2)" },  
    { "trigger": "NSRegularExpressionAnchorsMatchLines (16)" },  
    { "trigger": "NSRegularExpressionCaseInsensitive (1)" },  
    { "trigger": "NSRegularExpressionDotMatchesLineSeparators (8)" },  
    { "trigger": "NSRegularExpressionIgnoreMetacharacters (4)" },  
    { "trigger": "NSRegularExpressionSearch (1024)" },  
    { "trigger": "NSRegularExpressionUseUnicodeWordBoundaries (64)" },  
    { "trigger": "NSRegularExpressionUseUnixLineSeparators (32)" },  
    { "trigger": "NSRegularExpression.escapedPatternForString:", "contents": "NSRegularExpression.escapedPatternForString:(${1:NSString* string})" },  
    { "trigger": "NSRegularExpression.escapedTemplateForString:", "contents": "NSRegularExpression.escapedTemplateForString:(${1:NSString* string})" },  
    { "trigger": "NSRegularExpression.regularExpressionWithPattern:options:error:", "contents": "NSRegularExpression.regularExpressionWithPattern:options:error:(${1:NSString* pattern}, options:${2:NSRegularExpressionOptions options}, error:${3:NSError** error})" },  
    { "trigger": "NSRelationshipDescription" },  
    { "trigger": "NSRemoveEntityMappingType (3)" },  
    { "trigger": "NSRemovedPersistentStoresKey (NSString*)" },  
    { "trigger": "NSRepublicOfChinaCalendar (NSString*)" },  
    { "trigger": "NSRollbackMergePolicy (id)" },  
    { "trigger": "NSRollbackMergePolicyType (4)" },  
    { "trigger": "NSRoundBankers (3)" },  
    { "trigger": "NSRoundDown (1)" },  
    { "trigger": "NSRoundDownToMultipleOfPageSize", "contents": "NSRoundDownToMultipleOfPageSize(${1:NSUInteger bytes})" },  
    { "trigger": "NSRoundPlain (0)" },  
    { "trigger": "NSRoundUp (2)" },  
    { "trigger": "NSRoundUpToMultipleOfPageSize", "contents": "NSRoundUpToMultipleOfPageSize(${1:NSUInteger bytes})" },  
    { "trigger": "NSRunLoop" },  
    { "trigger": "NSRunLoopCommonModes (NSString*)" },  
    { "trigger": "NSRunLoop.currentRunLoop" },  
    { "trigger": "NSRunLoop.mainRunLoop" },  
    { "trigger": "NSSQLiteAnalyzeOption (NSString*)" },  
    { "trigger": "NSSQLiteError (134180)" },  
    { "trigger": "NSSQLiteErrorDomain (NSString*)" },  
    { "trigger": "NSSQLiteManualVacuumOption (NSString*)" },  
    { "trigger": "NSSQLitePragmasOption (NSString*)" },  
    { "trigger": "NSSQLiteStoreType (NSString*)" },  
    { "trigger": "NSSaveChangesRequest" },  
    { "trigger": "NSSaveRequestType (2)" },  
    { "trigger": "NSScanner" },  
    { "trigger": "NSScanner.localizedScannerWithString:", "contents": "NSScanner.localizedScannerWithString:(${1:NSString* string})" },  
    { "trigger": "NSScanner.scannerWithString:", "contents": "NSScanner.scannerWithString:(${1:NSString* string})" },  
    { "trigger": "NSSearchPathForDirectoriesInDomains", "contents": "NSSearchPathForDirectoriesInDomains(${1:NSSearchPathDirectory directory}, ${2:NSSearchPathDomainMask domainMask}, ${3:BOOL expandTilde})" },  
    { "trigger": "NSSecondCalendarUnit (128)" },  
    { "trigger": "NSSelectorFromString", "contents": "NSSelectorFromString(${1:NSString* aSelectorName})" },  
    { "trigger": "NSSet" },  
    { "trigger": "NSSetUncaughtExceptionHandler", "contents": "NSSetUncaughtExceptionHandler(${1:NSUncaughtExceptionHandler* })" },  
    { "trigger": "NSSetZoneName", "contents": "NSSetZoneName(${1:NSZone* zone}, ${2:NSString* name})" },  
    { "trigger": "NSSet.set" },  
    { "trigger": "NSSet.setWithArray:", "contents": "NSSet.setWithArray:(${1:NSArray* array})" },  
    { "trigger": "NSSet.setWithObject:", "contents": "NSSet.setWithObject:(${1:id object})" },  
    { "trigger": "NSSet.setWithObjects:", "contents": "NSSet.setWithObjects:(${1:id firstObj})" },  
    { "trigger": "NSSet.setWithObjects:count:", "contents": "NSSet.setWithObjects:count:(${1:id* objects}, count:${2:NSUInteger cnt})" },  
    { "trigger": "NSSet.setWithSet:", "contents": "NSSet.setWithSet:(${1:NSSet* set})" },  
    { "trigger": "NSSharedPublicDirectory (21)" },  
    { "trigger": "NSShiftJISStringEncoding (8)" },  
    { "trigger": "NSShouldRetainWithZone", "contents": "NSShouldRetainWithZone(${1:id anObject}, ${2:NSZone* requestedZone})" },  
    { "trigger": "NSSnapshotEventMergePolicy (64)" },  
    { "trigger": "NSSnapshotEventRefresh (32)" },  
    { "trigger": "NSSnapshotEventRollback (16)" },  
    { "trigger": "NSSnapshotEventUndoDeletion (4)" },  
    { "trigger": "NSSnapshotEventUndoInsertion (2)" },  
    { "trigger": "NSSnapshotEventUndoUpdate (8)" },  
    { "trigger": "NSSocketPort" },  
    { "trigger": "NSSolarisOperatingSystem (3)" },  
    { "trigger": "NSSortConcurrent (1)" },  
    { "trigger": "NSSortDescriptor" },  
    { "trigger": "NSSortDescriptor.sortDescriptorWithKey:ascending:", "contents": "NSSortDescriptor.sortDescriptorWithKey:ascending:(${1:NSString* key}, ascending:${2:BOOL ascending})" },  
    { "trigger": "NSSortDescriptor.sortDescriptorWithKey:ascending:comparator:", "contents": "NSSortDescriptor.sortDescriptorWithKey:ascending:comparator:(${1:NSString* key}, ascending:${2:BOOL ascending}, comparator:${3:NSComparator cmptr})" },  
    { "trigger": "NSSortDescriptor.sortDescriptorWithKey:ascending:selector:", "contents": "NSSortDescriptor.sortDescriptorWithKey:ascending:selector:(${1:NSString* key}, ascending:${2:BOOL ascending}, selector:${3:SEL selector})" },  
    { "trigger": "NSSortStable (16)" },  
    { "trigger": "NSStoreModelVersionHashesKey (NSString*)" },  
    { "trigger": "NSStoreModelVersionIdentifiersKey (NSString*)" },  
    { "trigger": "NSStoreTypeKey (NSString*)" },  
    { "trigger": "NSStoreUUIDKey (NSString*)" },  
    { "trigger": "NSStream" },  
    { "trigger": "NSStreamDataWrittenToMemoryStreamKey (NSString*)" },  
    { "trigger": "NSStreamDelegate" },  
    { "trigger": "NSStreamEventEndEncountered (16)" },  
    { "trigger": "NSStreamEventErrorOccurred (8)" },  
    { "trigger": "NSStreamEventHasBytesAvailable (2)" },  
    { "trigger": "NSStreamEventHasSpaceAvailable (4)" },  
    { "trigger": "NSStreamEventNone (0)" },  
    { "trigger": "NSStreamEventOpenCompleted (1)" },  
    { "trigger": "NSStreamFileCurrentOffsetKey (NSString*)" },  
    { "trigger": "NSStreamNetworkServiceType (NSString*)" },  
    { "trigger": "NSStreamNetworkServiceTypeBackground (NSString*)" },  
    { "trigger": "NSStreamNetworkServiceTypeVideo (NSString*)" },  
    { "trigger": "NSStreamNetworkServiceTypeVoIP (NSString*)" },  
    { "trigger": "NSStreamNetworkServiceTypeVoice (NSString*)" },  
    { "trigger": "NSStreamSOCKSErrorDomain (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyConfigurationKey (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyHostKey (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyPasswordKey (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyPortKey (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyUserKey (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyVersion4 (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyVersion5 (NSString*)" },  
    { "trigger": "NSStreamSOCKSProxyVersionKey (NSString*)" },  
    { "trigger": "NSStreamSocketSSLErrorDomain (NSString*)" },  
    { "trigger": "NSStreamSocketSecurityLevelKey (NSString*)" },  
    { "trigger": "NSStreamSocketSecurityLevelNegotiatedSSL (NSString*)" },  
    { "trigger": "NSStreamSocketSecurityLevelNone (NSString*)" },  
    { "trigger": "NSStreamSocketSecurityLevelSSLv2 (NSString*)" },  
    { "trigger": "NSStreamSocketSecurityLevelSSLv3 (NSString*)" },  
    { "trigger": "NSStreamSocketSecurityLevelTLSv1 (NSString*)" },  
    { "trigger": "NSStreamStatusAtEnd (5)" },  
    { "trigger": "NSStreamStatusClosed (6)" },  
    { "trigger": "NSStreamStatusError (7)" },  
    { "trigger": "NSStreamStatusNotOpen (0)" },  
    { "trigger": "NSStreamStatusOpen (2)" },  
    { "trigger": "NSStreamStatusOpening (1)" },  
    { "trigger": "NSStreamStatusReading (3)" },  
    { "trigger": "NSStreamStatusWriting (4)" },  
    { "trigger": "NSString" },  
    { "trigger": "NSString" },  
    { "trigger": "NSStringAttributeType (700)" },  
    { "trigger": "NSStringEncodingConversionAllowLossy (1)" },  
    { "trigger": "NSStringEncodingConversionExternalRepresentation (2)" },  
    { "trigger": "NSStringEncodingErrorKey (NSString*)" },  
    { "trigger": "NSStringEnumerationByComposedCharacterSequences (2)" },  
    { "trigger": "NSStringEnumerationByLines (0)" },  
    { "trigger": "NSStringEnumerationByParagraphs (1)" },  
    { "trigger": "NSStringEnumerationBySentences (4)" },  
    { "trigger": "NSStringEnumerationByWords (3)" },  
    { "trigger": "NSStringEnumerationLocalized (1024)" },  
    { "trigger": "NSStringEnumerationReverse (256)" },  
    { "trigger": "NSStringEnumerationSubstringNotRequired (512)" },  
    { "trigger": "NSStringFromCGAffineTransform", "contents": "NSStringFromCGAffineTransform(${1:CGAffineTransform transform})" },  
    { "trigger": "NSStringFromCGPoint", "contents": "NSStringFromCGPoint(${1:CGPoint point})" },  
    { "trigger": "NSStringFromCGRect", "contents": "NSStringFromCGRect(${1:CGRect rect})" },  
    { "trigger": "NSStringFromCGSize", "contents": "NSStringFromCGSize(${1:CGSize size})" },  
    { "trigger": "NSStringFromClass", "contents": "NSStringFromClass(${1:Class aClass})" },  
    { "trigger": "NSStringFromGLKMatrix2", "contents": "NSStringFromGLKMatrix2(${1:GLKMatrix2 matrix})" },  
    { "trigger": "NSStringFromGLKMatrix3", "contents": "NSStringFromGLKMatrix3(${1:GLKMatrix3 matrix})" },  
    { "trigger": "NSStringFromGLKMatrix4", "contents": "NSStringFromGLKMatrix4(${1:GLKMatrix4 matrix})" },  
    { "trigger": "NSStringFromGLKQuaternion", "contents": "NSStringFromGLKQuaternion(${1:GLKQuaternion quaternion})" },  
    { "trigger": "NSStringFromGLKVector2", "contents": "NSStringFromGLKVector2(${1:GLKVector2 vector})" },  
    { "trigger": "NSStringFromGLKVector3", "contents": "NSStringFromGLKVector3(${1:GLKVector3 vector})" },  
    { "trigger": "NSStringFromGLKVector4", "contents": "NSStringFromGLKVector4(${1:GLKVector4 vector})" },  
    { "trigger": "NSStringFromProtocol", "contents": "NSStringFromProtocol(${1:Protocol* proto})" },  
    { "trigger": "NSStringFromRange", "contents": "NSStringFromRange(${1:NSRange range})" },  
    { "trigger": "NSStringFromSelector", "contents": "NSStringFromSelector(${1:SEL aSelector})" },  
    { "trigger": "NSStringFromUIEdgeInsets", "contents": "NSStringFromUIEdgeInsets(${1:UIEdgeInsets insets})" },  
    { "trigger": "NSStringFromUIOffset", "contents": "NSStringFromUIOffset(${1:UIOffset offset})" },  
    { "trigger": "NSString.availableStringEncodings" },  
    { "trigger": "NSString.defaultCStringEncoding" },  
    { "trigger": "NSString.localizedNameOfStringEncoding:", "contents": "NSString.localizedNameOfStringEncoding:(${1:NSStringEncoding encoding})" },  
    { "trigger": "NSString.localizedStringWithFormat:", "contents": "NSString.localizedStringWithFormat:(${1:NSString* format})" },  
    { "trigger": "NSString.pathWithComponents:", "contents": "NSString.pathWithComponents:(${1:NSArray* components})" },  
    { "trigger": "NSString.string" },  
    { "trigger": "NSString.stringWithCString:", "contents": "NSString.stringWithCString:(${1:char* bytes})" },  
    { "trigger": "NSString.stringWithCString:encoding:", "contents": "NSString.stringWithCString:encoding:(${1:char* cString}, encoding:${2:NSStringEncoding enc})" },  
    { "trigger": "NSString.stringWithCString:length:", "contents": "NSString.stringWithCString:length:(${1:char* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "NSString.stringWithCharacters:length:", "contents": "NSString.stringWithCharacters:length:(${1:unichar* characters}, length:${2:NSUInteger length})" },  
    { "trigger": "NSString.stringWithContentsOfFile:", "contents": "NSString.stringWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "NSString.stringWithContentsOfFile:encoding:error:", "contents": "NSString.stringWithContentsOfFile:encoding:error:(${1:NSString* path}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})" },  
    { "trigger": "NSString.stringWithContentsOfFile:usedEncoding:error:", "contents": "NSString.stringWithContentsOfFile:usedEncoding:error:(${1:NSString* path}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})" },  
    { "trigger": "NSString.stringWithContentsOfURL:", "contents": "NSString.stringWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "NSString.stringWithContentsOfURL:encoding:error:", "contents": "NSString.stringWithContentsOfURL:encoding:error:(${1:NSURL* url}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})" },  
    { "trigger": "NSString.stringWithContentsOfURL:usedEncoding:error:", "contents": "NSString.stringWithContentsOfURL:usedEncoding:error:(${1:NSURL* url}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})" },  
    { "trigger": "NSString.stringWithFormat:", "contents": "NSString.stringWithFormat:(${1:NSString* format})" },  
    { "trigger": "NSString.stringWithString:", "contents": "NSString.stringWithString:(${1:NSString* string})" },  
    { "trigger": "NSString.stringWithUTF8String:", "contents": "NSString.stringWithUTF8String:(${1:char* nullTerminatedCString})" },  
    { "trigger": "NSSubqueryExpressionType (13)" },  
    { "trigger": "NSSumKeyValueOperator (NSString*)" },  
    { "trigger": "NSSunOSOperatingSystem (6)" },  
    { "trigger": "NSSwapBigDoubleToHost", "contents": "NSSwapBigDoubleToHost(${1:NSSwappedDouble x})" },  
    { "trigger": "NSSwapBigFloatToHost", "contents": "NSSwapBigFloatToHost(${1:NSSwappedFloat x})" },  
    { "trigger": "NSSwapBigIntToHost", "contents": "NSSwapBigIntToHost(${1:unsigned int x})" },  
    { "trigger": "NSSwapBigLongLongToHost", "contents": "NSSwapBigLongLongToHost(${1:unsigned long long x})" },  
    { "trigger": "NSSwapBigLongToHost", "contents": "NSSwapBigLongToHost(${1:unsigned long x})" },  
    { "trigger": "NSSwapBigShortToHost", "contents": "NSSwapBigShortToHost(${1:unsigned short x})" },  
    { "trigger": "NSSwapDouble", "contents": "NSSwapDouble(${1:NSSwappedDouble x})" },  
    { "trigger": "NSSwapFloat", "contents": "NSSwapFloat(${1:NSSwappedFloat x})" },  
    { "trigger": "NSSwapHostDoubleToBig", "contents": "NSSwapHostDoubleToBig(${1:double x})" },  
    { "trigger": "NSSwapHostDoubleToLittle", "contents": "NSSwapHostDoubleToLittle(${1:double x})" },  
    { "trigger": "NSSwapHostFloatToBig", "contents": "NSSwapHostFloatToBig(${1:float x})" },  
    { "trigger": "NSSwapHostFloatToLittle", "contents": "NSSwapHostFloatToLittle(${1:float x})" },  
    { "trigger": "NSSwapHostIntToBig", "contents": "NSSwapHostIntToBig(${1:unsigned int x})" },  
    { "trigger": "NSSwapHostIntToLittle", "contents": "NSSwapHostIntToLittle(${1:unsigned int x})" },  
    { "trigger": "NSSwapHostLongLongToBig", "contents": "NSSwapHostLongLongToBig(${1:unsigned long long x})" },  
    { "trigger": "NSSwapHostLongLongToLittle", "contents": "NSSwapHostLongLongToLittle(${1:unsigned long long x})" },  
    { "trigger": "NSSwapHostLongToBig", "contents": "NSSwapHostLongToBig(${1:unsigned long x})" },  
    { "trigger": "NSSwapHostLongToLittle", "contents": "NSSwapHostLongToLittle(${1:unsigned long x})" },  
    { "trigger": "NSSwapHostShortToBig", "contents": "NSSwapHostShortToBig(${1:unsigned short x})" },  
    { "trigger": "NSSwapHostShortToLittle", "contents": "NSSwapHostShortToLittle(${1:unsigned short x})" },  
    { "trigger": "NSSwapInt", "contents": "NSSwapInt(${1:unsigned int inv})" },  
    { "trigger": "NSSwapLittleDoubleToHost", "contents": "NSSwapLittleDoubleToHost(${1:NSSwappedDouble x})" },  
    { "trigger": "NSSwapLittleFloatToHost", "contents": "NSSwapLittleFloatToHost(${1:NSSwappedFloat x})" },  
    { "trigger": "NSSwapLittleIntToHost", "contents": "NSSwapLittleIntToHost(${1:unsigned int x})" },  
    { "trigger": "NSSwapLittleLongLongToHost", "contents": "NSSwapLittleLongLongToHost(${1:unsigned long long x})" },  
    { "trigger": "NSSwapLittleLongToHost", "contents": "NSSwapLittleLongToHost(${1:unsigned long x})" },  
    { "trigger": "NSSwapLittleShortToHost", "contents": "NSSwapLittleShortToHost(${1:unsigned short x})" },  
    { "trigger": "NSSwapLong", "contents": "NSSwapLong(${1:unsigned long inv})" },  
    { "trigger": "NSSwapLongLong", "contents": "NSSwapLongLong(${1:unsigned long long inv})" },  
    { "trigger": "NSSwapShort", "contents": "NSSwapShort(${1:unsigned short inv})" },  
    { "trigger": "NSSymbolStringEncoding (6)" },  
    { "trigger": "NSSystemClockDidChangeNotification (NSString*)" },  
    { "trigger": "NSSystemDomainMask (8)" },  
    { "trigger": "NSSystemTimeZoneDidChangeNotification (NSString*)" },  
    { "trigger": "NSTemporaryDirectory" },  
    { "trigger": "NSTextCheckingAirlineKey (NSString*)" },  
    { "trigger": "NSTextCheckingAllCustomTypes (18446744069414584320)" },  
    { "trigger": "NSTextCheckingAllSystemTypes (4294967295)" },  
    { "trigger": "NSTextCheckingAllTypes (18446744073709551615)" },  
    { "trigger": "NSTextCheckingCityKey (NSString*)" },  
    { "trigger": "NSTextCheckingCountryKey (NSString*)" },  
    { "trigger": "NSTextCheckingFlightKey (NSString*)" },  
    { "trigger": "NSTextCheckingJobTitleKey (NSString*)" },  
    { "trigger": "NSTextCheckingNameKey (NSString*)" },  
    { "trigger": "NSTextCheckingOrganizationKey (NSString*)" },  
    { "trigger": "NSTextCheckingPhoneKey (NSString*)" },  
    { "trigger": "NSTextCheckingResult" },  
    { "trigger": "NSTextCheckingResult.addressCheckingResultWithRange:components:", "contents": "NSTextCheckingResult.addressCheckingResultWithRange:components:(${1:NSRange range}, components:${2:NSDictionary* components})" },  
    { "trigger": "NSTextCheckingResult.correctionCheckingResultWithRange:replacementString:", "contents": "NSTextCheckingResult.correctionCheckingResultWithRange:replacementString:(${1:NSRange range}, replacementString:${2:NSString* replacementString})" },  
    { "trigger": "NSTextCheckingResult.dashCheckingResultWithRange:replacementString:", "contents": "NSTextCheckingResult.dashCheckingResultWithRange:replacementString:(${1:NSRange range}, replacementString:${2:NSString* replacementString})" },  
    { "trigger": "NSTextCheckingResult.dateCheckingResultWithRange:date:", "contents": "NSTextCheckingResult.dateCheckingResultWithRange:date:(${1:NSRange range}, date:${2:NSDate* date})" },  
    { "trigger": "NSTextCheckingResult.dateCheckingResultWithRange:date:timeZone:duration:", "contents": "NSTextCheckingResult.dateCheckingResultWithRange:date:timeZone:duration:(${1:NSRange range}, date:${2:NSDate* date}, timeZone:${3:NSTimeZone* timeZone}, duration:${4:NSTimeInterval duration})" },  
    { "trigger": "NSTextCheckingResult.grammarCheckingResultWithRange:details:", "contents": "NSTextCheckingResult.grammarCheckingResultWithRange:details:(${1:NSRange range}, details:${2:NSArray* details})" },  
    { "trigger": "NSTextCheckingResult.linkCheckingResultWithRange:URL:", "contents": "NSTextCheckingResult.linkCheckingResultWithRange:URL:(${1:NSRange range}, URL:${2:NSURL* url})" },  
    { "trigger": "NSTextCheckingResult.orthographyCheckingResultWithRange:orthography:", "contents": "NSTextCheckingResult.orthographyCheckingResultWithRange:orthography:(${1:NSRange range}, orthography:${2:NSOrthography* orthography})" },  
    { "trigger": "NSTextCheckingResult.phoneNumberCheckingResultWithRange:phoneNumber:", "contents": "NSTextCheckingResult.phoneNumberCheckingResultWithRange:phoneNumber:(${1:NSRange range}, phoneNumber:${2:NSString* phoneNumber})" },  
    { "trigger": "NSTextCheckingResult.quoteCheckingResultWithRange:replacementString:", "contents": "NSTextCheckingResult.quoteCheckingResultWithRange:replacementString:(${1:NSRange range}, replacementString:${2:NSString* replacementString})" },  
    { "trigger": "NSTextCheckingResult.regularExpressionCheckingResultWithRanges:count:regularExpression:", "contents": "NSTextCheckingResult.regularExpressionCheckingResultWithRanges:count:regularExpression:(${1:NSRangePointer ranges}, count:${2:NSUInteger count}, regularExpression:${3:NSRegularExpression* regularExpression})" },  
    { "trigger": "NSTextCheckingResult.replacementCheckingResultWithRange:replacementString:", "contents": "NSTextCheckingResult.replacementCheckingResultWithRange:replacementString:(${1:NSRange range}, replacementString:${2:NSString* replacementString})" },  
    { "trigger": "NSTextCheckingResult.spellCheckingResultWithRange:", "contents": "NSTextCheckingResult.spellCheckingResultWithRange:(${1:NSRange range})" },  
    { "trigger": "NSTextCheckingResult.transitInformationCheckingResultWithRange:components:", "contents": "NSTextCheckingResult.transitInformationCheckingResultWithRange:components:(${1:NSRange range}, components:${2:NSDictionary* components})" },  
    { "trigger": "NSTextCheckingStateKey (NSString*)" },  
    { "trigger": "NSTextCheckingStreetKey (NSString*)" },  
    { "trigger": "NSTextCheckingTypeAddress (16)" },  
    { "trigger": "NSTextCheckingTypeCorrection (512)" },  
    { "trigger": "NSTextCheckingTypeDash (128)" },  
    { "trigger": "NSTextCheckingTypeDate (8)" },  
    { "trigger": "NSTextCheckingTypeGrammar (4)" },  
    { "trigger": "NSTextCheckingTypeLink (32)" },  
    { "trigger": "NSTextCheckingTypeOrthography (1)" },  
    { "trigger": "NSTextCheckingTypePhoneNumber (2048)" },  
    { "trigger": "NSTextCheckingTypeQuote (64)" },  
    { "trigger": "NSTextCheckingTypeRegularExpression (1024)" },  
    { "trigger": "NSTextCheckingTypeReplacement (256)" },  
    { "trigger": "NSTextCheckingTypeSpelling (2)" },  
    { "trigger": "NSTextCheckingTypeTransitInformation (4096)" },  
    { "trigger": "NSTextCheckingZIPKey (NSString*)" },  
    { "trigger": "NSThread" },  
    { "trigger": "NSThreadPerformAdditions" },  
    { "trigger": "NSThreadWillExitNotification (NSString*)" },  
    { "trigger": "NSThread.callStackReturnAddresses" },  
    { "trigger": "NSThread.callStackSymbols" },  
    { "trigger": "NSThread.currentThread" },  
    { "trigger": "NSThread.detachNewThreadSelector:toTarget:withObject:", "contents": "NSThread.detachNewThreadSelector:toTarget:withObject:(${1:SEL selector}, toTarget:${2:id target}, withObject:${3:id argument})" },  
    { "trigger": "NSThread.exit" },  
    { "trigger": "NSThread.isMainThread" },  
    { "trigger": "NSThread.isMultiThreaded" },  
    { "trigger": "NSThread.mainThread" },  
    { "trigger": "NSThread.setThreadPriority:", "contents": "NSThread.setThreadPriority:(${1:double p})" },  
    { "trigger": "NSThread.sleepForTimeInterval:", "contents": "NSThread.sleepForTimeInterval:(${1:NSTimeInterval ti})" },  
    { "trigger": "NSThread.sleepUntilDate:", "contents": "NSThread.sleepUntilDate:(${1:NSDate* date})" },  
    { "trigger": "NSThread.threadPriority" },  
    { "trigger": "NSTimeIntervalSince1970 (978307200.0)" },  
    { "trigger": "NSTimeZone" },  
    { "trigger": "NSTimeZoneCalendarUnit (2097152)" },  
    { "trigger": "NSTimeZoneNameStyleDaylightSaving (2)" },  
    { "trigger": "NSTimeZoneNameStyleGeneric (4)" },  
    { "trigger": "NSTimeZoneNameStyleShortDaylightSaving (3)" },  
    { "trigger": "NSTimeZoneNameStyleShortGeneric (5)" },  
    { "trigger": "NSTimeZoneNameStyleShortStandard (1)" },  
    { "trigger": "NSTimeZoneNameStyleStandard (0)" },  
    { "trigger": "NSTimeZone.abbreviationDictionary" },  
    { "trigger": "NSTimeZone.defaultTimeZone" },  
    { "trigger": "NSTimeZone.knownTimeZoneNames" },  
    { "trigger": "NSTimeZone.localTimeZone" },  
    { "trigger": "NSTimeZone.resetSystemTimeZone" },  
    { "trigger": "NSTimeZone.setAbbreviationDictionary:", "contents": "NSTimeZone.setAbbreviationDictionary:(${1:NSDictionary* dict})" },  
    { "trigger": "NSTimeZone.setDefaultTimeZone:", "contents": "NSTimeZone.setDefaultTimeZone:(${1:NSTimeZone* aTimeZone})" },  
    { "trigger": "NSTimeZone.systemTimeZone" },  
    { "trigger": "NSTimeZone.timeZoneDataVersion" },  
    { "trigger": "NSTimeZone.timeZoneForSecondsFromGMT:", "contents": "NSTimeZone.timeZoneForSecondsFromGMT:(${1:NSInteger seconds})" },  
    { "trigger": "NSTimeZone.timeZoneWithAbbreviation:", "contents": "NSTimeZone.timeZoneWithAbbreviation:(${1:NSString* abbreviation})" },  
    { "trigger": "NSTimeZone.timeZoneWithName:", "contents": "NSTimeZone.timeZoneWithName:(${1:NSString* tzName})" },  
    { "trigger": "NSTimeZone.timeZoneWithName:data:", "contents": "NSTimeZone.timeZoneWithName:data:(${1:NSString* tzName}, data:${2:NSData* aData})" },  
    { "trigger": "NSTimer" },  
    { "trigger": "NSTimer.scheduledTimerWithTimeInterval:invocation:repeats:", "contents": "NSTimer.scheduledTimerWithTimeInterval:invocation:repeats:(${1:NSTimeInterval ti}, invocation:${2:NSInvocation* invocation}, repeats:${3:BOOL yesOrNo})" },  
    { "trigger": "NSTimer.scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", "contents": "NSTimer.scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:(${1:NSTimeInterval ti}, target:${2:id aTarget}, selector:${3:SEL aSelector}, userInfo:${4:id userInfo}, repeats:${5:BOOL yesOrNo})" },  
    { "trigger": "NSTimer.timerWithTimeInterval:invocation:repeats:", "contents": "NSTimer.timerWithTimeInterval:invocation:repeats:(${1:NSTimeInterval ti}, invocation:${2:NSInvocation* invocation}, repeats:${3:BOOL yesOrNo})" },  
    { "trigger": "NSTimer.timerWithTimeInterval:target:selector:userInfo:repeats:", "contents": "NSTimer.timerWithTimeInterval:target:selector:userInfo:repeats:(${1:NSTimeInterval ti}, target:${2:id aTarget}, selector:${3:SEL aSelector}, userInfo:${4:id userInfo}, repeats:${5:BOOL yesOrNo})" },  
    { "trigger": "NSTransformEntityMappingType (5)" },  
    { "trigger": "NSTransformableAttributeType (1800)" },  
    { "trigger": "NSUIntegerMax (4294967295)" },  
    { "trigger": "NSURL" },  
    { "trigger": "NSURLAttributeModificationDateKey (NSString*)" },  
    { "trigger": "NSURLAuthenticationChallenge" },  
    { "trigger": "NSURLAuthenticationChallengeSender" },  
    { "trigger": "NSURLAuthenticationMethodClientCertificate (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodDefault (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodHTMLForm (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodHTTPBasic (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodHTTPDigest (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodNTLM (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodNegotiate (NSString*)" },  
    { "trigger": "NSURLAuthenticationMethodServerTrust (NSString*)" },  
    { "trigger": "NSURLBookmarkCreationMinimalBookmark (512)" },  
    { "trigger": "NSURLBookmarkCreationPreferFileIDResolution (256)" },  
    { "trigger": "NSURLBookmarkCreationSuitableForBookmarkFile (1024)" },  
    { "trigger": "NSURLBookmarkResolutionWithoutMounting (512)" },  
    { "trigger": "NSURLBookmarkResolutionWithoutUI (256)" },  
    { "trigger": "NSURLCache" },  
    { "trigger": "NSURLCacheStorageAllowed (0)" },  
    { "trigger": "NSURLCacheStorageAllowedInMemoryOnly (1)" },  
    { "trigger": "NSURLCacheStorageNotAllowed (2)" },  
    { "trigger": "NSURLCache.setSharedURLCache:", "contents": "NSURLCache.setSharedURLCache:(${1:NSURLCache* cache})" },  
    { "trigger": "NSURLCache.sharedURLCache" },  
    { "trigger": "NSURLConnection" },  
    { "trigger": "NSURLConnection" },  
    { "trigger": "NSURLConnectionDataDelegate" },  
    { "trigger": "NSURLConnectionDelegate" },  
    { "trigger": "NSURLConnectionDownloadDelegate" },  
    { "trigger": "NSURLConnection.canHandleRequest:", "contents": "NSURLConnection.canHandleRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "NSURLConnection.connectionWithRequest:delegate:", "contents": "NSURLConnection.connectionWithRequest:delegate:(${1:NSURLRequest* request}, delegate:${2:id delegate})" },  
    { "trigger": "NSURLConnection.sendAsynchronousRequest:queue:completionHandler:", "contents": "NSURLConnection.sendAsynchronousRequest:queue:completionHandler:(${1:NSURLRequest* request}, queue:${2:NSOperationQueue* queue}, completionHandler:${3:void (^)(NSURLResponse *, NSData *, NSError *) handler})" },  
    { "trigger": "NSURLConnection.sendSynchronousRequest:returningResponse:error:", "contents": "NSURLConnection.sendSynchronousRequest:returningResponse:error:(${1:NSURLRequest* request}, returningResponse:${2:NSURLResponse** response}, error:${3:NSError** error})" },  
    { "trigger": "NSURLContentAccessDateKey (NSString*)" },  
    { "trigger": "NSURLContentModificationDateKey (NSString*)" },  
    { "trigger": "NSURLCreationDateKey (NSString*)" },  
    { "trigger": "NSURLCredential" },  
    { "trigger": "NSURLCredentialPersistenceForSession (1)" },  
    { "trigger": "NSURLCredentialPersistenceNone (0)" },  
    { "trigger": "NSURLCredentialPersistencePermanent (2)" },  
    { "trigger": "NSURLCredentialStorage" },  
    { "trigger": "NSURLCredentialStorageChangedNotification (NSString*)" },  
    { "trigger": "NSURLCredentialStorage.sharedCredentialStorage" },  
    { "trigger": "NSURLCredential.credentialForTrust:", "contents": "NSURLCredential.credentialForTrust:(${1:SecTrustRef trust})" },  
    { "trigger": "NSURLCredential.credentialWithIdentity:certificates:persistence:", "contents": "NSURLCredential.credentialWithIdentity:certificates:persistence:(${1:SecIdentityRef identity}, certificates:${2:NSArray* certArray}, persistence:${3:NSURLCredentialPersistence persistence})" },  
    { "trigger": "NSURLCredential.credentialWithUser:password:persistence:", "contents": "NSURLCredential.credentialWithUser:password:persistence:(${1:NSString* user}, password:${2:NSString* password}, persistence:${3:NSURLCredentialPersistence persistence})" },  
    { "trigger": "NSURLCustomIconKey (NSString*)" },  
    { "trigger": "NSURLEffectiveIconKey (NSString*)" },  
    { "trigger": "NSURLErrorBadServerResponse (-1011)" },  
    { "trigger": "NSURLErrorBadURL (-1000)" },  
    { "trigger": "NSURLErrorCallIsActive (-1019)" },  
    { "trigger": "NSURLErrorCancelled (-999)" },  
    { "trigger": "NSURLErrorCannotCloseFile (-3002)" },  
    { "trigger": "NSURLErrorCannotConnectToHost (-1004)" },  
    { "trigger": "NSURLErrorCannotCreateFile (-3000)" },  
    { "trigger": "NSURLErrorCannotDecodeContentData (-1016)" },  
    { "trigger": "NSURLErrorCannotDecodeRawData (-1015)" },  
    { "trigger": "NSURLErrorCannotFindHost (-1003)" },  
    { "trigger": "NSURLErrorCannotLoadFromNetwork (-2000)" },  
    { "trigger": "NSURLErrorCannotMoveFile (-3005)" },  
    { "trigger": "NSURLErrorCannotOpenFile (-3001)" },  
    { "trigger": "NSURLErrorCannotParseResponse (-1017)" },  
    { "trigger": "NSURLErrorCannotRemoveFile (-3004)" },  
    { "trigger": "NSURLErrorCannotWriteToFile (-3003)" },  
    { "trigger": "NSURLErrorClientCertificateRejected (-1205)" },  
    { "trigger": "NSURLErrorClientCertificateRequired (-1206)" },  
    { "trigger": "NSURLErrorDNSLookupFailed (-1006)" },  
    { "trigger": "NSURLErrorDataLengthExceedsMaximum (-1103)" },  
    { "trigger": "NSURLErrorDataNotAllowed (-1020)" },  
    { "trigger": "NSURLErrorDomain (NSString*)" },  
    { "trigger": "NSURLErrorDownloadDecodingFailedMidStream (-3006)" },  
    { "trigger": "NSURLErrorDownloadDecodingFailedToComplete (-3007)" },  
    { "trigger": "NSURLErrorFailingURLErrorKey (NSString*)" },  
    { "trigger": "NSURLErrorFailingURLPeerTrustErrorKey (NSString*)" },  
    { "trigger": "NSURLErrorFailingURLStringErrorKey (NSString*)" },  
    { "trigger": "NSURLErrorFileDoesNotExist (-1100)" },  
    { "trigger": "NSURLErrorFileIsDirectory (-1101)" },  
    { "trigger": "NSURLErrorHTTPTooManyRedirects (-1007)" },  
    { "trigger": "NSURLErrorInternationalRoamingOff (-1018)" },  
    { "trigger": "NSURLErrorKey (NSString*)" },  
    { "trigger": "NSURLErrorNetworkConnectionLost (-1005)" },  
    { "trigger": "NSURLErrorNoPermissionsToReadFile (-1102)" },  
    { "trigger": "NSURLErrorNotConnectedToInternet (-1009)" },  
    { "trigger": "NSURLErrorRedirectToNonExistentLocation (-1010)" },  
    { "trigger": "NSURLErrorRequestBodyStreamExhausted (-1021)" },  
    { "trigger": "NSURLErrorResourceUnavailable (-1008)" },  
    { "trigger": "NSURLErrorSecureConnectionFailed (-1200)" },  
    { "trigger": "NSURLErrorServerCertificateHasBadDate (-1201)" },  
    { "trigger": "NSURLErrorServerCertificateHasUnknownRoot (-1203)" },  
    { "trigger": "NSURLErrorServerCertificateNotYetValid (-1204)" },  
    { "trigger": "NSURLErrorServerCertificateUntrusted (-1202)" },  
    { "trigger": "NSURLErrorTimedOut (-1001)" },  
    { "trigger": "NSURLErrorUnknown (-1)" },  
    { "trigger": "NSURLErrorUnsupportedURL (-1002)" },  
    { "trigger": "NSURLErrorUserAuthenticationRequired (-1013)" },  
    { "trigger": "NSURLErrorUserCancelledAuthentication (-1012)" },  
    { "trigger": "NSURLErrorZeroByteResource (-1014)" },  
    { "trigger": "NSURLFileAllocatedSizeKey (NSString*)" },  
    { "trigger": "NSURLFileResourceIdentifierKey (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeBlockSpecial (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeCharacterSpecial (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeDirectory (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeKey (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeNamedPipe (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeRegular (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeSocket (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeSymbolicLink (NSString*)" },  
    { "trigger": "NSURLFileResourceTypeUnknown (NSString*)" },  
    { "trigger": "NSURLFileScheme (NSString*)" },  
    { "trigger": "NSURLFileSecurityKey (NSString*)" },  
    { "trigger": "NSURLFileSizeKey (NSString*)" },  
    { "trigger": "NSURLHasHiddenExtensionKey (NSString*)" },  
    { "trigger": "NSURLIsAliasFileKey (NSString*)" },  
    { "trigger": "NSURLIsDirectoryKey (NSString*)" },  
    { "trigger": "NSURLIsExcludedFromBackupKey (NSString*)" },  
    { "trigger": "NSURLIsExecutableKey (NSString*)" },  
    { "trigger": "NSURLIsHiddenKey (NSString*)" },  
    { "trigger": "NSURLIsMountTriggerKey (NSString*)" },  
    { "trigger": "NSURLIsPackageKey (NSString*)" },  
    { "trigger": "NSURLIsReadableKey (NSString*)" },  
    { "trigger": "NSURLIsRegularFileKey (NSString*)" },  
    { "trigger": "NSURLIsSymbolicLinkKey (NSString*)" },  
    { "trigger": "NSURLIsSystemImmutableKey (NSString*)" },  
    { "trigger": "NSURLIsUbiquitousItemKey (NSString*)" },  
    { "trigger": "NSURLIsUserImmutableKey (NSString*)" },  
    { "trigger": "NSURLIsVolumeKey (NSString*)" },  
    { "trigger": "NSURLIsWritableKey (NSString*)" },  
    { "trigger": "NSURLKeysOfUnsetValuesKey (NSString*)" },  
    { "trigger": "NSURLLabelColorKey (NSString*)" },  
    { "trigger": "NSURLLabelNumberKey (NSString*)" },  
    { "trigger": "NSURLLinkCountKey (NSString*)" },  
    { "trigger": "NSURLLocalizedLabelKey (NSString*)" },  
    { "trigger": "NSURLLocalizedNameKey (NSString*)" },  
    { "trigger": "NSURLLocalizedTypeDescriptionKey (NSString*)" },  
    { "trigger": "NSURLNameKey (NSString*)" },  
    { "trigger": "NSURLNetworkServiceTypeBackground (3)" },  
    { "trigger": "NSURLNetworkServiceTypeDefault (0)" },  
    { "trigger": "NSURLNetworkServiceTypeVideo (2)" },  
    { "trigger": "NSURLNetworkServiceTypeVoIP (1)" },  
    { "trigger": "NSURLNetworkServiceTypeVoice (4)" },  
    { "trigger": "NSURLParentDirectoryURLKey (NSString*)" },  
    { "trigger": "NSURLPreferredIOBlockSizeKey (NSString*)" },  
    { "trigger": "NSURLProtectionSpace" },  
    { "trigger": "NSURLProtectionSpaceFTP (NSString*)" },  
    { "trigger": "NSURLProtectionSpaceFTPProxy (NSString*)" },  
    { "trigger": "NSURLProtectionSpaceHTTP (NSString*)" },  
    { "trigger": "NSURLProtectionSpaceHTTPProxy (NSString*)" },  
    { "trigger": "NSURLProtectionSpaceHTTPS (NSString*)" },  
    { "trigger": "NSURLProtectionSpaceHTTPSProxy (NSString*)" },  
    { "trigger": "NSURLProtectionSpaceSOCKSProxy (NSString*)" },  
    { "trigger": "NSURLProtocol" },  
    { "trigger": "NSURLProtocolClient" },  
    { "trigger": "NSURLProtocol.canInitWithRequest:", "contents": "NSURLProtocol.canInitWithRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "NSURLProtocol.canonicalRequestForRequest:", "contents": "NSURLProtocol.canonicalRequestForRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "NSURLProtocol.propertyForKey:inRequest:", "contents": "NSURLProtocol.propertyForKey:inRequest:(${1:NSString* key}, inRequest:${2:NSURLRequest* request})" },  
    { "trigger": "NSURLProtocol.registerClass:", "contents": "NSURLProtocol.registerClass:(${1:Class protocolClass})" },  
    { "trigger": "NSURLProtocol.removePropertyForKey:inRequest:", "contents": "NSURLProtocol.removePropertyForKey:inRequest:(${1:NSString* key}, inRequest:${2:NSMutableURLRequest* request})" },  
    { "trigger": "NSURLProtocol.requestIsCacheEquivalent:toRequest:", "contents": "NSURLProtocol.requestIsCacheEquivalent:toRequest:(${1:NSURLRequest* a}, toRequest:${2:NSURLRequest* b})" },  
    { "trigger": "NSURLProtocol.setProperty:forKey:inRequest:", "contents": "NSURLProtocol.setProperty:forKey:inRequest:(${1:id value}, forKey:${2:NSString* key}, inRequest:${3:NSMutableURLRequest* request})" },  
    { "trigger": "NSURLProtocol.unregisterClass:", "contents": "NSURLProtocol.unregisterClass:(${1:Class protocolClass})" },  
    { "trigger": "NSURLRequest" },  
    { "trigger": "NSURLRequestReloadIgnoringCacheData (1)" },  
    { "trigger": "NSURLRequestReloadIgnoringLocalAndRemoteCacheData (4)" },  
    { "trigger": "NSURLRequestReloadIgnoringLocalCacheData (1)" },  
    { "trigger": "NSURLRequestReloadRevalidatingCacheData (5)" },  
    { "trigger": "NSURLRequestReturnCacheDataDontLoad (3)" },  
    { "trigger": "NSURLRequestReturnCacheDataElseLoad (2)" },  
    { "trigger": "NSURLRequestUseProtocolCachePolicy (0)" },  
    { "trigger": "NSURLRequest.requestWithURL:", "contents": "NSURLRequest.requestWithURL:(${1:NSURL* URL})" },  
    { "trigger": "NSURLRequest.requestWithURL:cachePolicy:timeoutInterval:", "contents": "NSURLRequest.requestWithURL:cachePolicy:timeoutInterval:(${1:NSURL* URL}, cachePolicy:${2:NSURLRequestCachePolicy cachePolicy}, timeoutInterval:${3:NSTimeInterval timeoutInterval})" },  
    { "trigger": "NSURLResponse" },  
    { "trigger": "NSURLResponseUnknownLength (-1)" },  
    { "trigger": "NSURLTotalFileAllocatedSizeKey (NSString*)" },  
    { "trigger": "NSURLTotalFileSizeKey (NSString*)" },  
    { "trigger": "NSURLTypeIdentifierKey (NSString*)" },  
    { "trigger": "NSURL.URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", "contents": "NSURL.URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:(${1:NSData* bookmarkData}, options:${2:NSURLBookmarkResolutionOptions options}, relativeToURL:${3:NSURL* relativeURL}, bookmarkDataIsStale:${4:BOOL* isStale}, error:${5:NSError** error})" },  
    { "trigger": "NSURL.URLWithString:", "contents": "NSURL.URLWithString:(${1:NSString* URLString})" },  
    { "trigger": "NSURL.URLWithString:relativeToURL:", "contents": "NSURL.URLWithString:relativeToURL:(${1:NSString* URLString}, relativeToURL:${2:NSURL* baseURL})" },  
    { "trigger": "NSURLUbiquitousItemHasUnresolvedConflictsKey (NSString*)" },  
    { "trigger": "NSURLUbiquitousItemIsDownloadedKey (NSString*)" },  
    { "trigger": "NSURLUbiquitousItemIsDownloadingKey (NSString*)" },  
    { "trigger": "NSURLUbiquitousItemIsUploadedKey (NSString*)" },  
    { "trigger": "NSURLUbiquitousItemIsUploadingKey (NSString*)" },  
    { "trigger": "NSURLUbiquitousItemPercentDownloadedKey (NSString*)" },  
    { "trigger": "NSURLUbiquitousItemPercentUploadedKey (NSString*)" },  
    { "trigger": "NSURLVolumeAvailableCapacityKey (NSString*)" },  
    { "trigger": "NSURLVolumeCreationDateKey (NSString*)" },  
    { "trigger": "NSURLVolumeIdentifierKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsAutomountedKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsBrowsableKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsEjectableKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsInternalKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsJournalingKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsLocalKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsReadOnlyKey (NSString*)" },  
    { "trigger": "NSURLVolumeIsRemovableKey (NSString*)" },  
    { "trigger": "NSURLVolumeLocalizedFormatDescriptionKey (NSString*)" },  
    { "trigger": "NSURLVolumeLocalizedNameKey (NSString*)" },  
    { "trigger": "NSURLVolumeMaximumFileSizeKey (NSString*)" },  
    { "trigger": "NSURLVolumeNameKey (NSString*)" },  
    { "trigger": "NSURLVolumeResourceCountKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsAdvisoryFileLockingKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsCasePreservedNamesKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsCaseSensitiveNamesKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsExtendedSecurityKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsHardLinksKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsJournalingKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsPersistentIDsKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsRenamingKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsRootDirectoryDatesKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsSparseFilesKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsSymbolicLinksKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsVolumeSizesKey (NSString*)" },  
    { "trigger": "NSURLVolumeSupportsZeroRunsKey (NSString*)" },  
    { "trigger": "NSURLVolumeTotalCapacityKey (NSString*)" },  
    { "trigger": "NSURLVolumeURLForRemountingKey (NSString*)" },  
    { "trigger": "NSURLVolumeURLKey (NSString*)" },  
    { "trigger": "NSURLVolumeUUIDStringKey (NSString*)" },  
    { "trigger": "NSURL.bookmarkDataWithContentsOfURL:error:", "contents": "NSURL.bookmarkDataWithContentsOfURL:error:(${1:NSURL* bookmarkFileURL}, error:${2:NSError** error})" },  
    { "trigger": "NSURL.fileURLWithPath:", "contents": "NSURL.fileURLWithPath:(${1:NSString* path})" },  
    { "trigger": "NSURL.fileURLWithPathComponents:", "contents": "NSURL.fileURLWithPathComponents:(${1:NSArray* components})" },  
    { "trigger": "NSURL.fileURLWithPath:isDirectory:", "contents": "NSURL.fileURLWithPath:isDirectory:(${1:NSString* path}, isDirectory:${2:BOOL isDir})" },  
    { "trigger": "NSURL.resourceValuesForKeys:fromBookmarkData:", "contents": "NSURL.resourceValuesForKeys:fromBookmarkData:(${1:NSArray* keys}, fromBookmarkData:${2:NSData* bookmarkData})" },  
    { "trigger": "NSURL.writeBookmarkData:toURL:options:error:", "contents": "NSURL.writeBookmarkData:toURL:options:error:(${1:NSData* bookmarkData}, toURL:${2:NSURL* bookmarkFileURL}, options:${3:NSURLBookmarkFileCreationOptions options}, error:${4:NSError** error})" },  
    { "trigger": "NSUTF16BigEndianStringEncoding (2415919360)" },  
    { "trigger": "NSUTF16LittleEndianStringEncoding (2483028224)" },  
    { "trigger": "NSUTF16StringEncoding (10)" },  
    { "trigger": "NSUTF32BigEndianStringEncoding (2550137088)" },  
    { "trigger": "NSUTF32LittleEndianStringEncoding (2617245952)" },  
    { "trigger": "NSUTF32StringEncoding (2348810496)" },  
    { "trigger": "NSUTF8StringEncoding (4)" },  
    { "trigger": "NSUUIDChangedPersistentStoresKey (NSString*)" },  
    { "trigger": "NSUbiquitousKeyValueStore" },  
    { "trigger": "NSUbiquitousKeyValueStoreChangeReasonKey (NSString*)" },  
    { "trigger": "NSUbiquitousKeyValueStoreChangedKeysKey (NSString*)" },  
    { "trigger": "NSUbiquitousKeyValueStoreDidChangeExternallyNotification (NSString*)" },  
    { "trigger": "NSUbiquitousKeyValueStoreInitialSyncChange (1)" },  
    { "trigger": "NSUbiquitousKeyValueStoreQuotaViolationChange (2)" },  
    { "trigger": "NSUbiquitousKeyValueStoreServerChange (0)" },  
    { "trigger": "NSUbiquitousKeyValueStore.defaultStore" },  
    { "trigger": "NSUnarchiveFromDataTransformerName (NSString*)" },  
    { "trigger": "NSUncachedRead (2)" },  
    { "trigger": "NSUndefinedAttributeType (0)" },  
    { "trigger": "NSUndefinedDateComponent (2147483647)" },  
    { "trigger": "NSUndefinedEntityMappingType (0)" },  
    { "trigger": "NSUndefinedKeyException (NSString*)" },  
    { "trigger": "NSUnderlyingErrorKey (NSString*)" },  
    { "trigger": "NSUndoCloseGroupingRunLoopOrdering (350000)" },  
    { "trigger": "NSUndoManager" },  
    { "trigger": "NSUndoManagerCheckpointNotification (NSString*)" },  
    { "trigger": "NSUndoManagerDidCloseUndoGroupNotification (NSString*)" },  
    { "trigger": "NSUndoManagerDidOpenUndoGroupNotification (NSString*)" },  
    { "trigger": "NSUndoManagerDidRedoChangeNotification (NSString*)" },  
    { "trigger": "NSUndoManagerDidUndoChangeNotification (NSString*)" },  
    { "trigger": "NSUndoManagerGroupIsDiscardableKey (NSString*)" },  
    { "trigger": "NSUndoManagerWillCloseUndoGroupNotification (NSString*)" },  
    { "trigger": "NSUndoManagerWillRedoChangeNotification (NSString*)" },  
    { "trigger": "NSUndoManagerWillUndoChangeNotification (NSString*)" },  
    { "trigger": "NSUnicodeStringEncoding (10)" },  
    { "trigger": "NSUnionOfArraysKeyValueOperator (NSString*)" },  
    { "trigger": "NSUnionOfObjectsKeyValueOperator (NSString*)" },  
    { "trigger": "NSUnionOfSetsKeyValueOperator (NSString*)" },  
    { "trigger": "NSUnionRange", "contents": "NSUnionRange(${1:NSRange range1}, ${2:NSRange range2})" },  
    { "trigger": "NSUnionSetExpressionType (5)" },  
    { "trigger": "NSUpdatedObjectsKey (NSString*)" },  
    { "trigger": "NSUserCancelledError (3072)" },  
    { "trigger": "NSUserDefaults" },  
    { "trigger": "NSUserDefaultsDidChangeNotification (NSString*)" },  
    { "trigger": "NSUserDefaults.resetStandardUserDefaults" },  
    { "trigger": "NSUserDefaults.standardUserDefaults" },  
    { "trigger": "NSUserDirectory (7)" },  
    { "trigger": "NSUserDomainMask (1)" },  
    { "trigger": "NSUserName" },  
    { "trigger": "NSValidationDateTooLateError (1630)" },  
    { "trigger": "NSValidationDateTooSoonError (1640)" },  
    { "trigger": "NSValidationErrorMaximum (2047)" },  
    { "trigger": "NSValidationErrorMinimum (1024)" },  
    { "trigger": "NSValidationInvalidDateError (1650)" },  
    { "trigger": "NSValidationKeyErrorKey (NSString*)" },  
    { "trigger": "NSValidationMissingMandatoryPropertyError (1570)" },  
    { "trigger": "NSValidationMultipleErrorsError (1560)" },  
    { "trigger": "NSValidationNumberTooLargeError (1610)" },  
    { "trigger": "NSValidationNumberTooSmallError (1620)" },  
    { "trigger": "NSValidationObjectErrorKey (NSString*)" },  
    { "trigger": "NSValidationPredicateErrorKey (NSString*)" },  
    { "trigger": "NSValidationRelationshipDeniedDeleteError (1600)" },  
    { "trigger": "NSValidationRelationshipExceedsMaximumCountError (1590)" },  
    { "trigger": "NSValidationRelationshipLacksMinimumCountError (1580)" },  
    { "trigger": "NSValidationStringPatternMatchingError (1680)" },  
    { "trigger": "NSValidationStringTooLongError (1660)" },  
    { "trigger": "NSValidationStringTooShortError (1670)" },  
    { "trigger": "NSValidationValueErrorKey (NSString*)" },  
    { "trigger": "NSValue" },  
    { "trigger": "NSValue" },  
    { "trigger": "NSValue" },  
    { "trigger": "NSValue" },  
    { "trigger": "NSValueTransformer" },  
    { "trigger": "NSValueTransformer.allowsReverseTransformation" },  
    { "trigger": "NSValueTransformer.setValueTransformer:forName:", "contents": "NSValueTransformer.setValueTransformer:forName:(${1:NSValueTransformer* transformer}, forName:${2:NSString* name})" },  
    { "trigger": "NSValueTransformer.transformedValueClass" },  
    { "trigger": "NSValueTransformer.valueTransformerForName:", "contents": "NSValueTransformer.valueTransformerForName:(${1:NSString* name})" },  
    { "trigger": "NSValueTransformer.valueTransformerNames" },  
    { "trigger": "NSValue.valueWithBytes:objCType:", "contents": "NSValue.valueWithBytes:objCType:(${1:void* value}, objCType:${2:char* type})" },  
    { "trigger": "NSValue.valueWithCATransform3D:", "contents": "NSValue.valueWithCATransform3D:(${1:CATransform3D t})" },  
    { "trigger": "NSValue.valueWithCGAffineTransform:", "contents": "NSValue.valueWithCGAffineTransform:(${1:CGAffineTransform transform})" },  
    { "trigger": "NSValue.valueWithCGPoint:", "contents": "NSValue.valueWithCGPoint:(${1:CGPoint point})" },  
    { "trigger": "NSValue.valueWithCGRect:", "contents": "NSValue.valueWithCGRect:(${1:CGRect rect})" },  
    { "trigger": "NSValue.valueWithCGSize:", "contents": "NSValue.valueWithCGSize:(${1:CGSize size})" },  
    { "trigger": "NSValue.valueWithCMTime:", "contents": "NSValue.valueWithCMTime:(${1:CMTime time})" },  
    { "trigger": "NSValue.valueWithCMTimeMapping:", "contents": "NSValue.valueWithCMTimeMapping:(${1:CMTimeMapping timeMapping})" },  
    { "trigger": "NSValue.valueWithCMTimeRange:", "contents": "NSValue.valueWithCMTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "NSValue.valueWithNonretainedObject:", "contents": "NSValue.valueWithNonretainedObject:(${1:id anObject})" },  
    { "trigger": "NSValue.valueWithPointer:", "contents": "NSValue.valueWithPointer:(${1:void* pointer})" },  
    { "trigger": "NSValue.valueWithRange:", "contents": "NSValue.valueWithRange:(${1:NSRange range})" },  
    { "trigger": "NSValue.valueWithUIEdgeInsets:", "contents": "NSValue.valueWithUIEdgeInsets:(${1:UIEdgeInsets insets})" },  
    { "trigger": "NSValue.valueWithUIOffset:", "contents": "NSValue.valueWithUIOffset:(${1:UIOffset insets})" },  
    { "trigger": "NSValue.value:withObjCType:", "contents": "NSValue.value:withObjCType:(${1:void* value}, withObjCType:${2:char* type})" },  
    { "trigger": "NSVariableExpressionType (2)" },  
    { "trigger": "NSVolumeEnumerationProduceFileReferenceURLs (4)" },  
    { "trigger": "NSVolumeEnumerationSkipHiddenVolumes (2)" },  
    { "trigger": "NSWeekCalendarUnit (256)" },  
    { "trigger": "NSWeekOfMonthCalendarUnit (4096)" },  
    { "trigger": "NSWeekOfYearCalendarUnit (8192)" },  
    { "trigger": "NSWeekdayCalendarUnit (512)" },  
    { "trigger": "NSWeekdayOrdinalCalendarUnit (1024)" },  
    { "trigger": "NSWidthInsensitiveSearch (256)" },  
    { "trigger": "NSWillBecomeMultiThreadedNotification (NSString*)" },  
    { "trigger": "NSWindows95OperatingSystem (2)" },  
    { "trigger": "NSWindowsCP1250StringEncoding (15)" },  
    { "trigger": "NSWindowsCP1251StringEncoding (11)" },  
    { "trigger": "NSWindowsCP1252StringEncoding (12)" },  
    { "trigger": "NSWindowsCP1253StringEncoding (13)" },  
    { "trigger": "NSWindowsCP1254StringEncoding (14)" },  
    { "trigger": "NSWindowsNTOperatingSystem (1)" },  
    { "trigger": "NSWrapCalendarComponents (1)" },  
    { "trigger": "NSXMLParser" },  
    { "trigger": "NSXMLParserAttributeHasNoValueError (41)" },  
    { "trigger": "NSXMLParserAttributeListNotFinishedError (51)" },  
    { "trigger": "NSXMLParserAttributeListNotStartedError (50)" },  
    { "trigger": "NSXMLParserAttributeNotFinishedError (40)" },  
    { "trigger": "NSXMLParserAttributeNotStartedError (39)" },  
    { "trigger": "NSXMLParserAttributeRedefinedError (42)" },  
    { "trigger": "NSXMLParserCDATANotFinishedError (63)" },  
    { "trigger": "NSXMLParserCharacterRefAtEOFError (10)" },  
    { "trigger": "NSXMLParserCharacterRefInDTDError (13)" },  
    { "trigger": "NSXMLParserCharacterRefInEpilogError (12)" },  
    { "trigger": "NSXMLParserCharacterRefInPrologError (11)" },  
    { "trigger": "NSXMLParserCommentContainsDoubleHyphenError (80)" },  
    { "trigger": "NSXMLParserCommentNotFinishedError (45)" },  
    { "trigger": "NSXMLParserConditionalSectionNotFinishedError (59)" },  
    { "trigger": "NSXMLParserConditionalSectionNotStartedError (58)" },  
    { "trigger": "NSXMLParserDOCTYPEDeclNotFinishedError (61)" },  
    { "trigger": "NSXMLParserDelegate" },  
    { "trigger": "NSXMLParserDelegateAbortedParseError (512)" },  
    { "trigger": "NSXMLParserDocumentStartError (3)" },  
    { "trigger": "NSXMLParserElementContentDeclNotFinishedError (55)" },  
    { "trigger": "NSXMLParserElementContentDeclNotStartedError (54)" },  
    { "trigger": "NSXMLParserEmptyDocumentError (4)" },  
    { "trigger": "NSXMLParserEncodingNotSupportedError (32)" },  
    { "trigger": "NSXMLParserEntityBoundaryError (90)" },  
    { "trigger": "NSXMLParserEntityIsExternalError (29)" },  
    { "trigger": "NSXMLParserEntityIsParameterError (30)" },  
    { "trigger": "NSXMLParserEntityNotFinishedError (37)" },  
    { "trigger": "NSXMLParserEntityNotStartedError (36)" },  
    { "trigger": "NSXMLParserEntityRefAtEOFError (14)" },  
    { "trigger": "NSXMLParserEntityRefInDTDError (17)" },  
    { "trigger": "NSXMLParserEntityRefInEpilogError (16)" },  
    { "trigger": "NSXMLParserEntityRefInPrologError (15)" },  
    { "trigger": "NSXMLParserEntityRefLoopError (89)" },  
    { "trigger": "NSXMLParserEntityReferenceMissingSemiError (23)" },  
    { "trigger": "NSXMLParserEntityReferenceWithoutNameError (22)" },  
    { "trigger": "NSXMLParserEntityValueRequiredError (84)" },  
    { "trigger": "NSXMLParserEqualExpectedError (75)" },  
    { "trigger": "NSXMLParserErrorDomain (NSString*)" },  
    { "trigger": "NSXMLParserExternalStandaloneEntityError (82)" },  
    { "trigger": "NSXMLParserExternalSubsetNotFinishedError (60)" },  
    { "trigger": "NSXMLParserExtraContentError (86)" },  
    { "trigger": "NSXMLParserGTRequiredError (73)" },  
    { "trigger": "NSXMLParserInternalError (1)" },  
    { "trigger": "NSXMLParserInvalidCharacterError (9)" },  
    { "trigger": "NSXMLParserInvalidCharacterInEntityError (87)" },  
    { "trigger": "NSXMLParserInvalidCharacterRefError (8)" },  
    { "trigger": "NSXMLParserInvalidConditionalSectionError (83)" },  
    { "trigger": "NSXMLParserInvalidDecimalCharacterRefError (7)" },  
    { "trigger": "NSXMLParserInvalidEncodingError (81)" },  
    { "trigger": "NSXMLParserInvalidEncodingNameError (79)" },  
    { "trigger": "NSXMLParserInvalidHexCharacterRefError (6)" },  
    { "trigger": "NSXMLParserInvalidURIError (91)" },  
    { "trigger": "NSXMLParserLTRequiredError (72)" },  
    { "trigger": "NSXMLParserLTSlashRequiredError (74)" },  
    { "trigger": "NSXMLParserLessThanSymbolInAttributeError (38)" },  
    { "trigger": "NSXMLParserLiteralNotFinishedError (44)" },  
    { "trigger": "NSXMLParserLiteralNotStartedError (43)" },  
    { "trigger": "NSXMLParserMisplacedCDATAEndStringError (62)" },  
    { "trigger": "NSXMLParserMisplacedXMLDeclarationError (64)" },  
    { "trigger": "NSXMLParserMixedContentDeclNotFinishedError (53)" },  
    { "trigger": "NSXMLParserMixedContentDeclNotStartedError (52)" },  
    { "trigger": "NSXMLParserNAMERequiredError (68)" },  
    { "trigger": "NSXMLParserNMTOKENRequiredError (67)" },  
    { "trigger": "NSXMLParserNamespaceDeclarationError (35)" },  
    { "trigger": "NSXMLParserNoDTDError (94)" },  
    { "trigger": "NSXMLParserNotWellBalancedError (85)" },  
    { "trigger": "NSXMLParserNotationNotFinishedError (49)" },  
    { "trigger": "NSXMLParserNotationNotStartedError (48)" },  
    { "trigger": "NSXMLParserOutOfMemoryError (2)" },  
    { "trigger": "NSXMLParserPCDATARequiredError (69)" },  
    { "trigger": "NSXMLParserParsedEntityRefAtEOFError (18)" },  
    { "trigger": "NSXMLParserParsedEntityRefInEpilogError (20)" },  
    { "trigger": "NSXMLParserParsedEntityRefInInternalError (88)" },  
    { "trigger": "NSXMLParserParsedEntityRefInInternalSubsetError (21)" },  
    { "trigger": "NSXMLParserParsedEntityRefInPrologError (19)" },  
    { "trigger": "NSXMLParserParsedEntityRefMissingSemiError (25)" },  
    { "trigger": "NSXMLParserParsedEntityRefNoNameError (24)" },  
    { "trigger": "NSXMLParserPrematureDocumentEndError (5)" },  
    { "trigger": "NSXMLParserProcessingInstructionNotFinishedError (47)" },  
    { "trigger": "NSXMLParserProcessingInstructionNotStartedError (46)" },  
    { "trigger": "NSXMLParserPublicIdentifierRequiredError (71)" },  
    { "trigger": "NSXMLParserSeparatorRequiredError (66)" },  
    { "trigger": "NSXMLParserSpaceRequiredError (65)" },  
    { "trigger": "NSXMLParserStandaloneValueError (78)" },  
    { "trigger": "NSXMLParserStringNotClosedError (34)" },  
    { "trigger": "NSXMLParserStringNotStartedError (33)" },  
    { "trigger": "NSXMLParserTagNameMismatchError (76)" },  
    { "trigger": "NSXMLParserURIFragmentError (92)" },  
    { "trigger": "NSXMLParserURIRequiredError (70)" },  
    { "trigger": "NSXMLParserUndeclaredEntityError (26)" },  
    { "trigger": "NSXMLParserUnfinishedTagError (77)" },  
    { "trigger": "NSXMLParserUnknownEncodingError (31)" },  
    { "trigger": "NSXMLParserUnparsedEntityError (28)" },  
    { "trigger": "NSXMLParserXMLDeclNotFinishedError (57)" },  
    { "trigger": "NSXMLParserXMLDeclNotStartedError (56)" },  
    { "trigger": "NSYearCalendarUnit (4)" },  
    { "trigger": "NSYearForWeekOfYearCalendarUnit (16384)" },  
    { "trigger": "NSZoneCalloc", "contents": "NSZoneCalloc(${1:NSZone* zone}, ${2:NSUInteger numElems}, ${3:NSUInteger byteSize})" },  
    { "trigger": "NSZoneFree", "contents": "NSZoneFree(${1:NSZone* zone}, ${2:void* ptr})" },  
    { "trigger": "NSZoneFromPointer", "contents": "NSZoneFromPointer(${1:void* ptr})" },  
    { "trigger": "NSZoneMalloc", "contents": "NSZoneMalloc(${1:NSZone* zone}, ${2:NSUInteger size})" },  
    { "trigger": "NSZoneName", "contents": "NSZoneName(${1:NSZone* zone})" },  
    { "trigger": "NSZoneRealloc", "contents": "NSZoneRealloc(${1:NSZone* zone}, ${2:void* ptr}, ${3:NSUInteger size})" },  
    { "trigger": "NS_BLOCKS_AVAILABLE (1)" },  
    { "trigger": "NS_BigEndian (2)" },  
    { "trigger": "NS_LittleEndian (1)" },  
    { "trigger": "NS_UNICHAR_IS_EIGHT_BIT (0)" },  
    { "trigger": "NS_UnknownByteOrder (0)" },  
    { "trigger": "NameFontTableTag (1851878757)" },  
    { "trigger": "NewAUGraph", "contents": "NewAUGraph(${1:AUGraph* outGraph})" },  
    { "trigger": "NewMusicEventIterator", "contents": "NewMusicEventIterator(${1:MusicTrack inTrack}, ${2:MusicEventIterator* outIterator})" },  
    { "trigger": "NewMusicPlayer", "contents": "NewMusicPlayer(${1:MusicPlayer* outPlayer})" },  
    { "trigger": "NewMusicSequence", "contents": "NewMusicSequence(${1:MusicSequence* outSequence})" },  
    { "trigger": "PMSymbol" },  
    { "trigger": "QLPreviewController" },  
    { "trigger": "QLPreviewControllerDataSource" },  
    { "trigger": "QLPreviewControllerDelegate" },  
    { "trigger": "QLPreviewController.canPreviewItem:", "contents": "QLPreviewController.canPreviewItem:(${1:id item})" },  
    { "trigger": "QLPreviewItem" },  
    { "trigger": "RSSI" },  
    { "trigger": "SCCopyLastError" },  
    { "trigger": "SCError" },  
    { "trigger": "SCErrorString", "contents": "SCErrorString(${1:int status})" },  
    { "trigger": "SCNetworkReachabilityCreateWithAddress", "contents": "SCNetworkReachabilityCreateWithAddress(${1:CFAllocatorRef allocator}, ${2:struct sockaddr* address})" },  
    { "trigger": "SCNetworkReachabilityCreateWithAddressPair", "contents": "SCNetworkReachabilityCreateWithAddressPair(${1:CFAllocatorRef allocator}, ${2:struct sockaddr* localAddress}, ${3:struct sockaddr* remoteAddress})" },  
    { "trigger": "SCNetworkReachabilityCreateWithName", "contents": "SCNetworkReachabilityCreateWithName(${1:CFAllocatorRef allocator}, ${2:char* nodename})" },  
    { "trigger": "SCNetworkReachabilityGetFlags", "contents": "SCNetworkReachabilityGetFlags(${1:SCNetworkReachabilityRef target}, ${2:SCNetworkReachabilityFlags* flags})" },  
    { "trigger": "SCNetworkReachabilityGetTypeID" },  
    { "trigger": "SCNetworkReachabilityScheduleWithRunLoop", "contents": "SCNetworkReachabilityScheduleWithRunLoop(${1:SCNetworkReachabilityRef target}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})" },  
    { "trigger": "SCNetworkReachabilitySetCallback", "contents": "SCNetworkReachabilitySetCallback(${1:SCNetworkReachabilityRef target}, ${2:SCNetworkReachabilityCallBack callout}, ${3:SCNetworkReachabilityContext* context})" },  
    { "trigger": "SCNetworkReachabilitySetDispatchQueue", "contents": "SCNetworkReachabilitySetDispatchQueue(${1:SCNetworkReachabilityRef target}, ${2:dispatch_queue_t queue})" },  
    { "trigger": "SCNetworkReachabilityUnscheduleFromRunLoop", "contents": "SCNetworkReachabilityUnscheduleFromRunLoop(${1:SCNetworkReachabilityRef target}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})" },  
    { "trigger": "SEVERITY_ERROR (1)" },  
    { "trigger": "SEVERITY_SUCCESS (0)" },  
    { "trigger": "SKErrorClientInvalid (1)" },  
    { "trigger": "SKErrorDomain (NSString*)" },  
    { "trigger": "SKErrorPaymentCancelled (2)" },  
    { "trigger": "SKErrorPaymentInvalid (3)" },  
    { "trigger": "SKErrorPaymentNotAllowed (4)" },  
    { "trigger": "SKErrorUnknown (0)" },  
    { "trigger": "SKMutablePayment" },  
    { "trigger": "SKPayment" },  
    { "trigger": "SKPaymentQueue" },  
    { "trigger": "SKPaymentQueue.canMakePayments" },  
    { "trigger": "SKPaymentQueue.defaultQueue" },  
    { "trigger": "SKPaymentTransaction" },  
    { "trigger": "SKPaymentTransactionObserver" },  
    { "trigger": "SKPaymentTransactionStateFailed (2)" },  
    { "trigger": "SKPaymentTransactionStatePurchased (1)" },  
    { "trigger": "SKPaymentTransactionStatePurchasing (0)" },  
    { "trigger": "SKPaymentTransactionStateRestored (3)" },  
    { "trigger": "SKPayment.paymentWithProduct:", "contents": "SKPayment.paymentWithProduct:(${1:SKProduct* product})" },  
    { "trigger": "SKPayment.paymentWithProductIdentifier:", "contents": "SKPayment.paymentWithProductIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "SKProduct" },  
    { "trigger": "SKProductsRequest" },  
    { "trigger": "SKProductsRequestDelegate" },  
    { "trigger": "SKProductsResponse" },  
    { "trigger": "SKRequest" },  
    { "trigger": "SKRequestDelegate" },  
    { "trigger": "SSLAddDistinguishedName", "contents": "SSLAddDistinguishedName(${1:SSLContextRef context}, ${2:void* derDN}, ${3:size_t derDNLen})" },  
    { "trigger": "SSLClose", "contents": "SSLClose(${1:SSLContextRef context})" },  
    { "trigger": "SSLContextGetTypeID" },  
    { "trigger": "SSLCopyDistinguishedNames", "contents": "SSLCopyDistinguishedNames(${1:SSLContextRef context}, ${2:CFArrayRef* names})" },  
    { "trigger": "SSLCopyPeerTrust", "contents": "SSLCopyPeerTrust(${1:SSLContextRef context}, ${2:SecTrustRef* trust})" },  
    { "trigger": "SSLCreateContext", "contents": "SSLCreateContext(${1:CFAllocatorRef alloc}, ${2:SSLProtocolSide protocolSide}, ${3:SSLConnectionType connectionType})" },  
    { "trigger": "SSLGetBufferedReadSize", "contents": "SSLGetBufferedReadSize(${1:SSLContextRef context}, ${2:size_t* bufSize})" },  
    { "trigger": "SSLGetClientCertificateState", "contents": "SSLGetClientCertificateState(${1:SSLContextRef context}, ${2:SSLClientCertificateState* clientState})" },  
    { "trigger": "SSLGetConnection", "contents": "SSLGetConnection(${1:SSLContextRef context}, ${2:SSLConnectionRef* connection})" },  
    { "trigger": "SSLGetDatagramWriteSize", "contents": "SSLGetDatagramWriteSize(${1:SSLContextRef dtlsContext}, ${2:size_t* bufSize})" },  
    { "trigger": "SSLGetEnabledCiphers", "contents": "SSLGetEnabledCiphers(${1:SSLContextRef context}, ${2:SSLCipherSuite* ciphers}, ${3:size_t* numCiphers})" },  
    { "trigger": "SSLGetMaxDatagramRecordSize", "contents": "SSLGetMaxDatagramRecordSize(${1:SSLContextRef dtlsContext}, ${2:size_t* maxSize})" },  
    { "trigger": "SSLGetNegotiatedCipher", "contents": "SSLGetNegotiatedCipher(${1:SSLContextRef context}, ${2:SSLCipherSuite* cipherSuite})" },  
    { "trigger": "SSLGetNegotiatedProtocolVersion", "contents": "SSLGetNegotiatedProtocolVersion(${1:SSLContextRef context}, ${2:SSLProtocol* protocol})" },  
    { "trigger": "SSLGetNumberEnabledCiphers", "contents": "SSLGetNumberEnabledCiphers(${1:SSLContextRef context}, ${2:size_t* numCiphers})" },  
    { "trigger": "SSLGetNumberSupportedCiphers", "contents": "SSLGetNumberSupportedCiphers(${1:SSLContextRef context}, ${2:size_t* numCiphers})" },  
    { "trigger": "SSLGetPeerDomainName", "contents": "SSLGetPeerDomainName(${1:SSLContextRef context}, ${2:char* peerName}, ${3:size_t* peerNameLen})" },  
    { "trigger": "SSLGetPeerDomainNameLength", "contents": "SSLGetPeerDomainNameLength(${1:SSLContextRef context}, ${2:size_t* peerNameLen})" },  
    { "trigger": "SSLGetPeerID", "contents": "SSLGetPeerID(${1:SSLContextRef context}, ${2:void** peerID}, ${3:size_t* peerIDLen})" },  
    { "trigger": "SSLGetProtocolVersionMax", "contents": "SSLGetProtocolVersionMax(${1:SSLContextRef context}, ${2:SSLProtocol* maxVersion})" },  
    { "trigger": "SSLGetProtocolVersionMin", "contents": "SSLGetProtocolVersionMin(${1:SSLContextRef context}, ${2:SSLProtocol* minVersion})" },  
    { "trigger": "SSLGetSessionOption", "contents": "SSLGetSessionOption(${1:SSLContextRef context}, ${2:SSLSessionOption option}, ${3:Boolean* value})" },  
    { "trigger": "SSLGetSessionState", "contents": "SSLGetSessionState(${1:SSLContextRef context}, ${2:SSLSessionState* state})" },  
    { "trigger": "SSLGetSupportedCiphers", "contents": "SSLGetSupportedCiphers(${1:SSLContextRef context}, ${2:SSLCipherSuite* ciphers}, ${3:size_t* numCiphers})" },  
    { "trigger": "SSLHandshake", "contents": "SSLHandshake(${1:SSLContextRef context})" },  
    { "trigger": "SSLRead", "contents": "SSLRead(${1:SSLContextRef context}, ${2:void* data}, ${3:size_t dataLength}, ${4:size_t* processed})" },  
    { "trigger": "SSLSetCertificate", "contents": "SSLSetCertificate(${1:SSLContextRef context}, ${2:CFArrayRef certRefs})" },  
    { "trigger": "SSLSetClientSideAuthenticate", "contents": "SSLSetClientSideAuthenticate(${1:SSLContextRef context}, ${2:SSLAuthenticate auth})" },  
    { "trigger": "SSLSetConnection", "contents": "SSLSetConnection(${1:SSLContextRef context}, ${2:SSLConnectionRef connection})" },  
    { "trigger": "SSLSetDatagramHelloCookie", "contents": "SSLSetDatagramHelloCookie(${1:SSLContextRef dtlsContext}, ${2:void* cookie}, ${3:size_t cookieLen})" },  
    { "trigger": "SSLSetEnabledCiphers", "contents": "SSLSetEnabledCiphers(${1:SSLContextRef context}, ${2:SSLCipherSuite* ciphers}, ${3:size_t numCiphers})" },  
    { "trigger": "SSLSetEncryptionCertificate", "contents": "SSLSetEncryptionCertificate(${1:SSLContextRef context}, ${2:CFArrayRef certRefs})" },  
    { "trigger": "SSLSetIOFuncs", "contents": "SSLSetIOFuncs(${1:SSLContextRef context}, ${2:SSLReadFunc readFunc}, ${3:SSLWriteFunc writeFunc})" },  
    { "trigger": "SSLSetMaxDatagramRecordSize", "contents": "SSLSetMaxDatagramRecordSize(${1:SSLContextRef dtlsContext}, ${2:size_t maxSize})" },  
    { "trigger": "SSLSetPeerDomainName", "contents": "SSLSetPeerDomainName(${1:SSLContextRef context}, ${2:char* peerName}, ${3:size_t peerNameLen})" },  
    { "trigger": "SSLSetPeerID", "contents": "SSLSetPeerID(${1:SSLContextRef context}, ${2:void* peerID}, ${3:size_t peerIDLen})" },  
    { "trigger": "SSLSetProtocolVersionMax", "contents": "SSLSetProtocolVersionMax(${1:SSLContextRef context}, ${2:SSLProtocol maxVersion})" },  
    { "trigger": "SSLSetProtocolVersionMin", "contents": "SSLSetProtocolVersionMin(${1:SSLContextRef context}, ${2:SSLProtocol minVersion})" },  
    { "trigger": "SSLSetSessionOption", "contents": "SSLSetSessionOption(${1:SSLContextRef context}, ${2:SSLSessionOption option}, ${3:Boolean value})" },  
    { "trigger": "SSLWrite", "contents": "SSLWrite(${1:SSLContextRef context}, ${2:void* data}, ${3:size_t dataLength}, ${4:size_t* processed})" },  
    { "trigger": "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA (17)" },  
    { "trigger": "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA (19)" },  
    { "trigger": "SSL_DHE_DSS_WITH_DES_CBC_SHA (18)" },  
    { "trigger": "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA (20)" },  
    { "trigger": "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA (22)" },  
    { "trigger": "SSL_DHE_RSA_WITH_DES_CBC_SHA (21)" },  
    { "trigger": "SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA (11)" },  
    { "trigger": "SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA (13)" },  
    { "trigger": "SSL_DH_DSS_WITH_DES_CBC_SHA (12)" },  
    { "trigger": "SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA (14)" },  
    { "trigger": "SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA (16)" },  
    { "trigger": "SSL_DH_RSA_WITH_DES_CBC_SHA (15)" },  
    { "trigger": "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA (25)" },  
    { "trigger": "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 (23)" },  
    { "trigger": "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA (27)" },  
    { "trigger": "SSL_DH_anon_WITH_DES_CBC_SHA (26)" },  
    { "trigger": "SSL_DH_anon_WITH_RC4_128_MD5 (24)" },  
    { "trigger": "SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA (29)" },  
    { "trigger": "SSL_FORTEZZA_DMS_WITH_NULL_SHA (28)" },  
    { "trigger": "SSL_NO_SUCH_CIPHERSUITE (65535)" },  
    { "trigger": "SSL_NULL_WITH_NULL_NULL (0)" },  
    { "trigger": "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA (8)" },  
    { "trigger": "SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 (6)" },  
    { "trigger": "SSL_RSA_EXPORT_WITH_RC4_40_MD5 (3)" },  
    { "trigger": "SSL_RSA_WITH_3DES_EDE_CBC_MD5 (65411)" },  
    { "trigger": "SSL_RSA_WITH_3DES_EDE_CBC_SHA (10)" },  
    { "trigger": "SSL_RSA_WITH_DES_CBC_MD5 (65410)" },  
    { "trigger": "SSL_RSA_WITH_DES_CBC_SHA (9)" },  
    { "trigger": "SSL_RSA_WITH_IDEA_CBC_MD5 (65409)" },  
    { "trigger": "SSL_RSA_WITH_IDEA_CBC_SHA (7)" },  
    { "trigger": "SSL_RSA_WITH_NULL_MD5 (1)" },  
    { "trigger": "SSL_RSA_WITH_NULL_SHA (2)" },  
    { "trigger": "SSL_RSA_WITH_RC2_CBC_MD5 (65408)" },  
    { "trigger": "SSL_RSA_WITH_RC4_128_MD5 (4)" },  
    { "trigger": "SSL_RSA_WITH_RC4_128_SHA (5)" },  
    { "trigger": "S_FALSE (1)" },  
    { "trigger": "S_OK (0)" },  
    { "trigger": "SecCertificateCopyData", "contents": "SecCertificateCopyData(${1:SecCertificateRef certificate})" },  
    { "trigger": "SecCertificateCopySubjectSummary", "contents": "SecCertificateCopySubjectSummary(${1:SecCertificateRef certificate})" },  
    { "trigger": "SecCertificateCreateWithData", "contents": "SecCertificateCreateWithData(${1:CFAllocatorRef allocator}, ${2:CFDataRef data})" },  
    { "trigger": "SecCertificateGetTypeID" },  
    { "trigger": "SecIdentityCopyCertificate", "contents": "SecIdentityCopyCertificate(${1:SecIdentityRef identityRef}, ${2:SecCertificateRef* certificateRef})" },  
    { "trigger": "SecIdentityCopyPrivateKey", "contents": "SecIdentityCopyPrivateKey(${1:SecIdentityRef identityRef}, ${2:SecKeyRef* privateKeyRef})" },  
    { "trigger": "SecIdentityGetTypeID" },  
    { "trigger": "SecItemAdd", "contents": "SecItemAdd(${1:CFDictionaryRef attributes}, ${2:CFTypeRef* result})" },  
    { "trigger": "SecItemCopyMatching", "contents": "SecItemCopyMatching(${1:CFDictionaryRef query}, ${2:CFTypeRef* result})" },  
    { "trigger": "SecItemDelete", "contents": "SecItemDelete(${1:CFDictionaryRef query})" },  
    { "trigger": "SecItemUpdate", "contents": "SecItemUpdate(${1:CFDictionaryRef query}, ${2:CFDictionaryRef attributesToUpdate})" },  
    { "trigger": "SecKeyDecrypt", "contents": "SecKeyDecrypt(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* cipherText}, ${4:size_t cipherTextLen}, ${5:uint8_t* plainText}, ${6:size_t* plainTextLen})" },  
    { "trigger": "SecKeyEncrypt", "contents": "SecKeyEncrypt(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* plainText}, ${4:size_t plainTextLen}, ${5:uint8_t* cipherText}, ${6:size_t* cipherTextLen})" },  
    { "trigger": "SecKeyGeneratePair", "contents": "SecKeyGeneratePair(${1:CFDictionaryRef parameters}, ${2:SecKeyRef* publicKey}, ${3:SecKeyRef* privateKey})" },  
    { "trigger": "SecKeyGetBlockSize", "contents": "SecKeyGetBlockSize(${1:SecKeyRef key})" },  
    { "trigger": "SecKeyGetTypeID" },  
    { "trigger": "SecKeyRawSign", "contents": "SecKeyRawSign(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* dataToSign}, ${4:size_t dataToSignLen}, ${5:uint8_t* sig}, ${6:size_t* sigLen})" },  
    { "trigger": "SecKeyRawVerify", "contents": "SecKeyRawVerify(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* signedData}, ${4:size_t signedDataLen}, ${5:uint8_t* sig}, ${6:size_t sigLen})" },  
    { "trigger": "SecPKCS12Import", "contents": "SecPKCS12Import(${1:CFDataRef pkcs12_data}, ${2:CFDictionaryRef options}, ${3:CFArrayRef* items})" },  
    { "trigger": "SecPolicyCreateBasicX509" },  
    { "trigger": "SecPolicyCreateSSL", "contents": "SecPolicyCreateSSL(${1:Boolean server}, ${2:CFStringRef hostname})" },  
    { "trigger": "SecPolicyGetTypeID" },  
    { "trigger": "SecRandomCopyBytes", "contents": "SecRandomCopyBytes(${1:SecRandomRef rnd}, ${2:size_t count}, ${3:uint8_t* bytes})" },  
    { "trigger": "SecTrustCopyExceptions", "contents": "SecTrustCopyExceptions(${1:SecTrustRef trust})" },  
    { "trigger": "SecTrustCopyPublicKey", "contents": "SecTrustCopyPublicKey(${1:SecTrustRef trust})" },  
    { "trigger": "SecTrustCreateWithCertificates", "contents": "SecTrustCreateWithCertificates(${1:CFTypeRef certificates}, ${2:CFTypeRef policies}, ${3:SecTrustRef* trustRef})" },  
    { "trigger": "SecTrustEvaluate", "contents": "SecTrustEvaluate(${1:SecTrustRef trust}, ${2:SecTrustResultType* result})" },  
    { "trigger": "SecTrustGetCertificateAtIndex", "contents": "SecTrustGetCertificateAtIndex(${1:SecTrustRef trust}, ${2:CFIndex ix})" },  
    { "trigger": "SecTrustGetCertificateCount", "contents": "SecTrustGetCertificateCount(${1:SecTrustRef trust})" },  
    { "trigger": "SecTrustGetTypeID" },  
    { "trigger": "SecTrustGetVerifyTime", "contents": "SecTrustGetVerifyTime(${1:SecTrustRef trust})" },  
    { "trigger": "SecTrustSetAnchorCertificates", "contents": "SecTrustSetAnchorCertificates(${1:SecTrustRef trust}, ${2:CFArrayRef anchorCertificates})" },  
    { "trigger": "SecTrustSetAnchorCertificatesOnly", "contents": "SecTrustSetAnchorCertificatesOnly(${1:SecTrustRef trust}, ${2:Boolean anchorCertificatesOnly})" },  
    { "trigger": "SecTrustSetExceptions", "contents": "SecTrustSetExceptions(${1:SecTrustRef trust}, ${2:CFDataRef exceptions})" },  
    { "trigger": "SecTrustSetVerifyDate", "contents": "SecTrustSetVerifyDate(${1:SecTrustRef trust}, ${2:CFDateRef verifyDate})" },  
    { "trigger": "Sizeof_sfntCMapEncoding (8)" },  
    { "trigger": "Sizeof_sfntCMapExtendedSubHeader (12)" },  
    { "trigger": "Sizeof_sfntCMapHeader (4)" },  
    { "trigger": "Sizeof_sfntCMapSubHeader (6)" },  
    { "trigger": "Sizeof_sfntDirectory (12)" },  
    { "trigger": "Sizeof_sfntInstance (4)" },  
    { "trigger": "Sizeof_sfntNameHeader (6)" },  
    { "trigger": "Sizeof_sfntNameRecord (12)" },  
    { "trigger": "Sizeof_sfntVariationAxis (20)" },  
    { "trigger": "Sizeof_sfntVariationHeader (16)" },  
    { "trigger": "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (19)" },  
    { "trigger": "TLS_DHE_DSS_WITH_AES_128_CBC_SHA (50)" },  
    { "trigger": "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 (64)" },  
    { "trigger": "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 (162)" },  
    { "trigger": "TLS_DHE_DSS_WITH_AES_256_CBC_SHA (56)" },  
    { "trigger": "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 (106)" },  
    { "trigger": "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 (163)" },  
    { "trigger": "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (22)" },  
    { "trigger": "TLS_DHE_RSA_WITH_AES_128_CBC_SHA (51)" },  
    { "trigger": "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (103)" },  
    { "trigger": "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (158)" },  
    { "trigger": "TLS_DHE_RSA_WITH_AES_256_CBC_SHA (57)" },  
    { "trigger": "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (107)" },  
    { "trigger": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (159)" },  
    { "trigger": "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA (13)" },  
    { "trigger": "TLS_DH_DSS_WITH_AES_128_CBC_SHA (48)" },  
    { "trigger": "TLS_DH_DSS_WITH_AES_128_CBC_SHA256 (62)" },  
    { "trigger": "TLS_DH_DSS_WITH_AES_128_GCM_SHA256 (164)" },  
    { "trigger": "TLS_DH_DSS_WITH_AES_256_CBC_SHA (54)" },  
    { "trigger": "TLS_DH_DSS_WITH_AES_256_CBC_SHA256 (104)" },  
    { "trigger": "TLS_DH_DSS_WITH_AES_256_GCM_SHA384 (165)" },  
    { "trigger": "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA (16)" },  
    { "trigger": "TLS_DH_RSA_WITH_AES_128_CBC_SHA (49)" },  
    { "trigger": "TLS_DH_RSA_WITH_AES_128_CBC_SHA256 (63)" },  
    { "trigger": "TLS_DH_RSA_WITH_AES_128_GCM_SHA256 (160)" },  
    { "trigger": "TLS_DH_RSA_WITH_AES_256_CBC_SHA (55)" },  
    { "trigger": "TLS_DH_RSA_WITH_AES_256_CBC_SHA256 (105)" },  
    { "trigger": "TLS_DH_RSA_WITH_AES_256_GCM_SHA384 (161)" },  
    { "trigger": "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA (27)" },  
    { "trigger": "TLS_DH_anon_WITH_AES_128_CBC_SHA (52)" },  
    { "trigger": "TLS_DH_anon_WITH_AES_128_CBC_SHA256 (108)" },  
    { "trigger": "TLS_DH_anon_WITH_AES_128_GCM_SHA256 (166)" },  
    { "trigger": "TLS_DH_anon_WITH_AES_256_CBC_SHA (58)" },  
    { "trigger": "TLS_DH_anon_WITH_AES_256_CBC_SHA256 (109)" },  
    { "trigger": "TLS_DH_anon_WITH_AES_256_GCM_SHA384 (167)" },  
    { "trigger": "TLS_DH_anon_WITH_RC4_128_MD5 (24)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (49160)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (49161)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (49187)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (49195)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (49162)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 (49188)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (49196)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_NULL_SHA (49158)" },  
    { "trigger": "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA (49159)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (49170)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (49171)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (49191)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (49199)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (49172)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (49192)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (49200)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_NULL_SHA (49168)" },  
    { "trigger": "TLS_ECDHE_RSA_WITH_RC4_128_SHA (49169)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (49155)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (49156)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 (49189)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 (49197)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA (49157)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 (49190)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 (49198)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_NULL_SHA (49153)" },  
    { "trigger": "TLS_ECDH_ECDSA_WITH_RC4_128_SHA (49154)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (49165)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (49166)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 (49193)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 (49201)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA (49167)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 (49194)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 (49202)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_NULL_SHA (49163)" },  
    { "trigger": "TLS_ECDH_RSA_WITH_RC4_128_SHA (49164)" },  
    { "trigger": "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA (49175)" },  
    { "trigger": "TLS_ECDH_anon_WITH_AES_128_CBC_SHA (49176)" },  
    { "trigger": "TLS_ECDH_anon_WITH_AES_256_CBC_SHA (49177)" },  
    { "trigger": "TLS_ECDH_anon_WITH_NULL_SHA (49173)" },  
    { "trigger": "TLS_ECDH_anon_WITH_RC4_128_SHA (49174)" },  
    { "trigger": "TLS_EMPTY_RENEGOTIATION_INFO_SCSV (255)" },  
    { "trigger": "TLS_NULL_WITH_NULL_NULL (0)" },  
    { "trigger": "TLS_RSA_WITH_3DES_EDE_CBC_SHA (10)" },  
    { "trigger": "TLS_RSA_WITH_AES_128_CBC_SHA (47)" },  
    { "trigger": "TLS_RSA_WITH_AES_128_CBC_SHA256 (60)" },  
    { "trigger": "TLS_RSA_WITH_AES_128_GCM_SHA256 (156)" },  
    { "trigger": "TLS_RSA_WITH_AES_256_CBC_SHA (53)" },  
    { "trigger": "TLS_RSA_WITH_AES_256_CBC_SHA256 (61)" },  
    { "trigger": "TLS_RSA_WITH_AES_256_GCM_SHA384 (157)" },  
    { "trigger": "TLS_RSA_WITH_NULL_MD5 (1)" },  
    { "trigger": "TLS_RSA_WITH_NULL_SHA (2)" },  
    { "trigger": "TLS_RSA_WITH_NULL_SHA256 (59)" },  
    { "trigger": "TLS_RSA_WITH_RC4_128_MD5 (4)" },  
    { "trigger": "TLS_RSA_WITH_RC4_128_SHA (5)" },  
    { "trigger": "TRUE (1)" },  
    { "trigger": "TWRequest" },  
    { "trigger": "TWRequestMethodDELETE (2)" },  
    { "trigger": "TWRequestMethodGET (0)" },  
    { "trigger": "TWRequestMethodPOST (1)" },  
    { "trigger": "TWTweetComposeViewController" },  
    { "trigger": "TWTweetComposeViewControllerResultCancelled (0)" },  
    { "trigger": "TWTweetComposeViewControllerResultDone (1)" },  
    { "trigger": "TWTweetComposeViewController.canSendTweet" },  
    { "trigger": "TXTRecordData" },  
    { "trigger": "UIAcceleration" },  
    { "trigger": "UIAccelerometer" },  
    { "trigger": "UIAccelerometerDelegate" },  
    { "trigger": "UIAccelerometer.sharedAccelerometer" },  
    { "trigger": "UIAccessibility" },  
    { "trigger": "UIAccessibilityAction" },  
    { "trigger": "UIAccessibilityAnnouncementNotification (UIAccessibilityNotifications)" },  
    { "trigger": "UIAccessibilityClosedCaptioningStatusDidChangeNotification (NSString*)" },  
    { "trigger": "UIAccessibilityContainer" },  
    { "trigger": "UIAccessibilityElement" },  
    { "trigger": "UIAccessibilityFocus" },  
    { "trigger": "UIAccessibilityIdentification" },  
    { "trigger": "UIAccessibilityIsClosedCaptioningEnabled" },  
    { "trigger": "UIAccessibilityIsMonoAudioEnabled" },  
    { "trigger": "UIAccessibilityIsVoiceOverRunning" },  
    { "trigger": "UIAccessibilityLayoutChangedNotification (UIAccessibilityNotifications)" },  
    { "trigger": "UIAccessibilityMonoAudioStatusDidChangeNotification (NSString*)" },  
    { "trigger": "UIAccessibilityPageScrolledNotification (UIAccessibilityNotifications)" },  
    { "trigger": "UIAccessibilityPostNotification", "contents": "UIAccessibilityPostNotification(${1:UIAccessibilityNotifications notification}, ${2:id argument})" },  
    { "trigger": "UIAccessibilityReadingContent" },  
    { "trigger": "UIAccessibilityRegisterGestureConflictWithZoom" },  
    { "trigger": "UIAccessibilityScreenChangedNotification (UIAccessibilityNotifications)" },  
    { "trigger": "UIAccessibilityScrollDirectionDown (4)" },  
    { "trigger": "UIAccessibilityScrollDirectionLeft (2)" },  
    { "trigger": "UIAccessibilityScrollDirectionNext (5)" },  
    { "trigger": "UIAccessibilityScrollDirectionPrevious (6)" },  
    { "trigger": "UIAccessibilityScrollDirectionRight (1)" },  
    { "trigger": "UIAccessibilityScrollDirectionUp (3)" },  
    { "trigger": "UIAccessibilityTraitAdjustable (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitAllowsDirectInteraction (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitButton (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitCausesPageTurn (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitImage (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitKeyboardKey (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitLink (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitNone (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitNotEnabled (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitPlaysSound (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitSearchField (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitSelected (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitStartsMediaSession (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitStaticText (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitSummaryElement (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityTraitUpdatesFrequently (UIAccessibilityTraits)" },  
    { "trigger": "UIAccessibilityVoiceOverStatusChanged (NSString*)" },  
    { "trigger": "UIAccessibilityZoomFocusChanged", "contents": "UIAccessibilityZoomFocusChanged(${1:UIAccessibilityZoomType type}, ${2:CGRect frame}, ${3:UIView* view})" },  
    { "trigger": "UIAccessibilityZoomTypeInsertionPoint (0)" },  
    { "trigger": "UIActionSheet" },  
    { "trigger": "UIActionSheetDelegate" },  
    { "trigger": "UIActionSheetStyleAutomatic (-1)" },  
    { "trigger": "UIActionSheetStyleBlackOpaque (1)" },  
    { "trigger": "UIActionSheetStyleBlackTranslucent (2)" },  
    { "trigger": "UIActionSheetStyleDefault (0)" },  
    { "trigger": "UIActivityIndicatorView" },  
    { "trigger": "UIActivityIndicatorViewStyleGray (2)" },  
    { "trigger": "UIActivityIndicatorViewStyleWhite (1)" },  
    { "trigger": "UIActivityIndicatorViewStyleWhiteLarge (0)" },  
    { "trigger": "UIAlertView" },  
    { "trigger": "UIAlertViewDelegate" },  
    { "trigger": "UIAlertViewStyleDefault (0)" },  
    { "trigger": "UIAlertViewStyleLoginAndPasswordInput (3)" },  
    { "trigger": "UIAlertViewStylePlainTextInput (2)" },  
    { "trigger": "UIAlertViewStyleSecureTextInput (1)" },  
    { "trigger": "UIAppearance" },  
    { "trigger": "UIAppearance.appearance" },  
    { "trigger": "UIAppearance.appearanceWhenContainedIn:", "contents": "UIAppearance.appearanceWhenContainedIn:(${1:Class* ContainerClass})" },  
    { "trigger": "UIApplication" },  
    { "trigger": "UIApplicationDelegate" },  
    { "trigger": "UIApplicationDidBecomeActiveNotification (NSString*)" },  
    { "trigger": "UIApplicationDidChangeStatusBarFrameNotification (NSString*)" },  
    { "trigger": "UIApplicationDidChangeStatusBarOrientationNotification (NSString*)" },  
    { "trigger": "UIApplicationDidEnterBackgroundNotification (NSString*)" },  
    { "trigger": "UIApplicationDidFinishLaunchingNotification (NSString*)" },  
    { "trigger": "UIApplicationDidReceiveMemoryWarningNotification (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsAnnotationKey (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsLocalNotificationKey (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsLocationKey (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsNewsstandDownloadsKey (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsRemoteNotificationKey (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsSourceApplicationKey (NSString*)" },  
    { "trigger": "UIApplicationLaunchOptionsURLKey (NSString*)" },  
    { "trigger": "UIApplicationMain", "contents": "UIApplicationMain(${1:int argc}, ${2:char** argv}, ${3:NSString* principalClassName}, ${4:NSString* delegateClassName})" },  
    { "trigger": "UIApplicationProtectedDataDidBecomeAvailable (NSString*)" },  
    { "trigger": "UIApplicationProtectedDataWillBecomeUnavailable (NSString*)" },  
    { "trigger": "UIApplicationSignificantTimeChangeNotification (NSString*)" },  
    { "trigger": "UIApplicationStateActive (0)" },  
    { "trigger": "UIApplicationStateBackground (2)" },  
    { "trigger": "UIApplicationStateInactive (1)" },  
    { "trigger": "UIApplicationStatusBarFrameUserInfoKey (NSString*)" },  
    { "trigger": "UIApplicationStatusBarOrientationUserInfoKey (NSString*)" },  
    { "trigger": "UIApplicationWillChangeStatusBarFrameNotification (NSString*)" },  
    { "trigger": "UIApplicationWillChangeStatusBarOrientationNotification (NSString*)" },  
    { "trigger": "UIApplicationWillEnterForegroundNotification (NSString*)" },  
    { "trigger": "UIApplicationWillResignActiveNotification (NSString*)" },  
    { "trigger": "UIApplicationWillTerminateNotification (NSString*)" },  
    { "trigger": "UIApplication.sharedApplication" },  
    { "trigger": "UIBackgroundTaskInvalid (UIBackgroundTaskIdentifier)" },  
    { "trigger": "UIBarButtonItem" },  
    { "trigger": "UIBarButtonItemStyleBordered (1)" },  
    { "trigger": "UIBarButtonItemStyleDone (2)" },  
    { "trigger": "UIBarButtonItemStylePlain (0)" },  
    { "trigger": "UIBarButtonSystemItemAction (9)" },  
    { "trigger": "UIBarButtonSystemItemAdd (4)" },  
    { "trigger": "UIBarButtonSystemItemBookmarks (11)" },  
    { "trigger": "UIBarButtonSystemItemCamera (15)" },  
    { "trigger": "UIBarButtonSystemItemCancel (1)" },  
    { "trigger": "UIBarButtonSystemItemCompose (7)" },  
    { "trigger": "UIBarButtonSystemItemDone (0)" },  
    { "trigger": "UIBarButtonSystemItemEdit (2)" },  
    { "trigger": "UIBarButtonSystemItemFastForward (20)" },  
    { "trigger": "UIBarButtonSystemItemFixedSpace (6)" },  
    { "trigger": "UIBarButtonSystemItemFlexibleSpace (5)" },  
    { "trigger": "UIBarButtonSystemItemOrganize (10)" },  
    { "trigger": "UIBarButtonSystemItemPageCurl (23)" },  
    { "trigger": "UIBarButtonSystemItemPause (18)" },  
    { "trigger": "UIBarButtonSystemItemPlay (17)" },  
    { "trigger": "UIBarButtonSystemItemRedo (22)" },  
    { "trigger": "UIBarButtonSystemItemRefresh (13)" },  
    { "trigger": "UIBarButtonSystemItemReply (8)" },  
    { "trigger": "UIBarButtonSystemItemRewind (19)" },  
    { "trigger": "UIBarButtonSystemItemSave (3)" },  
    { "trigger": "UIBarButtonSystemItemSearch (12)" },  
    { "trigger": "UIBarButtonSystemItemStop (14)" },  
    { "trigger": "UIBarButtonSystemItemTrash (16)" },  
    { "trigger": "UIBarButtonSystemItemUndo (21)" },  
    { "trigger": "UIBarItem" },  
    { "trigger": "UIBarMetricsDefault (0)" },  
    { "trigger": "UIBarMetricsLandscapePhone (1)" },  
    { "trigger": "UIBarStyleBlack (1)" },  
    { "trigger": "UIBarStyleBlackOpaque (1)" },  
    { "trigger": "UIBarStyleBlackTranslucent (2)" },  
    { "trigger": "UIBarStyleDefault (0)" },  
    { "trigger": "UIBaselineAdjustmentAlignBaselines (0)" },  
    { "trigger": "UIBaselineAdjustmentAlignCenters (1)" },  
    { "trigger": "UIBaselineAdjustmentNone (2)" },  
    { "trigger": "UIBezierPath" },  
    { "trigger": "UIBezierPath.bezierPath" },  
    { "trigger": "UIBezierPath.bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:", "contents": "UIBezierPath.bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:(${1:CGPoint center}, radius:${2:CGFloat radius}, startAngle:${3:CGFloat startAngle}, endAngle:${4:CGFloat endAngle}, clockwise:${5:BOOL clockwise})" },  
    { "trigger": "UIBezierPath.bezierPathWithCGPath:", "contents": "UIBezierPath.bezierPathWithCGPath:(${1:CGPathRef CGPath})" },  
    { "trigger": "UIBezierPath.bezierPathWithOvalInRect:", "contents": "UIBezierPath.bezierPathWithOvalInRect:(${1:CGRect rect})" },  
    { "trigger": "UIBezierPath.bezierPathWithRect:", "contents": "UIBezierPath.bezierPathWithRect:(${1:CGRect rect})" },  
    { "trigger": "UIBezierPath.bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", "contents": "UIBezierPath.bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:(${1:CGRect rect}, byRoundingCorners:${2:UIRectCorner corners}, cornerRadii:${3:CGSize cornerRadii})" },  
    { "trigger": "UIBezierPath.bezierPathWithRoundedRect:cornerRadius:", "contents": "UIBezierPath.bezierPathWithRoundedRect:cornerRadius:(${1:CGRect rect}, cornerRadius:${2:CGFloat cornerRadius})" },  
    { "trigger": "UIButton" },  
    { "trigger": "UIButtonTypeContactAdd (5)" },  
    { "trigger": "UIButtonTypeCustom (0)" },  
    { "trigger": "UIButtonTypeDetailDisclosure (2)" },  
    { "trigger": "UIButtonTypeInfoDark (4)" },  
    { "trigger": "UIButtonTypeInfoLight (3)" },  
    { "trigger": "UIButtonTypeRoundedRect (1)" },  
    { "trigger": "UIButton.buttonWithType:", "contents": "UIButton.buttonWithType:(${1:UIButtonType buttonType})" },  
    { "trigger": "UIColor" },  
    { "trigger": "UIColor.blackColor" },  
    { "trigger": "UIColor.blueColor" },  
    { "trigger": "UIColor.brownColor" },  
    { "trigger": "UIColor.clearColor" },  
    { "trigger": "UIColor.colorWithCGColor:", "contents": "UIColor.colorWithCGColor:(${1:CGColorRef cgColor})" },  
    { "trigger": "UIColor.colorWithCIColor:", "contents": "UIColor.colorWithCIColor:(${1:CIColor* ciColor})" },  
    { "trigger": "UIColor.colorWithHue:saturation:brightness:alpha:", "contents": "UIColor.colorWithHue:saturation:brightness:alpha:(${1:CGFloat hue}, saturation:${2:CGFloat saturation}, brightness:${3:CGFloat brightness}, alpha:${4:CGFloat alpha})" },  
    { "trigger": "UIColor.colorWithPatternImage:", "contents": "UIColor.colorWithPatternImage:(${1:UIImage* image})" },  
    { "trigger": "UIColor.colorWithRed:green:blue:alpha:", "contents": "UIColor.colorWithRed:green:blue:alpha:(${1:CGFloat red}, green:${2:CGFloat green}, blue:${3:CGFloat blue}, alpha:${4:CGFloat alpha})" },  
    { "trigger": "UIColor.colorWithWhite:alpha:", "contents": "UIColor.colorWithWhite:alpha:(${1:CGFloat white}, alpha:${2:CGFloat alpha})" },  
    { "trigger": "UIColor.cyanColor" },  
    { "trigger": "UIColor.darkGrayColor" },  
    { "trigger": "UIColor.darkTextColor" },  
    { "trigger": "UIColor.grayColor" },  
    { "trigger": "UIColor.greenColor" },  
    { "trigger": "UIColor.groupTableViewBackgroundColor" },  
    { "trigger": "UIColor.lightGrayColor" },  
    { "trigger": "UIColor.lightTextColor" },  
    { "trigger": "UIColor.magentaColor" },  
    { "trigger": "UIColor.orangeColor" },  
    { "trigger": "UIColor.purpleColor" },  
    { "trigger": "UIColor.redColor" },  
    { "trigger": "UIColor.scrollViewTexturedBackgroundColor" },  
    { "trigger": "UIColor.underPageBackgroundColor" },  
    { "trigger": "UIColor.viewFlipsideBackgroundColor" },  
    { "trigger": "UIColor.whiteColor" },  
    { "trigger": "UIColor.yellowColor" },  
    { "trigger": "UIControl" },  
    { "trigger": "UIControlContentHorizontalAlignmentCenter (0)" },  
    { "trigger": "UIControlContentHorizontalAlignmentFill (3)" },  
    { "trigger": "UIControlContentHorizontalAlignmentLeft (1)" },  
    { "trigger": "UIControlContentHorizontalAlignmentRight (2)" },  
    { "trigger": "UIControlContentVerticalAlignmentBottom (2)" },  
    { "trigger": "UIControlContentVerticalAlignmentCenter (0)" },  
    { "trigger": "UIControlContentVerticalAlignmentFill (3)" },  
    { "trigger": "UIControlContentVerticalAlignmentTop (1)" },  
    { "trigger": "UIControlEventAllEditingEvents (983040)" },  
    { "trigger": "UIControlEventAllEvents (4294967295)" },  
    { "trigger": "UIControlEventAllTouchEvents (4095)" },  
    { "trigger": "UIControlEventApplicationReserved (251658240)" },  
    { "trigger": "UIControlEventEditingChanged (131072)" },  
    { "trigger": "UIControlEventEditingDidBegin (65536)" },  
    { "trigger": "UIControlEventEditingDidEnd (262144)" },  
    { "trigger": "UIControlEventEditingDidEndOnExit (524288)" },  
    { "trigger": "UIControlEventSystemReserved (4026531840)" },  
    { "trigger": "UIControlEventTouchCancel (256)" },  
    { "trigger": "UIControlEventTouchDown (1)" },  
    { "trigger": "UIControlEventTouchDownRepeat (2)" },  
    { "trigger": "UIControlEventTouchDragEnter (16)" },  
    { "trigger": "UIControlEventTouchDragExit (32)" },  
    { "trigger": "UIControlEventTouchDragInside (4)" },  
    { "trigger": "UIControlEventTouchDragOutside (8)" },  
    { "trigger": "UIControlEventTouchUpInside (64)" },  
    { "trigger": "UIControlEventTouchUpOutside (128)" },  
    { "trigger": "UIControlEventValueChanged (4096)" },  
    { "trigger": "UIControlStateApplication (16711680)" },  
    { "trigger": "UIControlStateDisabled (2)" },  
    { "trigger": "UIControlStateHighlighted (1)" },  
    { "trigger": "UIControlStateNormal (0)" },  
    { "trigger": "UIControlStateReserved (4278190080)" },  
    { "trigger": "UIControlStateSelected (4)" },  
    { "trigger": "UIDataDetectorTypeAddress (4)" },  
    { "trigger": "UIDataDetectorTypeAll (4294967295)" },  
    { "trigger": "UIDataDetectorTypeCalendarEvent (8)" },  
    { "trigger": "UIDataDetectorTypeLink (2)" },  
    { "trigger": "UIDataDetectorTypeNone (0)" },  
    { "trigger": "UIDataDetectorTypePhoneNumber (1)" },  
    { "trigger": "UIDatePicker" },  
    { "trigger": "UIDatePickerModeCountDownTimer (3)" },  
    { "trigger": "UIDatePickerModeDate (1)" },  
    { "trigger": "UIDatePickerModeDateAndTime (2)" },  
    { "trigger": "UIDatePickerModeTime (0)" },  
    { "trigger": "UIDevice" },  
    { "trigger": "UIDeviceBatteryLevelDidChangeNotification (NSString*)" },  
    { "trigger": "UIDeviceBatteryStateCharging (2)" },  
    { "trigger": "UIDeviceBatteryStateDidChangeNotification (NSString*)" },  
    { "trigger": "UIDeviceBatteryStateFull (3)" },  
    { "trigger": "UIDeviceBatteryStateUnknown (0)" },  
    { "trigger": "UIDeviceBatteryStateUnplugged (1)" },  
    { "trigger": "UIDeviceOrientationDidChangeNotification (NSString*)" },  
    { "trigger": "UIDeviceOrientationFaceDown (6)" },  
    { "trigger": "UIDeviceOrientationFaceUp (5)" },  
    { "trigger": "UIDeviceOrientationLandscapeLeft (3)" },  
    { "trigger": "UIDeviceOrientationLandscapeRight (4)" },  
    { "trigger": "UIDeviceOrientationPortrait (1)" },  
    { "trigger": "UIDeviceOrientationPortraitUpsideDown (2)" },  
    { "trigger": "UIDeviceOrientationUnknown (0)" },  
    { "trigger": "UIDeviceProximityStateDidChangeNotification (NSString*)" },  
    { "trigger": "UIDevice.currentDevice" },  
    { "trigger": "UIDictationPhrase" },  
    { "trigger": "UIDocument" },  
    { "trigger": "UIDocumentChangeCleared (3)" },  
    { "trigger": "UIDocumentChangeDone (0)" },  
    { "trigger": "UIDocumentChangeRedone (2)" },  
    { "trigger": "UIDocumentChangeUndone (1)" },  
    { "trigger": "UIDocumentInteractionController" },  
    { "trigger": "UIDocumentInteractionControllerDelegate" },  
    { "trigger": "UIDocumentInteractionController.interactionControllerWithURL:", "contents": "UIDocumentInteractionController.interactionControllerWithURL:(${1:NSURL* url})" },  
    { "trigger": "UIDocumentSaveForCreating (0)" },  
    { "trigger": "UIDocumentSaveForOverwriting (1)" },  
    { "trigger": "UIDocumentStateChangedNotification (NSString*)" },  
    { "trigger": "UIDocumentStateClosed (1)" },  
    { "trigger": "UIDocumentStateEditingDisabled (8)" },  
    { "trigger": "UIDocumentStateInConflict (2)" },  
    { "trigger": "UIDocumentStateNormal (0)" },  
    { "trigger": "UIDocumentStateSavingError (4)" },  
    { "trigger": "UIEdgeInsetsEqualToEdgeInsets", "contents": "UIEdgeInsetsEqualToEdgeInsets(${1:UIEdgeInsets insets1}, ${2:UIEdgeInsets insets2})" },  
    { "trigger": "UIEdgeInsetsFromString", "contents": "UIEdgeInsetsFromString(${1:NSString* string})" },  
    { "trigger": "UIEdgeInsetsInsetRect", "contents": "UIEdgeInsetsInsetRect(${1:CGRect rect}, ${2:UIEdgeInsets insets})" },  
    { "trigger": "UIEdgeInsetsMake", "contents": "UIEdgeInsetsMake(${1:CGFloat top}, ${2:CGFloat left}, ${3:CGFloat bottom}, ${4:CGFloat right})" },  
    { "trigger": "UIEdgeInsetsValue" },  
    { "trigger": "UIEdgeInsetsZero (UIEdgeInsets)" },  
    { "trigger": "UIEvent" },  
    { "trigger": "UIEventSubtypeMotionShake (1)" },  
    { "trigger": "UIEventSubtypeNone (0)" },  
    { "trigger": "UIEventSubtypeRemoteControlBeginSeekingBackward (106)" },  
    { "trigger": "UIEventSubtypeRemoteControlBeginSeekingForward (108)" },  
    { "trigger": "UIEventSubtypeRemoteControlEndSeekingBackward (107)" },  
    { "trigger": "UIEventSubtypeRemoteControlEndSeekingForward (109)" },  
    { "trigger": "UIEventSubtypeRemoteControlNextTrack (104)" },  
    { "trigger": "UIEventSubtypeRemoteControlPause (101)" },  
    { "trigger": "UIEventSubtypeRemoteControlPlay (100)" },  
    { "trigger": "UIEventSubtypeRemoteControlPreviousTrack (105)" },  
    { "trigger": "UIEventSubtypeRemoteControlStop (102)" },  
    { "trigger": "UIEventSubtypeRemoteControlTogglePlayPause (103)" },  
    { "trigger": "UIEventTypeMotion (1)" },  
    { "trigger": "UIEventTypeRemoteControl (2)" },  
    { "trigger": "UIEventTypeTouches (0)" },  
    { "trigger": "UIFont" },  
    { "trigger": "UIFont.boldSystemFontOfSize:", "contents": "UIFont.boldSystemFontOfSize:(${1:CGFloat fontSize})" },  
    { "trigger": "UIFont.buttonFontSize" },  
    { "trigger": "UIFont.familyNames" },  
    { "trigger": "UIFont.fontNamesForFamilyName:", "contents": "UIFont.fontNamesForFamilyName:(${1:NSString* familyName})" },  
    { "trigger": "UIFont.fontWithName:size:", "contents": "UIFont.fontWithName:size:(${1:NSString* fontName}, size:${2:CGFloat fontSize})" },  
    { "trigger": "UIFont.italicSystemFontOfSize:", "contents": "UIFont.italicSystemFontOfSize:(${1:CGFloat fontSize})" },  
    { "trigger": "UIFont.labelFontSize" },  
    { "trigger": "UIFont.smallSystemFontSize" },  
    { "trigger": "UIFont.systemFontOfSize:", "contents": "UIFont.systemFontOfSize:(${1:CGFloat fontSize})" },  
    { "trigger": "UIFont.systemFontSize" },  
    { "trigger": "UIGestureRecognizer" },  
    { "trigger": "UIGestureRecognizerDelegate" },  
    { "trigger": "UIGestureRecognizerStateBegan (1)" },  
    { "trigger": "UIGestureRecognizerStateCancelled (4)" },  
    { "trigger": "UIGestureRecognizerStateChanged (2)" },  
    { "trigger": "UIGestureRecognizerStateEnded (3)" },  
    { "trigger": "UIGestureRecognizerStateFailed (5)" },  
    { "trigger": "UIGestureRecognizerStatePossible (0)" },  
    { "trigger": "UIGestureRecognizerStateRecognized (3)" },  
    { "trigger": "UIGraphicsAddPDFContextDestinationAtPoint", "contents": "UIGraphicsAddPDFContextDestinationAtPoint(${1:NSString* name}, ${2:CGPoint point})" },  
    { "trigger": "UIGraphicsBeginImageContext", "contents": "UIGraphicsBeginImageContext(${1:CGSize size})" },  
    { "trigger": "UIGraphicsBeginImageContextWithOptions", "contents": "UIGraphicsBeginImageContextWithOptions(${1:CGSize size}, ${2:BOOL opaque}, ${3:CGFloat scale})" },  
    { "trigger": "UIGraphicsBeginPDFContextToData", "contents": "UIGraphicsBeginPDFContextToData(${1:NSMutableData* data}, ${2:CGRect bounds}, ${3:NSDictionary* documentInfo})" },  
    { "trigger": "UIGraphicsBeginPDFContextToFile", "contents": "UIGraphicsBeginPDFContextToFile(${1:NSString* path}, ${2:CGRect bounds}, ${3:NSDictionary* documentInfo})" },  
    { "trigger": "UIGraphicsBeginPDFPage" },  
    { "trigger": "UIGraphicsBeginPDFPageWithInfo", "contents": "UIGraphicsBeginPDFPageWithInfo(${1:CGRect bounds}, ${2:NSDictionary* pageInfo})" },  
    { "trigger": "UIGraphicsEndImageContext" },  
    { "trigger": "UIGraphicsEndPDFContext" },  
    { "trigger": "UIGraphicsGetCurrentContext" },  
    { "trigger": "UIGraphicsGetImageFromCurrentImageContext" },  
    { "trigger": "UIGraphicsGetPDFContextBounds" },  
    { "trigger": "UIGraphicsPopContext" },  
    { "trigger": "UIGraphicsPushContext", "contents": "UIGraphicsPushContext(${1:CGContextRef context})" },  
    { "trigger": "UIGraphicsSetPDFContextDestinationForRect", "contents": "UIGraphicsSetPDFContextDestinationForRect(${1:NSString* name}, ${2:CGRect rect})" },  
    { "trigger": "UIGraphicsSetPDFContextURLForRect", "contents": "UIGraphicsSetPDFContextURLForRect(${1:NSURL* url}, ${2:CGRect rect})" },  
    { "trigger": "UIImage" },  
    { "trigger": "UIImageJPEGRepresentation", "contents": "UIImageJPEGRepresentation(${1:UIImage* image}, ${2:CGFloat compressionQuality})" },  
    { "trigger": "UIImageOrientationDown (1)" },  
    { "trigger": "UIImageOrientationDownMirrored (5)" },  
    { "trigger": "UIImageOrientationLeft (2)" },  
    { "trigger": "UIImageOrientationLeftMirrored (6)" },  
    { "trigger": "UIImageOrientationRight (3)" },  
    { "trigger": "UIImageOrientationRightMirrored (7)" },  
    { "trigger": "UIImageOrientationUp (0)" },  
    { "trigger": "UIImageOrientationUpMirrored (4)" },  
    { "trigger": "UIImagePNGRepresentation", "contents": "UIImagePNGRepresentation(${1:UIImage* image})" },  
    { "trigger": "UIImagePickerController" },  
    { "trigger": "UIImagePickerControllerCameraCaptureModePhoto (0)" },  
    { "trigger": "UIImagePickerControllerCameraCaptureModeVideo (1)" },  
    { "trigger": "UIImagePickerControllerCameraDeviceFront (1)" },  
    { "trigger": "UIImagePickerControllerCameraDeviceRear (0)" },  
    { "trigger": "UIImagePickerControllerCameraFlashModeAuto (0)" },  
    { "trigger": "UIImagePickerControllerCameraFlashModeOff (-1)" },  
    { "trigger": "UIImagePickerControllerCameraFlashModeOn (1)" },  
    { "trigger": "UIImagePickerControllerCropRect (NSString*)" },  
    { "trigger": "UIImagePickerControllerDelegate" },  
    { "trigger": "UIImagePickerControllerEditedImage (NSString*)" },  
    { "trigger": "UIImagePickerControllerMediaMetadata (NSString*)" },  
    { "trigger": "UIImagePickerControllerMediaType (NSString*)" },  
    { "trigger": "UIImagePickerControllerMediaURL (NSString*)" },  
    { "trigger": "UIImagePickerControllerOriginalImage (NSString*)" },  
    { "trigger": "UIImagePickerControllerQualityType640x480 (3)" },  
    { "trigger": "UIImagePickerControllerQualityTypeHigh (0)" },  
    { "trigger": "UIImagePickerControllerQualityTypeIFrame1280x720 (4)" },  
    { "trigger": "UIImagePickerControllerQualityTypeIFrame960x540 (5)" },  
    { "trigger": "UIImagePickerControllerQualityTypeLow (2)" },  
    { "trigger": "UIImagePickerControllerQualityTypeMedium (1)" },  
    { "trigger": "UIImagePickerControllerReferenceURL (NSString*)" },  
    { "trigger": "UIImagePickerControllerSourceTypeCamera (1)" },  
    { "trigger": "UIImagePickerControllerSourceTypePhotoLibrary (0)" },  
    { "trigger": "UIImagePickerControllerSourceTypeSavedPhotosAlbum (2)" },  
    { "trigger": "UIImagePickerController.availableCaptureModesForCameraDevice:", "contents": "UIImagePickerController.availableCaptureModesForCameraDevice:(${1:UIImagePickerControllerCameraDevice cameraDevice})" },  
    { "trigger": "UIImagePickerController.availableMediaTypesForSourceType:", "contents": "UIImagePickerController.availableMediaTypesForSourceType:(${1:UIImagePickerControllerSourceType sourceType})" },  
    { "trigger": "UIImagePickerController.isCameraDeviceAvailable:", "contents": "UIImagePickerController.isCameraDeviceAvailable:(${1:UIImagePickerControllerCameraDevice cameraDevice})" },  
    { "trigger": "UIImagePickerController.isFlashAvailableForCameraDevice:", "contents": "UIImagePickerController.isFlashAvailableForCameraDevice:(${1:UIImagePickerControllerCameraDevice cameraDevice})" },  
    { "trigger": "UIImagePickerController.isSourceTypeAvailable:", "contents": "UIImagePickerController.isSourceTypeAvailable:(${1:UIImagePickerControllerSourceType sourceType})" },  
    { "trigger": "UIImageView" },  
    { "trigger": "UIImageWriteToSavedPhotosAlbum", "contents": "UIImageWriteToSavedPhotosAlbum(${1:UIImage* image}, ${2:id completionTarget}, ${3:SEL completionSelector}, ${4:void* contextInfo})" },  
    { "trigger": "UIImage.animatedImageNamed:duration:", "contents": "UIImage.animatedImageNamed:duration:(${1:NSString* name}, duration:${2:NSTimeInterval duration})" },  
    { "trigger": "UIImage.animatedImageWithImages:duration:", "contents": "UIImage.animatedImageWithImages:duration:(${1:NSArray* images}, duration:${2:NSTimeInterval duration})" },  
    { "trigger": "UIImage.animatedResizableImageNamed:capInsets:duration:", "contents": "UIImage.animatedResizableImageNamed:capInsets:duration:(${1:NSString* name}, capInsets:${2:UIEdgeInsets capInsets}, duration:${3:NSTimeInterval duration})" },  
    { "trigger": "UIImage.imageNamed:", "contents": "UIImage.imageNamed:(${1:NSString* name})" },  
    { "trigger": "UIImage.imageWithCGImage:", "contents": "UIImage.imageWithCGImage:(${1:CGImageRef cgImage})" },  
    { "trigger": "UIImage.imageWithCGImage:scale:orientation:", "contents": "UIImage.imageWithCGImage:scale:orientation:(${1:CGImageRef cgImage}, scale:${2:CGFloat scale}, orientation:${3:UIImageOrientation orientation})" },  
    { "trigger": "UIImage.imageWithCIImage:", "contents": "UIImage.imageWithCIImage:(${1:CIImage* ciImage})" },  
    { "trigger": "UIImage.imageWithContentsOfFile:", "contents": "UIImage.imageWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "UIImage.imageWithData:", "contents": "UIImage.imageWithData:(${1:NSData* data})" },  
    { "trigger": "UIInputViewAudioFeedback" },  
    { "trigger": "UIInterfaceOrientationLandscapeLeft (4)" },  
    { "trigger": "UIInterfaceOrientationLandscapeRight (3)" },  
    { "trigger": "UIInterfaceOrientationPortrait (1)" },  
    { "trigger": "UIInterfaceOrientationPortraitUpsideDown (2)" },  
    { "trigger": "UIKeyInput" },  
    { "trigger": "UIKeyboardAnimationCurveUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardAnimationDurationUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardAppearanceAlert (1)" },  
    { "trigger": "UIKeyboardAppearanceDefault (0)" },  
    { "trigger": "UIKeyboardBoundsUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardCenterBeginUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardCenterEndUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardDidChangeFrameNotification (NSString*)" },  
    { "trigger": "UIKeyboardDidHideNotification (NSString*)" },  
    { "trigger": "UIKeyboardDidShowNotification (NSString*)" },  
    { "trigger": "UIKeyboardFrameBeginUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardFrameEndUserInfoKey (NSString*)" },  
    { "trigger": "UIKeyboardTypeASCIICapable (1)" },  
    { "trigger": "UIKeyboardTypeAlphabet (1)" },  
    { "trigger": "UIKeyboardTypeDecimalPad (8)" },  
    { "trigger": "UIKeyboardTypeDefault (0)" },  
    { "trigger": "UIKeyboardTypeEmailAddress (7)" },  
    { "trigger": "UIKeyboardTypeNamePhonePad (6)" },  
    { "trigger": "UIKeyboardTypeNumberPad (4)" },  
    { "trigger": "UIKeyboardTypeNumbersAndPunctuation (2)" },  
    { "trigger": "UIKeyboardTypePhonePad (5)" },  
    { "trigger": "UIKeyboardTypeTwitter (9)" },  
    { "trigger": "UIKeyboardTypeURL (3)" },  
    { "trigger": "UIKeyboardWillChangeFrameNotification (NSString*)" },  
    { "trigger": "UIKeyboardWillHideNotification (NSString*)" },  
    { "trigger": "UIKeyboardWillShowNotification (NSString*)" },  
    { "trigger": "UILabel" },  
    { "trigger": "UILineBreakModeCharacterWrap (1)" },  
    { "trigger": "UILineBreakModeClip (2)" },  
    { "trigger": "UILineBreakModeHeadTruncation (3)" },  
    { "trigger": "UILineBreakModeMiddleTruncation (5)" },  
    { "trigger": "UILineBreakModeTailTruncation (4)" },  
    { "trigger": "UILineBreakModeWordWrap (0)" },  
    { "trigger": "UILocalNotification" },  
    { "trigger": "UILocalNotificationDefaultSoundName (NSString*)" },  
    { "trigger": "UILocalizedIndexedCollation" },  
    { "trigger": "UILocalizedIndexedCollation.currentCollation" },  
    { "trigger": "UILongPressGestureRecognizer" },  
    { "trigger": "UIManagedDocument" },  
    { "trigger": "UIManagedDocument.persistentStoreName" },  
    { "trigger": "UIMarkupTextPrintFormatter" },  
    { "trigger": "UIMenuController" },  
    { "trigger": "UIMenuControllerArrowDefault (0)" },  
    { "trigger": "UIMenuControllerArrowDown (2)" },  
    { "trigger": "UIMenuControllerArrowLeft (3)" },  
    { "trigger": "UIMenuControllerArrowRight (4)" },  
    { "trigger": "UIMenuControllerArrowUp (1)" },  
    { "trigger": "UIMenuControllerDidHideMenuNotification (NSString*)" },  
    { "trigger": "UIMenuControllerDidShowMenuNotification (NSString*)" },  
    { "trigger": "UIMenuControllerMenuFrameDidChangeNotification (NSString*)" },  
    { "trigger": "UIMenuControllerWillHideMenuNotification (NSString*)" },  
    { "trigger": "UIMenuControllerWillShowMenuNotification (NSString*)" },  
    { "trigger": "UIMenuController.sharedMenuController" },  
    { "trigger": "UIMenuItem" },  
    { "trigger": "UIMinimumKeepAliveTimeout (NSTimeInterval)" },  
    { "trigger": "UIModalPresentationCurrentContext (3)" },  
    { "trigger": "UIModalPresentationFormSheet (2)" },  
    { "trigger": "UIModalPresentationFullScreen (0)" },  
    { "trigger": "UIModalPresentationPageSheet (1)" },  
    { "trigger": "UIModalTransitionStyleCoverVertical (0)" },  
    { "trigger": "UIModalTransitionStyleCrossDissolve (2)" },  
    { "trigger": "UIModalTransitionStyleFlipHorizontal (1)" },  
    { "trigger": "UIModalTransitionStylePartialCurl (3)" },  
    { "trigger": "UINavigationBar" },  
    { "trigger": "UINavigationBarDelegate" },  
    { "trigger": "UINavigationController" },  
    { "trigger": "UINavigationControllerDelegate" },  
    { "trigger": "UINavigationControllerHideShowBarDuration (CGFloat)" },  
    { "trigger": "UINavigationItem" },  
    { "trigger": "UINib" },  
    { "trigger": "UINibExternalObjects (NSString*)" },  
    { "trigger": "UINibLoadingAdditions" },  
    { "trigger": "UINibProxiedObjectsKey (NSString*)" },  
    { "trigger": "UINib.nibWithData:bundle:", "contents": "UINib.nibWithData:bundle:(${1:NSData* data}, bundle:${2:NSBundle* bundleOrNil})" },  
    { "trigger": "UINib.nibWithNibName:bundle:", "contents": "UINib.nibWithNibName:bundle:(${1:NSString* name}, bundle:${2:NSBundle* bundleOrNil})" },  
    { "trigger": "UIOffsetEqualToOffset", "contents": "UIOffsetEqualToOffset(${1:UIOffset offset1}, ${2:UIOffset offset2})" },  
    { "trigger": "UIOffsetFromString", "contents": "UIOffsetFromString(${1:NSString* string})" },  
    { "trigger": "UIOffsetMake", "contents": "UIOffsetMake(${1:CGFloat horizontal}, ${2:CGFloat vertical})" },  
    { "trigger": "UIOffsetValue" },  
    { "trigger": "UIOffsetZero (UIOffset)" },  
    { "trigger": "UIPageControl" },  
    { "trigger": "UIPageViewController" },  
    { "trigger": "UIPageViewControllerDataSource" },  
    { "trigger": "UIPageViewControllerDelegate" },  
    { "trigger": "UIPageViewControllerNavigationDirectionForward (0)" },  
    { "trigger": "UIPageViewControllerNavigationDirectionReverse (1)" },  
    { "trigger": "UIPageViewControllerNavigationOrientationHorizontal (0)" },  
    { "trigger": "UIPageViewControllerNavigationOrientationVertical (1)" },  
    { "trigger": "UIPageViewControllerOptionSpineLocationKey (NSString*)" },  
    { "trigger": "UIPageViewControllerSpineLocationMax (3)" },  
    { "trigger": "UIPageViewControllerSpineLocationMid (2)" },  
    { "trigger": "UIPageViewControllerSpineLocationMin (1)" },  
    { "trigger": "UIPageViewControllerSpineLocationNone (0)" },  
    { "trigger": "UIPageViewControllerTransitionStylePageCurl (0)" },  
    { "trigger": "UIPanGestureRecognizer" },  
    { "trigger": "UIPasteboard" },  
    { "trigger": "UIPasteboardChangedNotification (NSString*)" },  
    { "trigger": "UIPasteboardChangedTypesAddedKey (NSString*)" },  
    { "trigger": "UIPasteboardChangedTypesRemovedKey (NSString*)" },  
    { "trigger": "UIPasteboardNameFind (NSString*)" },  
    { "trigger": "UIPasteboardNameGeneral (NSString*)" },  
    { "trigger": "UIPasteboardRemovedNotification (NSString*)" },  
    { "trigger": "UIPasteboardTypeListColor (NSArray*)" },  
    { "trigger": "UIPasteboardTypeListImage (NSArray*)" },  
    { "trigger": "UIPasteboardTypeListString (NSArray*)" },  
    { "trigger": "UIPasteboardTypeListURL (NSArray*)" },  
    { "trigger": "UIPasteboard.generalPasteboard" },  
    { "trigger": "UIPasteboard.pasteboardWithName:create:", "contents": "UIPasteboard.pasteboardWithName:create:(${1:NSString* pasteboardName}, create:${2:BOOL create})" },  
    { "trigger": "UIPasteboard.pasteboardWithUniqueName" },  
    { "trigger": "UIPasteboard.removePasteboardWithName:", "contents": "UIPasteboard.removePasteboardWithName:(${1:NSString* pasteboardName})" },  
    { "trigger": "UIPickerView" },  
    { "trigger": "UIPickerViewAccessibilityDelegate" },  
    { "trigger": "UIPickerViewDataSource" },  
    { "trigger": "UIPickerViewDelegate" },  
    { "trigger": "UIPinchGestureRecognizer" },  
    { "trigger": "UIPopoverArrowDirectionAny (15)" },  
    { "trigger": "UIPopoverArrowDirectionDown (2)" },  
    { "trigger": "UIPopoverArrowDirectionLeft (4)" },  
    { "trigger": "UIPopoverArrowDirectionRight (8)" },  
    { "trigger": "UIPopoverArrowDirectionUnknown (4294967295)" },  
    { "trigger": "UIPopoverArrowDirectionUp (1)" },  
    { "trigger": "UIPopoverBackgroundView" },  
    { "trigger": "UIPopoverBackgroundView.arrowBase" },  
    { "trigger": "UIPopoverBackgroundView.arrowHeight" },  
    { "trigger": "UIPopoverBackgroundView.contentViewInsets" },  
    { "trigger": "UIPopoverController" },  
    { "trigger": "UIPopoverControllerDelegate" },  
    { "trigger": "UIPrintErrorDomain (NSString*)" },  
    { "trigger": "UIPrintFormatter" },  
    { "trigger": "UIPrintInfo" },  
    { "trigger": "UIPrintInfoDuplexLongEdge (1)" },  
    { "trigger": "UIPrintInfoDuplexNone (0)" },  
    { "trigger": "UIPrintInfoDuplexShortEdge (2)" },  
    { "trigger": "UIPrintInfoOrientationLandscape (1)" },  
    { "trigger": "UIPrintInfoOrientationPortrait (0)" },  
    { "trigger": "UIPrintInfoOutputGeneral (0)" },  
    { "trigger": "UIPrintInfoOutputGrayscale (2)" },  
    { "trigger": "UIPrintInfoOutputPhoto (1)" },  
    { "trigger": "UIPrintInfo.printInfo" },  
    { "trigger": "UIPrintInfo.printInfoWithDictionary:", "contents": "UIPrintInfo.printInfoWithDictionary:(${1:NSDictionary* dictionary})" },  
    { "trigger": "UIPrintInteractionController" },  
    { "trigger": "UIPrintInteractionControllerDelegate" },  
    { "trigger": "UIPrintInteractionController.canPrintData:", "contents": "UIPrintInteractionController.canPrintData:(${1:NSData* data})" },  
    { "trigger": "UIPrintInteractionController.canPrintURL:", "contents": "UIPrintInteractionController.canPrintURL:(${1:NSURL* url})" },  
    { "trigger": "UIPrintInteractionController.isPrintingAvailable" },  
    { "trigger": "UIPrintInteractionController.printableUTIs" },  
    { "trigger": "UIPrintInteractionController.sharedPrintController" },  
    { "trigger": "UIPrintJobFailedError (4)" },  
    { "trigger": "UIPrintNoContentError (2)" },  
    { "trigger": "UIPrintPageRenderer" },  
    { "trigger": "UIPrintPaper" },  
    { "trigger": "UIPrintPaper.bestPaperForPageSize:withPapersFromArray:", "contents": "UIPrintPaper.bestPaperForPageSize:withPapersFromArray:(${1:CGSize contentSize}, withPapersFromArray:${2:NSArray* paperList})" },  
    { "trigger": "UIPrintUnknownImageFormatError (3)" },  
    { "trigger": "UIPrintingNotAvailableError (1)" },  
    { "trigger": "UIProgressView" },  
    { "trigger": "UIProgressViewStyleBar (1)" },  
    { "trigger": "UIProgressViewStyleDefault (0)" },  
    { "trigger": "UIRectClip", "contents": "UIRectClip(${1:CGRect rect})" },  
    { "trigger": "UIRectCornerAllCorners (-1)" },  
    { "trigger": "UIRectCornerBottomLeft (4)" },  
    { "trigger": "UIRectCornerBottomRight (8)" },  
    { "trigger": "UIRectCornerTopLeft (1)" },  
    { "trigger": "UIRectCornerTopRight (2)" },  
    { "trigger": "UIRectFill", "contents": "UIRectFill(${1:CGRect rect})" },  
    { "trigger": "UIRectFillUsingBlendMode", "contents": "UIRectFillUsingBlendMode(${1:CGRect rect}, ${2:CGBlendMode blendMode})" },  
    { "trigger": "UIRectFrame", "contents": "UIRectFrame(${1:CGRect rect})" },  
    { "trigger": "UIRectFrameUsingBlendMode", "contents": "UIRectFrameUsingBlendMode(${1:CGRect rect}, ${2:CGBlendMode blendMode})" },  
    { "trigger": "UIReferenceLibraryViewController" },  
    { "trigger": "UIReferenceLibraryViewController.dictionaryHasDefinitionForTerm:", "contents": "UIReferenceLibraryViewController.dictionaryHasDefinitionForTerm:(${1:NSString* term})" },  
    { "trigger": "UIRemoteNotificationTypeAlert (4)" },  
    { "trigger": "UIRemoteNotificationTypeBadge (1)" },  
    { "trigger": "UIRemoteNotificationTypeNewsstandContentAvailability (8)" },  
    { "trigger": "UIRemoteNotificationTypeNone (0)" },  
    { "trigger": "UIRemoteNotificationTypeSound (2)" },  
    { "trigger": "UIResponder" },  
    { "trigger": "UIResponderStandardEditActions" },  
    { "trigger": "UIReturnKeyDefault (0)" },  
    { "trigger": "UIReturnKeyDone (9)" },  
    { "trigger": "UIReturnKeyEmergencyCall (10)" },  
    { "trigger": "UIReturnKeyGo (1)" },  
    { "trigger": "UIReturnKeyGoogle (2)" },  
    { "trigger": "UIReturnKeyJoin (3)" },  
    { "trigger": "UIReturnKeyNext (4)" },  
    { "trigger": "UIReturnKeyRoute (5)" },  
    { "trigger": "UIReturnKeySearch (6)" },  
    { "trigger": "UIReturnKeySend (7)" },  
    { "trigger": "UIReturnKeyYahoo (8)" },  
    { "trigger": "UIRotationGestureRecognizer" },  
    { "trigger": "UISaveVideoAtPathToSavedPhotosAlbum", "contents": "UISaveVideoAtPathToSavedPhotosAlbum(${1:NSString* videoPath}, ${2:id completionTarget}, ${3:SEL completionSelector}, ${4:void* contextInfo})" },  
    { "trigger": "UIScreen" },  
    { "trigger": "UIScreenBrightnessDidChangeNotification (NSString*)" },  
    { "trigger": "UIScreenDidConnectNotification (NSString*)" },  
    { "trigger": "UIScreenDidDisconnectNotification (NSString*)" },  
    { "trigger": "UIScreenMode" },  
    { "trigger": "UIScreenModeDidChangeNotification (NSString*)" },  
    { "trigger": "UIScreenOverscanCompensationInsetApplicationFrame (2)" },  
    { "trigger": "UIScreenOverscanCompensationInsetBounds (1)" },  
    { "trigger": "UIScreenOverscanCompensationScale (0)" },  
    { "trigger": "UIScreen.mainScreen" },  
    { "trigger": "UIScreen.screens" },  
    { "trigger": "UIScrollView" },  
    { "trigger": "UIScrollViewDecelerationRateFast (float)" },  
    { "trigger": "UIScrollViewDecelerationRateNormal (float)" },  
    { "trigger": "UIScrollViewDelegate" },  
    { "trigger": "UIScrollViewIndicatorStyleBlack (1)" },  
    { "trigger": "UIScrollViewIndicatorStyleDefault (0)" },  
    { "trigger": "UIScrollViewIndicatorStyleWhite (2)" },  
    { "trigger": "UISearchBar" },  
    { "trigger": "UISearchBarDelegate" },  
    { "trigger": "UISearchBarIconBookmark (2)" },  
    { "trigger": "UISearchBarIconClear (1)" },  
    { "trigger": "UISearchBarIconResultsList (3)" },  
    { "trigger": "UISearchBarIconSearch (0)" },  
    { "trigger": "UISearchDisplayController" },  
    { "trigger": "UISearchDisplayDelegate" },  
    { "trigger": "UISegmentedControl" },  
    { "trigger": "UISegmentedControlNoSegment (-1)" },  
    { "trigger": "UISegmentedControlSegmentAlone (4)" },  
    { "trigger": "UISegmentedControlSegmentAny (0)" },  
    { "trigger": "UISegmentedControlSegmentCenter (2)" },  
    { "trigger": "UISegmentedControlSegmentLeft (1)" },  
    { "trigger": "UISegmentedControlSegmentRight (3)" },  
    { "trigger": "UISegmentedControlStyleBar (2)" },  
    { "trigger": "UISegmentedControlStyleBezeled (3)" },  
    { "trigger": "UISegmentedControlStyleBordered (1)" },  
    { "trigger": "UISegmentedControlStylePlain (0)" },  
    { "trigger": "UISimpleTextPrintFormatter" },  
    { "trigger": "UISlider" },  
    { "trigger": "UISplitViewController" },  
    { "trigger": "UISplitViewControllerDelegate" },  
    { "trigger": "UIStatusBarAnimationFade (1)" },  
    { "trigger": "UIStatusBarAnimationNone (0)" },  
    { "trigger": "UIStatusBarAnimationSlide (2)" },  
    { "trigger": "UIStatusBarStyleBlackOpaque (2)" },  
    { "trigger": "UIStatusBarStyleBlackTranslucent (1)" },  
    { "trigger": "UIStatusBarStyleDefault (0)" },  
    { "trigger": "UIStepper" },  
    { "trigger": "UIStoryboard" },  
    { "trigger": "UIStoryboardPopoverSegue" },  
    { "trigger": "UIStoryboardSegue" },  
    { "trigger": "UIStoryboard.storyboardWithName:bundle:", "contents": "UIStoryboard.storyboardWithName:bundle:(${1:NSString* name}, bundle:${2:NSBundle* storyboardBundleOrNil})" },  
    { "trigger": "UISwipeGestureRecognizer" },  
    { "trigger": "UISwipeGestureRecognizerDirectionDown (8)" },  
    { "trigger": "UISwipeGestureRecognizerDirectionLeft (2)" },  
    { "trigger": "UISwipeGestureRecognizerDirectionRight (1)" },  
    { "trigger": "UISwipeGestureRecognizerDirectionUp (4)" },  
    { "trigger": "UISwitch" },  
    { "trigger": "UITabBar" },  
    { "trigger": "UITabBarController" },  
    { "trigger": "UITabBarControllerDelegate" },  
    { "trigger": "UITabBarDelegate" },  
    { "trigger": "UITabBarItem" },  
    { "trigger": "UITabBarSystemItemBookmarks (7)" },  
    { "trigger": "UITabBarSystemItemContacts (5)" },  
    { "trigger": "UITabBarSystemItemDownloads (9)" },  
    { "trigger": "UITabBarSystemItemFavorites (1)" },  
    { "trigger": "UITabBarSystemItemFeatured (2)" },  
    { "trigger": "UITabBarSystemItemHistory (6)" },  
    { "trigger": "UITabBarSystemItemMore (0)" },  
    { "trigger": "UITabBarSystemItemMostRecent (10)" },  
    { "trigger": "UITabBarSystemItemMostViewed (11)" },  
    { "trigger": "UITabBarSystemItemRecents (4)" },  
    { "trigger": "UITabBarSystemItemSearch (8)" },  
    { "trigger": "UITabBarSystemItemTopRated (3)" },  
    { "trigger": "UITableView" },  
    { "trigger": "UITableViewAutomaticDimension (CGFloat)" },  
    { "trigger": "UITableViewCell" },  
    { "trigger": "UITableViewCellAccessoryCheckmark (3)" },  
    { "trigger": "UITableViewCellAccessoryDetailDisclosureButton (2)" },  
    { "trigger": "UITableViewCellAccessoryDisclosureIndicator (1)" },  
    { "trigger": "UITableViewCellAccessoryNone (0)" },  
    { "trigger": "UITableViewCellEditingStyleDelete (1)" },  
    { "trigger": "UITableViewCellEditingStyleInsert (2)" },  
    { "trigger": "UITableViewCellEditingStyleNone (0)" },  
    { "trigger": "UITableViewCellSelectionStyleBlue (1)" },  
    { "trigger": "UITableViewCellSelectionStyleGray (2)" },  
    { "trigger": "UITableViewCellSelectionStyleNone (0)" },  
    { "trigger": "UITableViewCellSeparatorStyleNone (0)" },  
    { "trigger": "UITableViewCellSeparatorStyleSingleLine (1)" },  
    { "trigger": "UITableViewCellSeparatorStyleSingleLineEtched (2)" },  
    { "trigger": "UITableViewCellStateDefaultMask (0)" },  
    { "trigger": "UITableViewCellStateEditingMask (1)" },  
    { "trigger": "UITableViewCellStateShowingDeleteConfirmationMask (2)" },  
    { "trigger": "UITableViewCellStateShowingEditControlMask (1)" },  
    { "trigger": "UITableViewCellStyleDefault (0)" },  
    { "trigger": "UITableViewCellStyleSubtitle (3)" },  
    { "trigger": "UITableViewCellStyleValue1 (1)" },  
    { "trigger": "UITableViewCellStyleValue2 (2)" },  
    { "trigger": "UITableViewController" },  
    { "trigger": "UITableViewDataSource" },  
    { "trigger": "UITableViewDelegate" },  
    { "trigger": "UITableViewIndexSearch (NSString*)" },  
    { "trigger": "UITableViewRowAnimationAutomatic (100)" },  
    { "trigger": "UITableViewRowAnimationBottom (4)" },  
    { "trigger": "UITableViewRowAnimationFade (0)" },  
    { "trigger": "UITableViewRowAnimationLeft (2)" },  
    { "trigger": "UITableViewRowAnimationMiddle (6)" },  
    { "trigger": "UITableViewRowAnimationNone (5)" },  
    { "trigger": "UITableViewRowAnimationRight (1)" },  
    { "trigger": "UITableViewRowAnimationTop (3)" },  
    { "trigger": "UITableViewScrollPositionBottom (3)" },  
    { "trigger": "UITableViewScrollPositionMiddle (2)" },  
    { "trigger": "UITableViewScrollPositionNone (0)" },  
    { "trigger": "UITableViewScrollPositionTop (1)" },  
    { "trigger": "UITableViewSelectionDidChangeNotification (NSString*)" },  
    { "trigger": "UITableViewStyleGrouped (1)" },  
    { "trigger": "UITableViewStylePlain (0)" },  
    { "trigger": "UITapGestureRecognizer" },  
    { "trigger": "UITextAlignmentCenter (1)" },  
    { "trigger": "UITextAlignmentLeft (0)" },  
    { "trigger": "UITextAlignmentRight (2)" },  
    { "trigger": "UITextAttributeFont (NSString*)" },  
    { "trigger": "UITextAttributeTextColor (NSString*)" },  
    { "trigger": "UITextAttributeTextShadowColor (NSString*)" },  
    { "trigger": "UITextAttributeTextShadowOffset (NSString*)" },  
    { "trigger": "UITextAutocapitalizationTypeAllCharacters (3)" },  
    { "trigger": "UITextAutocapitalizationTypeNone (0)" },  
    { "trigger": "UITextAutocapitalizationTypeSentences (2)" },  
    { "trigger": "UITextAutocapitalizationTypeWords (1)" },  
    { "trigger": "UITextAutocorrectionTypeDefault (0)" },  
    { "trigger": "UITextAutocorrectionTypeNo (1)" },  
    { "trigger": "UITextAutocorrectionTypeYes (2)" },  
    { "trigger": "UITextBorderStyleBezel (2)" },  
    { "trigger": "UITextBorderStyleLine (1)" },  
    { "trigger": "UITextBorderStyleNone (0)" },  
    { "trigger": "UITextBorderStyleRoundedRect (3)" },  
    { "trigger": "UITextChecker" },  
    { "trigger": "UITextChecker.availableLanguages" },  
    { "trigger": "UITextChecker.hasLearnedWord:", "contents": "UITextChecker.hasLearnedWord:(${1:NSString* word})" },  
    { "trigger": "UITextChecker.learnWord:", "contents": "UITextChecker.learnWord:(${1:NSString* word})" },  
    { "trigger": "UITextChecker.unlearnWord:", "contents": "UITextChecker.unlearnWord:(${1:NSString* word})" },  
    { "trigger": "UITextField" },  
    { "trigger": "UITextFieldDelegate" },  
    { "trigger": "UITextFieldTextDidBeginEditingNotification (NSString*)" },  
    { "trigger": "UITextFieldTextDidChangeNotification (NSString*)" },  
    { "trigger": "UITextFieldTextDidEndEditingNotification (NSString*)" },  
    { "trigger": "UITextFieldViewModeAlways (3)" },  
    { "trigger": "UITextFieldViewModeNever (0)" },  
    { "trigger": "UITextFieldViewModeUnlessEditing (2)" },  
    { "trigger": "UITextFieldViewModeWhileEditing (1)" },  
    { "trigger": "UITextGranularityCharacter (0)" },  
    { "trigger": "UITextGranularityDocument (5)" },  
    { "trigger": "UITextGranularityLine (4)" },  
    { "trigger": "UITextGranularityParagraph (3)" },  
    { "trigger": "UITextGranularitySentence (2)" },  
    { "trigger": "UITextGranularityWord (1)" },  
    { "trigger": "UITextInput" },  
    { "trigger": "UITextInputCurrentInputModeDidChangeNotification (NSString*)" },  
    { "trigger": "UITextInputDelegate" },  
    { "trigger": "UITextInputMode" },  
    { "trigger": "UITextInputMode.activeInputModes" },  
    { "trigger": "UITextInputMode.currentInputMode" },  
    { "trigger": "UITextInputStringTokenizer" },  
    { "trigger": "UITextInputTextBackgroundColorKey (NSString*)" },  
    { "trigger": "UITextInputTextColorKey (NSString*)" },  
    { "trigger": "UITextInputTextFontKey (NSString*)" },  
    { "trigger": "UITextInputTokenizer" },  
    { "trigger": "UITextInputTraits" },  
    { "trigger": "UITextLayoutDirectionDown (5)" },  
    { "trigger": "UITextLayoutDirectionLeft (3)" },  
    { "trigger": "UITextLayoutDirectionRight (2)" },  
    { "trigger": "UITextLayoutDirectionUp (4)" },  
    { "trigger": "UITextRange" },  
    { "trigger": "UITextSpellCheckingTypeDefault (0)" },  
    { "trigger": "UITextSpellCheckingTypeNo (1)" },  
    { "trigger": "UITextSpellCheckingTypeYes (2)" },  
    { "trigger": "UITextStorageDirectionBackward (1)" },  
    { "trigger": "UITextStorageDirectionForward (0)" },  
    { "trigger": "UITextView" },  
    { "trigger": "UITextViewDelegate" },  
    { "trigger": "UITextViewTextDidBeginEditingNotification (NSString*)" },  
    { "trigger": "UITextViewTextDidChangeNotification (NSString*)" },  
    { "trigger": "UITextViewTextDidEndEditingNotification (NSString*)" },  
    { "trigger": "UITextWritingDirectionLeftToRight (0)" },  
    { "trigger": "UITextWritingDirectionNatural (-1)" },  
    { "trigger": "UITextWritingDirectionRightToLeft (1)" },  
    { "trigger": "UIToolbar" },  
    { "trigger": "UIToolbarPositionAny (0)" },  
    { "trigger": "UIToolbarPositionBottom (1)" },  
    { "trigger": "UIToolbarPositionTop (2)" },  
    { "trigger": "UITouch" },  
    { "trigger": "UITouchPhaseBegan (0)" },  
    { "trigger": "UITouchPhaseCancelled (4)" },  
    { "trigger": "UITouchPhaseEnded (3)" },  
    { "trigger": "UITouchPhaseMoved (1)" },  
    { "trigger": "UITouchPhaseStationary (2)" },  
    { "trigger": "UITrackingRunLoopMode (NSString*)" },  
    { "trigger": "UIUserInterfaceIdiomPad (1)" },  
    { "trigger": "UIUserInterfaceIdiomPhone (0)" },  
    { "trigger": "UIUserInterfaceLayoutDirectionLeftToRight (0)" },  
    { "trigger": "UIUserInterfaceLayoutDirectionRightToLeft (1)" },  
    { "trigger": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum", "contents": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(${1:NSString* videoPath})" },  
    { "trigger": "UIVideoEditorController" },  
    { "trigger": "UIVideoEditorControllerDelegate" },  
    { "trigger": "UIVideoEditorController.canEditVideoAtPath:", "contents": "UIVideoEditorController.canEditVideoAtPath:(${1:NSString* videoPath})" },  
    { "trigger": "UIView" },  
    { "trigger": "UIViewAnimationCurveEaseIn (1)" },  
    { "trigger": "UIViewAnimationCurveEaseInOut (0)" },  
    { "trigger": "UIViewAnimationCurveEaseOut (2)" },  
    { "trigger": "UIViewAnimationCurveLinear (3)" },  
    { "trigger": "UIViewAnimationOptionAllowAnimatedContent (128)" },  
    { "trigger": "UIViewAnimationOptionAllowUserInteraction (2)" },  
    { "trigger": "UIViewAnimationOptionAutoreverse (16)" },  
    { "trigger": "UIViewAnimationOptionBeginFromCurrentState (4)" },  
    { "trigger": "UIViewAnimationOptionCurveEaseIn (65536)" },  
    { "trigger": "UIViewAnimationOptionCurveEaseInOut (0)" },  
    { "trigger": "UIViewAnimationOptionCurveEaseOut (131072)" },  
    { "trigger": "UIViewAnimationOptionCurveLinear (196608)" },  
    { "trigger": "UIViewAnimationOptionLayoutSubviews (1)" },  
    { "trigger": "UIViewAnimationOptionOverrideInheritedCurve (64)" },  
    { "trigger": "UIViewAnimationOptionOverrideInheritedDuration (32)" },  
    { "trigger": "UIViewAnimationOptionRepeat (8)" },  
    { "trigger": "UIViewAnimationOptionShowHideTransitionViews (256)" },  
    { "trigger": "UIViewAnimationOptionTransitionCrossDissolve (5242880)" },  
    { "trigger": "UIViewAnimationOptionTransitionCurlDown (4194304)" },  
    { "trigger": "UIViewAnimationOptionTransitionCurlUp (3145728)" },  
    { "trigger": "UIViewAnimationOptionTransitionFlipFromBottom (7340032)" },  
    { "trigger": "UIViewAnimationOptionTransitionFlipFromLeft (1048576)" },  
    { "trigger": "UIViewAnimationOptionTransitionFlipFromRight (2097152)" },  
    { "trigger": "UIViewAnimationOptionTransitionFlipFromTop (6291456)" },  
    { "trigger": "UIViewAnimationOptionTransitionNone (0)" },  
    { "trigger": "UIViewAnimationTransitionCurlDown (4)" },  
    { "trigger": "UIViewAnimationTransitionCurlUp (3)" },  
    { "trigger": "UIViewAnimationTransitionFlipFromLeft (1)" },  
    { "trigger": "UIViewAnimationTransitionFlipFromRight (2)" },  
    { "trigger": "UIViewAnimationTransitionNone (0)" },  
    { "trigger": "UIViewAutoresizingFlexibleBottomMargin (32)" },  
    { "trigger": "UIViewAutoresizingFlexibleHeight (16)" },  
    { "trigger": "UIViewAutoresizingFlexibleLeftMargin (1)" },  
    { "trigger": "UIViewAutoresizingFlexibleRightMargin (4)" },  
    { "trigger": "UIViewAutoresizingFlexibleTopMargin (8)" },  
    { "trigger": "UIViewAutoresizingFlexibleWidth (2)" },  
    { "trigger": "UIViewAutoresizingNone (0)" },  
    { "trigger": "UIViewContentModeBottom (6)" },  
    { "trigger": "UIViewContentModeBottomLeft (11)" },  
    { "trigger": "UIViewContentModeBottomRight (12)" },  
    { "trigger": "UIViewContentModeCenter (4)" },  
    { "trigger": "UIViewContentModeLeft (7)" },  
    { "trigger": "UIViewContentModeRedraw (3)" },  
    { "trigger": "UIViewContentModeRight (8)" },  
    { "trigger": "UIViewContentModeScaleAspectFill (2)" },  
    { "trigger": "UIViewContentModeScaleAspectFit (1)" },  
    { "trigger": "UIViewContentModeScaleToFill (0)" },  
    { "trigger": "UIViewContentModeTop (5)" },  
    { "trigger": "UIViewContentModeTopLeft (9)" },  
    { "trigger": "UIViewContentModeTopRight (10)" },  
    { "trigger": "UIViewController" },  
    { "trigger": "UIViewController" },  
    { "trigger": "UIViewControllerHierarchyInconsistencyException (NSString*)" },  
    { "trigger": "UIViewController.attemptRotationToDeviceOrientation" },  
    { "trigger": "UIViewPrintFormatter" },  
    { "trigger": "UIView.animateWithDuration:animations:", "contents": "UIView.animateWithDuration:animations:(${1:NSTimeInterval duration}, animations:${2:void (^)(void) animations})" },  
    { "trigger": "UIView.animateWithDuration:animations:completion:", "contents": "UIView.animateWithDuration:animations:completion:(${1:NSTimeInterval duration}, animations:${2:void (^)(void) animations}, completion:${3:void (^)(BOOL) completion})" },  
    { "trigger": "UIView.animateWithDuration:delay:options:animations:completion:", "contents": "UIView.animateWithDuration:delay:options:animations:completion:(${1:NSTimeInterval duration}, delay:${2:NSTimeInterval delay}, options:${3:UIViewAnimationOptions options}, animations:${4:void (^)(void) animations}, completion:${5:void (^)(BOOL) completion})" },  
    { "trigger": "UIView.areAnimationsEnabled" },  
    { "trigger": "UIView.beginAnimations:context:", "contents": "UIView.beginAnimations:context:(${1:NSString* animationID}, context:${2:void* context})" },  
    { "trigger": "UIView.commitAnimations" },  
    { "trigger": "UIView.layerClass" },  
    { "trigger": "UIView.setAnimationBeginsFromCurrentState:", "contents": "UIView.setAnimationBeginsFromCurrentState:(${1:BOOL fromCurrentState})" },  
    { "trigger": "UIView.setAnimationCurve:", "contents": "UIView.setAnimationCurve:(${1:UIViewAnimationCurve curve})" },  
    { "trigger": "UIView.setAnimationDelay:", "contents": "UIView.setAnimationDelay:(${1:NSTimeInterval delay})" },  
    { "trigger": "UIView.setAnimationDelegate:", "contents": "UIView.setAnimationDelegate:(${1:id delegate})" },  
    { "trigger": "UIView.setAnimationDidStopSelector:", "contents": "UIView.setAnimationDidStopSelector:(${1:SEL selector})" },  
    { "trigger": "UIView.setAnimationDuration:", "contents": "UIView.setAnimationDuration:(${1:NSTimeInterval duration})" },  
    { "trigger": "UIView.setAnimationRepeatAutoreverses:", "contents": "UIView.setAnimationRepeatAutoreverses:(${1:BOOL repeatAutoreverses})" },  
    { "trigger": "UIView.setAnimationRepeatCount:", "contents": "UIView.setAnimationRepeatCount:(${1:float repeatCount})" },  
    { "trigger": "UIView.setAnimationStartDate:", "contents": "UIView.setAnimationStartDate:(${1:NSDate* startDate})" },  
    { "trigger": "UIView.setAnimationTransition:forView:cache:", "contents": "UIView.setAnimationTransition:forView:cache:(${1:UIViewAnimationTransition transition}, forView:${2:UIView* view}, cache:${3:BOOL cache})" },  
    { "trigger": "UIView.setAnimationWillStartSelector:", "contents": "UIView.setAnimationWillStartSelector:(${1:SEL selector})" },  
    { "trigger": "UIView.setAnimationsEnabled:", "contents": "UIView.setAnimationsEnabled:(${1:BOOL enabled})" },  
    { "trigger": "UIView.transitionFromView:toView:duration:options:completion:", "contents": "UIView.transitionFromView:toView:duration:options:completion:(${1:UIView* fromView}, toView:${2:UIView* toView}, duration:${3:NSTimeInterval duration}, options:${4:UIViewAnimationOptions options}, completion:${5:void (^)(BOOL) completion})" },  
    { "trigger": "UIView.transitionWithView:duration:options:animations:completion:", "contents": "UIView.transitionWithView:duration:options:animations:completion:(${1:UIView* view}, duration:${2:NSTimeInterval duration}, options:${3:UIViewAnimationOptions options}, animations:${4:void (^)(void) animations}, completion:${5:void (^)(BOOL) completion})" },  
    { "trigger": "UIWebView" },  
    { "trigger": "UIWebViewDelegate" },  
    { "trigger": "UIWebViewNavigationTypeBackForward (2)" },  
    { "trigger": "UIWebViewNavigationTypeFormResubmitted (4)" },  
    { "trigger": "UIWebViewNavigationTypeFormSubmitted (1)" },  
    { "trigger": "UIWebViewNavigationTypeLinkClicked (0)" },  
    { "trigger": "UIWebViewNavigationTypeOther (5)" },  
    { "trigger": "UIWebViewNavigationTypeReload (3)" },  
    { "trigger": "UIWindow" },  
    { "trigger": "UIWindowDidBecomeHiddenNotification (NSString*)" },  
    { "trigger": "UIWindowDidBecomeKeyNotification (NSString*)" },  
    { "trigger": "UIWindowDidBecomeVisibleNotification (NSString*)" },  
    { "trigger": "UIWindowDidResignKeyNotification (NSString*)" },  
    { "trigger": "UIWindowLevelAlert (UIWindowLevel)" },  
    { "trigger": "UIWindowLevelNormal (UIWindowLevel)" },  
    { "trigger": "UIWindowLevelStatusBar (UIWindowLevel)" },  
    { "trigger": "URI" },  
    { "trigger": "URI" },  
    { "trigger": "URI" },  
    { "trigger": "URI" },  
    { "trigger": "URIRepresentation" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URL" },  
    { "trigger": "URLByAppendingPathComponent:", "contents": "URLByAppendingPathComponent:(${1:NSString* pathComponent})" },  
    { "trigger": "URLByAppendingPathComponent:isDirectory:", "contents": "URLByAppendingPathComponent:isDirectory:(${1:NSString* pathComponent}, isDirectory:${2:BOOL isDirectory})" },  
    { "trigger": "URLByAppendingPathExtension:", "contents": "URLByAppendingPathExtension:(${1:NSString* pathExtension})" },  
    { "trigger": "URLByDeletingLastPathComponent" },  
    { "trigger": "URLByDeletingPathExtension" },  
    { "trigger": "URLByResolvingSymlinksInPath" },  
    { "trigger": "URLByStandardizingPath" },  
    { "trigger": "URLForAuxiliaryExecutable:", "contents": "URLForAuxiliaryExecutable:(${1:NSString* executableName})" },  
    { "trigger": "URLForDirectory:inDomain:appropriateForURL:create:error:", "contents": "URLForDirectory:inDomain:appropriateForURL:create:error:(${1:NSSearchPathDirectory directory}, inDomain:${2:NSSearchPathDomainMask domain}, appropriateForURL:${3:NSURL* url}, create:${4:BOOL shouldCreate}, error:${5:NSError** error})" },  
    { "trigger": "URLForKey:", "contents": "URLForKey:(${1:NSString* defaultName})" },  
    { "trigger": "URLForPersistentStore:", "contents": "URLForPersistentStore:(${1:NSPersistentStore* store})" },  
    { "trigger": "URLForPublishingUbiquitousItemAtURL:expirationDate:error:", "contents": "URLForPublishingUbiquitousItemAtURL:expirationDate:error:(${1:NSURL* url}, expirationDate:${2:NSDate** outDate}, error:${3:NSError** error})" },  
    { "trigger": "URLForResource:withExtension:", "contents": "URLForResource:withExtension:(${1:NSString* name}, withExtension:${2:NSString* ext})" },  
    { "trigger": "URLForResource:withExtension:subdirectory:", "contents": "URLForResource:withExtension:subdirectory:(${1:NSString* name}, withExtension:${2:NSString* ext}, subdirectory:${3:NSString* subpath})" },  
    { "trigger": "URLForResource:withExtension:subdirectory:localization:", "contents": "URLForResource:withExtension:subdirectory:localization:(${1:NSString* name}, withExtension:${2:NSString* ext}, subdirectory:${3:NSString* subpath}, localization:${4:NSString* localizationName})" },  
    { "trigger": "URLForUbiquityContainerIdentifier:", "contents": "URLForUbiquityContainerIdentifier:(${1:NSString* containerIdentifier})" },  
    { "trigger": "URLProtocolDidFinishLoading:", "contents": "URLProtocolDidFinishLoading:(${1:NSURLProtocol* protocol})" },  
    { "trigger": "URLProtocolDidFinishLoading:", "contents": "URLProtocolDidFinishLoading:(${1:NSURLProtocol* protocol})" },  
    { "trigger": "URLProtocol:cachedResponseIsValid:", "contents": "URLProtocol:cachedResponseIsValid:(${1:NSURLProtocol* protocol}, cachedResponseIsValid:${2:NSCachedURLResponse* cachedResponse})" },  
    { "trigger": "URLProtocol:cachedResponseIsValid:", "contents": "URLProtocol:cachedResponseIsValid:(${1:NSURLProtocol* protocol}, cachedResponseIsValid:${2:NSCachedURLResponse* cachedResponse})" },  
    { "trigger": "URLProtocol:didCancelAuthenticationChallenge:", "contents": "URLProtocol:didCancelAuthenticationChallenge:(${1:NSURLProtocol* protocol}, didCancelAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "URLProtocol:didCancelAuthenticationChallenge:", "contents": "URLProtocol:didCancelAuthenticationChallenge:(${1:NSURLProtocol* protocol}, didCancelAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "URLProtocol:didFailWithError:", "contents": "URLProtocol:didFailWithError:(${1:NSURLProtocol* protocol}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "URLProtocol:didFailWithError:", "contents": "URLProtocol:didFailWithError:(${1:NSURLProtocol* protocol}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "URLProtocol:didLoadData:", "contents": "URLProtocol:didLoadData:(${1:NSURLProtocol* protocol}, didLoadData:${2:NSData* data})" },  
    { "trigger": "URLProtocol:didLoadData:", "contents": "URLProtocol:didLoadData:(${1:NSURLProtocol* protocol}, didLoadData:${2:NSData* data})" },  
    { "trigger": "URLProtocol:didReceiveAuthenticationChallenge:", "contents": "URLProtocol:didReceiveAuthenticationChallenge:(${1:NSURLProtocol* protocol}, didReceiveAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "URLProtocol:didReceiveAuthenticationChallenge:", "contents": "URLProtocol:didReceiveAuthenticationChallenge:(${1:NSURLProtocol* protocol}, didReceiveAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "URLProtocol:didReceiveResponse:cacheStoragePolicy:", "contents": "URLProtocol:didReceiveResponse:cacheStoragePolicy:(${1:NSURLProtocol* protocol}, didReceiveResponse:${2:NSURLResponse* response}, cacheStoragePolicy:${3:NSURLCacheStoragePolicy policy})" },  
    { "trigger": "URLProtocol:didReceiveResponse:cacheStoragePolicy:", "contents": "URLProtocol:didReceiveResponse:cacheStoragePolicy:(${1:NSURLProtocol* protocol}, didReceiveResponse:${2:NSURLResponse* response}, cacheStoragePolicy:${3:NSURLCacheStoragePolicy policy})" },  
    { "trigger": "URLProtocol:wasRedirectedToRequest:redirectResponse:", "contents": "URLProtocol:wasRedirectedToRequest:redirectResponse:(${1:NSURLProtocol* protocol}, wasRedirectedToRequest:${2:NSURLRequest* request}, redirectResponse:${3:NSURLResponse* redirectResponse})" },  
    { "trigger": "URLProtocol:wasRedirectedToRequest:redirectResponse:", "contents": "URLProtocol:wasRedirectedToRequest:redirectResponse:(${1:NSURLProtocol* protocol}, wasRedirectedToRequest:${2:NSURLRequest* request}, redirectResponse:${3:NSURLResponse* redirectResponse})" },  
    { "trigger": "URLRequest" },  
    { "trigger": "URLs" },  
    { "trigger": "URLsForDirectory:inDomains:", "contents": "URLsForDirectory:inDomains:(${1:NSSearchPathDirectory directory}, inDomains:${2:NSSearchPathDomainMask domainMask})" },  
    { "trigger": "URLsForResourcesWithExtension:subdirectory:", "contents": "URLsForResourcesWithExtension:subdirectory:(${1:NSString* ext}, subdirectory:${2:NSString* subpath})" },  
    { "trigger": "URLsForResourcesWithExtension:subdirectory:localization:", "contents": "URLsForResourcesWithExtension:subdirectory:localization:(${1:NSString* ext}, subdirectory:${2:NSString* subpath}, localization:${3:NSString* localizationName})" },  
    { "trigger": "UTF8String" },  
    { "trigger": "UTI" },  
    { "trigger": "UTI" },  
    { "trigger": "UTTypeConformsTo", "contents": "UTTypeConformsTo(${1:CFStringRef inUTI}, ${2:CFStringRef inConformsToUTI})" },  
    { "trigger": "UTTypeCopyDeclaration", "contents": "UTTypeCopyDeclaration(${1:CFStringRef inUTI})" },  
    { "trigger": "UTTypeCopyDeclaringBundleURL", "contents": "UTTypeCopyDeclaringBundleURL(${1:CFStringRef inUTI})" },  
    { "trigger": "UTTypeCopyDescription", "contents": "UTTypeCopyDescription(${1:CFStringRef inUTI})" },  
    { "trigger": "UTTypeCopyPreferredTagWithClass", "contents": "UTTypeCopyPreferredTagWithClass(${1:CFStringRef inUTI}, ${2:CFStringRef inTagClass})" },  
    { "trigger": "UTTypeCreateAllIdentifiersForTag", "contents": "UTTypeCreateAllIdentifiersForTag(${1:CFStringRef inTagClass}, ${2:CFStringRef inTag}, ${3:CFStringRef inConformingToUTI})" },  
    { "trigger": "UTTypeCreatePreferredIdentifierForTag", "contents": "UTTypeCreatePreferredIdentifierForTag(${1:CFStringRef inTagClass}, ${2:CFStringRef inTag}, ${3:CFStringRef inConformingToUTI})" },  
    { "trigger": "UTTypeEqual", "contents": "UTTypeEqual(${1:CFStringRef inUTI1}, ${2:CFStringRef inUTI2})" },  
    { "trigger": "UUID" },  
    { "trigger": "UUID" },  
    { "trigger": "UUID" },  
    { "trigger": "UUID" },  
    { "trigger": "UUID" },  
    { "trigger": "VariationFontTableTag (1719034226)" },  
    { "trigger": "W" },  
    { "trigger": "X" },  
    { "trigger": "Y" },  
    { "trigger": "Z" },  
    { "trigger": "__CGAffineTransformMake", "contents": "__CGAffineTransformMake(${1:CGFloat a}, ${2:CGFloat b}, ${3:CGFloat c}, ${4:CGFloat d}, ${5:CGFloat tx}, ${6:CGFloat ty})" },  
    { "trigger": "__CGPointApplyAffineTransform", "contents": "__CGPointApplyAffineTransform(${1:CGPoint point}, ${2:CGAffineTransform t})" },  
    { "trigger": "__CGPointEqualToPoint", "contents": "__CGPointEqualToPoint(${1:CGPoint point1}, ${2:CGPoint point2})" },  
    { "trigger": "__CGSizeApplyAffineTransform", "contents": "__CGSizeApplyAffineTransform(${1:CGSize size}, ${2:CGAffineTransform t})" },  
    { "trigger": "__CGSizeEqualToSize", "contents": "__CGSizeEqualToSize(${1:CGSize size1}, ${2:CGSize size2})" },  
    { "trigger": "abbreviation" },  
    { "trigger": "abbreviationForDate:", "contents": "abbreviationForDate:(${1:NSDate* aDate})" },  
    { "trigger": "abortParsing" },  
    { "trigger": "absoluteDate" },  
    { "trigger": "absoluteString" },  
    { "trigger": "absoluteURL" },  
    { "trigger": "acceleration" },  
    { "trigger": "accelerometerData" },  
    { "trigger": "accelerometerUpdateInterval" },  
    { "trigger": "accelerometer:didAccelerate:", "contents": "accelerometer:didAccelerate:(${1:UIAccelerometer* accelerometer}, didAccelerate:${2:UIAcceleration* acceleration})" },  
    { "trigger": "accelerometer:didAccelerate:", "contents": "accelerometer:didAccelerate:(${1:UIAccelerometer* accelerometer}, didAccelerate:${2:UIAcceleration* acceleration})" },  
    { "trigger": "acceptCallID:error:", "contents": "acceptCallID:error:(${1:NSInteger callID}, error:${2:NSError** error})" },  
    { "trigger": "acceptConnectionFromPeer:error:", "contents": "acceptConnectionFromPeer:error:(${1:NSString* peerID}, error:${2:NSError** error})" },  
    { "trigger": "acceptConnectionInBackgroundAndNotify" },  
    { "trigger": "acceptConnectionInBackgroundAndNotifyForModes:", "contents": "acceptConnectionInBackgroundAndNotifyForModes:(${1:NSArray* modes})" },  
    { "trigger": "acceptInputForMode:beforeDate:", "contents": "acceptInputForMode:beforeDate:(${1:NSString* mode}, beforeDate:${2:NSDate* limitDate})" },  
    { "trigger": "accessGranted" },  
    { "trigger": "accessLog" },  
    { "trigger": "accessLog" },  
    { "trigger": "accessibilityActivationPoint" },  
    { "trigger": "accessibilityActivationPoint" },  
    { "trigger": "accessibilityContainer" },  
    { "trigger": "accessibilityContentForLineNumber:", "contents": "accessibilityContentForLineNumber:(${1:NSInteger lineNumber})" },  
    { "trigger": "accessibilityContentForLineNumber:", "contents": "accessibilityContentForLineNumber:(${1:NSInteger lineNumber})" },  
    { "trigger": "accessibilityDecrement" },  
    { "trigger": "accessibilityDecrement" },  
    { "trigger": "accessibilityElementAtIndex:", "contents": "accessibilityElementAtIndex:(${1:NSInteger index})" },  
    { "trigger": "accessibilityElementAtIndex:", "contents": "accessibilityElementAtIndex:(${1:NSInteger index})" },  
    { "trigger": "accessibilityElementCount" },  
    { "trigger": "accessibilityElementCount" },  
    { "trigger": "accessibilityElementDidBecomeFocused" },  
    { "trigger": "accessibilityElementDidBecomeFocused" },  
    { "trigger": "accessibilityElementDidLoseFocus" },  
    { "trigger": "accessibilityElementDidLoseFocus" },  
    { "trigger": "accessibilityElementIsFocused" },  
    { "trigger": "accessibilityElementIsFocused" },  
    { "trigger": "accessibilityElementsHidden" },  
    { "trigger": "accessibilityElementsHidden" },  
    { "trigger": "accessibilityFrame" },  
    { "trigger": "accessibilityFrame" },  
    { "trigger": "accessibilityFrame" },  
    { "trigger": "accessibilityFrameForLineNumber:", "contents": "accessibilityFrameForLineNumber:(${1:NSInteger lineNumber})" },  
    { "trigger": "accessibilityFrameForLineNumber:", "contents": "accessibilityFrameForLineNumber:(${1:NSInteger lineNumber})" },  
    { "trigger": "accessibilityHint" },  
    { "trigger": "accessibilityHint" },  
    { "trigger": "accessibilityHint" },  
    { "trigger": "accessibilityIdentifier" },  
    { "trigger": "accessibilityIdentifier" },  
    { "trigger": "accessibilityIncrement" },  
    { "trigger": "accessibilityIncrement" },  
    { "trigger": "accessibilityLabel" },  
    { "trigger": "accessibilityLabel" },  
    { "trigger": "accessibilityLabel" },  
    { "trigger": "accessibilityLanguage" },  
    { "trigger": "accessibilityLanguage" },  
    { "trigger": "accessibilityLineNumberForPoint:", "contents": "accessibilityLineNumberForPoint:(${1:CGPoint point})" },  
    { "trigger": "accessibilityLineNumberForPoint:", "contents": "accessibilityLineNumberForPoint:(${1:CGPoint point})" },  
    { "trigger": "accessibilityPageContent" },  
    { "trigger": "accessibilityPageContent" },  
    { "trigger": "accessibilityPerformEscape" },  
    { "trigger": "accessibilityPerformEscape" },  
    { "trigger": "accessibilityScroll:", "contents": "accessibilityScroll:(${1:UIAccessibilityScrollDirection direction})" },  
    { "trigger": "accessibilityScroll:", "contents": "accessibilityScroll:(${1:UIAccessibilityScrollDirection direction})" },  
    { "trigger": "accessibilityTraits" },  
    { "trigger": "accessibilityTraits" },  
    { "trigger": "accessibilityTraits" },  
    { "trigger": "accessibilityValue" },  
    { "trigger": "accessibilityValue" },  
    { "trigger": "accessibilityValue" },  
    { "trigger": "accessibilityViewIsModal" },  
    { "trigger": "accessibilityViewIsModal" },  
    { "trigger": "accessory" },  
    { "trigger": "accessoryAction" },  
    { "trigger": "accessoryDidDisconnect:", "contents": "accessoryDidDisconnect:(${1:EAAccessory* accessory})" },  
    { "trigger": "accessoryDidDisconnect:", "contents": "accessoryDidDisconnect:(${1:EAAccessory* accessory})" },  
    { "trigger": "accessoryType" },  
    { "trigger": "accessoryView" },  
    { "trigger": "accommodatePresentedItemDeletionWithCompletionHandler:", "contents": "accommodatePresentedItemDeletionWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "accommodatePresentedItemDeletionWithCompletionHandler:", "contents": "accommodatePresentedItemDeletionWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "accommodatePresentedSubitemDeletionAtURL:completionHandler:", "contents": "accommodatePresentedSubitemDeletionAtURL:completionHandler:(${1:NSURL* url}, completionHandler:${2:void (^)(NSError *) completionHandler})" },  
    { "trigger": "accommodatePresentedSubitemDeletionAtURL:completionHandler:", "contents": "accommodatePresentedSubitemDeletionAtURL:completionHandler:(${1:NSURL* url}, completionHandler:${2:void (^)(NSError *) completionHandler})" },  
    { "trigger": "account" },  
    { "trigger": "accountDescription" },  
    { "trigger": "accountType" },  
    { "trigger": "accountTypeDescription" },  
    { "trigger": "accountTypeWithAccountTypeIdentifier:", "contents": "accountTypeWithAccountTypeIdentifier:(${1:NSString* typeIdentifier})" },  
    { "trigger": "accountWithIdentifier:", "contents": "accountWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "accounts" },  
    { "trigger": "accountsWithAccountType:", "contents": "accountsWithAccountType:(${1:ACAccountType* accountType})" },  
    { "trigger": "achievedDescription" },  
    { "trigger": "achievementDelegate" },  
    { "trigger": "achievementViewControllerDidFinish:", "contents": "achievementViewControllerDidFinish:(${1:GKAchievementViewController* viewController})" },  
    { "trigger": "achievementViewControllerDidFinish:", "contents": "achievementViewControllerDidFinish:(${1:GKAchievementViewController* viewController})" },  
    { "trigger": "action" },  
    { "trigger": "action" },  
    { "trigger": "actionAtItemEnd" },  
    { "trigger": "actionForKey:", "contents": "actionForKey:(${1:NSString* event})" },  
    { "trigger": "actionForLayer:forKey:", "contents": "actionForLayer:forKey:(${1:CALayer* layer}, forKey:${2:NSString* event})" },  
    { "trigger": "actionForLayer:forKey:", "contents": "actionForLayer:forKey:(${1:CALayer* layer}, forKey:${2:NSString* event})" },  
    { "trigger": "actionSheetCancel:", "contents": "actionSheetCancel:(${1:UIActionSheet* actionSheet})" },  
    { "trigger": "actionSheetCancel:", "contents": "actionSheetCancel:(${1:UIActionSheet* actionSheet})" },  
    { "trigger": "actionSheetStyle" },  
    { "trigger": "actionSheet:clickedButtonAtIndex:", "contents": "actionSheet:clickedButtonAtIndex:(${1:UIActionSheet* actionSheet}, clickedButtonAtIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "actionSheet:clickedButtonAtIndex:", "contents": "actionSheet:clickedButtonAtIndex:(${1:UIActionSheet* actionSheet}, clickedButtonAtIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "actionSheet:didDismissWithButtonIndex:", "contents": "actionSheet:didDismissWithButtonIndex:(${1:UIActionSheet* actionSheet}, didDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "actionSheet:didDismissWithButtonIndex:", "contents": "actionSheet:didDismissWithButtonIndex:(${1:UIActionSheet* actionSheet}, didDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "actionSheet:willDismissWithButtonIndex:", "contents": "actionSheet:willDismissWithButtonIndex:(${1:UIActionSheet* actionSheet}, willDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "actionSheet:willDismissWithButtonIndex:", "contents": "actionSheet:willDismissWithButtonIndex:(${1:UIActionSheet* actionSheet}, willDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "actions" },  
    { "trigger": "actionsForTarget:forControlEvent:", "contents": "actionsForTarget:forControlEvent:(${1:id target}, forControlEvent:${2:UIControlEvents controlEvent})" },  
    { "trigger": "activeProcessorCount" },  
    { "trigger": "activityIndicatorViewStyle" },  
    { "trigger": "addAlarm:", "contents": "addAlarm:(${1:EKAlarm* alarm})" },  
    { "trigger": "addAnimation:forKey:", "contents": "addAnimation:forKey:(${1:CAAnimation* anim}, forKey:${2:NSString* key})" },  
    { "trigger": "addAnnotation:", "contents": "addAnnotation:(${1:id annotation})" },  
    { "trigger": "addAnnotations:", "contents": "addAnnotations:(${1:NSArray* annotations})" },  
    { "trigger": "addArcWithCenter:radius:startAngle:endAngle:clockwise:", "contents": "addArcWithCenter:radius:startAngle:endAngle:clockwise:(${1:CGPoint center}, radius:${2:CGFloat radius}, startAngle:${3:CGFloat startAngle}, endAngle:${4:CGFloat endAngle}, clockwise:${5:BOOL clockwise})" },  
    { "trigger": "addAsset:", "contents": "addAsset:(${1:ALAsset* asset})" },  
    { "trigger": "addAssetWithRequest:", "contents": "addAssetWithRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "addAssetsGroupAlbumWithName:resultBlock:failureBlock:", "contents": "addAssetsGroupAlbumWithName:resultBlock:failureBlock:(${1:NSString* name}, resultBlock:${2:ALAssetsLibraryGroupResultBlock resultBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})" },  
    { "trigger": "addAttachmentData:mimeType:fileName:", "contents": "addAttachmentData:mimeType:fileName:(${1:NSData* attachment}, mimeType:${2:NSString* mimeType}, fileName:${3:NSString* filename})" },  
    { "trigger": "addAttributes:range:", "contents": "addAttributes:range:(${1:NSDictionary* attrs}, range:${2:NSRange range})" },  
    { "trigger": "addAttribute:value:range:", "contents": "addAttribute:value:range:(${1:NSString* name}, value:${2:id value}, range:${3:NSRange range})" },  
    { "trigger": "addBoundaryTimeObserverForTimes:queue:usingBlock:", "contents": "addBoundaryTimeObserverForTimes:queue:usingBlock:(${1:NSArray* times}, queue:${2:dispatch_queue_t queue}, usingBlock:${3:void (^)(void) block})" },  
    { "trigger": "addButtonWithTitle:", "contents": "addButtonWithTitle:(${1:NSString* title})" },  
    { "trigger": "addButtonWithTitle:", "contents": "addButtonWithTitle:(${1:NSString* title})" },  
    { "trigger": "addCacheNodes:", "contents": "addCacheNodes:(${1:NSSet* cacheNodes})" },  
    { "trigger": "addCharactersInRange:", "contents": "addCharactersInRange:(${1:NSRange aRange})" },  
    { "trigger": "addCharactersInString:", "contents": "addCharactersInString:(${1:NSString* aString})" },  
    { "trigger": "addChildViewController:", "contents": "addChildViewController:(${1:UIViewController* childController})" },  
    { "trigger": "addClip" },  
    { "trigger": "addConnection:", "contents": "addConnection:(${1:MIDINetworkConnection* connection})" },  
    { "trigger": "addContact:", "contents": "addContact:(${1:MIDINetworkHost* contact})" },  
    { "trigger": "addCurveToPoint:controlPoint1:controlPoint2:", "contents": "addCurveToPoint:controlPoint1:controlPoint2:(${1:CGPoint endPoint}, controlPoint1:${2:CGPoint controlPoint1}, controlPoint2:${3:CGPoint controlPoint2})" },  
    { "trigger": "addDependency:", "contents": "addDependency:(${1:NSOperation* op})" },  
    { "trigger": "addEntriesFromDictionary:", "contents": "addEntriesFromDictionary:(${1:NSDictionary* otherDictionary})" },  
    { "trigger": "addExecutionBlock:", "contents": "addExecutionBlock:(${1:void (^)(void) block})" },  
    { "trigger": "addFileWrapper:", "contents": "addFileWrapper:(${1:NSFileWrapper* child})" },  
    { "trigger": "addFilterPredicate:", "contents": "addFilterPredicate:(${1:MPMediaPredicate* predicate})" },  
    { "trigger": "addGestureRecognizer:", "contents": "addGestureRecognizer:(${1:UIGestureRecognizer* gestureRecognizer})" },  
    { "trigger": "addImage:", "contents": "addImage:(${1:UIImage* image})" },  
    { "trigger": "addIndex:", "contents": "addIndex:(${1:NSUInteger value})" },  
    { "trigger": "addIndexes:", "contents": "addIndexes:(${1:NSIndexSet* indexSet})" },  
    { "trigger": "addIndexesInRange:", "contents": "addIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "addInput:", "contents": "addInput:(${1:AVAssetWriterInput* input})" },  
    { "trigger": "addInput:", "contents": "addInput:(${1:AVCaptureInput* input})" },  
    { "trigger": "addIssueWithName:date:", "contents": "addIssueWithName:date:(${1:NSString* name}, date:${2:NSDate* date})" },  
    { "trigger": "addItems:", "contents": "addItems:(${1:NSArray* items})" },  
    { "trigger": "addLineToPoint:", "contents": "addLineToPoint:(${1:CGPoint point})" },  
    { "trigger": "addMultiPartData:withName:type:", "contents": "addMultiPartData:withName:type:(${1:NSData* data}, withName:${2:NSString* name}, type:${3:NSString* type})" },  
    { "trigger": "addMutableTrackWithMediaType:preferredTrackID:", "contents": "addMutableTrackWithMediaType:preferredTrackID:(${1:NSString* mediaType}, preferredTrackID:${2:CMPersistentTrackID preferredTrackID})" },  
    { "trigger": "addObject:", "contents": "addObject:(${1:id object})" },  
    { "trigger": "addObject:", "contents": "addObject:(${1:id object})" },  
    { "trigger": "addObject:", "contents": "addObject:(${1:id object})" },  
    { "trigger": "addObject:", "contents": "addObject:(${1:id anObject})" },  
    { "trigger": "addObject:", "contents": "addObject:(${1:id anObject})" },  
    { "trigger": "addObjectsFromArray:", "contents": "addObjectsFromArray:(${1:NSArray* otherArray})" },  
    { "trigger": "addObjectsFromArray:", "contents": "addObjectsFromArray:(${1:NSArray* array})" },  
    { "trigger": "addObjectsFromArray:", "contents": "addObjectsFromArray:(${1:NSArray* array})" },  
    { "trigger": "addObjects:count:", "contents": "addObjects:count:(${1:id* objects}, count:${2:NSUInteger count})" },  
    { "trigger": "addObserverForName:object:queue:usingBlock:", "contents": "addObserverForName:object:queue:usingBlock:(${1:NSString* name}, object:${2:id obj}, queue:${3:NSOperationQueue* queue}, usingBlock:${4:void (^)(NSNotification *) block})" },  
    { "trigger": "addObserver:forKeyPath:options:context:", "contents": "addObserver:forKeyPath:options:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, options:${3:NSKeyValueObservingOptions options}, context:${4:void* context})" },  
    { "trigger": "addObserver:forKeyPath:options:context:", "contents": "addObserver:forKeyPath:options:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, options:${3:NSKeyValueObservingOptions options}, context:${4:void* context})" },  
    { "trigger": "addObserver:forKeyPath:options:context:", "contents": "addObserver:forKeyPath:options:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, options:${3:NSKeyValueObservingOptions options}, context:${4:void* context})" },  
    { "trigger": "addObserver:forKeyPath:options:context:", "contents": "addObserver:forKeyPath:options:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, options:${3:NSKeyValueObservingOptions options}, context:${4:void* context})" },  
    { "trigger": "addObserver:forKeyPath:options:context:", "contents": "addObserver:forKeyPath:options:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, options:${3:NSKeyValueObservingOptions options}, context:${4:void* context})" },  
    { "trigger": "addObserver:selector:name:object:", "contents": "addObserver:selector:name:object:(${1:id observer}, selector:${2:SEL aSelector}, name:${3:NSString* aName}, object:${4:id anObject})" },  
    { "trigger": "addObserver:toObjectsAtIndexes:forKeyPath:options:context:", "contents": "addObserver:toObjectsAtIndexes:forKeyPath:options:context:(${1:NSObject* observer}, toObjectsAtIndexes:${2:NSIndexSet* indexes}, forKeyPath:${3:NSString* keyPath}, options:${4:NSKeyValueObservingOptions options}, context:${5:void* context})" },  
    { "trigger": "addOperation:", "contents": "addOperation:(${1:NSOperation* op})" },  
    { "trigger": "addOperationWithBlock:", "contents": "addOperationWithBlock:(${1:void (^)(void) block})" },  
    { "trigger": "addOperations:waitUntilFinished:", "contents": "addOperations:waitUntilFinished:(${1:NSArray* ops}, waitUntilFinished:${2:BOOL wait})" },  
    { "trigger": "addOutput:", "contents": "addOutput:(${1:AVCaptureOutput* output})" },  
    { "trigger": "addOutput:", "contents": "addOutput:(${1:AVAssetReaderOutput* output})" },  
    { "trigger": "addOverlay:", "contents": "addOverlay:(${1:id overlay})" },  
    { "trigger": "addOverlays:", "contents": "addOverlays:(${1:NSArray* overlays})" },  
    { "trigger": "addPayment:", "contents": "addPayment:(${1:SKPayment* payment})" },  
    { "trigger": "addPeriodicTimeObserverForInterval:queue:usingBlock:", "contents": "addPeriodicTimeObserverForInterval:queue:usingBlock:(${1:CMTime interval}, queue:${2:dispatch_queue_t queue}, usingBlock:${3:void (^)(CMTime) block})" },  
    { "trigger": "addPersistentStoreWithType:configuration:URL:options:error:", "contents": "addPersistentStoreWithType:configuration:URL:options:error:(${1:NSString* storeType}, configuration:${2:NSString* configuration}, URL:${3:NSURL* storeURL}, options:${4:NSDictionary* options}, error:${5:NSError** error})" },  
    { "trigger": "addPlayersToMatch:", "contents": "addPlayersToMatch:(${1:GKMatch* match})" },  
    { "trigger": "addPlayersToMatch:matchRequest:completionHandler:", "contents": "addPlayersToMatch:matchRequest:completionHandler:(${1:GKMatch* match}, matchRequest:${2:GKMatchRequest* matchRequest}, completionHandler:${3:void (^)(NSError *) completionHandler})" },  
    { "trigger": "addPort:forMode:", "contents": "addPort:forMode:(${1:NSPort* aPort}, forMode:${2:NSString* mode})" },  
    { "trigger": "addPrintFormatter:startingAtPageAtIndex:", "contents": "addPrintFormatter:startingAtPageAtIndex:(${1:UIPrintFormatter* formatter}, startingAtPageAtIndex:${2:NSInteger pageIndex})" },  
    { "trigger": "addQuadCurveToPoint:controlPoint:", "contents": "addQuadCurveToPoint:controlPoint:(${1:CGPoint endPoint}, controlPoint:${2:CGPoint controlPoint})" },  
    { "trigger": "addRecipientsWithEmailAddresses:", "contents": "addRecipientsWithEmailAddresses:(${1:NSArray* emailAddresses})" },  
    { "trigger": "addRecipientsWithPlayerIDs:", "contents": "addRecipientsWithPlayerIDs:(${1:NSArray* playerIDs})" },  
    { "trigger": "addRecurrenceRule:", "contents": "addRecurrenceRule:(${1:EKRecurrenceRule* rule})" },  
    { "trigger": "addRegularFileWithContents:preferredFilename:", "contents": "addRegularFileWithContents:preferredFilename:(${1:NSData* data}, preferredFilename:${2:NSString* fileName})" },  
    { "trigger": "addSublayer:", "contents": "addSublayer:(${1:CALayer* layer})" },  
    { "trigger": "addSubview:", "contents": "addSubview:(${1:UIView* view})" },  
    { "trigger": "addSuiteNamed:", "contents": "addSuiteNamed:(${1:NSString* suiteName})" },  
    { "trigger": "addTarget:action:", "contents": "addTarget:action:(${1:id target}, action:${2:SEL action})" },  
    { "trigger": "addTarget:action:forControlEvents:", "contents": "addTarget:action:forControlEvents:(${1:id target}, action:${2:SEL action}, forControlEvents:${3:UIControlEvents controlEvents})" },  
    { "trigger": "addTimeInterval:", "contents": "addTimeInterval:(${1:NSTimeInterval seconds})" },  
    { "trigger": "addTimer:forMode:", "contents": "addTimer:forMode:(${1:NSTimer* timer}, forMode:${2:NSString* mode})" },  
    { "trigger": "addToRunLoop:forMode:", "contents": "addToRunLoop:forMode:(${1:NSRunLoop* runloop}, forMode:${2:NSString* mode})" },  
    { "trigger": "addTransactionObserver:", "contents": "addTransactionObserver:(${1:id observer})" },  
    { "trigger": "addURL:", "contents": "addURL:(${1:NSURL* url})" },  
    { "trigger": "addValue:forHTTPHeaderField:", "contents": "addValue:forHTTPHeaderField:(${1:NSString* value}, forHTTPHeaderField:${2:NSString* field})" },  
    { "trigger": "additionalContentForURL:error:", "contents": "additionalContentForURL:error:(${1:NSURL* absoluteURL}, error:${2:NSError** error})" },  
    { "trigger": "address" },  
    { "trigger": "address" },  
    { "trigger": "addressBook" },  
    { "trigger": "addressBook" },  
    { "trigger": "addressBook" },  
    { "trigger": "addressBook" },  
    { "trigger": "addressComponents" },  
    { "trigger": "addressDictionary" },  
    { "trigger": "addresses" },  
    { "trigger": "adjustsFontSizeToFitWidth" },  
    { "trigger": "adjustsFontSizeToFitWidth" },  
    { "trigger": "adjustsImageWhenDisabled" },  
    { "trigger": "adjustsImageWhenHighlighted" },  
    { "trigger": "administrativeArea" },  
    { "trigger": "advanceToNextItem" },  
    { "trigger": "advertisingSection" },  
    { "trigger": "affectedStores" },  
    { "trigger": "affectedStores" },  
    { "trigger": "affineTransform" },  
    { "trigger": "alBuffer3f", "contents": "alBuffer3f(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat value1}, ${4:ALfloat value2}, ${5:ALfloat value3})" },  
    { "trigger": "alBuffer3i", "contents": "alBuffer3i(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint value1}, ${4:ALint value2}, ${5:ALint value3})" },  
    { "trigger": "alBufferData", "contents": "alBufferData(${1:ALuint bid}, ${2:ALenum format}, ${3:ALvoid* data}, ${4:ALsizei size}, ${5:ALsizei freq})" },  
    { "trigger": "alBufferf", "contents": "alBufferf(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat value})" },  
    { "trigger": "alBufferfv", "contents": "alBufferfv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* values})" },  
    { "trigger": "alBufferi", "contents": "alBufferi(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint value})" },  
    { "trigger": "alBufferiv", "contents": "alBufferiv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* values})" },  
    { "trigger": "alDeleteBuffers", "contents": "alDeleteBuffers(${1:ALsizei n}, ${2:ALuint* buffers})" },  
    { "trigger": "alDeleteSources", "contents": "alDeleteSources(${1:ALsizei n}, ${2:ALuint* sources})" },  
    { "trigger": "alDisable", "contents": "alDisable(${1:ALenum capability})" },  
    { "trigger": "alDistanceModel", "contents": "alDistanceModel(${1:ALenum distanceModel})" },  
    { "trigger": "alDopplerFactor", "contents": "alDopplerFactor(${1:ALfloat value})" },  
    { "trigger": "alDopplerVelocity", "contents": "alDopplerVelocity(${1:ALfloat value})" },  
    { "trigger": "alEnable", "contents": "alEnable(${1:ALenum capability})" },  
    { "trigger": "alGenBuffers", "contents": "alGenBuffers(${1:ALsizei n}, ${2:ALuint* buffers})" },  
    { "trigger": "alGenSources", "contents": "alGenSources(${1:ALsizei n}, ${2:ALuint* sources})" },  
    { "trigger": "alGetBoolean", "contents": "alGetBoolean(${1:ALenum param})" },  
    { "trigger": "alGetBooleanv", "contents": "alGetBooleanv(${1:ALenum param}, ${2:ALboolean* data})" },  
    { "trigger": "alGetBuffer3f", "contents": "alGetBuffer3f(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* value1}, ${4:ALfloat* value2}, ${5:ALfloat* value3})" },  
    { "trigger": "alGetBuffer3i", "contents": "alGetBuffer3i(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* value1}, ${4:ALint* value2}, ${5:ALint* value3})" },  
    { "trigger": "alGetBufferf", "contents": "alGetBufferf(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* value})" },  
    { "trigger": "alGetBufferfv", "contents": "alGetBufferfv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* values})" },  
    { "trigger": "alGetBufferi", "contents": "alGetBufferi(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* value})" },  
    { "trigger": "alGetBufferiv", "contents": "alGetBufferiv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* values})" },  
    { "trigger": "alGetDouble", "contents": "alGetDouble(${1:ALenum param})" },  
    { "trigger": "alGetDoublev", "contents": "alGetDoublev(${1:ALenum param}, ${2:ALdouble* data})" },  
    { "trigger": "alGetEnumValue", "contents": "alGetEnumValue(${1:ALchar* ename})" },  
    { "trigger": "alGetError" },  
    { "trigger": "alGetFloat", "contents": "alGetFloat(${1:ALenum param})" },  
    { "trigger": "alGetFloatv", "contents": "alGetFloatv(${1:ALenum param}, ${2:ALfloat* data})" },  
    { "trigger": "alGetInteger", "contents": "alGetInteger(${1:ALenum param})" },  
    { "trigger": "alGetIntegerv", "contents": "alGetIntegerv(${1:ALenum param}, ${2:ALint* data})" },  
    { "trigger": "alGetListener3f", "contents": "alGetListener3f(${1:ALenum param}, ${2:ALfloat* value1}, ${3:ALfloat* value2}, ${4:ALfloat* value3})" },  
    { "trigger": "alGetListener3i", "contents": "alGetListener3i(${1:ALenum param}, ${2:ALint* value1}, ${3:ALint* value2}, ${4:ALint* value3})" },  
    { "trigger": "alGetListenerf", "contents": "alGetListenerf(${1:ALenum param}, ${2:ALfloat* value})" },  
    { "trigger": "alGetListenerfv", "contents": "alGetListenerfv(${1:ALenum param}, ${2:ALfloat* values})" },  
    { "trigger": "alGetListeneri", "contents": "alGetListeneri(${1:ALenum param}, ${2:ALint* value})" },  
    { "trigger": "alGetListeneriv", "contents": "alGetListeneriv(${1:ALenum param}, ${2:ALint* values})" },  
    { "trigger": "alGetProcAddress", "contents": "alGetProcAddress(${1:ALchar* fname})" },  
    { "trigger": "alGetSource3f", "contents": "alGetSource3f(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* value1}, ${4:ALfloat* value2}, ${5:ALfloat* value3})" },  
    { "trigger": "alGetSource3i", "contents": "alGetSource3i(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* value1}, ${4:ALint* value2}, ${5:ALint* value3})" },  
    { "trigger": "alGetSourcef", "contents": "alGetSourcef(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* value})" },  
    { "trigger": "alGetSourcefv", "contents": "alGetSourcefv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* values})" },  
    { "trigger": "alGetSourcei", "contents": "alGetSourcei(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* value})" },  
    { "trigger": "alGetSourceiv", "contents": "alGetSourceiv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* values})" },  
    { "trigger": "alGetString", "contents": "alGetString(${1:ALenum param})" },  
    { "trigger": "alIsBuffer", "contents": "alIsBuffer(${1:ALuint bid})" },  
    { "trigger": "alIsEnabled", "contents": "alIsEnabled(${1:ALenum capability})" },  
    { "trigger": "alIsExtensionPresent", "contents": "alIsExtensionPresent(${1:ALchar* extname})" },  
    { "trigger": "alIsSource", "contents": "alIsSource(${1:ALuint sid})" },  
    { "trigger": "alListener3f", "contents": "alListener3f(${1:ALenum param}, ${2:ALfloat value1}, ${3:ALfloat value2}, ${4:ALfloat value3})" },  
    { "trigger": "alListener3i", "contents": "alListener3i(${1:ALenum param}, ${2:ALint value1}, ${3:ALint value2}, ${4:ALint value3})" },  
    { "trigger": "alListenerf", "contents": "alListenerf(${1:ALenum param}, ${2:ALfloat value})" },  
    { "trigger": "alListenerfv", "contents": "alListenerfv(${1:ALenum param}, ${2:ALfloat* values})" },  
    { "trigger": "alListeneri", "contents": "alListeneri(${1:ALenum param}, ${2:ALint value})" },  
    { "trigger": "alListeneriv", "contents": "alListeneriv(${1:ALenum param}, ${2:ALint* values})" },  
    { "trigger": "alSource3f", "contents": "alSource3f(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat value1}, ${4:ALfloat value2}, ${5:ALfloat value3})" },  
    { "trigger": "alSource3i", "contents": "alSource3i(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint value1}, ${4:ALint value2}, ${5:ALint value3})" },  
    { "trigger": "alSourcePause", "contents": "alSourcePause(${1:ALuint sid})" },  
    { "trigger": "alSourcePausev", "contents": "alSourcePausev(${1:ALsizei ns}, ${2:ALuint* sids})" },  
    { "trigger": "alSourcePlay", "contents": "alSourcePlay(${1:ALuint sid})" },  
    { "trigger": "alSourcePlayv", "contents": "alSourcePlayv(${1:ALsizei ns}, ${2:ALuint* sids})" },  
    { "trigger": "alSourceQueueBuffers", "contents": "alSourceQueueBuffers(${1:ALuint sid}, ${2:ALsizei numEntries}, ${3:ALuint* bids})" },  
    { "trigger": "alSourceRewind", "contents": "alSourceRewind(${1:ALuint sid})" },  
    { "trigger": "alSourceRewindv", "contents": "alSourceRewindv(${1:ALsizei ns}, ${2:ALuint* sids})" },  
    { "trigger": "alSourceStop", "contents": "alSourceStop(${1:ALuint sid})" },  
    { "trigger": "alSourceStopv", "contents": "alSourceStopv(${1:ALsizei ns}, ${2:ALuint* sids})" },  
    { "trigger": "alSourceUnqueueBuffers", "contents": "alSourceUnqueueBuffers(${1:ALuint sid}, ${2:ALsizei numEntries}, ${3:ALuint* bids})" },  
    { "trigger": "alSourcef", "contents": "alSourcef(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat value})" },  
    { "trigger": "alSourcefv", "contents": "alSourcefv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* values})" },  
    { "trigger": "alSourcei", "contents": "alSourcei(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint value})" },  
    { "trigger": "alSourceiv", "contents": "alSourceiv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* values})" },  
    { "trigger": "alSpeedOfSound", "contents": "alSpeedOfSound(${1:ALfloat value})" },  
    { "trigger": "alarms" },  
    { "trigger": "alcCaptureCloseDevice", "contents": "alcCaptureCloseDevice(${1:ALCdevice* device})" },  
    { "trigger": "alcCaptureOpenDevice", "contents": "alcCaptureOpenDevice(${1:ALCchar* devicename}, ${2:ALCuint frequency}, ${3:ALCenum format}, ${4:ALCsizei buffersize})" },  
    { "trigger": "alcCaptureSamples", "contents": "alcCaptureSamples(${1:ALCdevice* device}, ${2:ALCvoid* buffer}, ${3:ALCsizei samples})" },  
    { "trigger": "alcCaptureStart", "contents": "alcCaptureStart(${1:ALCdevice* device})" },  
    { "trigger": "alcCaptureStop", "contents": "alcCaptureStop(${1:ALCdevice* device})" },  
    { "trigger": "alcCloseDevice", "contents": "alcCloseDevice(${1:ALCdevice* device})" },  
    { "trigger": "alcCreateContext", "contents": "alcCreateContext(${1:ALCdevice* device}, ${2:ALCint* attrlist})" },  
    { "trigger": "alcDestroyContext", "contents": "alcDestroyContext(${1:ALCcontext* context})" },  
    { "trigger": "alcGetContextsDevice", "contents": "alcGetContextsDevice(${1:ALCcontext* context})" },  
    { "trigger": "alcGetCurrentContext" },  
    { "trigger": "alcGetEnumValue", "contents": "alcGetEnumValue(${1:ALCdevice* device}, ${2:ALCchar* enumname})" },  
    { "trigger": "alcGetError", "contents": "alcGetError(${1:ALCdevice* device})" },  
    { "trigger": "alcGetIntegerv", "contents": "alcGetIntegerv(${1:ALCdevice* device}, ${2:ALCenum param}, ${3:ALCsizei size}, ${4:ALCint* data})" },  
    { "trigger": "alcGetProcAddress", "contents": "alcGetProcAddress(${1:ALCdevice* device}, ${2:ALCchar* funcname})" },  
    { "trigger": "alcGetString", "contents": "alcGetString(${1:ALCdevice* device}, ${2:ALCenum param})" },  
    { "trigger": "alcIsExtensionPresent", "contents": "alcIsExtensionPresent(${1:ALCdevice* device}, ${2:ALCchar* extname})" },  
    { "trigger": "alcMakeContextCurrent", "contents": "alcMakeContextCurrent(${1:ALCcontext* context})" },  
    { "trigger": "alcOpenDevice", "contents": "alcOpenDevice(${1:ALCchar* devicename})" },  
    { "trigger": "alcProcessContext", "contents": "alcProcessContext(${1:ALCcontext* context})" },  
    { "trigger": "alcSuspendContext", "contents": "alcSuspendContext(${1:ALCcontext* context})" },  
    { "trigger": "alertAction" },  
    { "trigger": "alertBody" },  
    { "trigger": "alertLaunchImage" },  
    { "trigger": "alertViewCancel:", "contents": "alertViewCancel:(${1:UIAlertView* alertView})" },  
    { "trigger": "alertViewCancel:", "contents": "alertViewCancel:(${1:UIAlertView* alertView})" },  
    { "trigger": "alertViewShouldEnableFirstOtherButton:", "contents": "alertViewShouldEnableFirstOtherButton:(${1:UIAlertView* alertView})" },  
    { "trigger": "alertViewShouldEnableFirstOtherButton:", "contents": "alertViewShouldEnableFirstOtherButton:(${1:UIAlertView* alertView})" },  
    { "trigger": "alertViewStyle" },  
    { "trigger": "alertView:clickedButtonAtIndex:", "contents": "alertView:clickedButtonAtIndex:(${1:UIAlertView* alertView}, clickedButtonAtIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "alertView:clickedButtonAtIndex:", "contents": "alertView:clickedButtonAtIndex:(${1:UIAlertView* alertView}, clickedButtonAtIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "alertView:didDismissWithButtonIndex:", "contents": "alertView:didDismissWithButtonIndex:(${1:UIAlertView* alertView}, didDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "alertView:didDismissWithButtonIndex:", "contents": "alertView:didDismissWithButtonIndex:(${1:UIAlertView* alertView}, didDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "alertView:willDismissWithButtonIndex:", "contents": "alertView:willDismissWithButtonIndex:(${1:UIAlertView* alertView}, willDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "alertView:willDismissWithButtonIndex:", "contents": "alertView:willDismissWithButtonIndex:(${1:UIAlertView* alertView}, willDismissWithButtonIndex:${2:NSInteger buttonIndex})" },  
    { "trigger": "alias" },  
    { "trigger": "alignmentMode" },  
    { "trigger": "allControlEvents" },  
    { "trigger": "allCredentials" },  
    { "trigger": "allHTTPHeaderFields" },  
    { "trigger": "allHeaderFields" },  
    { "trigger": "allKeys" },  
    { "trigger": "allKeysForObject:", "contents": "allKeysForObject:(${1:id anObject})" },  
    { "trigger": "allLanguages" },  
    { "trigger": "allMetadata" },  
    { "trigger": "allObjects" },  
    { "trigger": "allObjects" },  
    { "trigger": "allScripts" },  
    { "trigger": "allTargets" },  
    { "trigger": "allTouches" },  
    { "trigger": "allValues" },  
    { "trigger": "allowableMovement" },  
    { "trigger": "allowsActions" },  
    { "trigger": "allowsActions" },  
    { "trigger": "allowsAddingToAddressBook" },  
    { "trigger": "allowsAirPlay" },  
    { "trigger": "allowsAirPlayVideo" },  
    { "trigger": "allowsCalendarPreview" },  
    { "trigger": "allowsContentModifications" },  
    { "trigger": "allowsEditing" },  
    { "trigger": "allowsEditing" },  
    { "trigger": "allowsEditing" },  
    { "trigger": "allowsEmptySelection" },  
    { "trigger": "allowsExternalBinaryDataStorage" },  
    { "trigger": "allowsFloats" },  
    { "trigger": "allowsImageEditing" },  
    { "trigger": "allowsInlineMediaPlayback" },  
    { "trigger": "allowsKeyedCoding" },  
    { "trigger": "allowsMultipleSelection" },  
    { "trigger": "allowsMultipleSelectionDuringEditing" },  
    { "trigger": "allowsPickingMultipleItems" },  
    { "trigger": "allowsSelection" },  
    { "trigger": "allowsSelectionDuringEditing" },  
    { "trigger": "allowsVOIP" },  
    { "trigger": "alpha" },  
    { "trigger": "alpha" },  
    { "trigger": "alphaRange" },  
    { "trigger": "alphaSpeed" },  
    { "trigger": "alphaState" },  
    { "trigger": "alternateName" },  
    { "trigger": "alternativeInterpretations" },  
    { "trigger": "altitude" },  
    { "trigger": "alwaysBounceHorizontal" },  
    { "trigger": "alwaysBounceVertical" },  
    { "trigger": "alwaysCopiesSampleData" },  
    { "trigger": "alwaysDiscardsLateVideoFrames" },  
    { "trigger": "alwaysShowsDecimalSeparator" },  
    { "trigger": "ambientColor" },  
    { "trigger": "ambientColor" },  
    { "trigger": "anchorPoint" },  
    { "trigger": "anchorPointZ" },  
    { "trigger": "animatesDrop" },  
    { "trigger": "animationDidStart:", "contents": "animationDidStart:(${1:CAAnimation* anim})" },  
    { "trigger": "animationDidStart:", "contents": "animationDidStart:(${1:CAAnimation* anim})" },  
    { "trigger": "animationDidStop:finished:", "contents": "animationDidStop:finished:(${1:CAAnimation* anim}, finished:${2:BOOL flag})" },  
    { "trigger": "animationDidStop:finished:", "contents": "animationDidStop:finished:(${1:CAAnimation* anim}, finished:${2:BOOL flag})" },  
    { "trigger": "animationDuration" },  
    { "trigger": "animationForKey:", "contents": "animationForKey:(${1:NSString* key})" },  
    { "trigger": "animationImages" },  
    { "trigger": "animationKeys" },  
    { "trigger": "animationRepeatCount" },  
    { "trigger": "animationTool" },  
    { "trigger": "animationTool" },  
    { "trigger": "animations" },  
    { "trigger": "annotation" },  
    { "trigger": "annotation" },  
    { "trigger": "annotationVisibleRect" },  
    { "trigger": "annotations" },  
    { "trigger": "annotationsInMapRect:", "contents": "annotationsInMapRect:(${1:MKMapRect mapRect})" },  
    { "trigger": "anyObject" },  
    { "trigger": "apertureMode" },  
    { "trigger": "appendAttributedString:", "contents": "appendAttributedString:(${1:NSAttributedString* attrString})" },  
    { "trigger": "appendBytes:length:", "contents": "appendBytes:length:(${1:void* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "appendData:", "contents": "appendData:(${1:NSData* other})" },  
    { "trigger": "appendFormat:", "contents": "appendFormat:(${1:NSString* format})" },  
    { "trigger": "appendPath:", "contents": "appendPath:(${1:UIBezierPath* bezierPath})" },  
    { "trigger": "appendPixelBuffer:withPresentationTime:", "contents": "appendPixelBuffer:withPresentationTime:(${1:CVPixelBufferRef pixelBuffer}, withPresentationTime:${2:CMTime presentationTime})" },  
    { "trigger": "appendSampleBuffer:", "contents": "appendSampleBuffer:(${1:CMSampleBufferRef sampleBuffer})" },  
    { "trigger": "appendString:", "contents": "appendString:(${1:NSString* aString})" },  
    { "trigger": "applicationDidBecomeActive:", "contents": "applicationDidBecomeActive:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidBecomeActive:", "contents": "applicationDidBecomeActive:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidEnterBackground:", "contents": "applicationDidEnterBackground:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidEnterBackground:", "contents": "applicationDidEnterBackground:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidFinishLaunching:", "contents": "applicationDidFinishLaunching:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidFinishLaunching:", "contents": "applicationDidFinishLaunching:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidReceiveMemoryWarning:", "contents": "applicationDidReceiveMemoryWarning:(${1:UIApplication* application})" },  
    { "trigger": "applicationDidReceiveMemoryWarning:", "contents": "applicationDidReceiveMemoryWarning:(${1:UIApplication* application})" },  
    { "trigger": "applicationFrame" },  
    { "trigger": "applicationIconBadgeNumber" },  
    { "trigger": "applicationIconBadgeNumber" },  
    { "trigger": "applicationProtectedDataDidBecomeAvailable:", "contents": "applicationProtectedDataDidBecomeAvailable:(${1:UIApplication* application})" },  
    { "trigger": "applicationProtectedDataDidBecomeAvailable:", "contents": "applicationProtectedDataDidBecomeAvailable:(${1:UIApplication* application})" },  
    { "trigger": "applicationProtectedDataWillBecomeUnavailable:", "contents": "applicationProtectedDataWillBecomeUnavailable:(${1:UIApplication* application})" },  
    { "trigger": "applicationProtectedDataWillBecomeUnavailable:", "contents": "applicationProtectedDataWillBecomeUnavailable:(${1:UIApplication* application})" },  
    { "trigger": "applicationSignificantTimeChange:", "contents": "applicationSignificantTimeChange:(${1:UIApplication* application})" },  
    { "trigger": "applicationSignificantTimeChange:", "contents": "applicationSignificantTimeChange:(${1:UIApplication* application})" },  
    { "trigger": "applicationState" },  
    { "trigger": "applicationSupportsShakeToEdit" },  
    { "trigger": "applicationWillEnterForeground:", "contents": "applicationWillEnterForeground:(${1:UIApplication* application})" },  
    { "trigger": "applicationWillEnterForeground:", "contents": "applicationWillEnterForeground:(${1:UIApplication* application})" },  
    { "trigger": "applicationWillResignActive:", "contents": "applicationWillResignActive:(${1:UIApplication* application})" },  
    { "trigger": "applicationWillResignActive:", "contents": "applicationWillResignActive:(${1:UIApplication* application})" },  
    { "trigger": "applicationWillTerminate:", "contents": "applicationWillTerminate:(${1:UIApplication* application})" },  
    { "trigger": "applicationWillTerminate:", "contents": "applicationWillTerminate:(${1:UIApplication* application})" },  
    { "trigger": "application:didChangeStatusBarFrame:", "contents": "application:didChangeStatusBarFrame:(${1:UIApplication* application}, didChangeStatusBarFrame:${2:CGRect oldStatusBarFrame})" },  
    { "trigger": "application:didChangeStatusBarFrame:", "contents": "application:didChangeStatusBarFrame:(${1:UIApplication* application}, didChangeStatusBarFrame:${2:CGRect oldStatusBarFrame})" },  
    { "trigger": "application:didChangeStatusBarOrientation:", "contents": "application:didChangeStatusBarOrientation:(${1:UIApplication* application}, didChangeStatusBarOrientation:${2:UIInterfaceOrientation oldStatusBarOrientation})" },  
    { "trigger": "application:didChangeStatusBarOrientation:", "contents": "application:didChangeStatusBarOrientation:(${1:UIApplication* application}, didChangeStatusBarOrientation:${2:UIInterfaceOrientation oldStatusBarOrientation})" },  
    { "trigger": "application:didFailToRegisterForRemoteNotificationsWithError:", "contents": "application:didFailToRegisterForRemoteNotificationsWithError:(${1:UIApplication* application}, didFailToRegisterForRemoteNotificationsWithError:${2:NSError* error})" },  
    { "trigger": "application:didFailToRegisterForRemoteNotificationsWithError:", "contents": "application:didFailToRegisterForRemoteNotificationsWithError:(${1:UIApplication* application}, didFailToRegisterForRemoteNotificationsWithError:${2:NSError* error})" },  
    { "trigger": "application:didFinishLaunchingWithOptions:", "contents": "application:didFinishLaunchingWithOptions:(${1:UIApplication* application}, didFinishLaunchingWithOptions:${2:NSDictionary* launchOptions})" },  
    { "trigger": "application:didFinishLaunchingWithOptions:", "contents": "application:didFinishLaunchingWithOptions:(${1:UIApplication* application}, didFinishLaunchingWithOptions:${2:NSDictionary* launchOptions})" },  
    { "trigger": "application:didReceiveLocalNotification:", "contents": "application:didReceiveLocalNotification:(${1:UIApplication* application}, didReceiveLocalNotification:${2:UILocalNotification* notification})" },  
    { "trigger": "application:didReceiveLocalNotification:", "contents": "application:didReceiveLocalNotification:(${1:UIApplication* application}, didReceiveLocalNotification:${2:UILocalNotification* notification})" },  
    { "trigger": "application:didReceiveRemoteNotification:", "contents": "application:didReceiveRemoteNotification:(${1:UIApplication* application}, didReceiveRemoteNotification:${2:NSDictionary* userInfo})" },  
    { "trigger": "application:didReceiveRemoteNotification:", "contents": "application:didReceiveRemoteNotification:(${1:UIApplication* application}, didReceiveRemoteNotification:${2:NSDictionary* userInfo})" },  
    { "trigger": "application:didRegisterForRemoteNotificationsWithDeviceToken:", "contents": "application:didRegisterForRemoteNotificationsWithDeviceToken:(${1:UIApplication* application}, didRegisterForRemoteNotificationsWithDeviceToken:${2:NSData* deviceToken})" },  
    { "trigger": "application:didRegisterForRemoteNotificationsWithDeviceToken:", "contents": "application:didRegisterForRemoteNotificationsWithDeviceToken:(${1:UIApplication* application}, didRegisterForRemoteNotificationsWithDeviceToken:${2:NSData* deviceToken})" },  
    { "trigger": "application:handleOpenURL:", "contents": "application:handleOpenURL:(${1:UIApplication* application}, handleOpenURL:${2:NSURL* url})" },  
    { "trigger": "application:handleOpenURL:", "contents": "application:handleOpenURL:(${1:UIApplication* application}, handleOpenURL:${2:NSURL* url})" },  
    { "trigger": "application:openURL:sourceApplication:annotation:", "contents": "application:openURL:sourceApplication:annotation:(${1:UIApplication* application}, openURL:${2:NSURL* url}, sourceApplication:${3:NSString* sourceApplication}, annotation:${4:id annotation})" },  
    { "trigger": "application:openURL:sourceApplication:annotation:", "contents": "application:openURL:sourceApplication:annotation:(${1:UIApplication* application}, openURL:${2:NSURL* url}, sourceApplication:${3:NSString* sourceApplication}, annotation:${4:id annotation})" },  
    { "trigger": "application:willChangeStatusBarFrame:", "contents": "application:willChangeStatusBarFrame:(${1:UIApplication* application}, willChangeStatusBarFrame:${2:CGRect newStatusBarFrame})" },  
    { "trigger": "application:willChangeStatusBarFrame:", "contents": "application:willChangeStatusBarFrame:(${1:UIApplication* application}, willChangeStatusBarFrame:${2:CGRect newStatusBarFrame})" },  
    { "trigger": "application:willChangeStatusBarOrientation:duration:", "contents": "application:willChangeStatusBarOrientation:duration:(${1:UIApplication* application}, willChangeStatusBarOrientation:${2:UIInterfaceOrientation newStatusBarOrientation}, duration:${3:NSTimeInterval duration})" },  
    { "trigger": "application:willChangeStatusBarOrientation:duration:", "contents": "application:willChangeStatusBarOrientation:duration:(${1:UIApplication* application}, willChangeStatusBarOrientation:${2:UIInterfaceOrientation newStatusBarOrientation}, duration:${3:NSTimeInterval duration})" },  
    { "trigger": "appliesPreferredTrackTransform" },  
    { "trigger": "applyFillPropertiesToContext:atZoomScale:", "contents": "applyFillPropertiesToContext:atZoomScale:(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})" },  
    { "trigger": "applyStrokePropertiesToContext:atZoomScale:", "contents": "applyStrokePropertiesToContext:atZoomScale:(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})" },  
    { "trigger": "applyTransform:", "contents": "applyTransform:(${1:CGAffineTransform transform})" },  
    { "trigger": "apportionsSegmentWidthsByContent" },  
    { "trigger": "archiverDidFinish:", "contents": "archiverDidFinish:(${1:NSKeyedArchiver* archiver})" },  
    { "trigger": "archiverDidFinish:", "contents": "archiverDidFinish:(${1:NSKeyedArchiver* archiver})" },  
    { "trigger": "archiverWillFinish:", "contents": "archiverWillFinish:(${1:NSKeyedArchiver* archiver})" },  
    { "trigger": "archiverWillFinish:", "contents": "archiverWillFinish:(${1:NSKeyedArchiver* archiver})" },  
    { "trigger": "archiver:didEncodeObject:", "contents": "archiver:didEncodeObject:(${1:NSKeyedArchiver* archiver}, didEncodeObject:${2:id object})" },  
    { "trigger": "archiver:didEncodeObject:", "contents": "archiver:didEncodeObject:(${1:NSKeyedArchiver* archiver}, didEncodeObject:${2:id object})" },  
    { "trigger": "archiver:willEncodeObject:", "contents": "archiver:willEncodeObject:(${1:NSKeyedArchiver* archiver}, willEncodeObject:${2:id object})" },  
    { "trigger": "archiver:willEncodeObject:", "contents": "archiver:willEncodeObject:(${1:NSKeyedArchiver* archiver}, willEncodeObject:${2:id object})" },  
    { "trigger": "archiver:willReplaceObject:withObject:", "contents": "archiver:willReplaceObject:withObject:(${1:NSKeyedArchiver* archiver}, willReplaceObject:${2:id object}, withObject:${3:id newObject})" },  
    { "trigger": "archiver:willReplaceObject:withObject:", "contents": "archiver:willReplaceObject:withObject:(${1:NSKeyedArchiver* archiver}, willReplaceObject:${2:id object}, withObject:${3:id newObject})" },  
    { "trigger": "areasOfInterest" },  
    { "trigger": "arguments" },  
    { "trigger": "arguments" },  
    { "trigger": "argumentsRetained" },  
    { "trigger": "array" },  
    { "trigger": "arrayByAddingObject:", "contents": "arrayByAddingObject:(${1:id anObject})" },  
    { "trigger": "arrayByAddingObjectsFromArray:", "contents": "arrayByAddingObjectsFromArray:(${1:NSArray* otherArray})" },  
    { "trigger": "arrayForKey:", "contents": "arrayForKey:(${1:NSString* defaultName})" },  
    { "trigger": "arrayForKey:", "contents": "arrayForKey:(${1:NSString* aKey})" },  
    { "trigger": "arrowDirection" },  
    { "trigger": "arrowDirection" },  
    { "trigger": "arrowOffset" },  
    { "trigger": "ascender" },  
    { "trigger": "ascending" },  
    { "trigger": "aspectRatioThumbnail" },  
    { "trigger": "asset" },  
    { "trigger": "asset" },  
    { "trigger": "asset" },  
    { "trigger": "asset" },  
    { "trigger": "assetForURL:resultBlock:failureBlock:", "contents": "assetForURL:resultBlock:failureBlock:(${1:NSURL* assetURL}, resultBlock:${2:ALAssetsLibraryAssetForURLResultBlock resultBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})" },  
    { "trigger": "assetTrack" },  
    { "trigger": "assetWriterInput" },  
    { "trigger": "assignObject:toPersistentStore:", "contents": "assignObject:toPersistentStore:(${1:id object}, toPersistentStore:${2:NSPersistentStore* store})" },  
    { "trigger": "associateSourceInstance:withDestinationInstance:forEntityMapping:", "contents": "associateSourceInstance:withDestinationInstance:forEntityMapping:(${1:NSManagedObject* sourceInstance}, withDestinationInstance:${2:NSManagedObject* destinationInstance}, forEntityMapping:${3:NSEntityMapping* entityMapping})" },  
    { "trigger": "associatedMediaSelectionOptionInMediaSelectionGroup:", "contents": "associatedMediaSelectionOptionInMediaSelectionGroup:(${1:AVMediaSelectionGroup* mediaSelectionGroup})" },  
    { "trigger": "attemptRecoveryFromError:optionIndex:", "contents": "attemptRecoveryFromError:optionIndex:(${1:NSError* error}, optionIndex:${2:NSUInteger recoveryOptionIndex})" },  
    { "trigger": "attemptRecoveryFromError:optionIndex:", "contents": "attemptRecoveryFromError:optionIndex:(${1:NSError* error}, optionIndex:${2:NSUInteger recoveryOptionIndex})" },  
    { "trigger": "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", "contents": "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:(${1:NSError* error}, optionIndex:${2:NSUInteger recoveryOptionIndex}, delegate:${3:id delegate}, didRecoverSelector:${4:SEL didRecoverSelector}, contextInfo:${5:void* contextInfo})" },  
    { "trigger": "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", "contents": "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:(${1:NSError* error}, optionIndex:${2:NSUInteger recoveryOptionIndex}, delegate:${3:id delegate}, didRecoverSelector:${4:SEL didRecoverSelector}, contextInfo:${5:void* contextInfo})" },  
    { "trigger": "attendees" },  
    { "trigger": "attitude" },  
    { "trigger": "attitudeReferenceFrame" },  
    { "trigger": "attribute" },  
    { "trigger": "attribute" },  
    { "trigger": "attributeMappings" },  
    { "trigger": "attributeType" },  
    { "trigger": "attributeValueClassName" },  
    { "trigger": "attribute:atIndex:effectiveRange:", "contents": "attribute:atIndex:effectiveRange:(${1:NSString* attrName}, atIndex:${2:NSUInteger location}, effectiveRange:${3:NSRangePointer range})" },  
    { "trigger": "attribute:atIndex:longestEffectiveRange:inRange:", "contents": "attribute:atIndex:longestEffectiveRange:inRange:(${1:NSString* attrName}, atIndex:${2:NSUInteger location}, longestEffectiveRange:${3:NSRangePointer range}, inRange:${4:NSRange rangeLimit})" },  
    { "trigger": "attributedStringForObjectValue:withDefaultAttributes:", "contents": "attributedStringForObjectValue:withDefaultAttributes:(${1:id obj}, withDefaultAttributes:${2:NSDictionary* attrs})" },  
    { "trigger": "attributedSubstringFromRange:", "contents": "attributedSubstringFromRange:(${1:NSRange range})" },  
    { "trigger": "attributes" },  
    { "trigger": "attributes" },  
    { "trigger": "attributesAtIndex:effectiveRange:", "contents": "attributesAtIndex:effectiveRange:(${1:NSUInteger location}, effectiveRange:${2:NSRangePointer range})" },  
    { "trigger": "attributesAtIndex:longestEffectiveRange:inRange:", "contents": "attributesAtIndex:longestEffectiveRange:inRange:(${1:NSUInteger location}, longestEffectiveRange:${2:NSRangePointer range}, inRange:${3:NSRange rangeLimit})" },  
    { "trigger": "attributesByName" },  
    { "trigger": "attributesOfFileSystemForPath:error:", "contents": "attributesOfFileSystemForPath:error:(${1:NSString* path}, error:${2:NSError** error})" },  
    { "trigger": "attributesOfItemAtPath:error:", "contents": "attributesOfItemAtPath:error:(${1:NSString* path}, error:${2:NSError** error})" },  
    { "trigger": "audioChannels" },  
    { "trigger": "audioMix" },  
    { "trigger": "audioMix" },  
    { "trigger": "audioMix" },  
    { "trigger": "audioPlayerBeginInterruption:", "contents": "audioPlayerBeginInterruption:(${1:AVAudioPlayer* player})" },  
    { "trigger": "audioPlayerBeginInterruption:", "contents": "audioPlayerBeginInterruption:(${1:AVAudioPlayer* player})" },  
    { "trigger": "audioPlayerDecodeErrorDidOccur:error:", "contents": "audioPlayerDecodeErrorDidOccur:error:(${1:AVAudioPlayer* player}, error:${2:NSError* error})" },  
    { "trigger": "audioPlayerDecodeErrorDidOccur:error:", "contents": "audioPlayerDecodeErrorDidOccur:error:(${1:AVAudioPlayer* player}, error:${2:NSError* error})" },  
    { "trigger": "audioPlayerDidFinishPlaying:successfully:", "contents": "audioPlayerDidFinishPlaying:successfully:(${1:AVAudioPlayer* player}, successfully:${2:BOOL flag})" },  
    { "trigger": "audioPlayerDidFinishPlaying:successfully:", "contents": "audioPlayerDidFinishPlaying:successfully:(${1:AVAudioPlayer* player}, successfully:${2:BOOL flag})" },  
    { "trigger": "audioPlayerEndInterruption:", "contents": "audioPlayerEndInterruption:(${1:AVAudioPlayer* player})" },  
    { "trigger": "audioPlayerEndInterruption:", "contents": "audioPlayerEndInterruption:(${1:AVAudioPlayer* player})" },  
    { "trigger": "audioPlayerEndInterruption:withFlags:", "contents": "audioPlayerEndInterruption:withFlags:(${1:AVAudioPlayer* player}, withFlags:${2:NSUInteger flags})" },  
    { "trigger": "audioPlayerEndInterruption:withFlags:", "contents": "audioPlayerEndInterruption:withFlags:(${1:AVAudioPlayer* player}, withFlags:${2:NSUInteger flags})" },  
    { "trigger": "audioRecorderBeginInterruption:", "contents": "audioRecorderBeginInterruption:(${1:AVAudioRecorder* recorder})" },  
    { "trigger": "audioRecorderBeginInterruption:", "contents": "audioRecorderBeginInterruption:(${1:AVAudioRecorder* recorder})" },  
    { "trigger": "audioRecorderDidFinishRecording:successfully:", "contents": "audioRecorderDidFinishRecording:successfully:(${1:AVAudioRecorder* recorder}, successfully:${2:BOOL flag})" },  
    { "trigger": "audioRecorderDidFinishRecording:successfully:", "contents": "audioRecorderDidFinishRecording:successfully:(${1:AVAudioRecorder* recorder}, successfully:${2:BOOL flag})" },  
    { "trigger": "audioRecorderEncodeErrorDidOccur:error:", "contents": "audioRecorderEncodeErrorDidOccur:error:(${1:AVAudioRecorder* recorder}, error:${2:NSError* error})" },  
    { "trigger": "audioRecorderEncodeErrorDidOccur:error:", "contents": "audioRecorderEncodeErrorDidOccur:error:(${1:AVAudioRecorder* recorder}, error:${2:NSError* error})" },  
    { "trigger": "audioRecorderEndInterruption:", "contents": "audioRecorderEndInterruption:(${1:AVAudioRecorder* recorder})" },  
    { "trigger": "audioRecorderEndInterruption:", "contents": "audioRecorderEndInterruption:(${1:AVAudioRecorder* recorder})" },  
    { "trigger": "audioRecorderEndInterruption:withFlags:", "contents": "audioRecorderEndInterruption:withFlags:(${1:AVAudioRecorder* recorder}, withFlags:${2:NSUInteger flags})" },  
    { "trigger": "audioRecorderEndInterruption:withFlags:", "contents": "audioRecorderEndInterruption:withFlags:(${1:AVAudioRecorder* recorder}, withFlags:${2:NSUInteger flags})" },  
    { "trigger": "audioSettings" },  
    { "trigger": "audioTracks" },  
    { "trigger": "authenticateWithCompletionHandler:", "contents": "authenticateWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "authenticationMethod" },  
    { "trigger": "autoAdjustmentFilters" },  
    { "trigger": "autoAdjustmentFiltersWithOptions:", "contents": "autoAdjustmentFiltersWithOptions:(${1:NSDictionary* dict})" },  
    { "trigger": "autoContentAccessingProxy" },  
    { "trigger": "autoContentAccessingProxy" },  
    { "trigger": "autocapitalizationType" },  
    { "trigger": "autocapitalizationType" },  
    { "trigger": "autocapitalizationType" },  
    { "trigger": "autocorrectionType" },  
    { "trigger": "autocorrectionType" },  
    { "trigger": "autocorrectionType" },  
    { "trigger": "automaticallyAdjustsMirroring" },  
    { "trigger": "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers" },  
    { "trigger": "autorelease" },  
    { "trigger": "autorelease" },  
    { "trigger": "autorepeat" },  
    { "trigger": "autoresizesSubviews" },  
    { "trigger": "autoresizingMask" },  
    { "trigger": "autoreverses" },  
    { "trigger": "autoreverses" },  
    { "trigger": "autosaveWithCompletionHandler:", "contents": "autosaveWithCompletionHandler:(${1:void (^)(BOOL) completionHandler})" },  
    { "trigger": "availability" },  
    { "trigger": "availableChapterLocales" },  
    { "trigger": "availableData" },  
    { "trigger": "availableImageDataCVPixelFormatTypes" },  
    { "trigger": "availableImageDataCodecTypes" },  
    { "trigger": "availableMediaCharacteristicsWithMediaSelectionOptions" },  
    { "trigger": "availableMediaTypes" },  
    { "trigger": "availableMetadataFormats" },  
    { "trigger": "availableMetadataFormats" },  
    { "trigger": "availableMetadataFormats" },  
    { "trigger": "availableModes" },  
    { "trigger": "availableVideoCVPixelFormatTypes" },  
    { "trigger": "availableVideoCodecTypes" },  
    { "trigger": "averagePowerForChannel:", "contents": "averagePowerForChannel:(${1:NSUInteger channelNumber})" },  
    { "trigger": "averagePowerForChannel:", "contents": "averagePowerForChannel:(${1:NSUInteger channelNumber})" },  
    { "trigger": "averagePowerLevel" },  
    { "trigger": "awakeAfterUsingCoder:", "contents": "awakeAfterUsingCoder:(${1:NSCoder* aDecoder})" },  
    { "trigger": "awakeAfterUsingCoder:", "contents": "awakeAfterUsingCoder:(${1:NSCoder* aDecoder})" },  
    { "trigger": "awakeFromFetch" },  
    { "trigger": "awakeFromInsert" },  
    { "trigger": "awakeFromNib" },  
    { "trigger": "awakeFromNib" },  
    { "trigger": "awakeFromSnapshotEvents:", "contents": "awakeFromSnapshotEvents:(${1:NSSnapshotEventType flags})" },  
    { "trigger": "backBarButtonItem" },  
    { "trigger": "backButtonBackgroundImageForState:barMetrics:", "contents": "backButtonBackgroundImageForState:barMetrics:(${1:UIControlState state}, barMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:", "contents": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:(${1:UIBarMetrics barMetrics})" },  
    { "trigger": "backButtonTitlePositionAdjustmentForBarMetrics:", "contents": "backButtonTitlePositionAdjustmentForBarMetrics:(${1:UIBarMetrics barMetrics})" },  
    { "trigger": "backItem" },  
    { "trigger": "background" },  
    { "trigger": "backgroundColor" },  
    { "trigger": "backgroundColor" },  
    { "trigger": "backgroundColor" },  
    { "trigger": "backgroundColor" },  
    { "trigger": "backgroundColor" },  
    { "trigger": "backgroundFilters" },  
    { "trigger": "backgroundImage" },  
    { "trigger": "backgroundImage" },  
    { "trigger": "backgroundImageForBarMetrics:", "contents": "backgroundImageForBarMetrics:(${1:UIBarMetrics barMetrics})" },  
    { "trigger": "backgroundImageForState:", "contents": "backgroundImageForState:(${1:UIControlState state})" },  
    { "trigger": "backgroundImageForState:barMetrics:", "contents": "backgroundImageForState:barMetrics:(${1:UIControlState state}, barMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "backgroundImageForState:barMetrics:", "contents": "backgroundImageForState:barMetrics:(${1:UIControlState state}, barMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "backgroundImageForToolbarPosition:barMetrics:", "contents": "backgroundImageForToolbarPosition:barMetrics:(${1:UIToolbarPosition topOrBottom}, barMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "backgroundRectForBounds:", "contents": "backgroundRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "backgroundTimeRemaining" },  
    { "trigger": "backgroundVerticalPositionAdjustmentForBarMetrics:", "contents": "backgroundVerticalPositionAdjustmentForBarMetrics:(${1:UIBarMetrics barMetrics})" },  
    { "trigger": "backgroundView" },  
    { "trigger": "backgroundView" },  
    { "trigger": "backgroundView" },  
    { "trigger": "badgeValue" },  
    { "trigger": "bannerViewActionDidFinish:", "contents": "bannerViewActionDidFinish:(${1:ADBannerView* banner})" },  
    { "trigger": "bannerViewActionDidFinish:", "contents": "bannerViewActionDidFinish:(${1:ADBannerView* banner})" },  
    { "trigger": "bannerViewActionShouldBegin:willLeaveApplication:", "contents": "bannerViewActionShouldBegin:willLeaveApplication:(${1:ADBannerView* banner}, willLeaveApplication:${2:BOOL willLeave})" },  
    { "trigger": "bannerViewActionShouldBegin:willLeaveApplication:", "contents": "bannerViewActionShouldBegin:willLeaveApplication:(${1:ADBannerView* banner}, willLeaveApplication:${2:BOOL willLeave})" },  
    { "trigger": "bannerViewDidLoadAd:", "contents": "bannerViewDidLoadAd:(${1:ADBannerView* banner})" },  
    { "trigger": "bannerViewDidLoadAd:", "contents": "bannerViewDidLoadAd:(${1:ADBannerView* banner})" },  
    { "trigger": "bannerViewWillLoadAd:", "contents": "bannerViewWillLoadAd:(${1:ADBannerView* banner})" },  
    { "trigger": "bannerViewWillLoadAd:", "contents": "bannerViewWillLoadAd:(${1:ADBannerView* banner})" },  
    { "trigger": "bannerView:didFailToReceiveAdWithError:", "contents": "bannerView:didFailToReceiveAdWithError:(${1:ADBannerView* banner}, didFailToReceiveAdWithError:${2:NSError* error})" },  
    { "trigger": "bannerView:didFailToReceiveAdWithError:", "contents": "bannerView:didFailToReceiveAdWithError:(${1:ADBannerView* banner}, didFailToReceiveAdWithError:${2:NSError* error})" },  
    { "trigger": "barStyle" },  
    { "trigger": "barStyle" },  
    { "trigger": "barStyle" },  
    { "trigger": "baseURL" },  
    { "trigger": "baseWritingDirectionForPosition:inDirection:", "contents": "baseWritingDirectionForPosition:inDirection:(${1:UITextPosition* position}, inDirection:${2:UITextStorageDirection direction})" },  
    { "trigger": "baseWritingDirectionForPosition:inDirection:", "contents": "baseWritingDirectionForPosition:inDirection:(${1:UITextPosition* position}, inDirection:${2:UITextStorageDirection direction})" },  
    { "trigger": "baselineAdjustment" },  
    { "trigger": "batteryLevel" },  
    { "trigger": "batteryState" },  
    { "trigger": "becomeFirstResponder" },  
    { "trigger": "becomeKeyWindow" },  
    { "trigger": "beginBackgroundTaskWithExpirationHandler:", "contents": "beginBackgroundTaskWithExpirationHandler:(${1:void (^)(void) handler})" },  
    { "trigger": "beginConfiguration" },  
    { "trigger": "beginContentAccess" },  
    { "trigger": "beginContentAccess" },  
    { "trigger": "beginCustomizingItems:", "contents": "beginCustomizingItems:(${1:NSArray* items})" },  
    { "trigger": "beginEditing" },  
    { "trigger": "beginEntityMapping:manager:error:", "contents": "beginEntityMapping:manager:error:(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})" },  
    { "trigger": "beginGeneratingDeviceOrientationNotifications" },  
    { "trigger": "beginGeneratingLibraryChangeNotifications" },  
    { "trigger": "beginGeneratingPlaybackNotifications" },  
    { "trigger": "beginIgnoringInteractionEvents" },  
    { "trigger": "beginInterruption" },  
    { "trigger": "beginInterruption" },  
    { "trigger": "beginReceivingRemoteControlEvents" },  
    { "trigger": "beginSeekingBackward" },  
    { "trigger": "beginSeekingBackward" },  
    { "trigger": "beginSeekingBackward" },  
    { "trigger": "beginSeekingForward" },  
    { "trigger": "beginSeekingForward" },  
    { "trigger": "beginSeekingForward" },  
    { "trigger": "beginTime" },  
    { "trigger": "beginTime" },  
    { "trigger": "beginTrackingWithTouch:withEvent:", "contents": "beginTrackingWithTouch:withEvent:(${1:UITouch* touch}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "beginUndoGrouping" },  
    { "trigger": "beginUpdates" },  
    { "trigger": "beginningOfDocument" },  
    { "trigger": "beginningOfDocument" },  
    { "trigger": "biasValues" },  
    { "trigger": "bindDrawable" },  
    { "trigger": "birthRate" },  
    { "trigger": "birthRate" },  
    { "trigger": "birthdayPersonID" },  
    { "trigger": "bitmapRepresentation" },  
    { "trigger": "blue" },  
    { "trigger": "blueRange" },  
    { "trigger": "blueSpeed" },  
    { "trigger": "body" },  
    { "trigger": "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", "contents": "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:(${1:NSURLBookmarkCreationOptions options}, includingResourceValuesForKeys:${2:NSArray* keys}, relativeToURL:${3:NSURL* relativeURL}, error:${4:NSError** error})" },  
    { "trigger": "boolForKey:", "contents": "boolForKey:(${1:NSString* defaultName})" },  
    { "trigger": "boolForKey:", "contents": "boolForKey:(${1:NSString* aKey})" },  
    { "trigger": "boolValue" },  
    { "trigger": "boolValue" },  
    { "trigger": "borderColor" },  
    { "trigger": "borderRectForBounds:", "contents": "borderRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "borderStyle" },  
    { "trigger": "borderWidth" },  
    { "trigger": "bounces" },  
    { "trigger": "bouncesZoom" },  
    { "trigger": "boundingMapRect" },  
    { "trigger": "boundingMapRect" },  
    { "trigger": "boundingMapRect" },  
    { "trigger": "bounds" },  
    { "trigger": "bounds" },  
    { "trigger": "bounds" },  
    { "trigger": "bounds" },  
    { "trigger": "bounds" },  
    { "trigger": "bounds" },  
    { "trigger": "brightness" },  
    { "trigger": "bringSubviewToFront:", "contents": "bringSubviewToFront:(${1:UIView* view})" },  
    { "trigger": "broadcast" },  
    { "trigger": "builtInPlugInsPath" },  
    { "trigger": "builtInPlugInsURL" },  
    { "trigger": "bundleIdentifier" },  
    { "trigger": "bundlePath" },  
    { "trigger": "bundleURL" },  
    { "trigger": "buttonTitleAtIndex:", "contents": "buttonTitleAtIndex:(${1:NSInteger buttonIndex})" },  
    { "trigger": "buttonTitleAtIndex:", "contents": "buttonTitleAtIndex:(${1:NSInteger buttonIndex})" },  
    { "trigger": "buttonType" },  
    { "trigger": "byValue" },  
    { "trigger": "bytes" },  
    { "trigger": "cString" },  
    { "trigger": "cStringLength" },  
    { "trigger": "cStringUsingEncoding:", "contents": "cStringUsingEncoding:(${1:NSStringEncoding encoding})" },  
    { "trigger": "cacheName" },  
    { "trigger": "cacheNodeForObjectID:", "contents": "cacheNodeForObjectID:(${1:NSManagedObjectID* objectID})" },  
    { "trigger": "cacheNodes" },  
    { "trigger": "cachePolicy" },  
    { "trigger": "cachedResponse" },  
    { "trigger": "cachedResponseForRequest:", "contents": "cachedResponseForRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "cachedSnapshot" },  
    { "trigger": "cache:willEvictObject:", "contents": "cache:willEvictObject:(${1:NSCache* cache}, willEvictObject:${2:id obj})" },  
    { "trigger": "cache:willEvictObject:", "contents": "cache:willEvictObject:(${1:NSCache* cache}, willEvictObject:${2:id obj})" },  
    { "trigger": "calculationMode" },  
    { "trigger": "calendar" },  
    { "trigger": "calendar" },  
    { "trigger": "calendar" },  
    { "trigger": "calendar" },  
    { "trigger": "calendarChooserDidCancel:", "contents": "calendarChooserDidCancel:(${1:EKCalendarChooser* calendarChooser})" },  
    { "trigger": "calendarChooserDidCancel:", "contents": "calendarChooserDidCancel:(${1:EKCalendarChooser* calendarChooser})" },  
    { "trigger": "calendarChooserDidFinish:", "contents": "calendarChooserDidFinish:(${1:EKCalendarChooser* calendarChooser})" },  
    { "trigger": "calendarChooserDidFinish:", "contents": "calendarChooserDidFinish:(${1:EKCalendarChooser* calendarChooser})" },  
    { "trigger": "calendarChooserSelectionDidChange:", "contents": "calendarChooserSelectionDidChange:(${1:EKCalendarChooser* calendarChooser})" },  
    { "trigger": "calendarChooserSelectionDidChange:", "contents": "calendarChooserSelectionDidChange:(${1:EKCalendarChooser* calendarChooser})" },  
    { "trigger": "calendarIdentifier" },  
    { "trigger": "calendarIdentifier" },  
    { "trigger": "calendarIdentifier" },  
    { "trigger": "calendarWithIdentifier:", "contents": "calendarWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "calendars" },  
    { "trigger": "calendars" },  
    { "trigger": "callEventHandler" },  
    { "trigger": "callID" },  
    { "trigger": "callStackReturnAddresses" },  
    { "trigger": "callStackSymbols" },  
    { "trigger": "callState" },  
    { "trigger": "calloutOffset" },  
    { "trigger": "cameraCaptureMode" },  
    { "trigger": "cameraDevice" },  
    { "trigger": "cameraFlashMode" },  
    { "trigger": "cameraOverlayView" },  
    { "trigger": "cameraViewTransform" },  
    { "trigger": "canAddInput:", "contents": "canAddInput:(${1:AVCaptureInput* input})" },  
    { "trigger": "canAddInput:", "contents": "canAddInput:(${1:AVAssetWriterInput* input})" },  
    { "trigger": "canAddOutput:", "contents": "canAddOutput:(${1:AVCaptureOutput* output})" },  
    { "trigger": "canAddOutput:", "contents": "canAddOutput:(${1:AVAssetReaderOutput* output})" },  
    { "trigger": "canApplyOutputSettings:forMediaType:", "contents": "canApplyOutputSettings:forMediaType:(${1:NSDictionary* outputSettings}, forMediaType:${2:NSString* mediaType})" },  
    { "trigger": "canBeConvertedToEncoding:", "contents": "canBeConvertedToEncoding:(${1:NSStringEncoding encoding})" },  
    { "trigger": "canBePreventedByGestureRecognizer:", "contents": "canBePreventedByGestureRecognizer:(${1:UIGestureRecognizer* preventingGestureRecognizer})" },  
    { "trigger": "canBecomeFirstResponder" },  
    { "trigger": "canCancelContentTouches" },  
    { "trigger": "canDrawMapRect:zoomScale:", "contents": "canDrawMapRect:zoomScale:(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})" },  
    { "trigger": "canGoBack" },  
    { "trigger": "canGoForward" },  
    { "trigger": "canInsertItem:afterItem:", "contents": "canInsertItem:afterItem:(${1:AVPlayerItem* item}, afterItem:${2:AVPlayerItem* afterItem})" },  
    { "trigger": "canOpenURL:", "contents": "canOpenURL:(${1:NSURL* url})" },  
    { "trigger": "canPerformAction:withSender:", "contents": "canPerformAction:withSender:(${1:SEL action}, withSender:${2:id sender})" },  
    { "trigger": "canPlayFastForward" },  
    { "trigger": "canPlayFastReverse" },  
    { "trigger": "canPreventGestureRecognizer:", "contents": "canPreventGestureRecognizer:(${1:UIGestureRecognizer* preventedGestureRecognizer})" },  
    { "trigger": "canRedo" },  
    { "trigger": "canResignFirstResponder" },  
    { "trigger": "canSetSessionPreset:", "contents": "canSetSessionPreset:(${1:NSString* preset})" },  
    { "trigger": "canShowCallout" },  
    { "trigger": "canUndo" },  
    { "trigger": "cancel" },  
    { "trigger": "cancel" },  
    { "trigger": "cancel" },  
    { "trigger": "cancel" },  
    { "trigger": "cancel" },  
    { "trigger": "cancel" },  
    { "trigger": "cancel" },  
    { "trigger": "cancelAction" },  
    { "trigger": "cancelAllCGImageGeneration" },  
    { "trigger": "cancelAllLocalNotifications" },  
    { "trigger": "cancelAllOperations" },  
    { "trigger": "cancelAllThumbnailImageRequests" },  
    { "trigger": "cancelAuthenticationChallenge:", "contents": "cancelAuthenticationChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "cancelAuthenticationChallenge:", "contents": "cancelAuthenticationChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "cancelBannerViewAction" },  
    { "trigger": "cancelButtonIndex" },  
    { "trigger": "cancelButtonIndex" },  
    { "trigger": "cancelConnectToPeer:", "contents": "cancelConnectToPeer:(${1:NSString* peerID})" },  
    { "trigger": "cancelExport" },  
    { "trigger": "cancelGeocode" },  
    { "trigger": "cancelLoading" },  
    { "trigger": "cancelLocalNotification:", "contents": "cancelLocalNotification:(${1:UILocalNotification* notification})" },  
    { "trigger": "cancelMigrationWithError:", "contents": "cancelMigrationWithError:(${1:NSError* error})" },  
    { "trigger": "cancelPendingSeeks" },  
    { "trigger": "cancelPerformSelectorsWithTarget:", "contents": "cancelPerformSelectorsWithTarget:(${1:id target})" },  
    { "trigger": "cancelPerformSelector:target:argument:", "contents": "cancelPerformSelector:target:argument:(${1:SEL aSelector}, target:${2:id target}, argument:${3:id arg})" },  
    { "trigger": "cancelPeripheralConnection:", "contents": "cancelPeripheralConnection:(${1:CBPeripheral* peripheral})" },  
    { "trigger": "cancelReading" },  
    { "trigger": "cancelTrackingWithEvent:", "contents": "cancelTrackingWithEvent:(${1:UIEvent* event})" },  
    { "trigger": "cancelWriting" },  
    { "trigger": "cancelsTouchesInView" },  
    { "trigger": "capHeight" },  
    { "trigger": "capInsets" },  
    { "trigger": "capitalizedString" },  
    { "trigger": "captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:", "contents": "captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:(${1:AVCaptureFileOutput* captureOutput}, didFinishRecordingToOutputFileAtURL:${2:NSURL* outputFileURL}, fromConnections:${3:NSArray* connections}, error:${4:NSError* error})" },  
    { "trigger": "captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:", "contents": "captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:(${1:AVCaptureFileOutput* captureOutput}, didFinishRecordingToOutputFileAtURL:${2:NSURL* outputFileURL}, fromConnections:${3:NSArray* connections}, error:${4:NSError* error})" },  
    { "trigger": "captureOutput:didOutputSampleBuffer:fromConnection:", "contents": "captureOutput:didOutputSampleBuffer:fromConnection:(${1:AVCaptureOutput* captureOutput}, didOutputSampleBuffer:${2:CMSampleBufferRef sampleBuffer}, fromConnection:${3:AVCaptureConnection* connection})" },  
    { "trigger": "captureOutput:didOutputSampleBuffer:fromConnection:", "contents": "captureOutput:didOutputSampleBuffer:fromConnection:(${1:AVCaptureOutput* captureOutput}, didOutputSampleBuffer:${2:CMSampleBufferRef sampleBuffer}, fromConnection:${3:AVCaptureConnection* connection})" },  
    { "trigger": "captureOutput:didOutputSampleBuffer:fromConnection:", "contents": "captureOutput:didOutputSampleBuffer:fromConnection:(${1:AVCaptureOutput* captureOutput}, didOutputSampleBuffer:${2:CMSampleBufferRef sampleBuffer}, fromConnection:${3:AVCaptureConnection* connection})" },  
    { "trigger": "captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:", "contents": "captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:(${1:AVCaptureFileOutput* captureOutput}, didStartRecordingToOutputFileAtURL:${2:NSURL* fileURL}, fromConnections:${3:NSArray* connections})" },  
    { "trigger": "captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:", "contents": "captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:(${1:AVCaptureFileOutput* captureOutput}, didStartRecordingToOutputFileAtURL:${2:NSURL* fileURL}, fromConnections:${3:NSArray* connections})" },  
    { "trigger": "captureStillImageAsynchronouslyFromConnection:completionHandler:", "contents": "captureStillImageAsynchronouslyFromConnection:completionHandler:(${1:AVCaptureConnection* connection}, completionHandler:${2:void (^)(CMSampleBufferRef, NSError *) handler})" },  
    { "trigger": "caretRectForPosition:", "contents": "caretRectForPosition:(${1:UITextPosition* position})" },  
    { "trigger": "caretRectForPosition:", "contents": "caretRectForPosition:(${1:UITextPosition* position})" },  
    { "trigger": "carrierName" },  
    { "trigger": "caseInsensitiveCompare:", "contents": "caseInsensitiveCompare:(${1:NSString* string})" },  
    { "trigger": "caseSensitive" },  
    { "trigger": "category" },  
    { "trigger": "category" },  
    { "trigger": "category" },  
    { "trigger": "category" },  
    { "trigger": "cellForRowAtIndexPath:", "contents": "cellForRowAtIndexPath:(${1:NSIndexPath* indexPath})" },  
    { "trigger": "center" },  
    { "trigger": "center" },  
    { "trigger": "center" },  
    { "trigger": "centerCoordinate" },  
    { "trigger": "centerOffset" },  
    { "trigger": "centralManagerDidUpdateState:", "contents": "centralManagerDidUpdateState:(${1:CBCentralManager* central})" },  
    { "trigger": "centralManagerDidUpdateState:", "contents": "centralManagerDidUpdateState:(${1:CBCentralManager* central})" },  
    { "trigger": "centralManager:didConnectPeripheral:", "contents": "centralManager:didConnectPeripheral:(${1:CBCentralManager* central}, didConnectPeripheral:${2:CBPeripheral* peripheral})" },  
    { "trigger": "centralManager:didConnectPeripheral:", "contents": "centralManager:didConnectPeripheral:(${1:CBCentralManager* central}, didConnectPeripheral:${2:CBPeripheral* peripheral})" },  
    { "trigger": "centralManager:didDisconnectPeripheral:error:", "contents": "centralManager:didDisconnectPeripheral:error:(${1:CBCentralManager* central}, didDisconnectPeripheral:${2:CBPeripheral* peripheral}, error:${3:NSError* error})" },  
    { "trigger": "centralManager:didDisconnectPeripheral:error:", "contents": "centralManager:didDisconnectPeripheral:error:(${1:CBCentralManager* central}, didDisconnectPeripheral:${2:CBPeripheral* peripheral}, error:${3:NSError* error})" },  
    { "trigger": "centralManager:didDiscoverPeripheral:advertisementData:RSSI:", "contents": "centralManager:didDiscoverPeripheral:advertisementData:RSSI:(${1:CBCentralManager* central}, didDiscoverPeripheral:${2:CBPeripheral* peripheral}, advertisementData:${3:NSDictionary* advertisementData}, RSSI:${4:NSNumber* RSSI})" },  
    { "trigger": "centralManager:didDiscoverPeripheral:advertisementData:RSSI:", "contents": "centralManager:didDiscoverPeripheral:advertisementData:RSSI:(${1:CBCentralManager* central}, didDiscoverPeripheral:${2:CBPeripheral* peripheral}, advertisementData:${3:NSDictionary* advertisementData}, RSSI:${4:NSNumber* RSSI})" },  
    { "trigger": "centralManager:didFailToConnectPeripheral:error:", "contents": "centralManager:didFailToConnectPeripheral:error:(${1:CBCentralManager* central}, didFailToConnectPeripheral:${2:CBPeripheral* peripheral}, error:${3:NSError* error})" },  
    { "trigger": "centralManager:didFailToConnectPeripheral:error:", "contents": "centralManager:didFailToConnectPeripheral:error:(${1:CBCentralManager* central}, didFailToConnectPeripheral:${2:CBPeripheral* peripheral}, error:${3:NSError* error})" },  
    { "trigger": "centralManager:didRetrieveConnectedPeripherals:", "contents": "centralManager:didRetrieveConnectedPeripherals:(${1:CBCentralManager* central}, didRetrieveConnectedPeripherals:${2:NSArray* peripherals})" },  
    { "trigger": "centralManager:didRetrieveConnectedPeripherals:", "contents": "centralManager:didRetrieveConnectedPeripherals:(${1:CBCentralManager* central}, didRetrieveConnectedPeripherals:${2:NSArray* peripherals})" },  
    { "trigger": "centralManager:didRetrievePeripherals:", "contents": "centralManager:didRetrievePeripherals:(${1:CBCentralManager* central}, didRetrievePeripherals:${2:NSArray* peripherals})" },  
    { "trigger": "centralManager:didRetrievePeripherals:", "contents": "centralManager:didRetrievePeripherals:(${1:CBCentralManager* central}, didRetrievePeripherals:${2:NSArray* peripherals})" },  
    { "trigger": "certificates" },  
    { "trigger": "changeCount" },  
    { "trigger": "changeCountTokenForSaveOperation:", "contents": "changeCountTokenForSaveOperation:(${1:UIDocumentSaveOperation saveOperation})" },  
    { "trigger": "changeCurrentDirectoryPath:", "contents": "changeCurrentDirectoryPath:(${1:NSString* path})" },  
    { "trigger": "changeFileAttributes:atPath:", "contents": "changeFileAttributes:atPath:(${1:NSDictionary* attributes}, atPath:${2:NSString* path})" },  
    { "trigger": "changedValues" },  
    { "trigger": "changedValuesForCurrentEvent" },  
    { "trigger": "chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:", "contents": "chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:(${1:NSLocale* locale}, containingItemsWithCommonKeys:${2:NSArray* commonKeys})" },  
    { "trigger": "charValue" },  
    { "trigger": "characterAtIndex:", "contents": "characterAtIndex:(${1:NSUInteger index})" },  
    { "trigger": "characterIsMember:", "contents": "characterIsMember:(${1:unichar aCharacter})" },  
    { "trigger": "characterOffsetOfPosition:withinRange:", "contents": "characterOffsetOfPosition:withinRange:(${1:UITextPosition* position}, withinRange:${2:UITextRange* range})" },  
    { "trigger": "characterOffsetOfPosition:withinRange:", "contents": "characterOffsetOfPosition:withinRange:(${1:UITextPosition* position}, withinRange:${2:UITextRange* range})" },  
    { "trigger": "characterRangeAtPoint:", "contents": "characterRangeAtPoint:(${1:CGPoint point})" },  
    { "trigger": "characterRangeAtPoint:", "contents": "characterRangeAtPoint:(${1:CGPoint point})" },  
    { "trigger": "characterRangeByExtendingPosition:inDirection:", "contents": "characterRangeByExtendingPosition:inDirection:(${1:UITextPosition* position}, inDirection:${2:UITextLayoutDirection direction})" },  
    { "trigger": "characterRangeByExtendingPosition:inDirection:", "contents": "characterRangeByExtendingPosition:inDirection:(${1:UITextPosition* position}, inDirection:${2:UITextLayoutDirection direction})" },  
    { "trigger": "characteristic" },  
    { "trigger": "characteristics" },  
    { "trigger": "charactersToBeSkipped" },  
    { "trigger": "checkResourceIsReachableAndReturnError:", "contents": "checkResourceIsReachableAndReturnError:(${1:NSError** error})" },  
    { "trigger": "checkingTypes" },  
    { "trigger": "childViewControllers" },  
    { "trigger": "circle" },  
    { "trigger": "class" },  
    { "trigger": "class" },  
    { "trigger": "classForClassName:", "contents": "classForClassName:(${1:NSString* codedName})" },  
    { "trigger": "classForCoder" },  
    { "trigger": "classForCoder" },  
    { "trigger": "classForKeyedArchiver" },  
    { "trigger": "classForKeyedArchiver" },  
    { "trigger": "classNameForClass:", "contents": "classNameForClass:(${1:Class cls})" },  
    { "trigger": "classNamed:", "contents": "classNamed:(${1:NSString* className})" },  
    { "trigger": "clearButtonMode" },  
    { "trigger": "clearButtonRectForBounds:", "contents": "clearButtonRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "clearKeepAliveTimeout" },  
    { "trigger": "clearsContextBeforeDrawing" },  
    { "trigger": "clearsOnBeginEditing" },  
    { "trigger": "clearsSelectionOnViewWillAppear" },  
    { "trigger": "client" },  
    { "trigger": "client" },  
    { "trigger": "clipsToBounds" },  
    { "trigger": "close" },  
    { "trigger": "closeFile" },  
    { "trigger": "closePath" },  
    { "trigger": "closeWithCompletionHandler:", "contents": "closeWithCompletionHandler:(${1:void (^)(BOOL) completionHandler})" },  
    { "trigger": "closestPositionToPoint:", "contents": "closestPositionToPoint:(${1:CGPoint point})" },  
    { "trigger": "closestPositionToPoint:", "contents": "closestPositionToPoint:(${1:CGPoint point})" },  
    { "trigger": "closestPositionToPoint:withinRange:", "contents": "closestPositionToPoint:withinRange:(${1:CGPoint point}, withinRange:${2:UITextRange* range})" },  
    { "trigger": "closestPositionToPoint:withinRange:", "contents": "closestPositionToPoint:withinRange:(${1:CGPoint point}, withinRange:${2:UITextRange* range})" },  
    { "trigger": "code" },  
    { "trigger": "collection" },  
    { "trigger": "collectionSections" },  
    { "trigger": "collections" },  
    { "trigger": "color" },  
    { "trigger": "color" },  
    { "trigger": "color" },  
    { "trigger": "color" },  
    { "trigger": "color" },  
    { "trigger": "colorMaterialEnabled" },  
    { "trigger": "colorSpace" },  
    { "trigger": "colorWithAlphaComponent:", "contents": "colorWithAlphaComponent:(${1:CGFloat alpha})" },  
    { "trigger": "colors" },  
    { "trigger": "colors" },  
    { "trigger": "columnNumber" },  
    { "trigger": "comment" },  
    { "trigger": "commentURL" },  
    { "trigger": "commit:", "contents": "commit:(${1:NSError** error})" },  
    { "trigger": "commitConfiguration" },  
    { "trigger": "committedValuesForKeys:", "contents": "committedValuesForKeys:(${1:NSArray* keys})" },  
    { "trigger": "commonKey" },  
    { "trigger": "commonMetadata" },  
    { "trigger": "commonMetadata" },  
    { "trigger": "commonMetadata" },  
    { "trigger": "commonPrefixWithString:options:", "contents": "commonPrefixWithString:options:(${1:NSString* aString}, options:${2:NSStringCompareOptions mask})" },  
    { "trigger": "comparator" },  
    { "trigger": "compare:", "contents": "compare:(${1:NSString* string})" },  
    { "trigger": "compare:", "contents": "compare:(${1:NSNumber* decimalNumber})" },  
    { "trigger": "compare:", "contents": "compare:(${1:NSNumber* otherNumber})" },  
    { "trigger": "compare:", "contents": "compare:(${1:NSIndexPath* otherObject})" },  
    { "trigger": "compare:", "contents": "compare:(${1:NSDate* other})" },  
    { "trigger": "compareObject:toObject:", "contents": "compareObject:toObject:(${1:id object1}, toObject:${2:id object2})" },  
    { "trigger": "comparePosition:toPosition:", "contents": "comparePosition:toPosition:(${1:UITextPosition* position}, toPosition:${2:UITextPosition* other})" },  
    { "trigger": "comparePosition:toPosition:", "contents": "comparePosition:toPosition:(${1:UITextPosition* position}, toPosition:${2:UITextPosition* other})" },  
    { "trigger": "compareStartDateWithEvent:", "contents": "compareStartDateWithEvent:(${1:EKEvent* other})" },  
    { "trigger": "compare:options:", "contents": "compare:options:(${1:NSString* string}, options:${2:NSStringCompareOptions mask})" },  
    { "trigger": "compare:options:range:", "contents": "compare:options:range:(${1:NSString* string}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange compareRange})" },  
    { "trigger": "compare:options:range:locale:", "contents": "compare:options:range:locale:(${1:NSString* string}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange compareRange}, locale:${4:id locale})" },  
    { "trigger": "comparisonPredicateModifier" },  
    { "trigger": "comparisonType" },  
    { "trigger": "compatibleTrackForCompositionTrack:", "contents": "compatibleTrackForCompositionTrack:(${1:AVCompositionTrack* compositionTrack})" },  
    { "trigger": "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:", "contents": "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:(${1:NSString** outputName}, caseSensitive:${2:BOOL flag}, matchesIntoArray:${3:NSArray** outputArray}, filterTypes:${4:NSArray* filterTypes})" },  
    { "trigger": "completionBlock" },  
    { "trigger": "completionHandler" },  
    { "trigger": "completionsForPartialWordRange:inString:language:", "contents": "completionsForPartialWordRange:inString:language:(${1:NSRange range}, inString:${2:NSString* string}, language:${3:NSString* language})" },  
    { "trigger": "components" },  
    { "trigger": "components" },  
    { "trigger": "componentsJoinedByString:", "contents": "componentsJoinedByString:(${1:NSString* separator})" },  
    { "trigger": "componentsSeparatedByCharactersInSet:", "contents": "componentsSeparatedByCharactersInSet:(${1:NSCharacterSet* separator})" },  
    { "trigger": "componentsSeparatedByString:", "contents": "componentsSeparatedByString:(${1:NSString* separator})" },  
    { "trigger": "componentsToDisplayForPath:", "contents": "componentsToDisplayForPath:(${1:NSString* path})" },  
    { "trigger": "components:fromDate:", "contents": "components:fromDate:(${1:NSUInteger unitFlags}, fromDate:${2:NSDate* date})" },  
    { "trigger": "components:fromDate:toDate:options:", "contents": "components:fromDate:toDate:options:(${1:NSUInteger unitFlags}, fromDate:${2:NSDate* startingDate}, toDate:${3:NSDate* resultDate}, options:${4:NSUInteger opts})" },  
    { "trigger": "composeViewDelegate" },  
    { "trigger": "compositingFilter" },  
    { "trigger": "compoundIndexes" },  
    { "trigger": "compoundPredicateType" },  
    { "trigger": "concurrencyType" },  
    { "trigger": "condition" },  
    { "trigger": "configurationName" },  
    { "trigger": "configurations" },  
    { "trigger": "configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:", "contents": "configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:(${1:NSURL* storeURL}, ofType:${2:NSString* fileType}, modelConfiguration:${3:NSString* configuration}, storeOptions:${4:NSDictionary* storeOptions}, error:${5:NSError** error})" },  
    { "trigger": "conformsToProtocol:", "contents": "conformsToProtocol:(${1:Protocol* aProtocol})" },  
    { "trigger": "conformsToProtocol:", "contents": "conformsToProtocol:(${1:Protocol* aProtocol})" },  
    { "trigger": "connectPeripheral:options:", "contents": "connectPeripheral:options:(${1:CBPeripheral* peripheral}, options:${2:NSDictionary* options})" },  
    { "trigger": "connectToPeer:withTimeout:", "contents": "connectToPeer:withTimeout:(${1:NSString* peerID}, withTimeout:${2:NSTimeInterval timeout})" },  
    { "trigger": "connectedAccessories" },  
    { "trigger": "connectionDidFinishDownloading:destinationURL:", "contents": "connectionDidFinishDownloading:destinationURL:(${1:NSURLConnection* connection}, destinationURL:${2:NSURL* destinationURL})" },  
    { "trigger": "connectionDidFinishDownloading:destinationURL:", "contents": "connectionDidFinishDownloading:destinationURL:(${1:NSURLConnection* connection}, destinationURL:${2:NSURL* destinationURL})" },  
    { "trigger": "connectionDidFinishLoading:", "contents": "connectionDidFinishLoading:(${1:NSURLConnection* connection})" },  
    { "trigger": "connectionDidFinishLoading:", "contents": "connectionDidFinishLoading:(${1:NSURLConnection* connection})" },  
    { "trigger": "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:", "contents": "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:(${1:NSURLConnection* connection}, totalBytesWritten:${2:long long totalBytesWritten}, expectedTotalBytes:${3:long long expectedTotalBytes})" },  
    { "trigger": "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:", "contents": "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:(${1:NSURLConnection* connection}, totalBytesWritten:${2:long long totalBytesWritten}, expectedTotalBytes:${3:long long expectedTotalBytes})" },  
    { "trigger": "connectionID" },  
    { "trigger": "connectionPolicy" },  
    { "trigger": "connectionShouldUseCredentialStorage:", "contents": "connectionShouldUseCredentialStorage:(${1:NSURLConnection* connection})" },  
    { "trigger": "connectionShouldUseCredentialStorage:", "contents": "connectionShouldUseCredentialStorage:(${1:NSURLConnection* connection})" },  
    { "trigger": "connectionTypesMask" },  
    { "trigger": "connectionWithMediaType:", "contents": "connectionWithMediaType:(${1:NSString* mediaType})" },  
    { "trigger": "connection:canAuthenticateAgainstProtectionSpace:", "contents": "connection:canAuthenticateAgainstProtectionSpace:(${1:NSURLConnection* connection}, canAuthenticateAgainstProtectionSpace:${2:NSURLProtectionSpace* protectionSpace})" },  
    { "trigger": "connection:canAuthenticateAgainstProtectionSpace:", "contents": "connection:canAuthenticateAgainstProtectionSpace:(${1:NSURLConnection* connection}, canAuthenticateAgainstProtectionSpace:${2:NSURLProtectionSpace* protectionSpace})" },  
    { "trigger": "connection:didCancelAuthenticationChallenge:", "contents": "connection:didCancelAuthenticationChallenge:(${1:NSURLConnection* connection}, didCancelAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "connection:didCancelAuthenticationChallenge:", "contents": "connection:didCancelAuthenticationChallenge:(${1:NSURLConnection* connection}, didCancelAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "connection:didFailWithError:", "contents": "connection:didFailWithError:(${1:NSURLConnection* connection}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "connection:didFailWithError:", "contents": "connection:didFailWithError:(${1:NSURLConnection* connection}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "connection:didReceiveAuthenticationChallenge:", "contents": "connection:didReceiveAuthenticationChallenge:(${1:NSURLConnection* connection}, didReceiveAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "connection:didReceiveAuthenticationChallenge:", "contents": "connection:didReceiveAuthenticationChallenge:(${1:NSURLConnection* connection}, didReceiveAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "connection:didReceiveData:", "contents": "connection:didReceiveData:(${1:NSURLConnection* connection}, didReceiveData:${2:NSData* data})" },  
    { "trigger": "connection:didReceiveData:", "contents": "connection:didReceiveData:(${1:NSURLConnection* connection}, didReceiveData:${2:NSData* data})" },  
    { "trigger": "connection:didReceiveResponse:", "contents": "connection:didReceiveResponse:(${1:NSURLConnection* connection}, didReceiveResponse:${2:NSURLResponse* response})" },  
    { "trigger": "connection:didReceiveResponse:", "contents": "connection:didReceiveResponse:(${1:NSURLConnection* connection}, didReceiveResponse:${2:NSURLResponse* response})" },  
    { "trigger": "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:", "contents": "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:(${1:NSURLConnection* connection}, didSendBodyData:${2:NSInteger bytesWritten}, totalBytesWritten:${3:NSInteger totalBytesWritten}, totalBytesExpectedToWrite:${4:NSInteger totalBytesExpectedToWrite})" },  
    { "trigger": "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:", "contents": "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:(${1:NSURLConnection* connection}, didSendBodyData:${2:NSInteger bytesWritten}, totalBytesWritten:${3:NSInteger totalBytesWritten}, totalBytesExpectedToWrite:${4:NSInteger totalBytesExpectedToWrite})" },  
    { "trigger": "connection:didWriteData:totalBytesWritten:expectedTotalBytes:", "contents": "connection:didWriteData:totalBytesWritten:expectedTotalBytes:(${1:NSURLConnection* connection}, didWriteData:${2:long long bytesWritten}, totalBytesWritten:${3:long long totalBytesWritten}, expectedTotalBytes:${4:long long expectedTotalBytes})" },  
    { "trigger": "connection:didWriteData:totalBytesWritten:expectedTotalBytes:", "contents": "connection:didWriteData:totalBytesWritten:expectedTotalBytes:(${1:NSURLConnection* connection}, didWriteData:${2:long long bytesWritten}, totalBytesWritten:${3:long long totalBytesWritten}, expectedTotalBytes:${4:long long expectedTotalBytes})" },  
    { "trigger": "connection:needNewBodyStream:", "contents": "connection:needNewBodyStream:(${1:NSURLConnection* connection}, needNewBodyStream:${2:NSURLRequest* request})" },  
    { "trigger": "connection:needNewBodyStream:", "contents": "connection:needNewBodyStream:(${1:NSURLConnection* connection}, needNewBodyStream:${2:NSURLRequest* request})" },  
    { "trigger": "connections" },  
    { "trigger": "connections" },  
    { "trigger": "connection:willCacheResponse:", "contents": "connection:willCacheResponse:(${1:NSURLConnection* connection}, willCacheResponse:${2:NSCachedURLResponse* cachedResponse})" },  
    { "trigger": "connection:willCacheResponse:", "contents": "connection:willCacheResponse:(${1:NSURLConnection* connection}, willCacheResponse:${2:NSCachedURLResponse* cachedResponse})" },  
    { "trigger": "connection:willSendRequestForAuthenticationChallenge:", "contents": "connection:willSendRequestForAuthenticationChallenge:(${1:NSURLConnection* connection}, willSendRequestForAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "connection:willSendRequestForAuthenticationChallenge:", "contents": "connection:willSendRequestForAuthenticationChallenge:(${1:NSURLConnection* connection}, willSendRequestForAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "connection:willSendRequest:redirectResponse:", "contents": "connection:willSendRequest:redirectResponse:(${1:NSURLConnection* connection}, willSendRequest:${2:NSURLRequest* request}, redirectResponse:${3:NSURLResponse* response})" },  
    { "trigger": "connection:willSendRequest:redirectResponse:", "contents": "connection:willSendRequest:redirectResponse:(${1:NSURLConnection* connection}, willSendRequest:${2:NSURLRequest* request}, redirectResponse:${3:NSURLResponse* response})" },  
    { "trigger": "constantAttenuation" },  
    { "trigger": "constantColor" },  
    { "trigger": "constantValue" },  
    { "trigger": "contacts" },  
    { "trigger": "containsCoordinate:", "contents": "containsCoordinate:(${1:CLLocationCoordinate2D coordinate})" },  
    { "trigger": "containsIndex:", "contents": "containsIndex:(${1:NSUInteger value})" },  
    { "trigger": "containsIndexes:", "contents": "containsIndexes:(${1:NSIndexSet* indexSet})" },  
    { "trigger": "containsIndexesInRange:", "contents": "containsIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "containsMipmaps" },  
    { "trigger": "containsObject:", "contents": "containsObject:(${1:id anObject})" },  
    { "trigger": "containsObject:", "contents": "containsObject:(${1:id anObject})" },  
    { "trigger": "containsObject:", "contents": "containsObject:(${1:id object})" },  
    { "trigger": "containsPasteboardTypes:", "contents": "containsPasteboardTypes:(${1:NSArray* pasteboardTypes})" },  
    { "trigger": "containsPasteboardTypes:inItemSet:", "contents": "containsPasteboardTypes:inItemSet:(${1:NSArray* pasteboardTypes}, inItemSet:${2:NSIndexSet* itemSet})" },  
    { "trigger": "containsPoint:", "contents": "containsPoint:(${1:CGPoint point})" },  
    { "trigger": "containsPoint:", "contents": "containsPoint:(${1:CGPoint p})" },  
    { "trigger": "containsValueForKey:", "contents": "containsValueForKey:(${1:NSString* key})" },  
    { "trigger": "containsValueForKey:", "contents": "containsValueForKey:(${1:NSString* key})" },  
    { "trigger": "contentEdgeInsets" },  
    { "trigger": "contentHorizontalAlignment" },  
    { "trigger": "contentInset" },  
    { "trigger": "contentInsets" },  
    { "trigger": "contentMode" },  
    { "trigger": "contentOffset" },  
    { "trigger": "contentOffsetForSegmentAtIndex:", "contents": "contentOffsetForSegmentAtIndex:(${1:NSUInteger segment})" },  
    { "trigger": "contentPositionAdjustmentForSegmentType:barMetrics:", "contents": "contentPositionAdjustmentForSegmentType:barMetrics:(${1:UISegmentedControlSegment leftCenterRightOrAlone}, barMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "contentRectForBounds:", "contents": "contentRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "contentScaleFactor" },  
    { "trigger": "contentSize" },  
    { "trigger": "contentSizeForViewInPopover" },  
    { "trigger": "contentStretch" },  
    { "trigger": "contentURL" },  
    { "trigger": "contentURL" },  
    { "trigger": "contentVerticalAlignment" },  
    { "trigger": "contentView" },  
    { "trigger": "contentViewController" },  
    { "trigger": "contents" },  
    { "trigger": "contents" },  
    { "trigger": "contentsAreFlipped" },  
    { "trigger": "contentsAtPath:", "contents": "contentsAtPath:(${1:NSString* path})" },  
    { "trigger": "contentsCenter" },  
    { "trigger": "contentsEqualAtPath:andPath:", "contents": "contentsEqualAtPath:andPath:(${1:NSString* path1}, andPath:${2:NSString* path2})" },  
    { "trigger": "contentsForType:error:", "contents": "contentsForType:error:(${1:NSString* typeName}, error:${2:NSError** outError})" },  
    { "trigger": "contentsGravity" },  
    { "trigger": "contentsOfDirectoryAtPath:error:", "contents": "contentsOfDirectoryAtPath:error:(${1:NSString* path}, error:${2:NSError** error})" },  
    { "trigger": "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", "contents": "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:(${1:NSURL* url}, includingPropertiesForKeys:${2:NSArray* keys}, options:${3:NSDirectoryEnumerationOptions mask}, error:${4:NSError** error})" },  
    { "trigger": "contentsRect" },  
    { "trigger": "contentsRect" },  
    { "trigger": "contentsScale" },  
    { "trigger": "context" },  
    { "trigger": "context" },  
    { "trigger": "contextExpression" },  
    { "trigger": "continueTrackingWithTouch:withEvent:", "contents": "continueTrackingWithTouch:withEvent:(${1:UITouch* touch}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "continueWithoutCredentialForAuthenticationChallenge:", "contents": "continueWithoutCredentialForAuthenticationChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "continueWithoutCredentialForAuthenticationChallenge:", "contents": "continueWithoutCredentialForAuthenticationChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "continuityValues" },  
    { "trigger": "controlStyle" },  
    { "trigger": "controllerDidChangeContent:", "contents": "controllerDidChangeContent:(${1:NSFetchedResultsController* controller})" },  
    { "trigger": "controllerDidChangeContent:", "contents": "controllerDidChangeContent:(${1:NSFetchedResultsController* controller})" },  
    { "trigger": "controllerWillChangeContent:", "contents": "controllerWillChangeContent:(${1:NSFetchedResultsController* controller})" },  
    { "trigger": "controllerWillChangeContent:", "contents": "controllerWillChangeContent:(${1:NSFetchedResultsController* controller})" },  
    { "trigger": "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:", "contents": "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:(${1:NSFetchedResultsController* controller}, didChangeObject:${2:id anObject}, atIndexPath:${3:NSIndexPath* indexPath}, forChangeType:${4:NSFetchedResultsChangeType type}, newIndexPath:${5:NSIndexPath* newIndexPath})" },  
    { "trigger": "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:", "contents": "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:(${1:NSFetchedResultsController* controller}, didChangeObject:${2:id anObject}, atIndexPath:${3:NSIndexPath* indexPath}, forChangeType:${4:NSFetchedResultsChangeType type}, newIndexPath:${5:NSIndexPath* newIndexPath})" },  
    { "trigger": "controller:didChangeSection:atIndex:forChangeType:", "contents": "controller:didChangeSection:atIndex:forChangeType:(${1:NSFetchedResultsController* controller}, didChangeSection:${2:id sectionInfo}, atIndex:${3:NSUInteger sectionIndex}, forChangeType:${4:NSFetchedResultsChangeType type})" },  
    { "trigger": "controller:didChangeSection:atIndex:forChangeType:", "contents": "controller:didChangeSection:atIndex:forChangeType:(${1:NSFetchedResultsController* controller}, didChangeSection:${2:id sectionInfo}, atIndex:${3:NSUInteger sectionIndex}, forChangeType:${4:NSFetchedResultsChangeType type})" },  
    { "trigger": "controller:sectionIndexTitleForSectionName:", "contents": "controller:sectionIndexTitleForSectionName:(${1:NSFetchedResultsController* controller}, sectionIndexTitleForSectionName:${2:NSString* sectionName})" },  
    { "trigger": "controller:sectionIndexTitleForSectionName:", "contents": "controller:sectionIndexTitleForSectionName:(${1:NSFetchedResultsController* controller}, sectionIndexTitleForSectionName:${2:NSString* sectionName})" },  
    { "trigger": "convertCoordinate:toPointToView:", "contents": "convertCoordinate:toPointToView:(${1:CLLocationCoordinate2D coordinate}, toPointToView:${2:UIView* view})" },  
    { "trigger": "convertPoint:fromLayer:", "contents": "convertPoint:fromLayer:(${1:CGPoint p}, fromLayer:${2:CALayer* l})" },  
    { "trigger": "convertPoint:fromView:", "contents": "convertPoint:fromView:(${1:CGPoint point}, fromView:${2:UIView* view})" },  
    { "trigger": "convertPoint:fromWindow:", "contents": "convertPoint:fromWindow:(${1:CGPoint point}, fromWindow:${2:UIWindow* window})" },  
    { "trigger": "convertPoint:toCoordinateFromView:", "contents": "convertPoint:toCoordinateFromView:(${1:CGPoint point}, toCoordinateFromView:${2:UIView* view})" },  
    { "trigger": "convertPoint:toLayer:", "contents": "convertPoint:toLayer:(${1:CGPoint p}, toLayer:${2:CALayer* l})" },  
    { "trigger": "convertPoint:toView:", "contents": "convertPoint:toView:(${1:CGPoint point}, toView:${2:UIView* view})" },  
    { "trigger": "convertPoint:toWindow:", "contents": "convertPoint:toWindow:(${1:CGPoint point}, toWindow:${2:UIWindow* window})" },  
    { "trigger": "convertRect:fromLayer:", "contents": "convertRect:fromLayer:(${1:CGRect r}, fromLayer:${2:CALayer* l})" },  
    { "trigger": "convertRect:fromView:", "contents": "convertRect:fromView:(${1:CGRect rect}, fromView:${2:UIView* view})" },  
    { "trigger": "convertRect:fromWindow:", "contents": "convertRect:fromWindow:(${1:CGRect rect}, fromWindow:${2:UIWindow* window})" },  
    { "trigger": "convertRect:toLayer:", "contents": "convertRect:toLayer:(${1:CGRect r}, toLayer:${2:CALayer* l})" },  
    { "trigger": "convertRect:toRegionFromView:", "contents": "convertRect:toRegionFromView:(${1:CGRect rect}, toRegionFromView:${2:UIView* view})" },  
    { "trigger": "convertRect:toView:", "contents": "convertRect:toView:(${1:CGRect rect}, toView:${2:UIView* view})" },  
    { "trigger": "convertRect:toWindow:", "contents": "convertRect:toWindow:(${1:CGRect rect}, toWindow:${2:UIWindow* window})" },  
    { "trigger": "convertRegion:toRectToView:", "contents": "convertRegion:toRectToView:(${1:MKCoordinateRegion region}, toRectToView:${2:UIView* view})" },  
    { "trigger": "convertTime:fromLayer:", "contents": "convertTime:fromLayer:(${1:CFTimeInterval t}, fromLayer:${2:CALayer* l})" },  
    { "trigger": "convertTime:toLayer:", "contents": "convertTime:toLayer:(${1:CFTimeInterval t}, toLayer:${2:CALayer* l})" },  
    { "trigger": "cookieAcceptPolicy" },  
    { "trigger": "cookies" },  
    { "trigger": "cookiesForURL:", "contents": "cookiesForURL:(${1:NSURL* URL})" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinate" },  
    { "trigger": "coordinateReadingItemAtURL:options:error:byAccessor:", "contents": "coordinateReadingItemAtURL:options:error:byAccessor:(${1:NSURL* url}, options:${2:NSFileCoordinatorReadingOptions options}, error:${3:NSError** outError}, byAccessor:${4:void (^)(NSURL *) reader})" },  
    { "trigger": "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", "contents": "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:(${1:NSURL* readingURL}, options:${2:NSFileCoordinatorReadingOptions readingOptions}, writingItemAtURL:${3:NSURL* writingURL}, options:${4:NSFileCoordinatorWritingOptions writingOptions}, error:${5:NSError** outError}, byAccessor:${6:void (^)(NSURL *, NSURL *) readerWriter})" },  
    { "trigger": "coordinateWritingItemAtURL:options:error:byAccessor:", "contents": "coordinateWritingItemAtURL:options:error:byAccessor:(${1:NSURL* url}, options:${2:NSFileCoordinatorWritingOptions options}, error:${3:NSError** outError}, byAccessor:${4:void (^)(NSURL *) writer})" },  
    { "trigger": "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", "contents": "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:(${1:NSURL* url1}, options:${2:NSFileCoordinatorWritingOptions options1}, writingItemAtURL:${3:NSURL* url2}, options:${4:NSFileCoordinatorWritingOptions options2}, error:${5:NSError** outError}, byAccessor:${6:void (^)(NSURL *, NSURL *) writer})" },  
    { "trigger": "copy:", "contents": "copy:(${1:id sender})" },  
    { "trigger": "copy" },  
    { "trigger": "copy:", "contents": "copy:(${1:id sender})" },  
    { "trigger": "copyCGImageAtTime:actualTime:error:", "contents": "copyCGImageAtTime:actualTime:error:(${1:CMTime requestedTime}, actualTime:${2:CMTime* actualTime}, error:${3:NSError** outError})" },  
    { "trigger": "copyItemAtPath:toPath:error:", "contents": "copyItemAtPath:toPath:error:(${1:NSString* srcPath}, toPath:${2:NSString* dstPath}, error:${3:NSError** error})" },  
    { "trigger": "copyItemAtURL:toURL:error:", "contents": "copyItemAtURL:toURL:error:(${1:NSURL* srcURL}, toURL:${2:NSURL* dstURL}, error:${3:NSError** error})" },  
    { "trigger": "copyNextSampleBuffer" },  
    { "trigger": "copyWithZone:", "contents": "copyWithZone:(${1:NSZone* zone})" },  
    { "trigger": "copyWithZone:", "contents": "copyWithZone:(${1:NSZone* zone})" },  
    { "trigger": "cornerRadius" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "count" },  
    { "trigger": "countByEnumeratingWithState:objects:count:", "contents": "countByEnumeratingWithState:objects:count:(${1:NSFastEnumerationState* state}, objects:${2:id* buffer}, count:${3:NSUInteger len})" },  
    { "trigger": "countByEnumeratingWithState:objects:count:", "contents": "countByEnumeratingWithState:objects:count:(${1:NSFastEnumerationState* state}, objects:${2:id* buffer}, count:${3:NSUInteger len})" },  
    { "trigger": "countDownDuration" },  
    { "trigger": "countForFetchRequest:error:", "contents": "countForFetchRequest:error:(${1:NSFetchRequest* request}, error:${2:NSError** error})" },  
    { "trigger": "countForObject:", "contents": "countForObject:(${1:id object})" },  
    { "trigger": "countLimit" },  
    { "trigger": "countOfIndexesInRange:", "contents": "countOfIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "country" },  
    { "trigger": "countryCode" },  
    { "trigger": "course" },  
    { "trigger": "createCGImage:fromRect:", "contents": "createCGImage:fromRect:(${1:CIImage* im}, fromRect:${2:CGRect r})" },  
    { "trigger": "createCGImage:fromRect:format:colorSpace:", "contents": "createCGImage:fromRect:format:colorSpace:(${1:CIImage* im}, fromRect:${2:CGRect r}, format:${3:CIFormat f}, colorSpace:${4:CGColorSpaceRef cs})" },  
    { "trigger": "createDestinationInstancesForSourceInstance:entityMapping:manager:error:", "contents": "createDestinationInstancesForSourceInstance:entityMapping:manager:error:(${1:NSManagedObject* sInstance}, entityMapping:${2:NSEntityMapping* mapping}, manager:${3:NSMigrationManager* manager}, error:${4:NSError** error})" },  
    { "trigger": "createDirectoryAtPath:attributes:", "contents": "createDirectoryAtPath:attributes:(${1:NSString* path}, attributes:${2:NSDictionary* attributes})" },  
    { "trigger": "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", "contents": "createDirectoryAtPath:withIntermediateDirectories:attributes:error:(${1:NSString* path}, withIntermediateDirectories:${2:BOOL createIntermediates}, attributes:${3:NSDictionary* attributes}, error:${4:NSError** error})" },  
    { "trigger": "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", "contents": "createDirectoryAtURL:withIntermediateDirectories:attributes:error:(${1:NSURL* url}, withIntermediateDirectories:${2:BOOL createIntermediates}, attributes:${3:NSDictionary* attributes}, error:${4:NSError** error})" },  
    { "trigger": "createFileAtPath:contents:attributes:", "contents": "createFileAtPath:contents:attributes:(${1:NSString* path}, contents:${2:NSData* data}, attributes:${3:NSDictionary* attr})" },  
    { "trigger": "createPath" },  
    { "trigger": "createRelationshipsForDestinationInstance:entityMapping:manager:error:", "contents": "createRelationshipsForDestinationInstance:entityMapping:manager:error:(${1:NSManagedObject* dInstance}, entityMapping:${2:NSEntityMapping* mapping}, manager:${3:NSMigrationManager* manager}, error:${4:NSError** error})" },  
    { "trigger": "createSymbolicLinkAtPath:pathContent:", "contents": "createSymbolicLinkAtPath:pathContent:(${1:NSString* path}, pathContent:${2:NSString* otherpath})" },  
    { "trigger": "createSymbolicLinkAtPath:withDestinationPath:error:", "contents": "createSymbolicLinkAtPath:withDestinationPath:error:(${1:NSString* path}, withDestinationPath:${2:NSString* destPath}, error:${3:NSError** error})" },  
    { "trigger": "createSymbolicLinkAtURL:withDestinationURL:error:", "contents": "createSymbolicLinkAtURL:withDestinationURL:error:(${1:NSURL* url}, withDestinationURL:${2:NSURL* destURL}, error:${3:NSError** error})" },  
    { "trigger": "creationDate" },  
    { "trigger": "creationDate" },  
    { "trigger": "creationDate" },  
    { "trigger": "credential" },  
    { "trigger": "credentialsForProtectionSpace:", "contents": "credentialsForProtectionSpace:(${1:NSURLProtectionSpace* space})" },  
    { "trigger": "cubeMapWithContentsOfFile:options:queue:completionHandler:", "contents": "cubeMapWithContentsOfFile:options:queue:completionHandler:(${1:NSString* path}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "cubeMapWithContentsOfFiles:options:queue:completionHandler:", "contents": "cubeMapWithContentsOfFiles:options:queue:completionHandler:(${1:NSArray* paths}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "cubeMapWithContentsOfURL:options:queue:completionHandler:", "contents": "cubeMapWithContentsOfURL:options:queue:completionHandler:(${1:NSURL* url}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "currencyCode" },  
    { "trigger": "currencyDecimalSeparator" },  
    { "trigger": "currencyGroupingSeparator" },  
    { "trigger": "currencySymbol" },  
    { "trigger": "currentBackgroundImage" },  
    { "trigger": "currentCalls" },  
    { "trigger": "currentContentSizeIdentifier" },  
    { "trigger": "currentDate" },  
    { "trigger": "currentDirectoryPath" },  
    { "trigger": "currentDiskUsage" },  
    { "trigger": "currentEntityMapping" },  
    { "trigger": "currentHardwareInputNumberOfChannels" },  
    { "trigger": "currentHardwareOutputNumberOfChannels" },  
    { "trigger": "currentHardwareSampleRate" },  
    { "trigger": "currentImage" },  
    { "trigger": "currentItem" },  
    { "trigger": "currentMaximumTrackImage" },  
    { "trigger": "currentMemoryUsage" },  
    { "trigger": "currentMinimumTrackImage" },  
    { "trigger": "currentMode" },  
    { "trigger": "currentMode" },  
    { "trigger": "currentPage" },  
    { "trigger": "currentParticipant" },  
    { "trigger": "currentPlaybackRate" },  
    { "trigger": "currentPlaybackRate" },  
    { "trigger": "currentPlaybackTime" },  
    { "trigger": "currentPlaybackTime" },  
    { "trigger": "currentPlaybackTime" },  
    { "trigger": "currentPoint" },  
    { "trigger": "currentPreviewItem" },  
    { "trigger": "currentPreviewItemIndex" },  
    { "trigger": "currentRequest" },  
    { "trigger": "currentThumbImage" },  
    { "trigger": "currentTime" },  
    { "trigger": "currentTime" },  
    { "trigger": "currentTime" },  
    { "trigger": "currentTime" },  
    { "trigger": "currentTitle" },  
    { "trigger": "currentTitleColor" },  
    { "trigger": "currentTitleShadowColor" },  
    { "trigger": "currentlyReadingIssue" },  
    { "trigger": "customSelector" },  
    { "trigger": "customView" },  
    { "trigger": "customizableViewControllers" },  
    { "trigger": "cut:", "contents": "cut:(${1:id sender})" },  
    { "trigger": "cut:", "contents": "cut:(${1:id sender})" },  
    { "trigger": "data" },  
    { "trigger": "data" },  
    { "trigger": "data" },  
    { "trigger": "data" },  
    { "trigger": "dataDetectorTypes" },  
    { "trigger": "dataDetectorTypes" },  
    { "trigger": "dataForKey:", "contents": "dataForKey:(${1:NSString* defaultName})" },  
    { "trigger": "dataForKey:", "contents": "dataForKey:(${1:NSString* aKey})" },  
    { "trigger": "dataForPasteboardType:", "contents": "dataForPasteboardType:(${1:NSString* pasteboardType})" },  
    { "trigger": "dataForPasteboardType:inItemSet:", "contents": "dataForPasteboardType:inItemSet:(${1:NSString* pasteboardType}, inItemSet:${2:NSIndexSet* itemSet})" },  
    { "trigger": "dataSource" },  
    { "trigger": "dataSource" },  
    { "trigger": "dataSource" },  
    { "trigger": "dataSource" },  
    { "trigger": "dataUsingEncoding:", "contents": "dataUsingEncoding:(${1:NSStringEncoding encoding})" },  
    { "trigger": "dataUsingEncoding:allowLossyConversion:", "contents": "dataUsingEncoding:allowLossyConversion:(${1:NSStringEncoding encoding}, allowLossyConversion:${2:BOOL lossy})" },  
    { "trigger": "dataValue" },  
    { "trigger": "date" },  
    { "trigger": "date" },  
    { "trigger": "date" },  
    { "trigger": "date" },  
    { "trigger": "date" },  
    { "trigger": "date" },  
    { "trigger": "date" },  
    { "trigger": "dateByAddingComponents:toDate:options:", "contents": "dateByAddingComponents:toDate:options:(${1:NSDateComponents* comps}, toDate:${2:NSDate* date}, options:${3:NSUInteger opts})" },  
    { "trigger": "dateByAddingTimeInterval:", "contents": "dateByAddingTimeInterval:(${1:NSTimeInterval ti})" },  
    { "trigger": "dateFormat" },  
    { "trigger": "dateFromComponents:", "contents": "dateFromComponents:(${1:NSDateComponents* comps})" },  
    { "trigger": "dateFromString:", "contents": "dateFromString:(${1:NSString* string})" },  
    { "trigger": "datePickerMode" },  
    { "trigger": "dateStyle" },  
    { "trigger": "dateValue" },  
    { "trigger": "day" },  
    { "trigger": "dayOfTheWeek" },  
    { "trigger": "daylightSavingTimeOffset" },  
    { "trigger": "daylightSavingTimeOffsetForDate:", "contents": "daylightSavingTimeOffsetForDate:(${1:NSDate* aDate})" },  
    { "trigger": "daysOfTheMonth" },  
    { "trigger": "daysOfTheWeek" },  
    { "trigger": "daysOfTheYear" },  
    { "trigger": "dealloc" },  
    { "trigger": "dealloc" },  
    { "trigger": "debugDescription" },  
    { "trigger": "debugDescription" },  
    { "trigger": "debugDescription" },  
    { "trigger": "decelerationRate" },  
    { "trigger": "decimalNumberByAdding:", "contents": "decimalNumberByAdding:(${1:NSDecimalNumber* decimalNumber})" },  
    { "trigger": "decimalNumberByAdding:withBehavior:", "contents": "decimalNumberByAdding:withBehavior:(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})" },  
    { "trigger": "decimalNumberByDividingBy:", "contents": "decimalNumberByDividingBy:(${1:NSDecimalNumber* decimalNumber})" },  
    { "trigger": "decimalNumberByDividingBy:withBehavior:", "contents": "decimalNumberByDividingBy:withBehavior:(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})" },  
    { "trigger": "decimalNumberByMultiplyingBy:", "contents": "decimalNumberByMultiplyingBy:(${1:NSDecimalNumber* decimalNumber})" },  
    { "trigger": "decimalNumberByMultiplyingByPowerOf10:", "contents": "decimalNumberByMultiplyingByPowerOf10:(${1:short power})" },  
    { "trigger": "decimalNumberByMultiplyingByPowerOf10:withBehavior:", "contents": "decimalNumberByMultiplyingByPowerOf10:withBehavior:(${1:short power}, withBehavior:${2:id behavior})" },  
    { "trigger": "decimalNumberByMultiplyingBy:withBehavior:", "contents": "decimalNumberByMultiplyingBy:withBehavior:(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})" },  
    { "trigger": "decimalNumberByRaisingToPower:", "contents": "decimalNumberByRaisingToPower:(${1:NSUInteger power})" },  
    { "trigger": "decimalNumberByRaisingToPower:withBehavior:", "contents": "decimalNumberByRaisingToPower:withBehavior:(${1:NSUInteger power}, withBehavior:${2:id behavior})" },  
    { "trigger": "decimalNumberByRoundingAccordingToBehavior:", "contents": "decimalNumberByRoundingAccordingToBehavior:(${1:id behavior})" },  
    { "trigger": "decimalNumberBySubtracting:", "contents": "decimalNumberBySubtracting:(${1:NSDecimalNumber* decimalNumber})" },  
    { "trigger": "decimalNumberBySubtracting:withBehavior:", "contents": "decimalNumberBySubtracting:withBehavior:(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})" },  
    { "trigger": "decimalSeparator" },  
    { "trigger": "decimalValue" },  
    { "trigger": "decimalValue" },  
    { "trigger": "decodeArrayOfObjCType:count:at:", "contents": "decodeArrayOfObjCType:count:at:(${1:char* itemType}, count:${2:NSUInteger count}, at:${3:void* array})" },  
    { "trigger": "decodeBoolForKey:", "contents": "decodeBoolForKey:(${1:NSString* key})" },  
    { "trigger": "decodeBoolForKey:", "contents": "decodeBoolForKey:(${1:NSString* key})" },  
    { "trigger": "decodeBytesForKey:returnedLength:", "contents": "decodeBytesForKey:returnedLength:(${1:NSString* key}, returnedLength:${2:NSUInteger* lengthp})" },  
    { "trigger": "decodeBytesForKey:returnedLength:", "contents": "decodeBytesForKey:returnedLength:(${1:NSString* key}, returnedLength:${2:NSUInteger* lengthp})" },  
    { "trigger": "decodeBytesWithReturnedLength:", "contents": "decodeBytesWithReturnedLength:(${1:NSUInteger* lengthp})" },  
    { "trigger": "decodeCGAffineTransformForKey:", "contents": "decodeCGAffineTransformForKey:(${1:NSString* key})" },  
    { "trigger": "decodeCGPointForKey:", "contents": "decodeCGPointForKey:(${1:NSString* key})" },  
    { "trigger": "decodeCGRectForKey:", "contents": "decodeCGRectForKey:(${1:NSString* key})" },  
    { "trigger": "decodeCGSizeForKey:", "contents": "decodeCGSizeForKey:(${1:NSString* key})" },  
    { "trigger": "decodeCMTimeForKey:", "contents": "decodeCMTimeForKey:(${1:NSString* key})" },  
    { "trigger": "decodeCMTimeMappingForKey:", "contents": "decodeCMTimeMappingForKey:(${1:NSString* key})" },  
    { "trigger": "decodeCMTimeRangeForKey:", "contents": "decodeCMTimeRangeForKey:(${1:NSString* key})" },  
    { "trigger": "decodeDataObject" },  
    { "trigger": "decodeDoubleForKey:", "contents": "decodeDoubleForKey:(${1:NSString* key})" },  
    { "trigger": "decodeDoubleForKey:", "contents": "decodeDoubleForKey:(${1:NSString* key})" },  
    { "trigger": "decodeFloatForKey:", "contents": "decodeFloatForKey:(${1:NSString* key})" },  
    { "trigger": "decodeFloatForKey:", "contents": "decodeFloatForKey:(${1:NSString* key})" },  
    { "trigger": "decodeInt32ForKey:", "contents": "decodeInt32ForKey:(${1:NSString* key})" },  
    { "trigger": "decodeInt32ForKey:", "contents": "decodeInt32ForKey:(${1:NSString* key})" },  
    { "trigger": "decodeInt64ForKey:", "contents": "decodeInt64ForKey:(${1:NSString* key})" },  
    { "trigger": "decodeInt64ForKey:", "contents": "decodeInt64ForKey:(${1:NSString* key})" },  
    { "trigger": "decodeIntForKey:", "contents": "decodeIntForKey:(${1:NSString* key})" },  
    { "trigger": "decodeIntForKey:", "contents": "decodeIntForKey:(${1:NSString* key})" },  
    { "trigger": "decodeIntegerForKey:", "contents": "decodeIntegerForKey:(${1:NSString* key})" },  
    { "trigger": "decodeObject" },  
    { "trigger": "decodeObjectForKey:", "contents": "decodeObjectForKey:(${1:NSString* key})" },  
    { "trigger": "decodeObjectForKey:", "contents": "decodeObjectForKey:(${1:NSString* key})" },  
    { "trigger": "decodeUIEdgeInsetsForKey:", "contents": "decodeUIEdgeInsetsForKey:(${1:NSString* key})" },  
    { "trigger": "decodeUIOffsetForKey:", "contents": "decodeUIOffsetForKey:(${1:NSString* key})" },  
    { "trigger": "decodeValueOfObjCType:at:", "contents": "decodeValueOfObjCType:at:(${1:char* type}, at:${2:void* data})" },  
    { "trigger": "decodeValuesOfObjCTypes:", "contents": "decodeValuesOfObjCTypes:(${1:char* types})" },  
    { "trigger": "decomposedStringWithCanonicalMapping" },  
    { "trigger": "decomposedStringWithCompatibilityMapping" },  
    { "trigger": "defaultCalendarForNewEvents" },  
    { "trigger": "defaultCredentialForProtectionSpace:", "contents": "defaultCredentialForProtectionSpace:(${1:NSURLProtectionSpace* space})" },  
    { "trigger": "defaultDate" },  
    { "trigger": "defaultInvitationMessage" },  
    { "trigger": "defaultRepresentation" },  
    { "trigger": "defaultValue" },  
    { "trigger": "defersCurrentPageDisplay" },  
    { "trigger": "definesPresentationContext" },  
    { "trigger": "delaysContentTouches" },  
    { "trigger": "delaysTouchesBegan" },  
    { "trigger": "delaysTouchesEnded" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delegate" },  
    { "trigger": "delete:", "contents": "delete:(${1:id sender})" },  
    { "trigger": "delete:", "contents": "delete:(${1:id sender})" },  
    { "trigger": "deleteBackward" },  
    { "trigger": "deleteBackward" },  
    { "trigger": "deleteCharactersInRange:", "contents": "deleteCharactersInRange:(${1:NSRange range})" },  
    { "trigger": "deleteCharactersInRange:", "contents": "deleteCharactersInRange:(${1:NSRange range})" },  
    { "trigger": "deleteCookie:", "contents": "deleteCookie:(${1:NSHTTPCookie* cookie})" },  
    { "trigger": "deleteDrawable" },  
    { "trigger": "deleteObject:", "contents": "deleteObject:(${1:NSManagedObject* object})" },  
    { "trigger": "deleteRecording" },  
    { "trigger": "deleteRowsAtIndexPaths:withRowAnimation:", "contents": "deleteRowsAtIndexPaths:withRowAnimation:(${1:NSArray* indexPaths}, withRowAnimation:${2:UITableViewRowAnimation animation})" },  
    { "trigger": "deleteRule" },  
    { "trigger": "deleteSections:withRowAnimation:", "contents": "deleteSections:withRowAnimation:(${1:NSIndexSet* sections}, withRowAnimation:${2:UITableViewRowAnimation animation})" },  
    { "trigger": "deletedObjects" },  
    { "trigger": "deletedObjects" },  
    { "trigger": "density" },  
    { "trigger": "denyCallID:", "contents": "denyCallID:(${1:NSInteger callID})" },  
    { "trigger": "denyConnectionFromPeer:", "contents": "denyConnectionFromPeer:(${1:NSString* peerID})" },  
    { "trigger": "dependencies" },  
    { "trigger": "dequeueNotificationsMatching:coalesceMask:", "contents": "dequeueNotificationsMatching:coalesceMask:(${1:NSNotification* notification}, coalesceMask:${2:NSUInteger coalesceMask})" },  
    { "trigger": "dequeueReusableAnnotationViewWithIdentifier:", "contents": "dequeueReusableAnnotationViewWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "dequeueReusableCellWithIdentifier:", "contents": "dequeueReusableCellWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "descender" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "description" },  
    { "trigger": "descriptionInStringsFileFormat" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:", "contents": "descriptionWithLocale:(${1:id locale})" },  
    { "trigger": "descriptionWithLocale:indent:", "contents": "descriptionWithLocale:indent:(${1:id locale}, indent:${2:NSUInteger level})" },  
    { "trigger": "descriptionWithLocale:indent:", "contents": "descriptionWithLocale:indent:(${1:id locale}, indent:${2:NSUInteger level})" },  
    { "trigger": "descriptionWithLocale:indent:", "contents": "descriptionWithLocale:indent:(${1:id locale}, indent:${2:NSUInteger level})" },  
    { "trigger": "descriptors" },  
    { "trigger": "deselectAnnotation:animated:", "contents": "deselectAnnotation:animated:(${1:id annotation}, animated:${2:BOOL animated})" },  
    { "trigger": "deselectRowAtIndexPath:animated:", "contents": "deselectRowAtIndexPath:animated:(${1:NSIndexPath* indexPath}, animated:${2:BOOL animated})" },  
    { "trigger": "desiredAccuracy" },  
    { "trigger": "destinationContext" },  
    { "trigger": "destinationEndpoint" },  
    { "trigger": "destinationEntity" },  
    { "trigger": "destinationEntityForEntityMapping:", "contents": "destinationEntityForEntityMapping:(${1:NSEntityMapping* mEntity})" },  
    { "trigger": "destinationEntityName" },  
    { "trigger": "destinationEntityVersionHash" },  
    { "trigger": "destinationInstancesForEntityMappingNamed:sourceInstances:", "contents": "destinationInstancesForEntityMappingNamed:sourceInstances:(${1:NSString* mappingName}, sourceInstances:${2:NSArray* sourceInstances})" },  
    { "trigger": "destinationModel" },  
    { "trigger": "destinationOfSymbolicLinkAtPath:error:", "contents": "destinationOfSymbolicLinkAtPath:error:(${1:NSString* path}, error:${2:NSError** error})" },  
    { "trigger": "destinationViewController" },  
    { "trigger": "destructiveButtonIndex" },  
    { "trigger": "detailTextLabel" },  
    { "trigger": "detectConflictsForObject:", "contents": "detectConflictsForObject:(${1:NSManagedObject* object})" },  
    { "trigger": "detectsPhoneNumbers" },  
    { "trigger": "developmentLocalization" },  
    { "trigger": "device" },  
    { "trigger": "deviceCurrentTime" },  
    { "trigger": "deviceMotion" },  
    { "trigger": "deviceMotionUpdateInterval" },  
    { "trigger": "dictationRecognitionFailed" },  
    { "trigger": "dictationRecognitionFailed" },  
    { "trigger": "dictationRecordingDidEnd" },  
    { "trigger": "dictationRecordingDidEnd" },  
    { "trigger": "dictionaryForKey:", "contents": "dictionaryForKey:(${1:NSString* aKey})" },  
    { "trigger": "dictionaryForKey:", "contents": "dictionaryForKey:(${1:NSString* defaultName})" },  
    { "trigger": "dictionaryRepresentation" },  
    { "trigger": "dictionaryRepresentation" },  
    { "trigger": "dictionaryRepresentation" },  
    { "trigger": "dictionaryWithValuesForKeys:", "contents": "dictionaryWithValuesForKeys:(${1:NSArray* keys})" },  
    { "trigger": "dictionaryWithValuesForKeys:", "contents": "dictionaryWithValuesForKeys:(${1:NSArray* keys})" },  
    { "trigger": "didAccessValueForKey:", "contents": "didAccessValueForKey:(${1:NSString* key})" },  
    { "trigger": "didAddSubview:", "contents": "didAddSubview:(${1:UIView* subview})" },  
    { "trigger": "didAddToPersistentStoreCoordinator:", "contents": "didAddToPersistentStoreCoordinator:(${1:NSPersistentStoreCoordinator* coordinator})" },  
    { "trigger": "didAnimateFirstHalfOfRotationToInterfaceOrientation:", "contents": "didAnimateFirstHalfOfRotationToInterfaceOrientation:(${1:UIInterfaceOrientation toInterfaceOrientation})" },  
    { "trigger": "didChangeValueForKey:", "contents": "didChangeValueForKey:(${1:NSString* key})" },  
    { "trigger": "didChangeValueForKey:", "contents": "didChangeValueForKey:(${1:NSString* key})" },  
    { "trigger": "didChangeValueForKey:", "contents": "didChangeValueForKey:(${1:NSString* key})" },  
    { "trigger": "didChangeValueForKey:withSetMutation:usingObjects:", "contents": "didChangeValueForKey:withSetMutation:usingObjects:(${1:NSString* key}, withSetMutation:${2:NSKeyValueSetMutationKind mutationKind}, usingObjects:${3:NSSet* objects})" },  
    { "trigger": "didChangeValueForKey:withSetMutation:usingObjects:", "contents": "didChangeValueForKey:withSetMutation:usingObjects:(${1:NSString* key}, withSetMutation:${2:NSKeyValueSetMutationKind mutationKind}, usingObjects:${3:NSSet* objects})" },  
    { "trigger": "didChangeValueForKey:withSetMutation:usingObjects:", "contents": "didChangeValueForKey:withSetMutation:usingObjects:(${1:NSString* inKey}, withSetMutation:${2:NSKeyValueSetMutationKind inMutationKind}, usingObjects:${3:NSSet* inObjects})" },  
    { "trigger": "didChange:valuesAtIndexes:forKey:", "contents": "didChange:valuesAtIndexes:forKey:(${1:NSKeyValueChange changeKind}, valuesAtIndexes:${2:NSIndexSet* indexes}, forKey:${3:NSString* key})" },  
    { "trigger": "didChange:valuesAtIndexes:forKey:", "contents": "didChange:valuesAtIndexes:forKey:(${1:NSKeyValueChange changeKind}, valuesAtIndexes:${2:NSIndexSet* indexes}, forKey:${3:NSString* key})" },  
    { "trigger": "didMoveToParentViewController:", "contents": "didMoveToParentViewController:(${1:UIViewController* parent})" },  
    { "trigger": "didMoveToSuperview" },  
    { "trigger": "didMoveToWindow" },  
    { "trigger": "didPresentActionSheet:", "contents": "didPresentActionSheet:(${1:UIActionSheet* actionSheet})" },  
    { "trigger": "didPresentActionSheet:", "contents": "didPresentActionSheet:(${1:UIActionSheet* actionSheet})" },  
    { "trigger": "didPresentAlertView:", "contents": "didPresentAlertView:(${1:UIAlertView* alertView})" },  
    { "trigger": "didPresentAlertView:", "contents": "didPresentAlertView:(${1:UIAlertView* alertView})" },  
    { "trigger": "didReceiveMemoryWarning" },  
    { "trigger": "didRotateFromInterfaceOrientation:", "contents": "didRotateFromInterfaceOrientation:(${1:UIInterfaceOrientation fromInterfaceOrientation})" },  
    { "trigger": "didSave" },  
    { "trigger": "didTransitionToState:", "contents": "didTransitionToState:(${1:UITableViewCellStateMask state})" },  
    { "trigger": "didTurnIntoFault" },  
    { "trigger": "diffuseColor" },  
    { "trigger": "diffuseColor" },  
    { "trigger": "dimensions" },  
    { "trigger": "direction" },  
    { "trigger": "directoryAttributes" },  
    { "trigger": "directoryContentsAtPath:", "contents": "directoryContentsAtPath:(${1:NSString* path})" },  
    { "trigger": "disableEditing" },  
    { "trigger": "disableUndoRegistration" },  
    { "trigger": "disableUpdates" },  
    { "trigger": "disabledBackground" },  
    { "trigger": "disablesAutomaticKeyboardDismissal" },  
    { "trigger": "discardContentIfPossible" },  
    { "trigger": "discardContentIfPossible" },  
    { "trigger": "disconnect" },  
    { "trigger": "disconnectFromAllPeers" },  
    { "trigger": "disconnectPeerFromAllPeers:", "contents": "disconnectPeerFromAllPeers:(${1:NSString* peerID})" },  
    { "trigger": "disconnectTimeout" },  
    { "trigger": "discoverCharacteristics:forService:", "contents": "discoverCharacteristics:forService:(${1:NSArray* characteristicUUIDs}, forService:${2:CBService* service})" },  
    { "trigger": "discoverDescriptorsForCharacteristic:", "contents": "discoverDescriptorsForCharacteristic:(${1:CBCharacteristic* characteristic})" },  
    { "trigger": "discoverIncludedServices:forService:", "contents": "discoverIncludedServices:forService:(${1:NSArray* includedServiceUUIDs}, forService:${2:CBService* service})" },  
    { "trigger": "discoverServices:", "contents": "discoverServices:(${1:NSArray* serviceUUIDs})" },  
    { "trigger": "diskCapacity" },  
    { "trigger": "dismiss" },  
    { "trigger": "dismissAnimated:", "contents": "dismissAnimated:(${1:BOOL animated})" },  
    { "trigger": "dismissHeadingCalibrationDisplay" },  
    { "trigger": "dismissMenuAnimated:", "contents": "dismissMenuAnimated:(${1:BOOL animated})" },  
    { "trigger": "dismissModalViewControllerAnimated:", "contents": "dismissModalViewControllerAnimated:(${1:BOOL animated})" },  
    { "trigger": "dismissMoviePlayerViewControllerAnimated" },  
    { "trigger": "dismissPopoverAnimated:", "contents": "dismissPopoverAnimated:(${1:BOOL animated})" },  
    { "trigger": "dismissPreviewAnimated:", "contents": "dismissPreviewAnimated:(${1:BOOL animated})" },  
    { "trigger": "dismissViewControllerAnimated:completion:", "contents": "dismissViewControllerAnimated:completion:(${1:BOOL flag}, completion:${2:void (^)(void) completion})" },  
    { "trigger": "dismissWithClickedButtonIndex:animated:", "contents": "dismissWithClickedButtonIndex:animated:(${1:NSInteger buttonIndex}, animated:${2:BOOL animated})" },  
    { "trigger": "dismissWithClickedButtonIndex:animated:", "contents": "dismissWithClickedButtonIndex:animated:(${1:NSInteger buttonIndex}, animated:${2:BOOL animated})" },  
    { "trigger": "dispatch_object" },  
    { "trigger": "trigger" },  
    { "trigger": "trigger" },  
    { "trigger": "displayIfNeeded" },  
    { "trigger": "displayLayer:", "contents": "displayLayer:(${1:CALayer* layer})" },  
    { "trigger": "displayLayer:", "contents": "displayLayer:(${1:CALayer* layer})" },  
    { "trigger": "displayLinkWithTarget:selector:", "contents": "displayLinkWithTarget:selector:(${1:id target}, selector:${2:SEL sel})" },  
    { "trigger": "displayName" },  
    { "trigger": "displayNameAtPath:", "contents": "displayNameAtPath:(${1:NSString* path})" },  
    { "trigger": "displayNameForKey:value:", "contents": "displayNameForKey:value:(${1:id key}, value:${2:id value})" },  
    { "trigger": "displayNameForPeer:", "contents": "displayNameForPeer:(${1:NSString* peerID})" },  
    { "trigger": "displayedPerson" },  
    { "trigger": "displayedPerson" },  
    { "trigger": "displayedPerson" },  
    { "trigger": "displayedProperties" },  
    { "trigger": "displayedProperties" },  
    { "trigger": "distanceFilter" },  
    { "trigger": "distanceFromLocation:", "contents": "distanceFromLocation:(${1:CLLocation* location})" },  
    { "trigger": "distinguishedNames" },  
    { "trigger": "dividerImageForLeftSegmentState:rightSegmentState:barMetrics:", "contents": "dividerImageForLeftSegmentState:rightSegmentState:barMetrics:(${1:UIControlState leftState}, rightSegmentState:${2:UIControlState rightState}, barMetrics:${3:UIBarMetrics barMetrics})" },  
    { "trigger": "documentInteractionControllerDidDismissOpenInMenu:", "contents": "documentInteractionControllerDidDismissOpenInMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerDidDismissOpenInMenu:", "contents": "documentInteractionControllerDidDismissOpenInMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerDidDismissOptionsMenu:", "contents": "documentInteractionControllerDidDismissOptionsMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerDidDismissOptionsMenu:", "contents": "documentInteractionControllerDidDismissOptionsMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerDidEndPreview:", "contents": "documentInteractionControllerDidEndPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerDidEndPreview:", "contents": "documentInteractionControllerDidEndPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerRectForPreview:", "contents": "documentInteractionControllerRectForPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerRectForPreview:", "contents": "documentInteractionControllerRectForPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerViewControllerForPreview:", "contents": "documentInteractionControllerViewControllerForPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerViewControllerForPreview:", "contents": "documentInteractionControllerViewControllerForPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerViewForPreview:", "contents": "documentInteractionControllerViewForPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerViewForPreview:", "contents": "documentInteractionControllerViewForPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerWillBeginPreview:", "contents": "documentInteractionControllerWillBeginPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerWillBeginPreview:", "contents": "documentInteractionControllerWillBeginPreview:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerWillPresentOpenInMenu:", "contents": "documentInteractionControllerWillPresentOpenInMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerWillPresentOpenInMenu:", "contents": "documentInteractionControllerWillPresentOpenInMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerWillPresentOptionsMenu:", "contents": "documentInteractionControllerWillPresentOptionsMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionControllerWillPresentOptionsMenu:", "contents": "documentInteractionControllerWillPresentOptionsMenu:(${1:UIDocumentInteractionController* controller})" },  
    { "trigger": "documentInteractionController:canPerformAction:", "contents": "documentInteractionController:canPerformAction:(${1:UIDocumentInteractionController* controller}, canPerformAction:${2:SEL action})" },  
    { "trigger": "documentInteractionController:canPerformAction:", "contents": "documentInteractionController:canPerformAction:(${1:UIDocumentInteractionController* controller}, canPerformAction:${2:SEL action})" },  
    { "trigger": "documentInteractionController:didEndSendingToApplication:", "contents": "documentInteractionController:didEndSendingToApplication:(${1:UIDocumentInteractionController* controller}, didEndSendingToApplication:${2:NSString* application})" },  
    { "trigger": "documentInteractionController:didEndSendingToApplication:", "contents": "documentInteractionController:didEndSendingToApplication:(${1:UIDocumentInteractionController* controller}, didEndSendingToApplication:${2:NSString* application})" },  
    { "trigger": "documentInteractionController:performAction:", "contents": "documentInteractionController:performAction:(${1:UIDocumentInteractionController* controller}, performAction:${2:SEL action})" },  
    { "trigger": "documentInteractionController:performAction:", "contents": "documentInteractionController:performAction:(${1:UIDocumentInteractionController* controller}, performAction:${2:SEL action})" },  
    { "trigger": "documentInteractionController:willBeginSendingToApplication:", "contents": "documentInteractionController:willBeginSendingToApplication:(${1:UIDocumentInteractionController* controller}, willBeginSendingToApplication:${2:NSString* application})" },  
    { "trigger": "documentInteractionController:willBeginSendingToApplication:", "contents": "documentInteractionController:willBeginSendingToApplication:(${1:UIDocumentInteractionController* controller}, willBeginSendingToApplication:${2:NSString* application})" },  
    { "trigger": "documentState" },  
    { "trigger": "doesNotRecognizeSelector:", "contents": "doesNotRecognizeSelector:(${1:SEL aSelector})" },  
    { "trigger": "doesRelativeDateFormatting" },  
    { "trigger": "domain" },  
    { "trigger": "domain" },  
    { "trigger": "domain" },  
    { "trigger": "dominantLanguage" },  
    { "trigger": "dominantLanguageForScript:", "contents": "dominantLanguageForScript:(${1:NSString* script})" },  
    { "trigger": "dominantScript" },  
    { "trigger": "doubleForKey:", "contents": "doubleForKey:(${1:NSString* defaultName})" },  
    { "trigger": "doubleForKey:", "contents": "doubleForKey:(${1:NSString* aKey})" },  
    { "trigger": "doubleValue" },  
    { "trigger": "doubleValue" },  
    { "trigger": "doubleValue" },  
    { "trigger": "downloadWithDelegate:", "contents": "downloadWithDelegate:(${1:id delegate})" },  
    { "trigger": "downloadingAssets" },  
    { "trigger": "downloadingAssets" },  
    { "trigger": "dragState" },  
    { "trigger": "drain" },  
    { "trigger": "draw" },  
    { "trigger": "drawAsPatternInRect:", "contents": "drawAsPatternInRect:(${1:CGRect rect})" },  
    { "trigger": "drawAtPoint:", "contents": "drawAtPoint:(${1:CGPoint point})" },  
    { "trigger": "drawAtPoint:blendMode:alpha:", "contents": "drawAtPoint:blendMode:alpha:(${1:CGPoint point}, blendMode:${2:CGBlendMode blendMode}, alpha:${3:CGFloat alpha})" },  
    { "trigger": "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:", "contents": "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:(${1:CGPoint point}, forWidth:${2:CGFloat width}, withFont:${3:UIFont* font}, fontSize:${4:CGFloat fontSize}, lineBreakMode:${5:UILineBreakMode lineBreakMode}, baselineAdjustment:${6:UIBaselineAdjustment baselineAdjustment})" },  
    { "trigger": "drawAtPoint:forWidth:withFont:lineBreakMode:", "contents": "drawAtPoint:forWidth:withFont:lineBreakMode:(${1:CGPoint point}, forWidth:${2:CGFloat width}, withFont:${3:UIFont* font}, lineBreakMode:${4:UILineBreakMode lineBreakMode})" },  
    { "trigger": "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:", "contents": "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:(${1:CGPoint point}, forWidth:${2:CGFloat width}, withFont:${3:UIFont* font}, minFontSize:${4:CGFloat minFontSize}, actualFontSize:${5:CGFloat* actualFontSize}, lineBreakMode:${6:UILineBreakMode lineBreakMode}, baselineAdjustment:${7:UIBaselineAdjustment baselineAdjustment})" },  
    { "trigger": "drawAtPoint:withFont:", "contents": "drawAtPoint:withFont:(${1:CGPoint point}, withFont:${2:UIFont* font})" },  
    { "trigger": "drawContentForPageAtIndex:inRect:", "contents": "drawContentForPageAtIndex:inRect:(${1:NSInteger pageIndex}, inRect:${2:CGRect contentRect})" },  
    { "trigger": "drawFooterForPageAtIndex:inRect:", "contents": "drawFooterForPageAtIndex:inRect:(${1:NSInteger pageIndex}, inRect:${2:CGRect footerRect})" },  
    { "trigger": "drawHeaderForPageAtIndex:inRect:", "contents": "drawHeaderForPageAtIndex:inRect:(${1:NSInteger pageIndex}, inRect:${2:CGRect headerRect})" },  
    { "trigger": "drawImage:atPoint:fromRect:", "contents": "drawImage:atPoint:fromRect:(${1:CIImage* im}, atPoint:${2:CGPoint p}, fromRect:${3:CGRect src})" },  
    { "trigger": "drawImage:inRect:fromRect:", "contents": "drawImage:inRect:fromRect:(${1:CIImage* im}, inRect:${2:CGRect dest}, fromRect:${3:CGRect src})" },  
    { "trigger": "drawInContext:", "contents": "drawInContext:(${1:CGContextRef ctx})" },  
    { "trigger": "drawInRect:", "contents": "drawInRect:(${1:CGRect rect})" },  
    { "trigger": "drawInRect:blendMode:alpha:", "contents": "drawInRect:blendMode:alpha:(${1:CGRect rect}, blendMode:${2:CGBlendMode blendMode}, alpha:${3:CGFloat alpha})" },  
    { "trigger": "drawInRect:forPageAtIndex:", "contents": "drawInRect:forPageAtIndex:(${1:CGRect rect}, forPageAtIndex:${2:NSInteger pageIndex})" },  
    { "trigger": "drawInRect:withFont:", "contents": "drawInRect:withFont:(${1:CGRect rect}, withFont:${2:UIFont* font})" },  
    { "trigger": "drawInRect:withFont:lineBreakMode:", "contents": "drawInRect:withFont:lineBreakMode:(${1:CGRect rect}, withFont:${2:UIFont* font}, lineBreakMode:${3:UILineBreakMode lineBreakMode})" },  
    { "trigger": "drawInRect:withFont:lineBreakMode:alignment:", "contents": "drawInRect:withFont:lineBreakMode:alignment:(${1:CGRect rect}, withFont:${2:UIFont* font}, lineBreakMode:${3:UILineBreakMode lineBreakMode}, alignment:${4:UITextAlignment alignment})" },  
    { "trigger": "drawLayer:inContext:", "contents": "drawLayer:inContext:(${1:CALayer* layer}, inContext:${2:CGContextRef ctx})" },  
    { "trigger": "drawLayer:inContext:", "contents": "drawLayer:inContext:(${1:CALayer* layer}, inContext:${2:CGContextRef ctx})" },  
    { "trigger": "drawMapRect:zoomScale:inContext:", "contents": "drawMapRect:zoomScale:inContext:(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale}, inContext:${3:CGContextRef context})" },  
    { "trigger": "drawPageAtIndex:inRect:", "contents": "drawPageAtIndex:inRect:(${1:NSInteger pageIndex}, inRect:${2:CGRect printableRect})" },  
    { "trigger": "drawPlaceholderInRect:", "contents": "drawPlaceholderInRect:(${1:CGRect rect})" },  
    { "trigger": "drawPrintFormatter:forPageAtIndex:", "contents": "drawPrintFormatter:forPageAtIndex:(${1:UIPrintFormatter* printFormatter}, forPageAtIndex:${2:NSInteger pageIndex})" },  
    { "trigger": "drawRect:", "contents": "drawRect:(${1:CGRect rect})" },  
    { "trigger": "drawRect:forViewPrintFormatter:", "contents": "drawRect:forViewPrintFormatter:(${1:CGRect rect}, forViewPrintFormatter:${2:UIViewPrintFormatter* formatter})" },  
    { "trigger": "drawTextInRect:", "contents": "drawTextInRect:(${1:CGRect rect})" },  
    { "trigger": "drawTextInRect:", "contents": "drawTextInRect:(${1:CGRect rect})" },  
    { "trigger": "drawableColorFormat" },  
    { "trigger": "drawableDepthFormat" },  
    { "trigger": "drawableHeight" },  
    { "trigger": "drawableMultisample" },  
    { "trigger": "drawableProperties" },  
    { "trigger": "drawableProperties" },  
    { "trigger": "drawableStencilFormat" },  
    { "trigger": "drawableWidth" },  
    { "trigger": "duplex" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "duration" },  
    { "trigger": "durationWatched" },  
    { "trigger": "durationWatched" },  
    { "trigger": "earlierDate:", "contents": "earlierDate:(${1:NSDate* anotherDate})" },  
    { "trigger": "edgeAntialiasingMask" },  
    { "trigger": "editAction" },  
    { "trigger": "editButtonItem" },  
    { "trigger": "editViewDelegate" },  
    { "trigger": "editingAccessoryType" },  
    { "trigger": "editingAccessoryView" },  
    { "trigger": "editingRectForBounds:", "contents": "editingRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "editingStringForObjectValue:", "contents": "editingStringForObjectValue:(${1:id obj})" },  
    { "trigger": "editingStyle" },  
    { "trigger": "emissionLatitude" },  
    { "trigger": "emissionLongitude" },  
    { "trigger": "emissionRange" },  
    { "trigger": "emissiveColor" },  
    { "trigger": "emitterCells" },  
    { "trigger": "emitterCells" },  
    { "trigger": "emitterDepth" },  
    { "trigger": "emitterMode" },  
    { "trigger": "emitterPosition" },  
    { "trigger": "emitterShape" },  
    { "trigger": "emitterSize" },  
    { "trigger": "emitterZPosition" },  
    { "trigger": "enableEditing" },  
    { "trigger": "enableInputClicksWhenVisible" },  
    { "trigger": "enableInputClicksWhenVisible" },  
    { "trigger": "enablePostProcessing" },  
    { "trigger": "enablePostProcessing" },  
    { "trigger": "enableRate" },  
    { "trigger": "enableSetNeedsDisplay" },  
    { "trigger": "enableUndoRegistration" },  
    { "trigger": "enableUpdates" },  
    { "trigger": "enabled" },  
    { "trigger": "enabled" },  
    { "trigger": "enabled" },  
    { "trigger": "enabledRemoteNotificationTypes" },  
    { "trigger": "enablesReturnKeyAutomatically" },  
    { "trigger": "enablesReturnKeyAutomatically" },  
    { "trigger": "encodeArrayOfObjCType:count:at:", "contents": "encodeArrayOfObjCType:count:at:(${1:char* type}, count:${2:NSUInteger count}, at:${3:void* array})" },  
    { "trigger": "encodeBool:forKey:", "contents": "encodeBool:forKey:(${1:BOOL boolv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeBool:forKey:", "contents": "encodeBool:forKey:(${1:BOOL boolv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeBycopyObject:", "contents": "encodeBycopyObject:(${1:id anObject})" },  
    { "trigger": "encodeByrefObject:", "contents": "encodeByrefObject:(${1:id anObject})" },  
    { "trigger": "encodeBytes:length:", "contents": "encodeBytes:length:(${1:void* byteaddr}, length:${2:NSUInteger length})" },  
    { "trigger": "encodeBytes:length:forKey:", "contents": "encodeBytes:length:forKey:(${1:uint8_t* bytesp}, length:${2:NSUInteger lenv}, forKey:${3:NSString* key})" },  
    { "trigger": "encodeBytes:length:forKey:", "contents": "encodeBytes:length:forKey:(${1:uint8_t* bytesp}, length:${2:NSUInteger lenv}, forKey:${3:NSString* key})" },  
    { "trigger": "encodeCGAffineTransform:forKey:", "contents": "encodeCGAffineTransform:forKey:(${1:CGAffineTransform transform}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeCGPoint:forKey:", "contents": "encodeCGPoint:forKey:(${1:CGPoint point}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeCGRect:forKey:", "contents": "encodeCGRect:forKey:(${1:CGRect rect}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeCGSize:forKey:", "contents": "encodeCGSize:forKey:(${1:CGSize size}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeCMTimeMapping:forKey:", "contents": "encodeCMTimeMapping:forKey:(${1:CMTimeMapping timeMapping}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeCMTimeRange:forKey:", "contents": "encodeCMTimeRange:forKey:(${1:CMTimeRange timeRange}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeCMTime:forKey:", "contents": "encodeCMTime:forKey:(${1:CMTime time}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeConditionalObject:", "contents": "encodeConditionalObject:(${1:id object})" },  
    { "trigger": "encodeConditionalObject:forKey:", "contents": "encodeConditionalObject:forKey:(${1:id objv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeConditionalObject:forKey:", "contents": "encodeConditionalObject:forKey:(${1:id objv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeDataObject:", "contents": "encodeDataObject:(${1:NSData* data})" },  
    { "trigger": "encodeDouble:forKey:", "contents": "encodeDouble:forKey:(${1:double realv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeDouble:forKey:", "contents": "encodeDouble:forKey:(${1:double realv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeFloat:forKey:", "contents": "encodeFloat:forKey:(${1:float realv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeFloat:forKey:", "contents": "encodeFloat:forKey:(${1:float realv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInt32:forKey:", "contents": "encodeInt32:forKey:(${1:int32_t intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInt32:forKey:", "contents": "encodeInt32:forKey:(${1:int32_t intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInt64:forKey:", "contents": "encodeInt64:forKey:(${1:int64_t intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInt64:forKey:", "contents": "encodeInt64:forKey:(${1:int64_t intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInteger:forKey:", "contents": "encodeInteger:forKey:(${1:NSInteger intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInt:forKey:", "contents": "encodeInt:forKey:(${1:int intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeInt:forKey:", "contents": "encodeInt:forKey:(${1:int intv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeObject:", "contents": "encodeObject:(${1:id object})" },  
    { "trigger": "encodeObject:forKey:", "contents": "encodeObject:forKey:(${1:id objv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeObject:forKey:", "contents": "encodeObject:forKey:(${1:id objv}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeRootObject:", "contents": "encodeRootObject:(${1:id rootObject})" },  
    { "trigger": "encodeUIEdgeInsets:forKey:", "contents": "encodeUIEdgeInsets:forKey:(${1:UIEdgeInsets insets}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeUIOffset:forKey:", "contents": "encodeUIOffset:forKey:(${1:UIOffset offset}, forKey:${2:NSString* key})" },  
    { "trigger": "encodeValueOfObjCType:at:", "contents": "encodeValueOfObjCType:at:(${1:char* type}, at:${2:void* addr})" },  
    { "trigger": "encodeValuesOfObjCTypes:", "contents": "encodeValuesOfObjCTypes:(${1:char* types})" },  
    { "trigger": "encodeWithCoder:", "contents": "encodeWithCoder:(${1:NSCoder* aCoder})" },  
    { "trigger": "encodeWithCoder:", "contents": "encodeWithCoder:(${1:NSCoder* aCoder})" },  
    { "trigger": "end" },  
    { "trigger": "end" },  
    { "trigger": "endBackgroundTask:", "contents": "endBackgroundTask:(${1:UIBackgroundTaskIdentifier identifier})" },  
    { "trigger": "endContentAccess" },  
    { "trigger": "endContentAccess" },  
    { "trigger": "endCustomizingAnimated:", "contents": "endCustomizingAnimated:(${1:BOOL animated})" },  
    { "trigger": "endDate" },  
    { "trigger": "endDate" },  
    { "trigger": "endEditing" },  
    { "trigger": "endEditing:", "contents": "endEditing:(${1:BOOL force})" },  
    { "trigger": "endEntityMapping:manager:error:", "contents": "endEntityMapping:manager:error:(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})" },  
    { "trigger": "endGeneratingDeviceOrientationNotifications" },  
    { "trigger": "endGeneratingLibraryChangeNotifications" },  
    { "trigger": "endGeneratingPlaybackNotifications" },  
    { "trigger": "endIgnoringInteractionEvents" },  
    { "trigger": "endInstanceCreationForEntityMapping:manager:error:", "contents": "endInstanceCreationForEntityMapping:manager:error:(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})" },  
    { "trigger": "endInterruption" },  
    { "trigger": "endInterruption" },  
    { "trigger": "endInterruptionWithFlags:", "contents": "endInterruptionWithFlags:(${1:NSUInteger flags})" },  
    { "trigger": "endInterruptionWithFlags:", "contents": "endInterruptionWithFlags:(${1:NSUInteger flags})" },  
    { "trigger": "endMatchInTurnWithMatchData:completionHandler:", "contents": "endMatchInTurnWithMatchData:completionHandler:(${1:NSData* matchData}, completionHandler:${2:void (^)(NSError *) completionHandler})" },  
    { "trigger": "endOfDocument" },  
    { "trigger": "endOfDocument" },  
    { "trigger": "endPlaybackTime" },  
    { "trigger": "endPoint" },  
    { "trigger": "endProgress" },  
    { "trigger": "endReceivingRemoteControlEvents" },  
    { "trigger": "endRelationshipCreationForEntityMapping:manager:error:", "contents": "endRelationshipCreationForEntityMapping:manager:error:(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})" },  
    { "trigger": "endSeeking" },  
    { "trigger": "endSeeking" },  
    { "trigger": "endSeeking" },  
    { "trigger": "endSessionAtSourceTime:", "contents": "endSessionAtSourceTime:(${1:CMTime endTime})" },  
    { "trigger": "endTrackingWithTouch:withEvent:", "contents": "endTrackingWithTouch:withEvent:(${1:UITouch* touch}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "endTurnWithNextParticipant:matchData:completionHandler:", "contents": "endTurnWithNextParticipant:matchData:completionHandler:(${1:GKTurnBasedParticipant* nextParticipant}, matchData:${2:NSData* matchData}, completionHandler:${3:void (^)(NSError *) completionHandler})" },  
    { "trigger": "endUndoGrouping" },  
    { "trigger": "endUpdates" },  
    { "trigger": "enqueueNotification:postingStyle:", "contents": "enqueueNotification:postingStyle:(${1:NSNotification* notification}, postingStyle:${2:NSPostingStyle postingStyle})" },  
    { "trigger": "enqueueNotification:postingStyle:coalesceMask:forModes:", "contents": "enqueueNotification:postingStyle:coalesceMask:forModes:(${1:NSNotification* notification}, postingStyle:${2:NSPostingStyle postingStyle}, coalesceMask:${3:NSUInteger coalesceMask}, forModes:${4:NSArray* modes})" },  
    { "trigger": "entities" },  
    { "trigger": "entitiesByName" },  
    { "trigger": "entitiesForConfiguration:", "contents": "entitiesForConfiguration:(${1:NSString* configuration})" },  
    { "trigger": "entity" },  
    { "trigger": "entity" },  
    { "trigger": "entity" },  
    { "trigger": "entity" },  
    { "trigger": "entityMappings" },  
    { "trigger": "entityMappingsByName" },  
    { "trigger": "entityMigrationPolicyClassName" },  
    { "trigger": "entityName" },  
    { "trigger": "entityVersionHashesByName" },  
    { "trigger": "enumerateAssetsAtIndexes:options:usingBlock:", "contents": "enumerateAssetsAtIndexes:options:usingBlock:(${1:NSIndexSet* indexSet}, options:${2:NSEnumerationOptions options}, usingBlock:${3:ALAssetsGroupEnumerationResultsBlock enumerationBlock})" },  
    { "trigger": "enumerateAssetsUsingBlock:", "contents": "enumerateAssetsUsingBlock:(${1:ALAssetsGroupEnumerationResultsBlock enumerationBlock})" },  
    { "trigger": "enumerateAssetsWithOptions:usingBlock:", "contents": "enumerateAssetsWithOptions:usingBlock:(${1:NSEnumerationOptions options}, usingBlock:${2:ALAssetsGroupEnumerationResultsBlock enumerationBlock})" },  
    { "trigger": "enumerateAttribute:inRange:options:usingBlock:", "contents": "enumerateAttribute:inRange:options:usingBlock:(${1:NSString* attrName}, inRange:${2:NSRange enumerationRange}, options:${3:NSAttributedStringEnumerationOptions opts}, usingBlock:${4:void (^)(id, NSRange, BOOL *) block})" },  
    { "trigger": "enumerateAttributesInRange:options:usingBlock:", "contents": "enumerateAttributesInRange:options:usingBlock:(${1:NSRange enumerationRange}, options:${2:NSAttributedStringEnumerationOptions opts}, usingBlock:${3:void (^)(NSDictionary *, NSRange, BOOL *) block})" },  
    { "trigger": "enumerateEventsMatchingPredicate:usingBlock:", "contents": "enumerateEventsMatchingPredicate:usingBlock:(${1:NSPredicate* predicate}, usingBlock:${2:EKEventSearchCallback block})" },  
    { "trigger": "enumerateGroupsWithTypes:usingBlock:failureBlock:", "contents": "enumerateGroupsWithTypes:usingBlock:failureBlock:(${1:ALAssetsGroupType types}, usingBlock:${2:ALAssetsLibraryGroupsEnumerationResultsBlock enumerationBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})" },  
    { "trigger": "enumerateIndexesInRange:options:usingBlock:", "contents": "enumerateIndexesInRange:options:usingBlock:(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateIndexesUsingBlock:", "contents": "enumerateIndexesUsingBlock:(${1:void (^)(NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateIndexesWithOptions:usingBlock:", "contents": "enumerateIndexesWithOptions:usingBlock:(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateKeysAndObjectsUsingBlock:", "contents": "enumerateKeysAndObjectsUsingBlock:(${1:void (^)(id, id, BOOL *) block})" },  
    { "trigger": "enumerateKeysAndObjectsWithOptions:usingBlock:", "contents": "enumerateKeysAndObjectsWithOptions:usingBlock:(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, id, BOOL *) block})" },  
    { "trigger": "enumerateLinesUsingBlock:", "contents": "enumerateLinesUsingBlock:(${1:void (^)(NSString *, BOOL *) block})" },  
    { "trigger": "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:", "contents": "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, orthography:${4:NSOrthography* orthography}, usingBlock:${5:void (^)(NSString *, NSRange, NSRange, BOOL *) block})" },  
    { "trigger": "enumerateMatchesInString:options:range:usingBlock:", "contents": "enumerateMatchesInString:options:range:usingBlock:(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range}, usingBlock:${4:void (^)(NSTextCheckingResult *, NSMatchingFlags, BOOL *) block})" },  
    { "trigger": "enumerateObjectsAtIndexes:options:usingBlock:", "contents": "enumerateObjectsAtIndexes:options:usingBlock:(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(id, NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateObjectsAtIndexes:options:usingBlock:", "contents": "enumerateObjectsAtIndexes:options:usingBlock:(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(id, NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateObjectsUsingBlock:", "contents": "enumerateObjectsUsingBlock:(${1:void (^)(id, BOOL *) block})" },  
    { "trigger": "enumerateObjectsUsingBlock:", "contents": "enumerateObjectsUsingBlock:(${1:void (^)(id, NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateObjectsUsingBlock:", "contents": "enumerateObjectsUsingBlock:(${1:void (^)(id, NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateObjectsWithOptions:usingBlock:", "contents": "enumerateObjectsWithOptions:usingBlock:(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateObjectsWithOptions:usingBlock:", "contents": "enumerateObjectsWithOptions:usingBlock:(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, NSUInteger, BOOL *) block})" },  
    { "trigger": "enumerateObjectsWithOptions:usingBlock:", "contents": "enumerateObjectsWithOptions:usingBlock:(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, BOOL *) block})" },  
    { "trigger": "enumerateRangesInRange:options:usingBlock:", "contents": "enumerateRangesInRange:options:usingBlock:(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(NSRange, BOOL *) block})" },  
    { "trigger": "enumerateRangesUsingBlock:", "contents": "enumerateRangesUsingBlock:(${1:void (^)(NSRange, BOOL *) block})" },  
    { "trigger": "enumerateRangesWithOptions:usingBlock:", "contents": "enumerateRangesWithOptions:usingBlock:(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(NSRange, BOOL *) block})" },  
    { "trigger": "enumerateSubstringsInRange:options:usingBlock:", "contents": "enumerateSubstringsInRange:options:usingBlock:(${1:NSRange range}, options:${2:NSStringEnumerationOptions opts}, usingBlock:${3:void (^)(NSString *, NSRange, NSRange, BOOL *) block})" },  
    { "trigger": "enumerateTagsInRange:scheme:options:usingBlock:", "contents": "enumerateTagsInRange:scheme:options:usingBlock:(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, usingBlock:${4:void (^)(NSString *, NSRange, NSRange, BOOL *) block})" },  
    { "trigger": "enumerateValuesForProperties:usingBlock:", "contents": "enumerateValuesForProperties:usingBlock:(${1:NSSet* properties}, usingBlock:${2:void (^)(NSString *, id, BOOL *) block})" },  
    { "trigger": "enumeratorAtPath:", "contents": "enumeratorAtPath:(${1:NSString* path})" },  
    { "trigger": "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", "contents": "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:(${1:NSURL* url}, includingPropertiesForKeys:${2:NSArray* keys}, options:${3:NSDirectoryEnumerationOptions mask}, errorHandler:${4:BOOL (^)(NSURL *, NSError *) handler})" },  
    { "trigger": "envMode" },  
    { "trigger": "environment" },  
    { "trigger": "era" },  
    { "trigger": "eraSymbols" },  
    { "trigger": "error" },  
    { "trigger": "error" },  
    { "trigger": "error" },  
    { "trigger": "error" },  
    { "trigger": "error" },  
    { "trigger": "error" },  
    { "trigger": "error" },  
    { "trigger": "errorComment" },  
    { "trigger": "errorComment" },  
    { "trigger": "errorDomain" },  
    { "trigger": "errorDomain" },  
    { "trigger": "errorLog" },  
    { "trigger": "errorLog" },  
    { "trigger": "errorStatusCode" },  
    { "trigger": "errorStatusCode" },  
    { "trigger": "estimatedDataRate" },  
    { "trigger": "estimatedOutputFileLength" },  
    { "trigger": "evaluateWithObject:", "contents": "evaluateWithObject:(${1:id object})" },  
    { "trigger": "evaluateWithObject:substitutionVariables:", "contents": "evaluateWithObject:substitutionVariables:(${1:id object}, substitutionVariables:${2:NSDictionary* bindings})" },  
    { "trigger": "event" },  
    { "trigger": "event" },  
    { "trigger": "eventEditViewControllerDefaultCalendarForNewEvents:", "contents": "eventEditViewControllerDefaultCalendarForNewEvents:(${1:EKEventEditViewController* controller})" },  
    { "trigger": "eventEditViewControllerDefaultCalendarForNewEvents:", "contents": "eventEditViewControllerDefaultCalendarForNewEvents:(${1:EKEventEditViewController* controller})" },  
    { "trigger": "eventEditViewController:didCompleteWithAction:", "contents": "eventEditViewController:didCompleteWithAction:(${1:EKEventEditViewController* controller}, didCompleteWithAction:${2:EKEventEditViewAction action})" },  
    { "trigger": "eventEditViewController:didCompleteWithAction:", "contents": "eventEditViewController:didCompleteWithAction:(${1:EKEventEditViewController* controller}, didCompleteWithAction:${2:EKEventEditViewAction action})" },  
    { "trigger": "eventIdentifier" },  
    { "trigger": "eventStore" },  
    { "trigger": "eventStoreIdentifier" },  
    { "trigger": "eventViewController:didCompleteWithAction:", "contents": "eventViewController:didCompleteWithAction:(${1:EKEventViewController* controller}, didCompleteWithAction:${2:EKEventViewAction action})" },  
    { "trigger": "eventViewController:didCompleteWithAction:", "contents": "eventViewController:didCompleteWithAction:(${1:EKEventViewController* controller}, didCompleteWithAction:${2:EKEventViewAction action})" },  
    { "trigger": "eventWithIdentifier:", "contents": "eventWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "events" },  
    { "trigger": "events" },  
    { "trigger": "events" },  
    { "trigger": "events" },  
    { "trigger": "eventsMatchingPredicate:", "contents": "eventsMatchingPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "evictUbiquitousItemAtURL:error:", "contents": "evictUbiquitousItemAtURL:error:(${1:NSURL* url}, error:${2:NSError** error})" },  
    { "trigger": "evictsObjectsWithDiscardedContent" },  
    { "trigger": "exceptionDuringOperation:error:leftOperand:rightOperand:", "contents": "exceptionDuringOperation:error:leftOperand:rightOperand:(${1:SEL operation}, error:${2:NSCalculationError error}, leftOperand:${3:NSDecimalNumber* leftOperand}, rightOperand:${4:NSDecimalNumber* rightOperand})" },  
    { "trigger": "exceptionDuringOperation:error:leftOperand:rightOperand:", "contents": "exceptionDuringOperation:error:leftOperand:rightOperand:(${1:SEL operation}, error:${2:NSCalculationError error}, leftOperand:${3:NSDecimalNumber* leftOperand}, rightOperand:${4:NSDecimalNumber* rightOperand})" },  
    { "trigger": "exchangeObjectAtIndex:withObjectAtIndex:", "contents": "exchangeObjectAtIndex:withObjectAtIndex:(${1:NSUInteger idx1}, withObjectAtIndex:${2:NSUInteger idx2})" },  
    { "trigger": "exchangeObjectAtIndex:withObjectAtIndex:", "contents": "exchangeObjectAtIndex:withObjectAtIndex:(${1:NSUInteger idx1}, withObjectAtIndex:${2:NSUInteger idx2})" },  
    { "trigger": "exchangeOverlayAtIndex:withOverlayAtIndex:", "contents": "exchangeOverlayAtIndex:withOverlayAtIndex:(${1:NSUInteger index1}, withOverlayAtIndex:${2:NSUInteger index2})" },  
    { "trigger": "exchangeSubviewAtIndex:withSubviewAtIndex:", "contents": "exchangeSubviewAtIndex:withSubviewAtIndex:(${1:NSInteger index1}, withSubviewAtIndex:${2:NSInteger index2})" },  
    { "trigger": "executableArchitectures" },  
    { "trigger": "executablePath" },  
    { "trigger": "executableURL" },  
    { "trigger": "executeFetchRequest:error:", "contents": "executeFetchRequest:error:(${1:NSFetchRequest* request}, error:${2:NSError** error})" },  
    { "trigger": "executeRequest:withContext:error:", "contents": "executeRequest:withContext:error:(${1:NSPersistentStoreRequest* request}, withContext:${2:NSManagedObjectContext* context}, error:${3:NSError** error})" },  
    { "trigger": "executeRequest:withContext:error:", "contents": "executeRequest:withContext:error:(${1:NSPersistentStoreRequest* request}, withContext:${2:NSManagedObjectContext* context}, error:${3:NSError** error})" },  
    { "trigger": "executionBlocks" },  
    { "trigger": "existingObjectWithID:error:", "contents": "existingObjectWithID:error:(${1:NSManagedObjectID* objectID}, error:${2:NSError** error})" },  
    { "trigger": "expectedContentLength" },  
    { "trigger": "expectedPlayerCount" },  
    { "trigger": "expectsMediaDataInRealTime" },  
    { "trigger": "expiresDate" },  
    { "trigger": "exponentSymbol" },  
    { "trigger": "exportAsynchronouslyWithCompletionHandler:", "contents": "exportAsynchronouslyWithCompletionHandler:(${1:void (^)(void) handler})" },  
    { "trigger": "exposureMode" },  
    { "trigger": "exposurePointOfInterest" },  
    { "trigger": "expression" },  
    { "trigger": "expressionBlock" },  
    { "trigger": "expressionResultType" },  
    { "trigger": "expressionType" },  
    { "trigger": "expressionValueWithObject:context:", "contents": "expressionValueWithObject:context:(${1:id object}, context:${2:NSMutableDictionary* context})" },  
    { "trigger": "extendedLanguageTag" },  
    { "trigger": "extendedLanguageTag" },  
    { "trigger": "extendedLogData" },  
    { "trigger": "extendedLogData" },  
    { "trigger": "extendedLogData" },  
    { "trigger": "extendedLogData" },  
    { "trigger": "extendedLogDataStringEncoding" },  
    { "trigger": "extendedLogDataStringEncoding" },  
    { "trigger": "extendedLogDataStringEncoding" },  
    { "trigger": "extendedLogDataStringEncoding" },  
    { "trigger": "extent" },  
    { "trigger": "extraAttributes" },  
    { "trigger": "extraAttributes" },  
    { "trigger": "failureResponse" },  
    { "trigger": "familyName" },  
    { "trigger": "fastestEncoding" },  
    { "trigger": "faultingState" },  
    { "trigger": "featuresInImage:", "contents": "featuresInImage:(${1:CIImage* image})" },  
    { "trigger": "featuresInImage:options:", "contents": "featuresInImage:options:(${1:CIImage* image}, options:${2:NSDictionary* options})" },  
    { "trigger": "fetchBatchSize" },  
    { "trigger": "fetchLimit" },  
    { "trigger": "fetchOffset" },  
    { "trigger": "fetchRequest" },  
    { "trigger": "fetchRequest" },  
    { "trigger": "fetchRequestFromTemplateWithName:substitutionVariables:", "contents": "fetchRequestFromTemplateWithName:substitutionVariables:(${1:NSString* name}, substitutionVariables:${2:NSDictionary* variables})" },  
    { "trigger": "fetchRequestTemplateForName:", "contents": "fetchRequestTemplateForName:(${1:NSString* name})" },  
    { "trigger": "fetchRequestTemplatesByName" },  
    { "trigger": "fetchedObjects" },  
    { "trigger": "fileAttributes" },  
    { "trigger": "fileAttributes" },  
    { "trigger": "fileAttributesAtPath:traverseLink:", "contents": "fileAttributesAtPath:traverseLink:(${1:NSString* path}, traverseLink:${2:BOOL yorn})" },  
    { "trigger": "fileAttributesToWriteToURL:forSaveOperation:error:", "contents": "fileAttributesToWriteToURL:forSaveOperation:error:(${1:NSURL* url}, forSaveOperation:${2:UIDocumentSaveOperation saveOperation}, error:${3:NSError** outError})" },  
    { "trigger": "fileCreationDate" },  
    { "trigger": "fileDescriptor" },  
    { "trigger": "fileExistsAtPath:", "contents": "fileExistsAtPath:(${1:NSString* path})" },  
    { "trigger": "fileExistsAtPath:isDirectory:", "contents": "fileExistsAtPath:isDirectory:(${1:NSString* path}, isDirectory:${2:BOOL* isDirectory})" },  
    { "trigger": "fileExtensionHidden" },  
    { "trigger": "fileGroupOwnerAccountID" },  
    { "trigger": "fileGroupOwnerAccountName" },  
    { "trigger": "fileHFSCreatorCode" },  
    { "trigger": "fileHFSTypeCode" },  
    { "trigger": "fileHandleForReading" },  
    { "trigger": "fileHandleForWriting" },  
    { "trigger": "fileIsAppendOnly" },  
    { "trigger": "fileIsImmutable" },  
    { "trigger": "fileLengthLimit" },  
    { "trigger": "fileManager:shouldCopyItemAtPath:toPath:", "contents": "fileManager:shouldCopyItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldCopyItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldCopyItemAtPath:toPath:", "contents": "fileManager:shouldCopyItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldCopyItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldCopyItemAtURL:toURL:", "contents": "fileManager:shouldCopyItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldCopyItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldCopyItemAtURL:toURL:", "contents": "fileManager:shouldCopyItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldCopyItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldLinkItemAtPath:toPath:", "contents": "fileManager:shouldLinkItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldLinkItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldLinkItemAtPath:toPath:", "contents": "fileManager:shouldLinkItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldLinkItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldLinkItemAtURL:toURL:", "contents": "fileManager:shouldLinkItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldLinkItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldLinkItemAtURL:toURL:", "contents": "fileManager:shouldLinkItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldLinkItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldMoveItemAtPath:toPath:", "contents": "fileManager:shouldMoveItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldMoveItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldMoveItemAtPath:toPath:", "contents": "fileManager:shouldMoveItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldMoveItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldMoveItemAtURL:toURL:", "contents": "fileManager:shouldMoveItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldMoveItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldMoveItemAtURL:toURL:", "contents": "fileManager:shouldMoveItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldMoveItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:", "contents": "fileManager:shouldProceedAfterError:(${1:NSFileManager* fm}, shouldProceedAfterError:${2:NSDictionary* errorInfo})" },  
    { "trigger": "fileManager:shouldProceedAfterError:", "contents": "fileManager:shouldProceedAfterError:(${1:NSFileManager* fm}, shouldProceedAfterError:${2:NSDictionary* errorInfo})" },  
    { "trigger": "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:", "contents": "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, copyingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:", "contents": "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, copyingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:", "contents": "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, copyingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:", "contents": "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, copyingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:", "contents": "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, linkingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:", "contents": "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, linkingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:", "contents": "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, linkingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:", "contents": "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, linkingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:", "contents": "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, movingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:", "contents": "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, movingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})" },  
    { "trigger": "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:", "contents": "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, movingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:", "contents": "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, movingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:removingItemAtPath:", "contents": "fileManager:shouldProceedAfterError:removingItemAtPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, removingItemAtPath:${3:NSString* path})" },  
    { "trigger": "fileManager:shouldProceedAfterError:removingItemAtPath:", "contents": "fileManager:shouldProceedAfterError:removingItemAtPath:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, removingItemAtPath:${3:NSString* path})" },  
    { "trigger": "fileManager:shouldProceedAfterError:removingItemAtURL:", "contents": "fileManager:shouldProceedAfterError:removingItemAtURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, removingItemAtURL:${3:NSURL* URL})" },  
    { "trigger": "fileManager:shouldProceedAfterError:removingItemAtURL:", "contents": "fileManager:shouldProceedAfterError:removingItemAtURL:(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, removingItemAtURL:${3:NSURL* URL})" },  
    { "trigger": "fileManager:shouldRemoveItemAtPath:", "contents": "fileManager:shouldRemoveItemAtPath:(${1:NSFileManager* fileManager}, shouldRemoveItemAtPath:${2:NSString* path})" },  
    { "trigger": "fileManager:shouldRemoveItemAtPath:", "contents": "fileManager:shouldRemoveItemAtPath:(${1:NSFileManager* fileManager}, shouldRemoveItemAtPath:${2:NSString* path})" },  
    { "trigger": "fileManager:shouldRemoveItemAtURL:", "contents": "fileManager:shouldRemoveItemAtURL:(${1:NSFileManager* fileManager}, shouldRemoveItemAtURL:${2:NSURL* URL})" },  
    { "trigger": "fileManager:shouldRemoveItemAtURL:", "contents": "fileManager:shouldRemoveItemAtURL:(${1:NSFileManager* fileManager}, shouldRemoveItemAtURL:${2:NSURL* URL})" },  
    { "trigger": "fileManager:willProcessPath:", "contents": "fileManager:willProcessPath:(${1:NSFileManager* fm}, willProcessPath:${2:NSString* path})" },  
    { "trigger": "fileManager:willProcessPath:", "contents": "fileManager:willProcessPath:(${1:NSFileManager* fm}, willProcessPath:${2:NSString* path})" },  
    { "trigger": "fileModificationDate" },  
    { "trigger": "fileModificationDate" },  
    { "trigger": "fileNameExtensionForType:saveOperation:", "contents": "fileNameExtensionForType:saveOperation:(${1:NSString* typeName}, saveOperation:${2:UIDocumentSaveOperation saveOperation})" },  
    { "trigger": "fileOwnerAccountID" },  
    { "trigger": "fileOwnerAccountName" },  
    { "trigger": "filePathURL" },  
    { "trigger": "filePosixPermissions" },  
    { "trigger": "fileReferenceURL" },  
    { "trigger": "fileSize" },  
    { "trigger": "fileSystemAttributesAtPath:", "contents": "fileSystemAttributesAtPath:(${1:NSString* path})" },  
    { "trigger": "fileSystemFileNumber" },  
    { "trigger": "fileSystemNumber" },  
    { "trigger": "fileSystemRepresentation" },  
    { "trigger": "fileSystemRepresentationWithPath:", "contents": "fileSystemRepresentationWithPath:(${1:NSString* path})" },  
    { "trigger": "fileType" },  
    { "trigger": "fileType" },  
    { "trigger": "fileURL" },  
    { "trigger": "fileWrappers" },  
    { "trigger": "filename" },  
    { "trigger": "filename" },  
    { "trigger": "fill" },  
    { "trigger": "fillColor" },  
    { "trigger": "fillColor" },  
    { "trigger": "fillMode" },  
    { "trigger": "fillMode" },  
    { "trigger": "fillPath:inContext:", "contents": "fillPath:inContext:(${1:CGPathRef path}, inContext:${2:CGContextRef context})" },  
    { "trigger": "fillRule" },  
    { "trigger": "fillWithBlendMode:alpha:", "contents": "fillWithBlendMode:alpha:(${1:CGBlendMode blendMode}, alpha:${2:CGFloat alpha})" },  
    { "trigger": "filter" },  
    { "trigger": "filterPredicates" },  
    { "trigger": "filterUsingPredicate:", "contents": "filterUsingPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "filterUsingPredicate:", "contents": "filterUsingPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "filteredArrayUsingPredicate:", "contents": "filteredArrayUsingPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "filteredSetUsingPredicate:", "contents": "filteredSetUsingPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "filters" },  
    { "trigger": "finalize" },  
    { "trigger": "finalize" },  
    { "trigger": "findMatchForRequest:withCompletionHandler:", "contents": "findMatchForRequest:withCompletionHandler:(${1:GKMatchRequest* request}, withCompletionHandler:${2:void (^)(GKMatch *, NSError *) completionHandler})" },  
    { "trigger": "findPlayersForHostedMatchRequest:withCompletionHandler:", "contents": "findPlayersForHostedMatchRequest:withCompletionHandler:(${1:GKMatchRequest* request}, withCompletionHandler:${2:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "finishDecoding" },  
    { "trigger": "finishEncoding" },  
    { "trigger": "finishTransaction:", "contents": "finishTransaction:(${1:SKPaymentTransaction* transaction})" },  
    { "trigger": "finishWriting" },  
    { "trigger": "finishedHandlingError:recovered:", "contents": "finishedHandlingError:recovered:(${1:NSError* error}, recovered:${2:BOOL recovered})" },  
    { "trigger": "finishedSelectedImage" },  
    { "trigger": "finishedUnselectedImage" },  
    { "trigger": "fire" },  
    { "trigger": "fireDate" },  
    { "trigger": "fireDate" },  
    { "trigger": "firmwareRevision" },  
    { "trigger": "firstDayOfTheWeek" },  
    { "trigger": "firstIndex" },  
    { "trigger": "firstMatchInString:options:range:", "contents": "firstMatchInString:options:range:(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})" },  
    { "trigger": "firstObject" },  
    { "trigger": "firstObjectCommonWithArray:", "contents": "firstObjectCommonWithArray:(${1:NSArray* otherArray})" },  
    { "trigger": "firstOtherButtonIndex" },  
    { "trigger": "firstOtherButtonIndex" },  
    { "trigger": "firstRectForRange:", "contents": "firstRectForRange:(${1:UITextRange* range})" },  
    { "trigger": "firstRectForRange:", "contents": "firstRectForRange:(${1:UITextRange* range})" },  
    { "trigger": "firstWeekday" },  
    { "trigger": "flashMode" },  
    { "trigger": "flashScrollIndicators" },  
    { "trigger": "flatness" },  
    { "trigger": "floatForKey:", "contents": "floatForKey:(${1:NSString* defaultName})" },  
    { "trigger": "floatValue" },  
    { "trigger": "floatValue" },  
    { "trigger": "focusMode" },  
    { "trigger": "focusPointOfInterest" },  
    { "trigger": "fog" },  
    { "trigger": "font" },  
    { "trigger": "font" },  
    { "trigger": "font" },  
    { "trigger": "font" },  
    { "trigger": "font" },  
    { "trigger": "font" },  
    { "trigger": "font" },  
    { "trigger": "fontName" },  
    { "trigger": "fontSize" },  
    { "trigger": "fontWithSize:", "contents": "fontWithSize:(${1:CGFloat fontSize})" },  
    { "trigger": "footerHeight" },  
    { "trigger": "foregroundColor" },  
    { "trigger": "formIntersectionWithCharacterSet:", "contents": "formIntersectionWithCharacterSet:(${1:NSCharacterSet* otherSet})" },  
    { "trigger": "formUnionWithCharacterSet:", "contents": "formUnionWithCharacterSet:(${1:NSCharacterSet* otherSet})" },  
    { "trigger": "formatDescription" },  
    { "trigger": "formatDescriptions" },  
    { "trigger": "formatWidth" },  
    { "trigger": "formattedValue" },  
    { "trigger": "formatterBehavior" },  
    { "trigger": "formatterBehavior" },  
    { "trigger": "forwardInvocation:", "contents": "forwardInvocation:(${1:NSInvocation* anInvocation})" },  
    { "trigger": "forwardInvocation:", "contents": "forwardInvocation:(${1:NSInvocation* invocation})" },  
    { "trigger": "forwardPlaybackEndTime" },  
    { "trigger": "forwardingTargetForSelector:", "contents": "forwardingTargetForSelector:(${1:SEL aSelector})" },  
    { "trigger": "fragment" },  
    { "trigger": "frame" },  
    { "trigger": "frame" },  
    { "trigger": "frameDuration" },  
    { "trigger": "frameDuration" },  
    { "trigger": "frameInterval" },  
    { "trigger": "frameLength" },  
    { "trigger": "framesDisplayed" },  
    { "trigger": "framesPerSecond" },  
    { "trigger": "frequency" },  
    { "trigger": "friendRequestComposeViewControllerDidFinish:", "contents": "friendRequestComposeViewControllerDidFinish:(${1:GKFriendRequestComposeViewController* viewController})" },  
    { "trigger": "friendRequestComposeViewControllerDidFinish:", "contents": "friendRequestComposeViewControllerDidFinish:(${1:GKFriendRequestComposeViewController* viewController})" },  
    { "trigger": "friends" },  
    { "trigger": "fromValue" },  
    { "trigger": "fullResolutionImage" },  
    { "trigger": "fullScreenImage" },  
    { "trigger": "function" },  
    { "trigger": "generateCGImagesAsynchronouslyForTimes:completionHandler:", "contents": "generateCGImagesAsynchronouslyForTimes:completionHandler:(${1:NSArray* requestedTimes}, completionHandler:${2:AVAssetImageGeneratorCompletionHandler handler})" },  
    { "trigger": "generatesCalendarDates" },  
    { "trigger": "generatesDecimalNumbers" },  
    { "trigger": "geocodeAddressDictionary:completionHandler:", "contents": "geocodeAddressDictionary:completionHandler:(${1:NSDictionary* addressDictionary}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})" },  
    { "trigger": "geocodeAddressString:completionHandler:", "contents": "geocodeAddressString:completionHandler:(${1:NSString* addressString}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})" },  
    { "trigger": "geocodeAddressString:inRegion:completionHandler:", "contents": "geocodeAddressString:inRegion:completionHandler:(${1:NSString* addressString}, inRegion:${2:CLRegion* region}, completionHandler:${3:CLGeocodeCompletionHandler completionHandler})" },  
    { "trigger": "gestureRecognizerShouldBegin:", "contents": "gestureRecognizerShouldBegin:(${1:UIGestureRecognizer* gestureRecognizer})" },  
    { "trigger": "gestureRecognizerShouldBegin:", "contents": "gestureRecognizerShouldBegin:(${1:UIGestureRecognizer* gestureRecognizer})" },  
    { "trigger": "gestureRecognizers" },  
    { "trigger": "gestureRecognizers" },  
    { "trigger": "gestureRecognizers" },  
    { "trigger": "gestureRecognizers" },  
    { "trigger": "gestureRecognizer:shouldReceiveTouch:", "contents": "gestureRecognizer:shouldReceiveTouch:(${1:UIGestureRecognizer* gestureRecognizer}, shouldReceiveTouch:${2:UITouch* touch})" },  
    { "trigger": "gestureRecognizer:shouldReceiveTouch:", "contents": "gestureRecognizer:shouldReceiveTouch:(${1:UIGestureRecognizer* gestureRecognizer}, shouldReceiveTouch:${2:UITouch* touch})" },  
    { "trigger": "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:", "contents": "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:(${1:UIGestureRecognizer* gestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer* otherGestureRecognizer})" },  
    { "trigger": "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:", "contents": "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:(${1:UIGestureRecognizer* gestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer* otherGestureRecognizer})" },  
    { "trigger": "getArgumentTypeAtIndex:", "contents": "getArgumentTypeAtIndex:(${1:NSUInteger idx})" },  
    { "trigger": "getArgument:atIndex:", "contents": "getArgument:atIndex:(${1:void* argumentLocation}, atIndex:${2:NSInteger idx})" },  
    { "trigger": "getBuffer:length:", "contents": "getBuffer:length:(${1:uint8_t** buffer}, length:${2:NSUInteger* len})" },  
    { "trigger": "getBytes:", "contents": "getBytes:(${1:void* buffer})" },  
    { "trigger": "getBytes:fromOffset:length:error:", "contents": "getBytes:fromOffset:length:error:(${1:uint8_t* buffer}, fromOffset:${2:long long offset}, length:${3:NSUInteger length}, error:${4:NSError** error})" },  
    { "trigger": "getBytes:length:", "contents": "getBytes:length:(${1:void* buffer}, length:${2:NSUInteger length})" },  
    { "trigger": "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", "contents": "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:(${1:void* buffer}, maxLength:${2:NSUInteger maxBufferCount}, usedLength:${3:NSUInteger* usedBufferCount}, encoding:${4:NSStringEncoding encoding}, options:${5:NSStringEncodingConversionOptions options}, range:${6:NSRange range}, remainingRange:${7:NSRangePointer leftover})" },  
    { "trigger": "getBytes:range:", "contents": "getBytes:range:(${1:void* buffer}, range:${2:NSRange range})" },  
    { "trigger": "getCFRunLoop" },  
    { "trigger": "getCString:", "contents": "getCString:(${1:char* bytes})" },  
    { "trigger": "getCString:maxLength:", "contents": "getCString:maxLength:(${1:char* bytes}, maxLength:${2:NSUInteger maxLength})" },  
    { "trigger": "getCString:maxLength:encoding:", "contents": "getCString:maxLength:encoding:(${1:char* buffer}, maxLength:${2:NSUInteger maxBufferCount}, encoding:${3:NSStringEncoding encoding})" },  
    { "trigger": "getCString:maxLength:range:remainingRange:", "contents": "getCString:maxLength:range:remainingRange:(${1:char* bytes}, maxLength:${2:NSUInteger maxLength}, range:${3:NSRange aRange}, remainingRange:${4:NSRangePointer leftoverRange})" },  
    { "trigger": "getCharacters:", "contents": "getCharacters:(${1:unichar* buffer})" },  
    { "trigger": "getCharacters:range:", "contents": "getCharacters:range:(${1:unichar* buffer}, range:${2:NSRange aRange})" },  
    { "trigger": "getControlPointAtIndex:values:", "contents": "getControlPointAtIndex:values:(${1:size_t idx}, values:${2:float* ptr})" },  
    { "trigger": "getCoordinates:range:", "contents": "getCoordinates:range:(${1:CLLocationCoordinate2D* coords}, range:${2:NSRange range})" },  
    { "trigger": "getDistanceFrom:", "contents": "getDistanceFrom:(${1:CLLocation* location})" },  
    { "trigger": "getFileSystemRepresentation:maxLength:", "contents": "getFileSystemRepresentation:maxLength:(${1:char* cname}, maxLength:${2:NSUInteger max})" },  
    { "trigger": "getHue:saturation:brightness:alpha:", "contents": "getHue:saturation:brightness:alpha:(${1:CGFloat* hue}, saturation:${2:CGFloat* saturation}, brightness:${3:CGFloat* brightness}, alpha:${4:CGFloat* alpha})" },  
    { "trigger": "getIndexes:", "contents": "getIndexes:(${1:NSUInteger* indexes})" },  
    { "trigger": "getIndexes:maxCount:inIndexRange:", "contents": "getIndexes:maxCount:inIndexRange:(${1:NSUInteger* indexBuffer}, maxCount:${2:NSUInteger bufferSize}, inIndexRange:${3:NSRangePointer range})" },  
    { "trigger": "getInputStream:outputStream:", "contents": "getInputStream:outputStream:(${1:NSInputStream** inputStream}, outputStream:${2:NSOutputStream** outputStream})" },  
    { "trigger": "getLineDash:count:phase:", "contents": "getLineDash:count:phase:(${1:CGFloat* pattern}, count:${2:NSInteger* count}, phase:${3:CGFloat* phase})" },  
    { "trigger": "getLineStart:end:contentsEnd:forRange:", "contents": "getLineStart:end:contentsEnd:forRange:(${1:NSUInteger* startPtr}, end:${2:NSUInteger* lineEndPtr}, contentsEnd:${3:NSUInteger* contentsEndPtr}, forRange:${4:NSRange range})" },  
    { "trigger": "getObjectValue:forString:errorDescription:", "contents": "getObjectValue:forString:errorDescription:(${1:id* obj}, forString:${2:NSString* string}, errorDescription:${3:NSString** error})" },  
    { "trigger": "getObjectValue:forString:range:error:", "contents": "getObjectValue:forString:range:error:(${1:id* obj}, forString:${2:NSString* string}, range:${3:NSRange* rangep}, error:${4:NSError** error})" },  
    { "trigger": "getObjectValue:forString:range:error:", "contents": "getObjectValue:forString:range:error:(${1:id* obj}, forString:${2:NSString* string}, range:${3:NSRange* rangep}, error:${4:NSError** error})" },  
    { "trigger": "getObjects:", "contents": "getObjects:(${1:id* objects})" },  
    { "trigger": "getObjects:andKeys:", "contents": "getObjects:andKeys:(${1:id* objects}, andKeys:${2:id* keys})" },  
    { "trigger": "getObjects:range:", "contents": "getObjects:range:(${1:id* objects}, range:${2:NSRange range})" },  
    { "trigger": "getObjects:range:", "contents": "getObjects:range:(${1:id* objects}, range:${2:NSRange range})" },  
    { "trigger": "getOpacityRampForTime:startOpacity:endOpacity:timeRange:", "contents": "getOpacityRampForTime:startOpacity:endOpacity:timeRange:(${1:CMTime time}, startOpacity:${2:float* startOpacity}, endOpacity:${3:float* endOpacity}, timeRange:${4:CMTimeRange* timeRange})" },  
    { "trigger": "getParagraphStart:end:contentsEnd:forRange:", "contents": "getParagraphStart:end:contentsEnd:forRange:(${1:NSUInteger* startPtr}, end:${2:NSUInteger* parEndPtr}, contentsEnd:${3:NSUInteger* contentsEndPtr}, forRange:${4:NSRange range})" },  
    { "trigger": "getRed:green:blue:alpha:", "contents": "getRed:green:blue:alpha:(${1:CGFloat* red}, green:${2:CGFloat* green}, blue:${3:CGFloat* blue}, alpha:${4:CGFloat* alpha})" },  
    { "trigger": "getResourceValue:forKey:error:", "contents": "getResourceValue:forKey:error:(${1:id* value}, forKey:${2:NSString* key}, error:${3:NSError** error})" },  
    { "trigger": "getReturnValue:", "contents": "getReturnValue:(${1:void* retLoc})" },  
    { "trigger": "getTransformRampForTime:startTransform:endTransform:timeRange:", "contents": "getTransformRampForTime:startTransform:endTransform:timeRange:(${1:CMTime time}, startTransform:${2:CGAffineTransform* startTransform}, endTransform:${3:CGAffineTransform* endTransform}, timeRange:${4:CMTimeRange* timeRange})" },  
    { "trigger": "getValue:", "contents": "getValue:(${1:void* value})" },  
    { "trigger": "getVolumeRampForTime:startVolume:endVolume:timeRange:", "contents": "getVolumeRampForTime:startVolume:endVolume:timeRange:(${1:CMTime time}, startVolume:${2:float* startVolume}, endVolume:${3:float* endVolume}, timeRange:${4:CMTimeRange* timeRange})" },  
    { "trigger": "getWhite:alpha:", "contents": "getWhite:alpha:(${1:CGFloat* white}, alpha:${2:CGFloat* alpha})" },  
    { "trigger": "glActiveShaderProgramEXT", "contents": "glActiveShaderProgramEXT(${1:GLuint pipeline}, ${2:GLuint program})" },  
    { "trigger": "glActiveTexture", "contents": "glActiveTexture(${1:GLenum texture})" },  
    { "trigger": "glAlphaFunc", "contents": "glAlphaFunc(${1:GLenum func}, ${2:GLclampf ref})" },  
    { "trigger": "glAlphaFuncx", "contents": "glAlphaFuncx(${1:GLenum func}, ${2:GLclampx ref})" },  
    { "trigger": "glAttachShader", "contents": "glAttachShader(${1:GLuint program}, ${2:GLuint shader})" },  
    { "trigger": "glBeginQueryEXT", "contents": "glBeginQueryEXT(${1:GLenum target}, ${2:GLuint id})" },  
    { "trigger": "glBindAttribLocation", "contents": "glBindAttribLocation(${1:GLuint program}, ${2:GLuint index}, ${3:GLchar* name})" },  
    { "trigger": "glBindBuffer", "contents": "glBindBuffer(${1:GLenum target}, ${2:GLuint buffer})" },  
    { "trigger": "glBindFramebuffer", "contents": "glBindFramebuffer(${1:GLenum target}, ${2:GLuint framebuffer})" },  
    { "trigger": "glBindFramebufferOES", "contents": "glBindFramebufferOES(${1:GLenum target}, ${2:GLuint framebuffer})" },  
    { "trigger": "glBindProgramPipelineEXT", "contents": "glBindProgramPipelineEXT(${1:GLuint pipeline})" },  
    { "trigger": "glBindRenderbuffer", "contents": "glBindRenderbuffer(${1:GLenum target}, ${2:GLuint renderbuffer})" },  
    { "trigger": "glBindRenderbufferOES", "contents": "glBindRenderbufferOES(${1:GLenum target}, ${2:GLuint renderbuffer})" },  
    { "trigger": "glBindTexture", "contents": "glBindTexture(${1:GLenum target}, ${2:GLuint texture})" },  
    { "trigger": "glBindVertexArrayOES", "contents": "glBindVertexArrayOES(${1:GLuint array})" },  
    { "trigger": "glBlendColor", "contents": "glBlendColor(${1:GLclampf red}, ${2:GLclampf green}, ${3:GLclampf blue}, ${4:GLclampf alpha})" },  
    { "trigger": "glBlendEquation", "contents": "glBlendEquation(${1:GLenum mode})" },  
    { "trigger": "glBlendEquationOES", "contents": "glBlendEquationOES(${1:GLenum mode})" },  
    { "trigger": "glBlendEquationSeparate", "contents": "glBlendEquationSeparate(${1:GLenum modeRGB}, ${2:GLenum modeAlpha})" },  
    { "trigger": "glBlendEquationSeparateOES", "contents": "glBlendEquationSeparateOES(${1:GLenum modeRGB}, ${2:GLenum modeAlpha})" },  
    { "trigger": "glBlendFunc", "contents": "glBlendFunc(${1:GLenum sfactor}, ${2:GLenum dfactor})" },  
    { "trigger": "glBlendFuncSeparate", "contents": "glBlendFuncSeparate(${1:GLenum srcRGB}, ${2:GLenum dstRGB}, ${3:GLenum srcAlpha}, ${4:GLenum dstAlpha})" },  
    { "trigger": "glBlendFuncSeparateOES", "contents": "glBlendFuncSeparateOES(${1:GLenum srcRGB}, ${2:GLenum dstRGB}, ${3:GLenum srcAlpha}, ${4:GLenum dstAlpha})" },  
    { "trigger": "glBufferData", "contents": "glBufferData(${1:GLenum target}, ${2:GLsizeiptr size}, ${3:GLvoid* data}, ${4:GLenum usage})" },  
    { "trigger": "glBufferSubData", "contents": "glBufferSubData(${1:GLenum target}, ${2:GLintptr offset}, ${3:GLsizeiptr size}, ${4:GLvoid* data})" },  
    { "trigger": "glCheckFramebufferStatus", "contents": "glCheckFramebufferStatus(${1:GLenum target})" },  
    { "trigger": "glCheckFramebufferStatusOES", "contents": "glCheckFramebufferStatusOES(${1:GLenum target})" },  
    { "trigger": "glClear", "contents": "glClear(${1:GLbitfield mask})" },  
    { "trigger": "glClearColor", "contents": "glClearColor(${1:GLclampf red}, ${2:GLclampf green}, ${3:GLclampf blue}, ${4:GLclampf alpha})" },  
    { "trigger": "glClearColorx", "contents": "glClearColorx(${1:GLclampx red}, ${2:GLclampx green}, ${3:GLclampx blue}, ${4:GLclampx alpha})" },  
    { "trigger": "glClearDepthf", "contents": "glClearDepthf(${1:GLclampf depth})" },  
    { "trigger": "glClearDepthx", "contents": "glClearDepthx(${1:GLclampx depth})" },  
    { "trigger": "glClearStencil", "contents": "glClearStencil(${1:GLint s})" },  
    { "trigger": "glClientActiveTexture", "contents": "glClientActiveTexture(${1:GLenum texture})" },  
    { "trigger": "glClipPlanef", "contents": "glClipPlanef(${1:GLenum plane}, ${2:GLfloat* equation})" },  
    { "trigger": "glClipPlanex", "contents": "glClipPlanex(${1:GLenum plane}, ${2:GLfixed* equation})" },  
    { "trigger": "glColor4f", "contents": "glColor4f(${1:GLfloat red}, ${2:GLfloat green}, ${3:GLfloat blue}, ${4:GLfloat alpha})" },  
    { "trigger": "glColor4ub", "contents": "glColor4ub(${1:GLubyte red}, ${2:GLubyte green}, ${3:GLubyte blue}, ${4:GLubyte alpha})" },  
    { "trigger": "glColor4x", "contents": "glColor4x(${1:GLfixed red}, ${2:GLfixed green}, ${3:GLfixed blue}, ${4:GLfixed alpha})" },  
    { "trigger": "glColorMask", "contents": "glColorMask(${1:GLboolean red}, ${2:GLboolean green}, ${3:GLboolean blue}, ${4:GLboolean alpha})" },  
    { "trigger": "glColorPointer", "contents": "glColorPointer(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})" },  
    { "trigger": "glCompileShader", "contents": "glCompileShader(${1:GLuint shader})" },  
    { "trigger": "glCompressedTexImage2D", "contents": "glCompressedTexImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLenum internalformat}, ${4:GLsizei width}, ${5:GLsizei height}, ${6:GLint border}, ${7:GLsizei imageSize}, ${8:GLvoid* data})" },  
    { "trigger": "glCompressedTexSubImage2D", "contents": "glCompressedTexSubImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint xoffset}, ${4:GLint yoffset}, ${5:GLsizei width}, ${6:GLsizei height}, ${7:GLenum format}, ${8:GLsizei imageSize}, ${9:GLvoid* data})" },  
    { "trigger": "glCopyTexImage2D", "contents": "glCopyTexImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLenum internalformat}, ${4:GLint x}, ${5:GLint y}, ${6:GLsizei width}, ${7:GLsizei height}, ${8:GLint border})" },  
    { "trigger": "glCopyTexSubImage2D", "contents": "glCopyTexSubImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint xoffset}, ${4:GLint yoffset}, ${5:GLint x}, ${6:GLint y}, ${7:GLsizei width}, ${8:GLsizei height})" },  
    { "trigger": "glCreateProgram" },  
    { "trigger": "glCreateShader", "contents": "glCreateShader(${1:GLenum type})" },  
    { "trigger": "glCreateShaderProgramvEXT", "contents": "glCreateShaderProgramvEXT(${1:GLenum type}, ${2:GLsizei count}, ${3:GLchar** strings})" },  
    { "trigger": "glCullFace", "contents": "glCullFace(${1:GLenum mode})" },  
    { "trigger": "glCurrentPaletteMatrixOES", "contents": "glCurrentPaletteMatrixOES(${1:GLuint matrixpaletteindex})" },  
    { "trigger": "glDeleteBuffers", "contents": "glDeleteBuffers(${1:GLsizei n}, ${2:GLuint* buffers})" },  
    { "trigger": "glDeleteFramebuffers", "contents": "glDeleteFramebuffers(${1:GLsizei n}, ${2:GLuint* framebuffers})" },  
    { "trigger": "glDeleteFramebuffersOES", "contents": "glDeleteFramebuffersOES(${1:GLsizei n}, ${2:GLuint* framebuffers})" },  
    { "trigger": "glDeleteProgram", "contents": "glDeleteProgram(${1:GLuint program})" },  
    { "trigger": "glDeleteProgramPipelinesEXT", "contents": "glDeleteProgramPipelinesEXT(${1:GLsizei n}, ${2:GLuint* pipelines})" },  
    { "trigger": "glDeleteQueriesEXT", "contents": "glDeleteQueriesEXT(${1:GLsizei n}, ${2:GLuint* ids})" },  
    { "trigger": "glDeleteRenderbuffers", "contents": "glDeleteRenderbuffers(${1:GLsizei n}, ${2:GLuint* renderbuffers})" },  
    { "trigger": "glDeleteRenderbuffersOES", "contents": "glDeleteRenderbuffersOES(${1:GLsizei n}, ${2:GLuint* renderbuffers})" },  
    { "trigger": "glDeleteShader", "contents": "glDeleteShader(${1:GLuint shader})" },  
    { "trigger": "glDeleteTextures", "contents": "glDeleteTextures(${1:GLsizei n}, ${2:GLuint* textures})" },  
    { "trigger": "glDeleteVertexArraysOES", "contents": "glDeleteVertexArraysOES(${1:GLsizei n}, ${2:GLuint* arrays})" },  
    { "trigger": "glDepthFunc", "contents": "glDepthFunc(${1:GLenum func})" },  
    { "trigger": "glDepthMask", "contents": "glDepthMask(${1:GLboolean flag})" },  
    { "trigger": "glDepthRangef", "contents": "glDepthRangef(${1:GLclampf zNear}, ${2:GLclampf zFar})" },  
    { "trigger": "glDepthRangex", "contents": "glDepthRangex(${1:GLclampx zNear}, ${2:GLclampx zFar})" },  
    { "trigger": "glDetachShader", "contents": "glDetachShader(${1:GLuint program}, ${2:GLuint shader})" },  
    { "trigger": "glDisable", "contents": "glDisable(${1:GLenum cap})" },  
    { "trigger": "glDisableClientState", "contents": "glDisableClientState(${1:GLenum array})" },  
    { "trigger": "glDisableVertexAttribArray", "contents": "glDisableVertexAttribArray(${1:GLuint index})" },  
    { "trigger": "glDiscardFramebufferEXT", "contents": "glDiscardFramebufferEXT(${1:GLenum target}, ${2:GLsizei numAttachments}, ${3:GLenum* attachments})" },  
    { "trigger": "glDrawArrays", "contents": "glDrawArrays(${1:GLenum mode}, ${2:GLint first}, ${3:GLsizei count})" },  
    { "trigger": "glDrawElements", "contents": "glDrawElements(${1:GLenum mode}, ${2:GLsizei count}, ${3:GLenum type}, ${4:GLvoid* indices})" },  
    { "trigger": "glDrawTexfOES", "contents": "glDrawTexfOES(${1:GLfloat x}, ${2:GLfloat y}, ${3:GLfloat z}, ${4:GLfloat width}, ${5:GLfloat height})" },  
    { "trigger": "glDrawTexfvOES", "contents": "glDrawTexfvOES(${1:GLfloat* coords})" },  
    { "trigger": "glDrawTexiOES", "contents": "glDrawTexiOES(${1:GLint x}, ${2:GLint y}, ${3:GLint z}, ${4:GLint width}, ${5:GLint height})" },  
    { "trigger": "glDrawTexivOES", "contents": "glDrawTexivOES(${1:GLint* coords})" },  
    { "trigger": "glDrawTexsOES", "contents": "glDrawTexsOES(${1:GLshort x}, ${2:GLshort y}, ${3:GLshort z}, ${4:GLshort width}, ${5:GLshort height})" },  
    { "trigger": "glDrawTexsvOES", "contents": "glDrawTexsvOES(${1:GLshort* coords})" },  
    { "trigger": "glDrawTexxOES", "contents": "glDrawTexxOES(${1:GLfixed x}, ${2:GLfixed y}, ${3:GLfixed z}, ${4:GLfixed width}, ${5:GLfixed height})" },  
    { "trigger": "glDrawTexxvOES", "contents": "glDrawTexxvOES(${1:GLfixed* coords})" },  
    { "trigger": "glEnable", "contents": "glEnable(${1:GLenum cap})" },  
    { "trigger": "glEnableClientState", "contents": "glEnableClientState(${1:GLenum array})" },  
    { "trigger": "glEnableVertexAttribArray", "contents": "glEnableVertexAttribArray(${1:GLuint index})" },  
    { "trigger": "glEndQueryEXT", "contents": "glEndQueryEXT(${1:GLenum target})" },  
    { "trigger": "glFinish" },  
    { "trigger": "glFlush" },  
    { "trigger": "glFogf", "contents": "glFogf(${1:GLenum pname}, ${2:GLfloat param})" },  
    { "trigger": "glFogfv", "contents": "glFogfv(${1:GLenum pname}, ${2:GLfloat* params})" },  
    { "trigger": "glFogx", "contents": "glFogx(${1:GLenum pname}, ${2:GLfixed param})" },  
    { "trigger": "glFogxv", "contents": "glFogxv(${1:GLenum pname}, ${2:GLfixed* params})" },  
    { "trigger": "glFramebufferRenderbuffer", "contents": "glFramebufferRenderbuffer(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum renderbuffertarget}, ${4:GLuint renderbuffer})" },  
    { "trigger": "glFramebufferRenderbufferOES", "contents": "glFramebufferRenderbufferOES(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum renderbuffertarget}, ${4:GLuint renderbuffer})" },  
    { "trigger": "glFramebufferTexture2D", "contents": "glFramebufferTexture2D(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum textarget}, ${4:GLuint texture}, ${5:GLint level})" },  
    { "trigger": "glFramebufferTexture2DOES", "contents": "glFramebufferTexture2DOES(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum textarget}, ${4:GLuint texture}, ${5:GLint level})" },  
    { "trigger": "glFrontFace", "contents": "glFrontFace(${1:GLenum mode})" },  
    { "trigger": "glFrustumf", "contents": "glFrustumf(${1:GLfloat left}, ${2:GLfloat right}, ${3:GLfloat bottom}, ${4:GLfloat top}, ${5:GLfloat zNear}, ${6:GLfloat zFar})" },  
    { "trigger": "glFrustumx", "contents": "glFrustumx(${1:GLfixed left}, ${2:GLfixed right}, ${3:GLfixed bottom}, ${4:GLfixed top}, ${5:GLfixed zNear}, ${6:GLfixed zFar})" },  
    { "trigger": "glGenBuffers", "contents": "glGenBuffers(${1:GLsizei n}, ${2:GLuint* buffers})" },  
    { "trigger": "glGenFramebuffers", "contents": "glGenFramebuffers(${1:GLsizei n}, ${2:GLuint* framebuffers})" },  
    { "trigger": "glGenFramebuffersOES", "contents": "glGenFramebuffersOES(${1:GLsizei n}, ${2:GLuint* framebuffers})" },  
    { "trigger": "glGenProgramPipelinesEXT", "contents": "glGenProgramPipelinesEXT(${1:GLsizei n}, ${2:GLuint* pipelines})" },  
    { "trigger": "glGenQueriesEXT", "contents": "glGenQueriesEXT(${1:GLsizei n}, ${2:GLuint* ids})" },  
    { "trigger": "glGenRenderbuffers", "contents": "glGenRenderbuffers(${1:GLsizei n}, ${2:GLuint* renderbuffers})" },  
    { "trigger": "glGenRenderbuffersOES", "contents": "glGenRenderbuffersOES(${1:GLsizei n}, ${2:GLuint* renderbuffers})" },  
    { "trigger": "glGenTextures", "contents": "glGenTextures(${1:GLsizei n}, ${2:GLuint* textures})" },  
    { "trigger": "glGenVertexArraysOES", "contents": "glGenVertexArraysOES(${1:GLsizei n}, ${2:GLuint* arrays})" },  
    { "trigger": "glGenerateMipmap", "contents": "glGenerateMipmap(${1:GLenum target})" },  
    { "trigger": "glGenerateMipmapOES", "contents": "glGenerateMipmapOES(${1:GLenum target})" },  
    { "trigger": "glGetActiveAttrib", "contents": "glGetActiveAttrib(${1:GLuint program}, ${2:GLuint index}, ${3:GLsizei bufsize}, ${4:GLsizei* length}, ${5:GLint* size}, ${6:GLenum* type}, ${7:GLchar* name})" },  
    { "trigger": "glGetActiveUniform", "contents": "glGetActiveUniform(${1:GLuint program}, ${2:GLuint index}, ${3:GLsizei bufsize}, ${4:GLsizei* length}, ${5:GLint* size}, ${6:GLenum* type}, ${7:GLchar* name})" },  
    { "trigger": "glGetAttachedShaders", "contents": "glGetAttachedShaders(${1:GLuint program}, ${2:GLsizei maxcount}, ${3:GLsizei* count}, ${4:GLuint* shaders})" },  
    { "trigger": "glGetAttribLocation", "contents": "glGetAttribLocation(${1:GLuint program}, ${2:GLchar* name})" },  
    { "trigger": "glGetBooleanv", "contents": "glGetBooleanv(${1:GLenum pname}, ${2:GLboolean* params})" },  
    { "trigger": "glGetBufferParameteriv", "contents": "glGetBufferParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetBufferPointervOES", "contents": "glGetBufferPointervOES(${1:GLenum target}, ${2:GLenum pname}, ${3:GLvoid** params})" },  
    { "trigger": "glGetClipPlanef", "contents": "glGetClipPlanef(${1:GLenum pname}, ${2:GLfloat* equation})" },  
    { "trigger": "glGetClipPlanex", "contents": "glGetClipPlanex(${1:GLenum pname}, ${2:GLfixed* eqn})" },  
    { "trigger": "glGetError" },  
    { "trigger": "glGetFixedv", "contents": "glGetFixedv(${1:GLenum pname}, ${2:GLfixed* params})" },  
    { "trigger": "glGetFloatv", "contents": "glGetFloatv(${1:GLenum pname}, ${2:GLfloat* params})" },  
    { "trigger": "glGetFramebufferAttachmentParameteriv", "contents": "glGetFramebufferAttachmentParameteriv(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum pname}, ${4:GLint* params})" },  
    { "trigger": "glGetFramebufferAttachmentParameterivOES", "contents": "glGetFramebufferAttachmentParameterivOES(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum pname}, ${4:GLint* params})" },  
    { "trigger": "glGetIntegerv", "contents": "glGetIntegerv(${1:GLenum pname}, ${2:GLint* params})" },  
    { "trigger": "glGetLightfv", "contents": "glGetLightfv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glGetLightxv", "contents": "glGetLightxv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glGetMaterialfv", "contents": "glGetMaterialfv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glGetMaterialxv", "contents": "glGetMaterialxv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glGetObjectLabelEXT", "contents": "glGetObjectLabelEXT(${1:GLenum type}, ${2:GLuint object}, ${3:GLsizei bufSize}, ${4:GLsizei* length}, ${5:GLchar* label})" },  
    { "trigger": "glGetPointerv", "contents": "glGetPointerv(${1:GLenum pname}, ${2:void** params})" },  
    { "trigger": "glGetProgramInfoLog", "contents": "glGetProgramInfoLog(${1:GLuint program}, ${2:GLsizei bufsize}, ${3:GLsizei* length}, ${4:GLchar* infolog})" },  
    { "trigger": "glGetProgramPipelineInfoLogEXT", "contents": "glGetProgramPipelineInfoLogEXT(${1:GLuint pipeline}, ${2:GLsizei bufSize}, ${3:GLsizei* length}, ${4:GLchar* infoLog})" },  
    { "trigger": "glGetProgramPipelineivEXT", "contents": "glGetProgramPipelineivEXT(${1:GLuint pipeline}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetProgramiv", "contents": "glGetProgramiv(${1:GLuint program}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetQueryObjectivEXT", "contents": "glGetQueryObjectivEXT(${1:GLuint id}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetQueryObjectuivEXT", "contents": "glGetQueryObjectuivEXT(${1:GLuint id}, ${2:GLenum pname}, ${3:GLuint* params})" },  
    { "trigger": "glGetQueryivEXT", "contents": "glGetQueryivEXT(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetRenderbufferParameteriv", "contents": "glGetRenderbufferParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetRenderbufferParameterivOES", "contents": "glGetRenderbufferParameterivOES(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetShaderInfoLog", "contents": "glGetShaderInfoLog(${1:GLuint shader}, ${2:GLsizei bufsize}, ${3:GLsizei* length}, ${4:GLchar* infolog})" },  
    { "trigger": "glGetShaderPrecisionFormat", "contents": "glGetShaderPrecisionFormat(${1:GLenum shadertype}, ${2:GLenum precisiontype}, ${3:GLint* range}, ${4:GLint* precision})" },  
    { "trigger": "glGetShaderSource", "contents": "glGetShaderSource(${1:GLuint shader}, ${2:GLsizei bufsize}, ${3:GLsizei* length}, ${4:GLchar* source})" },  
    { "trigger": "glGetShaderiv", "contents": "glGetShaderiv(${1:GLuint shader}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetString", "contents": "glGetString(${1:GLenum name})" },  
    { "trigger": "glGetTexEnvfv", "contents": "glGetTexEnvfv(${1:GLenum env}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glGetTexEnviv", "contents": "glGetTexEnviv(${1:GLenum env}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetTexEnvxv", "contents": "glGetTexEnvxv(${1:GLenum env}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glGetTexParameterfv", "contents": "glGetTexParameterfv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glGetTexParameteriv", "contents": "glGetTexParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glGetTexParameterxv", "contents": "glGetTexParameterxv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glGetUniformLocation", "contents": "glGetUniformLocation(${1:GLuint program}, ${2:GLchar* name})" },  
    { "trigger": "glGetUniformfv", "contents": "glGetUniformfv(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat* params})" },  
    { "trigger": "glGetUniformiv", "contents": "glGetUniformiv(${1:GLuint program}, ${2:GLint location}, ${3:GLint* params})" },  
    { "trigger": "glGetVertexAttribPointerv", "contents": "glGetVertexAttribPointerv(${1:GLuint index}, ${2:GLenum pname}, ${3:GLvoid** pointer})" },  
    { "trigger": "glGetVertexAttribfv", "contents": "glGetVertexAttribfv(${1:GLuint index}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glGetVertexAttribiv", "contents": "glGetVertexAttribiv(${1:GLuint index}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glHint", "contents": "glHint(${1:GLenum target}, ${2:GLenum mode})" },  
    { "trigger": "glInsertEventMarkerEXT", "contents": "glInsertEventMarkerEXT(${1:GLsizei length}, ${2:GLchar* marker})" },  
    { "trigger": "glIsBuffer", "contents": "glIsBuffer(${1:GLuint buffer})" },  
    { "trigger": "glIsEnabled", "contents": "glIsEnabled(${1:GLenum cap})" },  
    { "trigger": "glIsFramebuffer", "contents": "glIsFramebuffer(${1:GLuint framebuffer})" },  
    { "trigger": "glIsFramebufferOES", "contents": "glIsFramebufferOES(${1:GLuint framebuffer})" },  
    { "trigger": "glIsProgram", "contents": "glIsProgram(${1:GLuint program})" },  
    { "trigger": "glIsProgramPipelineEXT", "contents": "glIsProgramPipelineEXT(${1:GLuint pipeline})" },  
    { "trigger": "glIsQueryEXT", "contents": "glIsQueryEXT(${1:GLuint id})" },  
    { "trigger": "glIsRenderbuffer", "contents": "glIsRenderbuffer(${1:GLuint renderbuffer})" },  
    { "trigger": "glIsRenderbufferOES", "contents": "glIsRenderbufferOES(${1:GLuint renderbuffer})" },  
    { "trigger": "glIsShader", "contents": "glIsShader(${1:GLuint shader})" },  
    { "trigger": "glIsTexture", "contents": "glIsTexture(${1:GLuint texture})" },  
    { "trigger": "glIsVertexArrayOES", "contents": "glIsVertexArrayOES(${1:GLuint array})" },  
    { "trigger": "glLabelObjectEXT", "contents": "glLabelObjectEXT(${1:GLenum type}, ${2:GLuint object}, ${3:GLsizei length}, ${4:GLchar* label})" },  
    { "trigger": "glLightModelf", "contents": "glLightModelf(${1:GLenum pname}, ${2:GLfloat param})" },  
    { "trigger": "glLightModelfv", "contents": "glLightModelfv(${1:GLenum pname}, ${2:GLfloat* params})" },  
    { "trigger": "glLightModelx", "contents": "glLightModelx(${1:GLenum pname}, ${2:GLfixed param})" },  
    { "trigger": "glLightModelxv", "contents": "glLightModelxv(${1:GLenum pname}, ${2:GLfixed* params})" },  
    { "trigger": "glLightf", "contents": "glLightf(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfloat param})" },  
    { "trigger": "glLightfv", "contents": "glLightfv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glLightx", "contents": "glLightx(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfixed param})" },  
    { "trigger": "glLightxv", "contents": "glLightxv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glLineWidth", "contents": "glLineWidth(${1:GLfloat width})" },  
    { "trigger": "glLineWidthx", "contents": "glLineWidthx(${1:GLfixed width})" },  
    { "trigger": "glLinkProgram", "contents": "glLinkProgram(${1:GLuint program})" },  
    { "trigger": "glLoadIdentity" },  
    { "trigger": "glLoadMatrixf", "contents": "glLoadMatrixf(${1:GLfloat* m})" },  
    { "trigger": "glLoadMatrixx", "contents": "glLoadMatrixx(${1:GLfixed* m})" },  
    { "trigger": "glLoadPaletteFromModelViewMatrixOES" },  
    { "trigger": "glLogicOp", "contents": "glLogicOp(${1:GLenum opcode})" },  
    { "trigger": "glMapBufferOES", "contents": "glMapBufferOES(${1:GLenum target}, ${2:GLenum access})" },  
    { "trigger": "glMaterialf", "contents": "glMaterialf(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfloat param})" },  
    { "trigger": "glMaterialfv", "contents": "glMaterialfv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glMaterialx", "contents": "glMaterialx(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfixed param})" },  
    { "trigger": "glMaterialxv", "contents": "glMaterialxv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glMatrixIndexPointerOES", "contents": "glMatrixIndexPointerOES(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})" },  
    { "trigger": "glMatrixMode", "contents": "glMatrixMode(${1:GLenum mode})" },  
    { "trigger": "glMultMatrixf", "contents": "glMultMatrixf(${1:GLfloat* m})" },  
    { "trigger": "glMultMatrixx", "contents": "glMultMatrixx(${1:GLfixed* m})" },  
    { "trigger": "glMultiTexCoord4f", "contents": "glMultiTexCoord4f(${1:GLenum target}, ${2:GLfloat s}, ${3:GLfloat t}, ${4:GLfloat r}, ${5:GLfloat q})" },  
    { "trigger": "glMultiTexCoord4x", "contents": "glMultiTexCoord4x(${1:GLenum target}, ${2:GLfixed s}, ${3:GLfixed t}, ${4:GLfixed r}, ${5:GLfixed q})" },  
    { "trigger": "glNormal3f", "contents": "glNormal3f(${1:GLfloat nx}, ${2:GLfloat ny}, ${3:GLfloat nz})" },  
    { "trigger": "glNormal3x", "contents": "glNormal3x(${1:GLfixed nx}, ${2:GLfixed ny}, ${3:GLfixed nz})" },  
    { "trigger": "glNormalPointer", "contents": "glNormalPointer(${1:GLenum type}, ${2:GLsizei stride}, ${3:GLvoid* pointer})" },  
    { "trigger": "glOrthof", "contents": "glOrthof(${1:GLfloat left}, ${2:GLfloat right}, ${3:GLfloat bottom}, ${4:GLfloat top}, ${5:GLfloat zNear}, ${6:GLfloat zFar})" },  
    { "trigger": "glOrthox", "contents": "glOrthox(${1:GLfixed left}, ${2:GLfixed right}, ${3:GLfixed bottom}, ${4:GLfixed top}, ${5:GLfixed zNear}, ${6:GLfixed zFar})" },  
    { "trigger": "glPixelStorei", "contents": "glPixelStorei(${1:GLenum pname}, ${2:GLint param})" },  
    { "trigger": "glPointParameterf", "contents": "glPointParameterf(${1:GLenum pname}, ${2:GLfloat param})" },  
    { "trigger": "glPointParameterfv", "contents": "glPointParameterfv(${1:GLenum pname}, ${2:GLfloat* params})" },  
    { "trigger": "glPointParameterx", "contents": "glPointParameterx(${1:GLenum pname}, ${2:GLfixed param})" },  
    { "trigger": "glPointParameterxv", "contents": "glPointParameterxv(${1:GLenum pname}, ${2:GLfixed* params})" },  
    { "trigger": "glPointSize", "contents": "glPointSize(${1:GLfloat size})" },  
    { "trigger": "glPointSizePointerOES", "contents": "glPointSizePointerOES(${1:GLenum type}, ${2:GLsizei stride}, ${3:GLvoid* pointer})" },  
    { "trigger": "glPointSizex", "contents": "glPointSizex(${1:GLfixed size})" },  
    { "trigger": "glPolygonOffset", "contents": "glPolygonOffset(${1:GLfloat factor}, ${2:GLfloat units})" },  
    { "trigger": "glPolygonOffsetx", "contents": "glPolygonOffsetx(${1:GLfixed factor}, ${2:GLfixed units})" },  
    { "trigger": "glPopGroupMarkerEXT" },  
    { "trigger": "glPopMatrix" },  
    { "trigger": "glProgramParameteriEXT", "contents": "glProgramParameteriEXT(${1:GLuint program}, ${2:GLenum pname}, ${3:GLint value})" },  
    { "trigger": "glProgramUniform1fEXT", "contents": "glProgramUniform1fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x})" },  
    { "trigger": "glProgramUniform1fvEXT", "contents": "glProgramUniform1fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})" },  
    { "trigger": "glProgramUniform1iEXT", "contents": "glProgramUniform1iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x})" },  
    { "trigger": "glProgramUniform1ivEXT", "contents": "glProgramUniform1ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})" },  
    { "trigger": "glProgramUniform2fEXT", "contents": "glProgramUniform2fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x}, ${4:GLfloat y})" },  
    { "trigger": "glProgramUniform2fvEXT", "contents": "glProgramUniform2fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})" },  
    { "trigger": "glProgramUniform2iEXT", "contents": "glProgramUniform2iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x}, ${4:GLint y})" },  
    { "trigger": "glProgramUniform2ivEXT", "contents": "glProgramUniform2ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})" },  
    { "trigger": "glProgramUniform3fEXT", "contents": "glProgramUniform3fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x}, ${4:GLfloat y}, ${5:GLfloat z})" },  
    { "trigger": "glProgramUniform3fvEXT", "contents": "glProgramUniform3fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})" },  
    { "trigger": "glProgramUniform3iEXT", "contents": "glProgramUniform3iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x}, ${4:GLint y}, ${5:GLint z})" },  
    { "trigger": "glProgramUniform3ivEXT", "contents": "glProgramUniform3ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})" },  
    { "trigger": "glProgramUniform4fEXT", "contents": "glProgramUniform4fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x}, ${4:GLfloat y}, ${5:GLfloat z}, ${6:GLfloat w})" },  
    { "trigger": "glProgramUniform4fvEXT", "contents": "glProgramUniform4fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})" },  
    { "trigger": "glProgramUniform4iEXT", "contents": "glProgramUniform4iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x}, ${4:GLint y}, ${5:GLint z}, ${6:GLint w})" },  
    { "trigger": "glProgramUniform4ivEXT", "contents": "glProgramUniform4ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})" },  
    { "trigger": "glProgramUniformMatrix2fvEXT", "contents": "glProgramUniformMatrix2fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLboolean transpose}, ${5:GLfloat* value})" },  
    { "trigger": "glProgramUniformMatrix3fvEXT", "contents": "glProgramUniformMatrix3fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLboolean transpose}, ${5:GLfloat* value})" },  
    { "trigger": "glProgramUniformMatrix4fvEXT", "contents": "glProgramUniformMatrix4fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLboolean transpose}, ${5:GLfloat* value})" },  
    { "trigger": "glPushGroupMarkerEXT", "contents": "glPushGroupMarkerEXT(${1:GLsizei length}, ${2:GLchar* marker})" },  
    { "trigger": "glPushMatrix" },  
    { "trigger": "glReadPixels", "contents": "glReadPixels(${1:GLint x}, ${2:GLint y}, ${3:GLsizei width}, ${4:GLsizei height}, ${5:GLenum format}, ${6:GLenum type}, ${7:GLvoid* pixels})" },  
    { "trigger": "glReleaseShaderCompiler" },  
    { "trigger": "glRenderbufferStorage", "contents": "glRenderbufferStorage(${1:GLenum target}, ${2:GLenum internalformat}, ${3:GLsizei width}, ${4:GLsizei height})" },  
    { "trigger": "glRenderbufferStorageMultisampleAPPLE", "contents": "glRenderbufferStorageMultisampleAPPLE(${1:GLenum target}, ${2:GLsizei samples}, ${3:GLenum internalformat}, ${4:GLsizei width}, ${5:GLsizei height})" },  
    { "trigger": "glRenderbufferStorageOES", "contents": "glRenderbufferStorageOES(${1:GLenum target}, ${2:GLenum internalformat}, ${3:GLsizei width}, ${4:GLsizei height})" },  
    { "trigger": "glResolveMultisampleFramebufferAPPLE" },  
    { "trigger": "glRotatef", "contents": "glRotatef(${1:GLfloat angle}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z})" },  
    { "trigger": "glRotatex", "contents": "glRotatex(${1:GLfixed angle}, ${2:GLfixed x}, ${3:GLfixed y}, ${4:GLfixed z})" },  
    { "trigger": "glSampleCoverage", "contents": "glSampleCoverage(${1:GLclampf value}, ${2:GLboolean invert})" },  
    { "trigger": "glSampleCoveragex", "contents": "glSampleCoveragex(${1:GLclampx value}, ${2:GLboolean invert})" },  
    { "trigger": "glScalef", "contents": "glScalef(${1:GLfloat x}, ${2:GLfloat y}, ${3:GLfloat z})" },  
    { "trigger": "glScalex", "contents": "glScalex(${1:GLfixed x}, ${2:GLfixed y}, ${3:GLfixed z})" },  
    { "trigger": "glScissor", "contents": "glScissor(${1:GLint x}, ${2:GLint y}, ${3:GLsizei width}, ${4:GLsizei height})" },  
    { "trigger": "glShadeModel", "contents": "glShadeModel(${1:GLenum mode})" },  
    { "trigger": "glShaderBinary", "contents": "glShaderBinary(${1:GLsizei n}, ${2:GLuint* shaders}, ${3:GLenum binaryformat}, ${4:GLvoid* binary}, ${5:GLsizei length})" },  
    { "trigger": "glShaderSource", "contents": "glShaderSource(${1:GLuint shader}, ${2:GLsizei count}, ${3:GLchar** string}, ${4:GLint* length})" },  
    { "trigger": "glStencilFunc", "contents": "glStencilFunc(${1:GLenum func}, ${2:GLint ref}, ${3:GLuint mask})" },  
    { "trigger": "glStencilFuncSeparate", "contents": "glStencilFuncSeparate(${1:GLenum face}, ${2:GLenum func}, ${3:GLint ref}, ${4:GLuint mask})" },  
    { "trigger": "glStencilMask", "contents": "glStencilMask(${1:GLuint mask})" },  
    { "trigger": "glStencilMaskSeparate", "contents": "glStencilMaskSeparate(${1:GLenum face}, ${2:GLuint mask})" },  
    { "trigger": "glStencilOp", "contents": "glStencilOp(${1:GLenum fail}, ${2:GLenum zfail}, ${3:GLenum zpass})" },  
    { "trigger": "glStencilOpSeparate", "contents": "glStencilOpSeparate(${1:GLenum face}, ${2:GLenum fail}, ${3:GLenum zfail}, ${4:GLenum zpass})" },  
    { "trigger": "glTexCoordPointer", "contents": "glTexCoordPointer(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})" },  
    { "trigger": "glTexEnvf", "contents": "glTexEnvf(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat param})" },  
    { "trigger": "glTexEnvfv", "contents": "glTexEnvfv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glTexEnvi", "contents": "glTexEnvi(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint param})" },  
    { "trigger": "glTexEnviv", "contents": "glTexEnviv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glTexEnvx", "contents": "glTexEnvx(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed param})" },  
    { "trigger": "glTexEnvxv", "contents": "glTexEnvxv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glTexImage2D", "contents": "glTexImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint internalformat}, ${4:GLsizei width}, ${5:GLsizei height}, ${6:GLint border}, ${7:GLenum format}, ${8:GLenum type}, ${9:GLvoid* pixels})" },  
    { "trigger": "glTexParameterf", "contents": "glTexParameterf(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat param})" },  
    { "trigger": "glTexParameterfv", "contents": "glTexParameterfv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat* params})" },  
    { "trigger": "glTexParameteri", "contents": "glTexParameteri(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint param})" },  
    { "trigger": "glTexParameteriv", "contents": "glTexParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})" },  
    { "trigger": "glTexParameterx", "contents": "glTexParameterx(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed param})" },  
    { "trigger": "glTexParameterxv", "contents": "glTexParameterxv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed* params})" },  
    { "trigger": "glTexSubImage2D", "contents": "glTexSubImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint xoffset}, ${4:GLint yoffset}, ${5:GLsizei width}, ${6:GLsizei height}, ${7:GLenum format}, ${8:GLenum type}, ${9:GLvoid* pixels})" },  
    { "trigger": "glTranslatef", "contents": "glTranslatef(${1:GLfloat x}, ${2:GLfloat y}, ${3:GLfloat z})" },  
    { "trigger": "glTranslatex", "contents": "glTranslatex(${1:GLfixed x}, ${2:GLfixed y}, ${3:GLfixed z})" },  
    { "trigger": "glUniform1f", "contents": "glUniform1f(${1:GLint location}, ${2:GLfloat x})" },  
    { "trigger": "glUniform1fv", "contents": "glUniform1fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})" },  
    { "trigger": "glUniform1i", "contents": "glUniform1i(${1:GLint location}, ${2:GLint x})" },  
    { "trigger": "glUniform1iv", "contents": "glUniform1iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})" },  
    { "trigger": "glUniform2f", "contents": "glUniform2f(${1:GLint location}, ${2:GLfloat x}, ${3:GLfloat y})" },  
    { "trigger": "glUniform2fv", "contents": "glUniform2fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})" },  
    { "trigger": "glUniform2i", "contents": "glUniform2i(${1:GLint location}, ${2:GLint x}, ${3:GLint y})" },  
    { "trigger": "glUniform2iv", "contents": "glUniform2iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})" },  
    { "trigger": "glUniform3f", "contents": "glUniform3f(${1:GLint location}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z})" },  
    { "trigger": "glUniform3fv", "contents": "glUniform3fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})" },  
    { "trigger": "glUniform3i", "contents": "glUniform3i(${1:GLint location}, ${2:GLint x}, ${3:GLint y}, ${4:GLint z})" },  
    { "trigger": "glUniform3iv", "contents": "glUniform3iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})" },  
    { "trigger": "glUniform4f", "contents": "glUniform4f(${1:GLint location}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z}, ${5:GLfloat w})" },  
    { "trigger": "glUniform4fv", "contents": "glUniform4fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})" },  
    { "trigger": "glUniform4i", "contents": "glUniform4i(${1:GLint location}, ${2:GLint x}, ${3:GLint y}, ${4:GLint z}, ${5:GLint w})" },  
    { "trigger": "glUniform4iv", "contents": "glUniform4iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})" },  
    { "trigger": "glUniformMatrix2fv", "contents": "glUniformMatrix2fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLboolean transpose}, ${4:GLfloat* value})" },  
    { "trigger": "glUniformMatrix3fv", "contents": "glUniformMatrix3fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLboolean transpose}, ${4:GLfloat* value})" },  
    { "trigger": "glUniformMatrix4fv", "contents": "glUniformMatrix4fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLboolean transpose}, ${4:GLfloat* value})" },  
    { "trigger": "glUnmapBufferOES", "contents": "glUnmapBufferOES(${1:GLenum target})" },  
    { "trigger": "glUseProgram", "contents": "glUseProgram(${1:GLuint program})" },  
    { "trigger": "glUseProgramStagesEXT", "contents": "glUseProgramStagesEXT(${1:GLuint pipeline}, ${2:GLbitfield stages}, ${3:GLuint program})" },  
    { "trigger": "glValidateProgram", "contents": "glValidateProgram(${1:GLuint program})" },  
    { "trigger": "glValidateProgramPipelineEXT", "contents": "glValidateProgramPipelineEXT(${1:GLuint pipeline})" },  
    { "trigger": "glVertexAttrib1f", "contents": "glVertexAttrib1f(${1:GLuint indx}, ${2:GLfloat x})" },  
    { "trigger": "glVertexAttrib1fv", "contents": "glVertexAttrib1fv(${1:GLuint indx}, ${2:GLfloat* values})" },  
    { "trigger": "glVertexAttrib2f", "contents": "glVertexAttrib2f(${1:GLuint indx}, ${2:GLfloat x}, ${3:GLfloat y})" },  
    { "trigger": "glVertexAttrib2fv", "contents": "glVertexAttrib2fv(${1:GLuint indx}, ${2:GLfloat* values})" },  
    { "trigger": "glVertexAttrib3f", "contents": "glVertexAttrib3f(${1:GLuint indx}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z})" },  
    { "trigger": "glVertexAttrib3fv", "contents": "glVertexAttrib3fv(${1:GLuint indx}, ${2:GLfloat* values})" },  
    { "trigger": "glVertexAttrib4f", "contents": "glVertexAttrib4f(${1:GLuint indx}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z}, ${5:GLfloat w})" },  
    { "trigger": "glVertexAttrib4fv", "contents": "glVertexAttrib4fv(${1:GLuint indx}, ${2:GLfloat* values})" },  
    { "trigger": "glVertexAttribPointer", "contents": "glVertexAttribPointer(${1:GLuint indx}, ${2:GLint size}, ${3:GLenum type}, ${4:GLboolean normalized}, ${5:GLsizei stride}, ${6:GLvoid* ptr})" },  
    { "trigger": "glVertexPointer", "contents": "glVertexPointer(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})" },  
    { "trigger": "glViewport", "contents": "glViewport(${1:GLint x}, ${2:GLint y}, ${3:GLsizei width}, ${4:GLsizei height})" },  
    { "trigger": "glWeightPointerOES", "contents": "glWeightPointerOES(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})" },  
    { "trigger": "glkViewControllerUpdate:", "contents": "glkViewControllerUpdate:(${1:GLKViewController* controller})" },  
    { "trigger": "glkViewControllerUpdate:", "contents": "glkViewControllerUpdate:(${1:GLKViewController* controller})" },  
    { "trigger": "glkViewController:willPause:", "contents": "glkViewController:willPause:(${1:GLKViewController* controller}, willPause:${2:BOOL pause})" },  
    { "trigger": "glkViewController:willPause:", "contents": "glkViewController:willPause:(${1:GLKViewController* controller}, willPause:${2:BOOL pause})" },  
    { "trigger": "glkView:drawInRect:", "contents": "glkView:drawInRect:(${1:GLKView* view}, drawInRect:${2:CGRect rect})" },  
    { "trigger": "glkView:drawInRect:", "contents": "glkView:drawInRect:(${1:GLKView* view}, drawInRect:${2:CGRect rect})" },  
    { "trigger": "globallyUniqueString" },  
    { "trigger": "goBack" },  
    { "trigger": "goForward" },  
    { "trigger": "grammarDetails" },  
    { "trigger": "gravity" },  
    { "trigger": "green" },  
    { "trigger": "greenRange" },  
    { "trigger": "greenSpeed" },  
    { "trigger": "gregorianStartDate" },  
    { "trigger": "groupForURL:resultBlock:failureBlock:", "contents": "groupForURL:resultBlock:failureBlock:(${1:NSURL* groupURL}, resultBlock:${2:ALAssetsLibraryGroupResultBlock resultBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})" },  
    { "trigger": "groupedResults" },  
    { "trigger": "groupingAttributes" },  
    { "trigger": "groupingLevel" },  
    { "trigger": "groupingSeparator" },  
    { "trigger": "groupingSize" },  
    { "trigger": "groupingType" },  
    { "trigger": "groupsByEvent" },  
    { "trigger": "guessesForWordRange:inString:language:", "contents": "guessesForWordRange:inString:language:(${1:NSRange range}, inString:${2:NSString* string}, language:${3:NSString* language})" },  
    { "trigger": "gyroData" },  
    { "trigger": "gyroUpdateInterval" },  
    { "trigger": "handleError:userInteractionPermitted:", "contents": "handleError:userInteractionPermitted:(${1:NSError* error}, userInteractionPermitted:${2:BOOL userInteractionPermitted})" },  
    { "trigger": "handleFailureInFunction:file:lineNumber:description:", "contents": "handleFailureInFunction:file:lineNumber:description:(${1:NSString* functionName}, file:${2:NSString* fileName}, lineNumber:${3:NSInteger line}, description:${4:NSString* format})" },  
    { "trigger": "handleFailureInMethod:object:file:lineNumber:description:", "contents": "handleFailureInMethod:object:file:lineNumber:description:(${1:SEL selector}, object:${2:id object}, file:${3:NSString* fileName}, lineNumber:${4:NSInteger line}, description:${5:NSString* format})" },  
    { "trigger": "handleInviteFromGameCenter:", "contents": "handleInviteFromGameCenter:(${1:NSArray* playersToInvite})" },  
    { "trigger": "handleInviteFromGameCenter:", "contents": "handleInviteFromGameCenter:(${1:NSArray* playersToInvite})" },  
    { "trigger": "handleMachMessage:", "contents": "handleMachMessage:(${1:void* msg})" },  
    { "trigger": "handleMachMessage:", "contents": "handleMachMessage:(${1:void* msg})" },  
    { "trigger": "handleMatchEnded:", "contents": "handleMatchEnded:(${1:GKTurnBasedMatch* match})" },  
    { "trigger": "handleMatchEnded:", "contents": "handleMatchEnded:(${1:GKTurnBasedMatch* match})" },  
    { "trigger": "handlePortMessage:", "contents": "handlePortMessage:(${1:NSPortMessage* message})" },  
    { "trigger": "handlePortMessage:", "contents": "handlePortMessage:(${1:NSPortMessage* message})" },  
    { "trigger": "handleTurnEventForMatch:", "contents": "handleTurnEventForMatch:(${1:GKTurnBasedMatch* match})" },  
    { "trigger": "handleTurnEventForMatch:", "contents": "handleTurnEventForMatch:(${1:GKTurnBasedMatch* match})" },  
    { "trigger": "hardwareRevision" },  
    { "trigger": "hasAction" },  
    { "trigger": "hasAlarms" },  
    { "trigger": "hasAttendees" },  
    { "trigger": "hasBytesAvailable" },  
    { "trigger": "hasChanges" },  
    { "trigger": "hasChanges" },  
    { "trigger": "hasChanges" },  
    { "trigger": "hasFaultForRelationshipNamed:", "contents": "hasFaultForRelationshipNamed:(${1:NSString* key})" },  
    { "trigger": "hasFlash" },  
    { "trigger": "hasLeftEyePosition" },  
    { "trigger": "hasMediaCharacteristic:", "contents": "hasMediaCharacteristic:(${1:NSString* mediaCharacteristic})" },  
    { "trigger": "hasMediaCharacteristic:", "contents": "hasMediaCharacteristic:(${1:NSString* mediaCharacteristic})" },  
    { "trigger": "hasMediaType:", "contents": "hasMediaType:(${1:NSString* mediaType})" },  
    { "trigger": "hasMemberInPlane:", "contents": "hasMemberInPlane:(${1:uint8_t thePlane})" },  
    { "trigger": "hasMouthPosition" },  
    { "trigger": "hasNotes" },  
    { "trigger": "hasPassword" },  
    { "trigger": "hasPrefix:", "contents": "hasPrefix:(${1:NSString* aString})" },  
    { "trigger": "hasProtectedContent" },  
    { "trigger": "hasRecurrenceRules" },  
    { "trigger": "hasRightEyePosition" },  
    { "trigger": "hasSameAddressAs:", "contents": "hasSameAddressAs:(${1:MIDINetworkHost* other})" },  
    { "trigger": "hasSpaceAvailable" },  
    { "trigger": "hasSuffix:", "contents": "hasSuffix:(${1:NSString* aString})" },  
    { "trigger": "hasText" },  
    { "trigger": "hasText" },  
    { "trigger": "hasText" },  
    { "trigger": "hasTorch" },  
    { "trigger": "hasUnsavedChanges" },  
    { "trigger": "hash" },  
    { "trigger": "hash" },  
    { "trigger": "hash" },  
    { "trigger": "havingPredicate" },  
    { "trigger": "headerHeight" },  
    { "trigger": "heading" },  
    { "trigger": "heading" },  
    { "trigger": "headingAccuracy" },  
    { "trigger": "headingAvailable" },  
    { "trigger": "headingFilter" },  
    { "trigger": "headingOrientation" },  
    { "trigger": "height" },  
    { "trigger": "helpAnchor" },  
    { "trigger": "hidesAccessoryWhenEditing" },  
    { "trigger": "hidesBackButton" },  
    { "trigger": "hidesBottomBarWhenPushed" },  
    { "trigger": "hidesForSinglePage" },  
    { "trigger": "hidesWhenStopped" },  
    { "trigger": "highlightedAnimationImages" },  
    { "trigger": "highlightedImage" },  
    { "trigger": "highlightedTextColor" },  
    { "trigger": "hitTest:", "contents": "hitTest:(${1:CGPoint p})" },  
    { "trigger": "hitTest:withEvent:", "contents": "hitTest:withEvent:(${1:CGPoint point}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "horizontalAccuracy" },  
    { "trigger": "host" },  
    { "trigger": "host" },  
    { "trigger": "host" },  
    { "trigger": "hostName" },  
    { "trigger": "hostName" },  
    { "trigger": "hour" },  
    { "trigger": "icons" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identifier" },  
    { "trigger": "identity" },  
    { "trigger": "ignoreTouch:forEvent:", "contents": "ignoreTouch:forEvent:(${1:UITouch* touch}, forEvent:${2:UIEvent* event})" },  
    { "trigger": "ignoreWord:", "contents": "ignoreWord:(${1:NSString* wordToIgnore})" },  
    { "trigger": "ignoredWords" },  
    { "trigger": "image" },  
    { "trigger": "image" },  
    { "trigger": "image" },  
    { "trigger": "image" },  
    { "trigger": "image" },  
    { "trigger": "image" },  
    { "trigger": "imageByApplyingTransform:", "contents": "imageByApplyingTransform:(${1:CGAffineTransform matrix})" },  
    { "trigger": "imageByCroppingToRect:", "contents": "imageByCroppingToRect:(${1:CGRect r})" },  
    { "trigger": "imageCropRect" },  
    { "trigger": "imageEdgeInsets" },  
    { "trigger": "imageForSearchBarIcon:state:", "contents": "imageForSearchBarIcon:state:(${1:UISearchBarIcon icon}, state:${2:UIControlState state})" },  
    { "trigger": "imageForSegmentAtIndex:", "contents": "imageForSegmentAtIndex:(${1:NSUInteger segment})" },  
    { "trigger": "imageForState:", "contents": "imageForState:(${1:UIControlState state})" },  
    { "trigger": "imageInsets" },  
    { "trigger": "imageOrientation" },  
    { "trigger": "imagePickerControllerDidCancel:", "contents": "imagePickerControllerDidCancel:(${1:UIImagePickerController* picker})" },  
    { "trigger": "imagePickerControllerDidCancel:", "contents": "imagePickerControllerDidCancel:(${1:UIImagePickerController* picker})" },  
    { "trigger": "imagePickerController:didFinishPickingImage:editingInfo:", "contents": "imagePickerController:didFinishPickingImage:editingInfo:(${1:UIImagePickerController* picker}, didFinishPickingImage:${2:UIImage* image}, editingInfo:${3:NSDictionary* editingInfo})" },  
    { "trigger": "imagePickerController:didFinishPickingImage:editingInfo:", "contents": "imagePickerController:didFinishPickingImage:editingInfo:(${1:UIImagePickerController* picker}, didFinishPickingImage:${2:UIImage* image}, editingInfo:${3:NSDictionary* editingInfo})" },  
    { "trigger": "imagePickerController:didFinishPickingMediaWithInfo:", "contents": "imagePickerController:didFinishPickingMediaWithInfo:(${1:UIImagePickerController* picker}, didFinishPickingMediaWithInfo:${2:NSDictionary* info})" },  
    { "trigger": "imagePickerController:didFinishPickingMediaWithInfo:", "contents": "imagePickerController:didFinishPickingMediaWithInfo:(${1:UIImagePickerController* picker}, didFinishPickingMediaWithInfo:${2:NSDictionary* info})" },  
    { "trigger": "imageRectForContentRect:", "contents": "imageRectForContentRect:(${1:CGRect contentRect})" },  
    { "trigger": "imageView" },  
    { "trigger": "imageView" },  
    { "trigger": "imageWithSize:", "contents": "imageWithSize:(${1:CGSize size})" },  
    { "trigger": "images" },  
    { "trigger": "images" },  
    { "trigger": "includedServices" },  
    { "trigger": "includesPendingChanges" },  
    { "trigger": "includesPropertyValues" },  
    { "trigger": "includesSubentities" },  
    { "trigger": "increaseLengthBy:", "contents": "increaseLengthBy:(${1:NSUInteger extraLength})" },  
    { "trigger": "indentationLevel" },  
    { "trigger": "indentationWidth" },  
    { "trigger": "indexAtPosition:", "contents": "indexAtPosition:(${1:NSUInteger position})" },  
    { "trigger": "indexGreaterThanIndex:", "contents": "indexGreaterThanIndex:(${1:NSUInteger value})" },  
    { "trigger": "indexGreaterThanOrEqualToIndex:", "contents": "indexGreaterThanOrEqualToIndex:(${1:NSUInteger value})" },  
    { "trigger": "indexInRange:options:passingTest:", "contents": "indexInRange:options:passingTest:(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexLessThanIndex:", "contents": "indexLessThanIndex:(${1:NSUInteger value})" },  
    { "trigger": "indexLessThanOrEqualToIndex:", "contents": "indexLessThanOrEqualToIndex:(${1:NSUInteger value})" },  
    { "trigger": "indexOfAccessibilityElement:", "contents": "indexOfAccessibilityElement:(${1:id element})" },  
    { "trigger": "indexOfAccessibilityElement:", "contents": "indexOfAccessibilityElement:(${1:id element})" },  
    { "trigger": "indexOfNowPlayingItem" },  
    { "trigger": "indexOfObject:", "contents": "indexOfObject:(${1:id anObject})" },  
    { "trigger": "indexOfObject:", "contents": "indexOfObject:(${1:id object})" },  
    { "trigger": "indexOfObjectAtIndexes:options:passingTest:", "contents": "indexOfObjectAtIndexes:options:passingTest:(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexOfObjectAtIndexes:options:passingTest:", "contents": "indexOfObjectAtIndexes:options:passingTest:(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexOfObjectIdenticalTo:", "contents": "indexOfObjectIdenticalTo:(${1:id anObject})" },  
    { "trigger": "indexOfObjectIdenticalTo:inRange:", "contents": "indexOfObjectIdenticalTo:inRange:(${1:id anObject}, inRange:${2:NSRange range})" },  
    { "trigger": "indexOfObjectPassingTest:", "contents": "indexOfObjectPassingTest:(${1:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexOfObjectPassingTest:", "contents": "indexOfObjectPassingTest:(${1:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexOfObjectWithOptions:passingTest:", "contents": "indexOfObjectWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexOfObjectWithOptions:passingTest:", "contents": "indexOfObjectWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexOfObject:inRange:", "contents": "indexOfObject:inRange:(${1:id anObject}, inRange:${2:NSRange range})" },  
    { "trigger": "indexOfObject:inSortedRange:options:usingComparator:", "contents": "indexOfObject:inSortedRange:options:usingComparator:(${1:id object}, inSortedRange:${2:NSRange range}, options:${3:NSBinarySearchingOptions opts}, usingComparator:${4:NSComparator cmp})" },  
    { "trigger": "indexOfObject:inSortedRange:options:usingComparator:", "contents": "indexOfObject:inSortedRange:options:usingComparator:(${1:id obj}, inSortedRange:${2:NSRange r}, options:${3:NSBinarySearchingOptions opts}, usingComparator:${4:NSComparator cmp})" },  
    { "trigger": "indexOfResult:", "contents": "indexOfResult:(${1:id result})" },  
    { "trigger": "indexPassingTest:", "contents": "indexPassingTest:(${1:BOOL (^)(NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexPathByAddingIndex:", "contents": "indexPathByAddingIndex:(${1:NSUInteger index})" },  
    { "trigger": "indexPathByRemovingLastIndex" },  
    { "trigger": "indexPathForCell:", "contents": "indexPathForCell:(${1:UITableViewCell* cell})" },  
    { "trigger": "indexPathForObject:", "contents": "indexPathForObject:(${1:id object})" },  
    { "trigger": "indexPathForRowAtPoint:", "contents": "indexPathForRowAtPoint:(${1:CGPoint point})" },  
    { "trigger": "indexPathForSelectedRow" },  
    { "trigger": "indexPathsForRowsInRect:", "contents": "indexPathsForRowsInRect:(${1:CGRect rect})" },  
    { "trigger": "indexPathsForSelectedRows" },  
    { "trigger": "indexPathsForVisibleRows" },  
    { "trigger": "indexTitle" },  
    { "trigger": "indexTitle" },  
    { "trigger": "indexWithOptions:passingTest:", "contents": "indexWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesInRange:options:passingTest:", "contents": "indexesInRange:options:passingTest:(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesOfObjectsAtIndexes:options:passingTest:", "contents": "indexesOfObjectsAtIndexes:options:passingTest:(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesOfObjectsAtIndexes:options:passingTest:", "contents": "indexesOfObjectsAtIndexes:options:passingTest:(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesOfObjectsPassingTest:", "contents": "indexesOfObjectsPassingTest:(${1:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesOfObjectsPassingTest:", "contents": "indexesOfObjectsPassingTest:(${1:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesOfObjectsWithOptions:passingTest:", "contents": "indexesOfObjectsWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesOfObjectsWithOptions:passingTest:", "contents": "indexesOfObjectsWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesPassingTest:", "contents": "indexesPassingTest:(${1:BOOL (^)(NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indexesWithOptions:passingTest:", "contents": "indexesWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(NSUInteger, BOOL *) predicate})" },  
    { "trigger": "indicatedBitrate" },  
    { "trigger": "indicatedBitrate" },  
    { "trigger": "indicatorStyle" },  
    { "trigger": "infoDictionary" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "init" },  
    { "trigger": "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", "contents": "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:(${1:NSData* bookmarkData}, options:${2:NSURLBookmarkResolutionOptions options}, relativeToURL:${3:NSURL* relativeURL}, bookmarkDataIsStale:${4:BOOL* isStale}, error:${5:NSError** error})" },  
    { "trigger": "initCircularRegionWithCenter:radius:identifier:", "contents": "initCircularRegionWithCenter:radius:identifier:(${1:CLLocationCoordinate2D center}, radius:${2:CLLocationDistance radius}, identifier:${3:NSString* identifier})" },  
    { "trigger": "initDirectoryWithFileWrappers:", "contents": "initDirectoryWithFileWrappers:(${1:NSDictionary* childrenByPreferredName})" },  
    { "trigger": "initFileURLWithPath:", "contents": "initFileURLWithPath:(${1:NSString* path})" },  
    { "trigger": "initFileURLWithPath:isDirectory:", "contents": "initFileURLWithPath:isDirectory:(${1:NSString* path}, isDirectory:${2:BOOL isDir})" },  
    { "trigger": "initForReadingWithData:", "contents": "initForReadingWithData:(${1:NSData* data})" },  
    { "trigger": "initForWritingWithMutableData:", "contents": "initForWritingWithMutableData:(${1:NSMutableData* data})" },  
    { "trigger": "initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:", "contents": "initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:(${1:EKRecurrenceFrequency type}, interval:${2:NSInteger interval}, daysOfTheWeek:${3:NSArray* days}, daysOfTheMonth:${4:NSArray* monthDays}, monthsOfTheYear:${5:NSArray* months}, weeksOfTheYear:${6:NSArray* weeksOfTheYear}, daysOfTheYear:${7:NSArray* daysOfTheYear}, setPositions:${8:NSArray* setPositions}, end:${9:EKRecurrenceEnd* end})" },  
    { "trigger": "initRecurrenceWithFrequency:interval:end:", "contents": "initRecurrenceWithFrequency:interval:end:(${1:EKRecurrenceFrequency type}, interval:${2:NSInteger interval}, end:${3:EKRecurrenceEnd* end})" },  
    { "trigger": "initRegularFileWithContents:", "contents": "initRegularFileWithContents:(${1:NSData* contents})" },  
    { "trigger": "initRemoteWithProtocolFamily:socketType:protocol:address:", "contents": "initRemoteWithProtocolFamily:socketType:protocol:address:(${1:int family}, socketType:${2:int type}, protocol:${3:int protocol}, address:${4:NSData* address})" },  
    { "trigger": "initRemoteWithTCPPort:host:", "contents": "initRemoteWithTCPPort:host:(${1:unsigned short port}, host:${2:NSString* hostName})" },  
    { "trigger": "initSymbolicLinkWithDestinationURL:", "contents": "initSymbolicLinkWithDestinationURL:(${1:NSURL* url})" },  
    { "trigger": "initToBuffer:capacity:", "contents": "initToBuffer:capacity:(${1:uint8_t* buffer}, capacity:${2:NSUInteger capacity})" },  
    { "trigger": "initToFileAtPath:append:", "contents": "initToFileAtPath:append:(${1:NSString* path}, append:${2:BOOL shouldAppend})" },  
    { "trigger": "initToMemory" },  
    { "trigger": "initWithAPI:", "contents": "initWithAPI:(${1:EAGLRenderingAPI api})" },  
    { "trigger": "initWithAPI:sharegroup:", "contents": "initWithAPI:sharegroup:(${1:EAGLRenderingAPI api}, sharegroup:${2:EAGLSharegroup* sharegroup})" },  
    { "trigger": "initWithAccessibilityContainer:", "contents": "initWithAccessibilityContainer:(${1:id container})" },  
    { "trigger": "initWithAccessory:forProtocol:", "contents": "initWithAccessory:forProtocol:(${1:EAAccessory* accessory}, forProtocol:${2:NSString* protocolString})" },  
    { "trigger": "initWithAccountType:", "contents": "initWithAccountType:(${1:ACAccountType* type})" },  
    { "trigger": "initWithActivityIndicatorStyle:", "contents": "initWithActivityIndicatorStyle:(${1:UIActivityIndicatorViewStyle style})" },  
    { "trigger": "initWithAnnotation:reuseIdentifier:", "contents": "initWithAnnotation:reuseIdentifier:(${1:id annotation}, reuseIdentifier:${2:NSString* reuseIdentifier})" },  
    { "trigger": "initWithArray:", "contents": "initWithArray:(${1:NSArray* array})" },  
    { "trigger": "initWithArray:", "contents": "initWithArray:(${1:NSArray* array})" },  
    { "trigger": "initWithArray:", "contents": "initWithArray:(${1:NSArray* array})" },  
    { "trigger": "initWithArray:", "contents": "initWithArray:(${1:NSArray* array})" },  
    { "trigger": "initWithArray:copyItems:", "contents": "initWithArray:copyItems:(${1:NSArray* array}, copyItems:${2:BOOL flag})" },  
    { "trigger": "initWithArray:copyItems:", "contents": "initWithArray:copyItems:(${1:NSArray* set}, copyItems:${2:BOOL flag})" },  
    { "trigger": "initWithArray:range:copyItems:", "contents": "initWithArray:range:copyItems:(${1:NSArray* set}, range:${2:NSRange range}, copyItems:${3:BOOL flag})" },  
    { "trigger": "initWithAsset:", "contents": "initWithAsset:(${1:AVAsset* asset})" },  
    { "trigger": "initWithAsset:", "contents": "initWithAsset:(${1:AVAsset* asset})" },  
    { "trigger": "initWithAssetWriterInput:sourcePixelBufferAttributes:", "contents": "initWithAssetWriterInput:sourcePixelBufferAttributes:(${1:AVAssetWriterInput* input}, sourcePixelBufferAttributes:${2:NSDictionary* sourcePixelBufferAttributes})" },  
    { "trigger": "initWithAsset:error:", "contents": "initWithAsset:error:(${1:AVAsset* asset}, error:${2:NSError** outError})" },  
    { "trigger": "initWithAsset:presetName:", "contents": "initWithAsset:presetName:(${1:AVAsset* asset}, presetName:${2:NSString* presetName})" },  
    { "trigger": "initWithAttributedString:", "contents": "initWithAttributedString:(${1:NSAttributedString* attrStr})" },  
    { "trigger": "initWithAudioTracks:audioSettings:", "contents": "initWithAudioTracks:audioSettings:(${1:NSArray* audioTracks}, audioSettings:${2:NSDictionary* audioSettings})" },  
    { "trigger": "initWithAuthenticationChallenge:sender:", "contents": "initWithAuthenticationChallenge:sender:(${1:NSURLAuthenticationChallenge* challenge}, sender:${2:id sender})" },  
    { "trigger": "initWithBarButtonSystemItem:target:action:", "contents": "initWithBarButtonSystemItem:target:action:(${1:UIBarButtonSystemItem systemItem}, target:${2:id target}, action:${3:SEL action})" },  
    { "trigger": "initWithBitmapData:bytesPerRow:size:format:colorSpace:", "contents": "initWithBitmapData:bytesPerRow:size:format:colorSpace:(${1:NSData* d}, bytesPerRow:${2:size_t bpr}, size:${3:CGSize size}, format:${4:CIFormat f}, colorSpace:${5:CGColorSpaceRef c})" },  
    { "trigger": "initWithBool:", "contents": "initWithBool:(${1:BOOL value})" },  
    { "trigger": "initWithBytesNoCopy:length:", "contents": "initWithBytesNoCopy:length:(${1:void* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "initWithBytesNoCopy:length:encoding:freeWhenDone:", "contents": "initWithBytesNoCopy:length:encoding:freeWhenDone:(${1:void* bytes}, length:${2:NSUInteger len}, encoding:${3:NSStringEncoding encoding}, freeWhenDone:${4:BOOL freeBuffer})" },  
    { "trigger": "initWithBytesNoCopy:length:freeWhenDone:", "contents": "initWithBytesNoCopy:length:freeWhenDone:(${1:void* bytes}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL b})" },  
    { "trigger": "initWithBytes:length:", "contents": "initWithBytes:length:(${1:void* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "initWithBytes:length:encoding:", "contents": "initWithBytes:length:encoding:(${1:void* bytes}, length:${2:NSUInteger len}, encoding:${3:NSStringEncoding encoding})" },  
    { "trigger": "initWithBytes:objCType:", "contents": "initWithBytes:objCType:(${1:void* value}, objCType:${2:char* type})" },  
    { "trigger": "initWithCGAffineTransform:", "contents": "initWithCGAffineTransform:(${1:CGAffineTransform r})" },  
    { "trigger": "initWithCGColor:", "contents": "initWithCGColor:(${1:CGColorRef cgColor})" },  
    { "trigger": "initWithCGColor:", "contents": "initWithCGColor:(${1:CGColorRef c})" },  
    { "trigger": "initWithCGImage:", "contents": "initWithCGImage:(${1:CGImageRef image})" },  
    { "trigger": "initWithCGImage:", "contents": "initWithCGImage:(${1:CGImageRef cgImage})" },  
    { "trigger": "initWithCGImage:options:", "contents": "initWithCGImage:options:(${1:CGImageRef image}, options:${2:NSDictionary* d})" },  
    { "trigger": "initWithCGImage:scale:orientation:", "contents": "initWithCGImage:scale:orientation:(${1:CGImageRef cgImage}, scale:${2:CGFloat scale}, orientation:${3:UIImageOrientation orientation})" },  
    { "trigger": "initWithCGPoint:", "contents": "initWithCGPoint:(${1:CGPoint p})" },  
    { "trigger": "initWithCGRect:", "contents": "initWithCGRect:(${1:CGRect r})" },  
    { "trigger": "initWithCIColor:", "contents": "initWithCIColor:(${1:CIColor* ciColor})" },  
    { "trigger": "initWithCIImage:", "contents": "initWithCIImage:(${1:CIImage* ciImage})" },  
    { "trigger": "initWithCString:", "contents": "initWithCString:(${1:char* bytes})" },  
    { "trigger": "initWithCStringNoCopy:length:freeWhenDone:", "contents": "initWithCStringNoCopy:length:freeWhenDone:(${1:char* bytes}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL freeBuffer})" },  
    { "trigger": "initWithCString:encoding:", "contents": "initWithCString:encoding:(${1:char* nullTerminatedCString}, encoding:${2:NSStringEncoding encoding})" },  
    { "trigger": "initWithCString:length:", "contents": "initWithCString:length:(${1:char* bytes}, length:${2:NSUInteger length})" },  
    { "trigger": "initWithCVPixelBuffer:", "contents": "initWithCVPixelBuffer:(${1:CVPixelBufferRef buffer})" },  
    { "trigger": "initWithCVPixelBuffer:options:", "contents": "initWithCVPixelBuffer:options:(${1:CVPixelBufferRef buffer}, options:${2:NSDictionary* dict})" },  
    { "trigger": "initWithCalendarIdentifier:", "contents": "initWithCalendarIdentifier:(${1:NSString* ident})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger capacity})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger capacity})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "initWithCapacity:", "contents": "initWithCapacity:(${1:NSUInteger numItems})" },  
    { "trigger": "initWithCategory:", "contents": "initWithCategory:(${1:NSString* category})" },  
    { "trigger": "initWithChar:", "contents": "initWithChar:(${1:char value})" },  
    { "trigger": "initWithCharactersNoCopy:length:freeWhenDone:", "contents": "initWithCharactersNoCopy:length:freeWhenDone:(${1:unichar* characters}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL freeBuffer})" },  
    { "trigger": "initWithCharacters:length:", "contents": "initWithCharacters:length:(${1:unichar* characters}, length:${2:NSUInteger length})" },  
    { "trigger": "initWithCircle:", "contents": "initWithCircle:(${1:MKCircle* circle})" },  
    { "trigger": "initWithCoder:", "contents": "initWithCoder:(${1:NSCoder* aDecoder})" },  
    { "trigger": "initWithCoder:", "contents": "initWithCoder:(${1:NSCoder* aDecoder})" },  
    { "trigger": "initWithColor:", "contents": "initWithColor:(${1:UIColor* color})" },  
    { "trigger": "initWithColor:", "contents": "initWithColor:(${1:CIColor* color})" },  
    { "trigger": "initWithConcurrencyType:", "contents": "initWithConcurrencyType:(${1:NSManagedObjectContextConcurrencyType ct})" },  
    { "trigger": "initWithCondition:", "contents": "initWithCondition:(${1:NSInteger condition})" },  
    { "trigger": "initWithContentURL:", "contents": "initWithContentURL:(${1:NSURL* contentURL})" },  
    { "trigger": "initWithContentURL:", "contents": "initWithContentURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentViewController:", "contents": "initWithContentViewController:(${1:UIViewController* viewController})" },  
    { "trigger": "initWithContentsOfFile:", "contents": "initWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "initWithContentsOfFile:", "contents": "initWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "initWithContentsOfFile:", "contents": "initWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "initWithContentsOfFile:", "contents": "initWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "initWithContentsOfFile:", "contents": "initWithContentsOfFile:(${1:NSString* path})" },  
    { "trigger": "initWithContentsOfFile:encoding:error:", "contents": "initWithContentsOfFile:encoding:error:(${1:NSString* path}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})" },  
    { "trigger": "initWithContentsOfFile:options:error:", "contents": "initWithContentsOfFile:options:error:(${1:NSString* path}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})" },  
    { "trigger": "initWithContentsOfFile:usedEncoding:error:", "contents": "initWithContentsOfFile:usedEncoding:error:(${1:NSString* path}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})" },  
    { "trigger": "initWithContentsOfMappedFile:", "contents": "initWithContentsOfMappedFile:(${1:NSString* path})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:", "contents": "initWithContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "initWithContentsOfURL:encoding:error:", "contents": "initWithContentsOfURL:encoding:error:(${1:NSURL* url}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})" },  
    { "trigger": "initWithContentsOfURL:error:", "contents": "initWithContentsOfURL:error:(${1:NSURL* url}, error:${2:NSError** outError})" },  
    { "trigger": "initWithContentsOfURL:options:", "contents": "initWithContentsOfURL:options:(${1:NSURL* url}, options:${2:NSDictionary* d})" },  
    { "trigger": "initWithContentsOfURL:options:error:", "contents": "initWithContentsOfURL:options:error:(${1:NSURL* url}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})" },  
    { "trigger": "initWithContentsOfURL:usedEncoding:error:", "contents": "initWithContentsOfURL:usedEncoding:error:(${1:NSURL* url}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})" },  
    { "trigger": "initWithControlPoints::::", "contents": "initWithControlPoints::::(${1:float c1x}, ${2:float c1y}, ${3:float c2x}, ${4:float c2y})" },  
    { "trigger": "initWithCoordinate:", "contents": "initWithCoordinate:(${1:CLLocationCoordinate2D coordinate})" },  
    { "trigger": "initWithCoordinate:addressDictionary:", "contents": "initWithCoordinate:addressDictionary:(${1:CLLocationCoordinate2D coordinate}, addressDictionary:${2:NSDictionary* addressDictionary})" },  
    { "trigger": "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", "contents": "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:(${1:CLLocationCoordinate2D coordinate}, altitude:${2:CLLocationDistance altitude}, horizontalAccuracy:${3:CLLocationAccuracy hAccuracy}, verticalAccuracy:${4:CLLocationAccuracy vAccuracy}, course:${5:CLLocationDirection course}, speed:${6:CLLocationSpeed speed}, timestamp:${7:NSDate* timestamp})" },  
    { "trigger": "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", "contents": "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:(${1:CLLocationCoordinate2D coordinate}, altitude:${2:CLLocationDistance altitude}, horizontalAccuracy:${3:CLLocationAccuracy hAccuracy}, verticalAccuracy:${4:CLLocationAccuracy vAccuracy}, timestamp:${5:NSDate* timestamp})" },  
    { "trigger": "initWithCustomView:", "contents": "initWithCustomView:(${1:UIView* customView})" },  
    { "trigger": "initWithData:", "contents": "initWithData:(${1:NSData* data})" },  
    { "trigger": "initWithData:", "contents": "initWithData:(${1:NSData* data})" },  
    { "trigger": "initWithData:", "contents": "initWithData:(${1:NSData* data})" },  
    { "trigger": "initWithData:", "contents": "initWithData:(${1:NSData* data})" },  
    { "trigger": "initWithData:", "contents": "initWithData:(${1:NSData* data})" },  
    { "trigger": "initWithData:encoding:", "contents": "initWithData:encoding:(${1:NSData* data}, encoding:${2:NSStringEncoding encoding})" },  
    { "trigger": "initWithData:error:", "contents": "initWithData:error:(${1:NSData* data}, error:${2:NSError** outError})" },  
    { "trigger": "initWithData:options:", "contents": "initWithData:options:(${1:NSData* data}, options:${2:NSDictionary* d})" },  
    { "trigger": "initWithDayOfTheWeek:weekNumber:", "contents": "initWithDayOfTheWeek:weekNumber:(${1:NSInteger dayOfTheWeek}, weekNumber:${2:NSInteger weekNumber})" },  
    { "trigger": "initWithDecimal:", "contents": "initWithDecimal:(${1:NSDecimal dcm})" },  
    { "trigger": "initWithDelegate:queue:", "contents": "initWithDelegate:queue:(${1:id delegate}, queue:${2:dispatch_queue_t queue})" },  
    { "trigger": "initWithDevice:error:", "contents": "initWithDevice:error:(${1:AVCaptureDevice* device}, error:${2:NSError** outError})" },  
    { "trigger": "initWithDictionary:", "contents": "initWithDictionary:(${1:NSDictionary* otherDictionary})" },  
    { "trigger": "initWithDictionary:copyItems:", "contents": "initWithDictionary:copyItems:(${1:NSDictionary* otherDictionary}, copyItems:${2:BOOL flag})" },  
    { "trigger": "initWithDomain:code:userInfo:", "contents": "initWithDomain:code:userInfo:(${1:NSString* domain}, code:${2:NSInteger code}, userInfo:${3:NSDictionary* dict})" },  
    { "trigger": "initWithDomain:type:name:", "contents": "initWithDomain:type:name:(${1:NSString* domain}, type:${2:NSString* type}, name:${3:NSString* name})" },  
    { "trigger": "initWithDomain:type:name:port:", "contents": "initWithDomain:type:name:port:(${1:NSString* domain}, type:${2:NSString* type}, name:${3:NSString* name}, port:${4:int port})" },  
    { "trigger": "initWithDominantScript:languageMap:", "contents": "initWithDominantScript:languageMap:(${1:NSString* script}, languageMap:${2:NSDictionary* map})" },  
    { "trigger": "initWithDouble:", "contents": "initWithDouble:(${1:double value})" },  
    { "trigger": "initWithEntityName:", "contents": "initWithEntityName:(${1:NSString* entityName})" },  
    { "trigger": "initWithEntity:insertIntoManagedObjectContext:", "contents": "initWithEntity:insertIntoManagedObjectContext:(${1:NSEntityDescription* entity}, insertIntoManagedObjectContext:${2:NSManagedObjectContext* context})" },  
    { "trigger": "initWithExpressionType:", "contents": "initWithExpressionType:(${1:NSExpressionType type})" },  
    { "trigger": "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", "contents": "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:(${1:NSFetchRequest* fetchRequest}, managedObjectContext:${2:NSManagedObjectContext* context}, sectionNameKeyPath:${3:NSString* sectionNameKeyPath}, cacheName:${4:NSString* name})" },  
    { "trigger": "initWithFileAtPath:", "contents": "initWithFileAtPath:(${1:NSString* path})" },  
    { "trigger": "initWithFileDescriptor:", "contents": "initWithFileDescriptor:(${1:int fd})" },  
    { "trigger": "initWithFileDescriptor:closeOnDealloc:", "contents": "initWithFileDescriptor:closeOnDealloc:(${1:int fd}, closeOnDealloc:${2:BOOL closeopt})" },  
    { "trigger": "initWithFilePresenter:", "contents": "initWithFilePresenter:(${1:id filePresenterOrNil})" },  
    { "trigger": "initWithFileURL:", "contents": "initWithFileURL:(${1:NSURL* url})" },  
    { "trigger": "initWithFilterPredicates:", "contents": "initWithFilterPredicates:(${1:NSSet* filterPredicates})" },  
    { "trigger": "initWithFireDate:interval:target:selector:userInfo:repeats:", "contents": "initWithFireDate:interval:target:selector:userInfo:repeats:(${1:NSDate* date}, interval:${2:NSTimeInterval ti}, target:${3:id t}, selector:${4:SEL s}, userInfo:${5:id ui}, repeats:${6:BOOL rep})" },  
    { "trigger": "initWithFloat:", "contents": "initWithFloat:(${1:float value})" },  
    { "trigger": "initWithFormat:", "contents": "initWithFormat:(${1:NSString* format})" },  
    { "trigger": "initWithFormat:arguments:", "contents": "initWithFormat:arguments:(${1:NSString* format}, arguments:${2:va_list argList})" },  
    { "trigger": "initWithFormat:locale:", "contents": "initWithFormat:locale:(${1:NSString* format}, locale:${2:id locale})" },  
    { "trigger": "initWithFormat:locale:arguments:", "contents": "initWithFormat:locale:arguments:(${1:NSString* format}, locale:${2:id locale}, arguments:${3:va_list argList})" },  
    { "trigger": "initWithFrame:", "contents": "initWithFrame:(${1:CGRect frame})" },  
    { "trigger": "initWithFrame:", "contents": "initWithFrame:(${1:CGRect frame})" },  
    { "trigger": "initWithFrame:context:", "contents": "initWithFrame:context:(${1:CGRect frame}, context:${2:EAGLContext* context})" },  
    { "trigger": "initWithFrame:reuseIdentifier:", "contents": "initWithFrame:reuseIdentifier:(${1:CGRect frame}, reuseIdentifier:${2:NSString* reuseIdentifier})" },  
    { "trigger": "initWithFrame:style:", "contents": "initWithFrame:style:(${1:CGRect frame}, style:${2:UITableViewStyle style})" },  
    { "trigger": "initWithHost:port:protocol:realm:authenticationMethod:", "contents": "initWithHost:port:protocol:realm:authenticationMethod:(${1:NSString* host}, port:${2:NSInteger port}, protocol:${3:NSString* protocol}, realm:${4:NSString* realm}, authenticationMethod:${5:NSString* authenticationMethod})" },  
    { "trigger": "initWithHue:saturation:brightness:alpha:", "contents": "initWithHue:saturation:brightness:alpha:(${1:CGFloat hue}, saturation:${2:CGFloat saturation}, brightness:${3:CGFloat brightness}, alpha:${4:CGFloat alpha})" },  
    { "trigger": "initWithIdentifier:", "contents": "initWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "initWithIdentifier:source:destination:", "contents": "initWithIdentifier:source:destination:(${1:NSString* identifier}, source:${2:UIViewController* source}, destination:${3:UIViewController* destination})" },  
    { "trigger": "initWithIdentity:certificates:persistence:", "contents": "initWithIdentity:certificates:persistence:(${1:SecIdentityRef identity}, certificates:${2:NSArray* certArray}, persistence:${3:NSURLCredentialPersistence persistence})" },  
    { "trigger": "initWithImage:", "contents": "initWithImage:(${1:UIImage* image})" },  
    { "trigger": "initWithImage:", "contents": "initWithImage:(${1:UIImage* image})" },  
    { "trigger": "initWithImage:", "contents": "initWithImage:(${1:UIImage* image})" },  
    { "trigger": "initWithImage:highlightedImage:", "contents": "initWithImage:highlightedImage:(${1:UIImage* image}, highlightedImage:${2:UIImage* highlightedImage})" },  
    { "trigger": "initWithImage:landscapeImagePhone:style:target:action:", "contents": "initWithImage:landscapeImagePhone:style:target:action:(${1:UIImage* image}, landscapeImagePhone:${2:UIImage* landscapeImagePhone}, style:${3:UIBarButtonItemStyle style}, target:${4:id target}, action:${5:SEL action})" },  
    { "trigger": "initWithImage:options:", "contents": "initWithImage:options:(${1:UIImage* image}, options:${2:NSDictionary* options})" },  
    { "trigger": "initWithImage:style:target:action:", "contents": "initWithImage:style:target:action:(${1:UIImage* image}, style:${2:UIBarButtonItemStyle style}, target:${3:id target}, action:${4:SEL action})" },  
    { "trigger": "initWithIndex:", "contents": "initWithIndex:(${1:NSUInteger index})" },  
    { "trigger": "initWithIndex:", "contents": "initWithIndex:(${1:NSUInteger value})" },  
    { "trigger": "initWithIndexSet:", "contents": "initWithIndexSet:(${1:NSIndexSet* indexSet})" },  
    { "trigger": "initWithIndexesInRange:", "contents": "initWithIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "initWithIndexes:length:", "contents": "initWithIndexes:length:(${1:NSUInteger* indexes}, length:${2:NSUInteger length})" },  
    { "trigger": "initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:", "contents": "initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:(${1:NSSet* insertedObjects}, updatedObjects:${2:NSSet* updatedObjects}, deletedObjects:${3:NSSet* deletedObjects}, lockedObjects:${4:NSSet* lockedObjects})" },  
    { "trigger": "initWithInt:", "contents": "initWithInt:(${1:int value})" },  
    { "trigger": "initWithInteger:", "contents": "initWithInteger:(${1:NSInteger value})" },  
    { "trigger": "initWithInvite:", "contents": "initWithInvite:(${1:GKInvite* invite})" },  
    { "trigger": "initWithInvocation:", "contents": "initWithInvocation:(${1:NSInvocation* inv})" },  
    { "trigger": "initWithItems:", "contents": "initWithItems:(${1:NSArray* items})" },  
    { "trigger": "initWithItems:", "contents": "initWithItems:(${1:NSArray* items})" },  
    { "trigger": "initWithItems:", "contents": "initWithItems:(${1:NSArray* items})" },  
    { "trigger": "initWithItems:timeRange:", "contents": "initWithItems:timeRange:(${1:NSArray* items}, timeRange:${2:CMTimeRange timeRange})" },  
    { "trigger": "initWithKey:ascending:", "contents": "initWithKey:ascending:(${1:NSString* key}, ascending:${2:BOOL ascending})" },  
    { "trigger": "initWithKey:ascending:comparator:", "contents": "initWithKey:ascending:comparator:(${1:NSString* key}, ascending:${2:BOOL ascending}, comparator:${3:NSComparator cmptr})" },  
    { "trigger": "initWithKey:ascending:selector:", "contents": "initWithKey:ascending:selector:(${1:NSString* key}, ascending:${2:BOOL ascending}, selector:${3:SEL selector})" },  
    { "trigger": "initWithLatitude:longitude:", "contents": "initWithLatitude:longitude:(${1:CLLocationDegrees latitude}, longitude:${2:CLLocationDegrees longitude})" },  
    { "trigger": "initWithLayer:", "contents": "initWithLayer:(${1:id layer})" },  
    { "trigger": "initWithLeftExpression:rightExpression:customSelector:", "contents": "initWithLeftExpression:rightExpression:customSelector:(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, customSelector:${3:SEL selector})" },  
    { "trigger": "initWithLeftExpression:rightExpression:modifier:type:options:", "contents": "initWithLeftExpression:rightExpression:modifier:type:options:(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, modifier:${3:NSComparisonPredicateModifier modifier}, type:${4:NSPredicateOperatorType type}, options:${5:NSComparisonPredicateOptions options})" },  
    { "trigger": "initWithLength:", "contents": "initWithLength:(${1:NSUInteger length})" },  
    { "trigger": "initWithLocaleIdentifier:", "contents": "initWithLocaleIdentifier:(${1:NSString* string})" },  
    { "trigger": "initWithLong:", "contents": "initWithLong:(${1:long value})" },  
    { "trigger": "initWithLongLong:", "contents": "initWithLongLong:(${1:long long value})" },  
    { "trigger": "initWithMachPort:", "contents": "initWithMachPort:(${1:uint32_t machPort})" },  
    { "trigger": "initWithMachPort:options:", "contents": "initWithMachPort:options:(${1:uint32_t machPort}, options:${2:NSUInteger f})" },  
    { "trigger": "initWithManagedObjectModel:", "contents": "initWithManagedObjectModel:(${1:NSManagedObjectModel* model})" },  
    { "trigger": "initWithMantissa:exponent:isNegative:", "contents": "initWithMantissa:exponent:isNegative:(${1:unsigned long long mantissa}, exponent:${2:short exponent}, isNegative:${3:BOOL flag})" },  
    { "trigger": "initWithMapView:", "contents": "initWithMapView:(${1:MKMapView* mapView})" },  
    { "trigger": "initWithMarkupText:", "contents": "initWithMarkupText:(${1:NSString* markupText})" },  
    { "trigger": "initWithMatchRequest:", "contents": "initWithMatchRequest:(${1:GKMatchRequest* request})" },  
    { "trigger": "initWithMatchRequest:", "contents": "initWithMatchRequest:(${1:GKMatchRequest* request})" },  
    { "trigger": "initWithMediaType:outputSettings:", "contents": "initWithMediaType:outputSettings:(${1:NSString* mediaType}, outputSettings:${2:NSDictionary* outputSettings})" },  
    { "trigger": "initWithMediaTypes:", "contents": "initWithMediaTypes:(${1:MPMediaType mediaTypes})" },  
    { "trigger": "initWithMemoryCapacity:diskCapacity:diskPath:", "contents": "initWithMemoryCapacity:diskCapacity:diskPath:(${1:NSUInteger memoryCapacity}, diskCapacity:${2:NSUInteger diskCapacity}, diskPath:${3:NSString* path})" },  
    { "trigger": "initWithMergeType:", "contents": "initWithMergeType:(${1:NSMergePolicyType ty})" },  
    { "trigger": "initWithName:", "contents": "initWithName:(${1:NSString* tzName})" },  
    { "trigger": "initWithName:data:", "contents": "initWithName:data:(${1:NSString* tzName}, data:${2:NSData* aData})" },  
    { "trigger": "initWithName:reason:userInfo:", "contents": "initWithName:reason:userInfo:(${1:NSString* aName}, reason:${2:NSString* aReason}, userInfo:${3:NSDictionary* aUserInfo})" },  
    { "trigger": "initWithNibName:bundle:", "contents": "initWithNibName:bundle:(${1:NSString* nibNameOrNil}, bundle:${2:NSBundle* nibBundleOrNil})" },  
    { "trigger": "initWithNotificationCenter:", "contents": "initWithNotificationCenter:(${1:NSNotificationCenter* notificationCenter})" },  
    { "trigger": "initWithOAuthToken:tokenSecret:", "contents": "initWithOAuthToken:tokenSecret:(${1:NSString* token}, tokenSecret:${2:NSString* secret})" },  
    { "trigger": "initWithObject:", "contents": "initWithObject:(${1:id object})" },  
    { "trigger": "initWithObjectID:", "contents": "initWithObjectID:(${1:NSManagedObjectID* moid})" },  
    { "trigger": "initWithObjectID:withValues:version:", "contents": "initWithObjectID:withValues:version:(${1:NSManagedObjectID* objectID}, withValues:${2:NSDictionary* values}, version:${3:uint64_t version})" },  
    { "trigger": "initWithObjects:", "contents": "initWithObjects:(${1:id firstObj})" },  
    { "trigger": "initWithObjects:", "contents": "initWithObjects:(${1:id firstObj})" },  
    { "trigger": "initWithObjects:", "contents": "initWithObjects:(${1:id firstObj})" },  
    { "trigger": "initWithObjectsAndKeys:", "contents": "initWithObjectsAndKeys:(${1:id firstObject})" },  
    { "trigger": "initWithObjects:count:", "contents": "initWithObjects:count:(${1:id* objects}, count:${2:NSUInteger cnt})" },  
    { "trigger": "initWithObjects:count:", "contents": "initWithObjects:count:(${1:id* objects}, count:${2:NSUInteger cnt})" },  
    { "trigger": "initWithObjects:count:", "contents": "initWithObjects:count:(${1:id* objects}, count:${2:NSUInteger cnt})" },  
    { "trigger": "initWithObjects:forKeys:", "contents": "initWithObjects:forKeys:(${1:NSArray* objects}, forKeys:${2:NSArray* keys})" },  
    { "trigger": "initWithObjects:forKeys:count:", "contents": "initWithObjects:forKeys:count:(${1:id* objects}, forKeys:${2:id* keys}, count:${3:NSUInteger cnt})" },  
    { "trigger": "initWithOrderedSet:", "contents": "initWithOrderedSet:(${1:NSOrderedSet* set})" },  
    { "trigger": "initWithOrderedSet:copyItems:", "contents": "initWithOrderedSet:copyItems:(${1:NSOrderedSet* set}, copyItems:${2:BOOL flag})" },  
    { "trigger": "initWithOrderedSet:range:copyItems:", "contents": "initWithOrderedSet:range:copyItems:(${1:NSOrderedSet* set}, range:${2:NSRange range}, copyItems:${3:BOOL flag})" },  
    { "trigger": "initWithOverlay:", "contents": "initWithOverlay:(${1:id overlay})" },  
    { "trigger": "initWithPath:", "contents": "initWithPath:(${1:NSString* path})" },  
    { "trigger": "initWithPatternImage:", "contents": "initWithPatternImage:(${1:UIImage* image})" },  
    { "trigger": "initWithPattern:options:error:", "contents": "initWithPattern:options:error:(${1:NSString* pattern}, options:${2:NSRegularExpressionOptions options}, error:${3:NSError** error})" },  
    { "trigger": "initWithPersistentStoreCoordinator:configurationName:URL:options:", "contents": "initWithPersistentStoreCoordinator:configurationName:URL:options:(${1:NSPersistentStoreCoordinator* coordinator}, configurationName:${2:NSString* configurationName}, URL:${3:NSURL* url}, options:${4:NSDictionary* options})" },  
    { "trigger": "initWithPersistentStoreCoordinator:configurationName:URL:options:", "contents": "initWithPersistentStoreCoordinator:configurationName:URL:options:(${1:NSPersistentStoreCoordinator* root}, configurationName:${2:NSString* name}, URL:${3:NSURL* url}, options:${4:NSDictionary* options})" },  
    { "trigger": "initWithPlacemark:", "contents": "initWithPlacemark:(${1:CLPlacemark* placemark})" },  
    { "trigger": "initWithPlayerIDs:", "contents": "initWithPlayerIDs:(${1:NSArray* playerIDs})" },  
    { "trigger": "initWithPlayerItem:", "contents": "initWithPlayerItem:(${1:AVPlayerItem* item})" },  
    { "trigger": "initWithPolygon:", "contents": "initWithPolygon:(${1:MKPolygon* polygon})" },  
    { "trigger": "initWithPolyline:", "contents": "initWithPolyline:(${1:MKPolyline* polyline})" },  
    { "trigger": "initWithProductIdentifiers:", "contents": "initWithProductIdentifiers:(${1:NSSet* productIdentifiers})" },  
    { "trigger": "initWithProgressViewStyle:", "contents": "initWithProgressViewStyle:(${1:UIProgressViewStyle style})" },  
    { "trigger": "initWithProperties:", "contents": "initWithProperties:(${1:NSDictionary* properties})" },  
    { "trigger": "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:", "contents": "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:(${1:NSURLProtectionSpace* space}, proposedCredential:${2:NSURLCredential* credential}, previousFailureCount:${3:NSInteger previousFailureCount}, failureResponse:${4:NSURLResponse* response}, error:${5:NSError* error}, sender:${6:id sender})" },  
    { "trigger": "initWithProtocolFamily:socketType:protocol:address:", "contents": "initWithProtocolFamily:socketType:protocol:address:(${1:int family}, socketType:${2:int type}, protocol:${3:int protocol}, address:${4:NSData* address})" },  
    { "trigger": "initWithProtocolFamily:socketType:protocol:socket:", "contents": "initWithProtocolFamily:socketType:protocol:socket:(${1:int family}, socketType:${2:int type}, protocol:${3:int protocol}, socket:${4:NSSocketNativeHandle sock})" },  
    { "trigger": "initWithProxyHost:port:type:realm:authenticationMethod:", "contents": "initWithProxyHost:port:type:realm:authenticationMethod:(${1:NSString* host}, port:${2:NSInteger port}, type:${3:NSString* type}, realm:${4:NSString* realm}, authenticationMethod:${5:NSString* authenticationMethod})" },  
    { "trigger": "initWithRed:green:blue:alpha:", "contents": "initWithRed:green:blue:alpha:(${1:CGFloat red}, green:${2:CGFloat green}, blue:${3:CGFloat blue}, alpha:${4:CGFloat alpha})" },  
    { "trigger": "initWithRequest:cachedResponse:client:", "contents": "initWithRequest:cachedResponse:client:(${1:NSURLRequest* request}, cachedResponse:${2:NSCachedURLResponse* cachedResponse}, client:${3:id client})" },  
    { "trigger": "initWithRequest:delegate:", "contents": "initWithRequest:delegate:(${1:NSURLRequest* request}, delegate:${2:id delegate})" },  
    { "trigger": "initWithRequest:delegate:startImmediately:", "contents": "initWithRequest:delegate:startImmediately:(${1:NSURLRequest* request}, delegate:${2:id delegate}, startImmediately:${3:BOOL startImmediately})" },  
    { "trigger": "initWithResponse:data:", "contents": "initWithResponse:data:(${1:NSURLResponse* response}, data:${2:NSData* data})" },  
    { "trigger": "initWithResponse:data:userInfo:storagePolicy:", "contents": "initWithResponse:data:userInfo:storagePolicy:(${1:NSURLResponse* response}, data:${2:NSData* data}, userInfo:${3:NSDictionary* userInfo}, storagePolicy:${4:NSURLCacheStoragePolicy storagePolicy})" },  
    { "trigger": "initWithRootViewController:", "contents": "initWithRootViewController:(${1:UIViewController* rootViewController})" },  
    { "trigger": "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", "contents": "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:(${1:NSRoundingMode roundingMode}, scale:${2:short scale}, raiseOnExactness:${3:BOOL exact}, raiseOnOverflow:${4:BOOL overflow}, raiseOnUnderflow:${5:BOOL underflow}, raiseOnDivideByZero:${6:BOOL divideByZero})" },  
    { "trigger": "initWithScheme:host:path:", "contents": "initWithScheme:host:path:(${1:NSString* scheme}, host:${2:NSString* host}, path:${3:NSString* path})" },  
    { "trigger": "initWithSearchBar:contentsController:", "contents": "initWithSearchBar:contentsController:(${1:UISearchBar* searchBar}, contentsController:${2:UIViewController* viewController})" },  
    { "trigger": "initWithSelectionStyle:displayStyle:eventStore:", "contents": "initWithSelectionStyle:displayStyle:eventStore:(${1:EKCalendarChooserSelectionStyle selectionStyle}, displayStyle:${2:EKCalendarChooserDisplayStyle displayStyle}, eventStore:${3:EKEventStore* eventStore})" },  
    { "trigger": "initWithSerializedRepresentation:", "contents": "initWithSerializedRepresentation:(${1:NSData* serializeRepresentation})" },  
    { "trigger": "initWithSession:", "contents": "initWithSession:(${1:AVCaptureSession* session})" },  
    { "trigger": "initWithSessionID:displayName:sessionMode:", "contents": "initWithSessionID:displayName:sessionMode:(${1:NSString* sessionID}, displayName:${2:NSString* name}, sessionMode:${3:GKSessionMode mode})" },  
    { "trigger": "initWithSet:", "contents": "initWithSet:(${1:NSSet* set})" },  
    { "trigger": "initWithSet:", "contents": "initWithSet:(${1:NSSet* set})" },  
    { "trigger": "initWithSet:", "contents": "initWithSet:(${1:NSSet* set})" },  
    { "trigger": "initWithSet:copyItems:", "contents": "initWithSet:copyItems:(${1:NSSet* set}, copyItems:${2:BOOL flag})" },  
    { "trigger": "initWithSet:copyItems:", "contents": "initWithSet:copyItems:(${1:NSSet* set}, copyItems:${2:BOOL flag})" },  
    { "trigger": "initWithSharegroup:", "contents": "initWithSharegroup:(${1:EAGLSharegroup* sharegroup})" },  
    { "trigger": "initWithShort:", "contents": "initWithShort:(${1:short value})" },  
    { "trigger": "initWithSourceModel:destinationModel:", "contents": "initWithSourceModel:destinationModel:(${1:NSManagedObjectModel* sourceModel}, destinationModel:${2:NSManagedObjectModel* destinationModel})" },  
    { "trigger": "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:", "contents": "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:(${1:NSManagedObject* srcObject}, newVersion:${2:NSUInteger newvers}, oldVersion:${3:NSUInteger oldvers}, cachedSnapshot:${4:NSDictionary* cachesnap}, persistedSnapshot:${5:NSDictionary* persnap})" },  
    { "trigger": "initWithStream:", "contents": "initWithStream:(${1:NSInputStream* stream})" },  
    { "trigger": "initWithString:", "contents": "initWithString:(${1:NSString* str})" },  
    { "trigger": "initWithString:", "contents": "initWithString:(${1:NSString* numberValue})" },  
    { "trigger": "initWithString:", "contents": "initWithString:(${1:NSString* URLString})" },  
    { "trigger": "initWithString:", "contents": "initWithString:(${1:NSString* aString})" },  
    { "trigger": "initWithString:", "contents": "initWithString:(${1:NSString* representation})" },  
    { "trigger": "initWithString:", "contents": "initWithString:(${1:NSString* string})" },  
    { "trigger": "initWithString:attributes:", "contents": "initWithString:attributes:(${1:NSString* str}, attributes:${2:NSDictionary* attrs})" },  
    { "trigger": "initWithString:locale:", "contents": "initWithString:locale:(${1:NSString* numberValue}, locale:${2:id locale})" },  
    { "trigger": "initWithString:relativeToURL:", "contents": "initWithString:relativeToURL:(${1:NSString* URLString}, relativeToURL:${2:NSURL* baseURL})" },  
    { "trigger": "initWithStyle:", "contents": "initWithStyle:(${1:UITableViewStyle style})" },  
    { "trigger": "initWithStyle:reuseIdentifier:", "contents": "initWithStyle:reuseIdentifier:(${1:UITableViewCellStyle style}, reuseIdentifier:${2:NSString* reuseIdentifier})" },  
    { "trigger": "initWithTCPPort:", "contents": "initWithTCPPort:(${1:unsigned short port})" },  
    { "trigger": "initWithTabBarSystemItem:tag:", "contents": "initWithTabBarSystemItem:tag:(${1:UITabBarSystemItem systemItem}, tag:${2:NSInteger tag})" },  
    { "trigger": "initWithTagSchemes:options:", "contents": "initWithTagSchemes:options:(${1:NSArray* tagSchemes}, options:${2:NSUInteger opts})" },  
    { "trigger": "initWithTarget:action:", "contents": "initWithTarget:action:(${1:id target}, action:${2:SEL action})" },  
    { "trigger": "initWithTarget:selector:object:", "contents": "initWithTarget:selector:object:(${1:id target}, selector:${2:SEL selector}, object:${3:id argument})" },  
    { "trigger": "initWithTarget:selector:object:", "contents": "initWithTarget:selector:object:(${1:id target}, selector:${2:SEL sel}, object:${3:id arg})" },  
    { "trigger": "initWithTerm:", "contents": "initWithTerm:(${1:NSString* term})" },  
    { "trigger": "initWithText:", "contents": "initWithText:(${1:NSString* text})" },  
    { "trigger": "initWithTextInput:", "contents": "initWithTextInput:(${1:UIResponder* textInput})" },  
    { "trigger": "initWithTimeIntervalSince1970:", "contents": "initWithTimeIntervalSince1970:(${1:NSTimeInterval ti})" },  
    { "trigger": "initWithTimeIntervalSinceNow:", "contents": "initWithTimeIntervalSinceNow:(${1:NSTimeInterval secs})" },  
    { "trigger": "initWithTimeIntervalSinceReferenceDate:", "contents": "initWithTimeIntervalSinceReferenceDate:(${1:NSTimeInterval secsToBeAdded})" },  
    { "trigger": "initWithTimeInterval:sinceDate:", "contents": "initWithTimeInterval:sinceDate:(${1:NSTimeInterval secsToBeAdded}, sinceDate:${2:NSDate* anotherDate})" },  
    { "trigger": "initWithTimeRange:", "contents": "initWithTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "initWithTitle:", "contents": "initWithTitle:(${1:NSString* title})" },  
    { "trigger": "initWithTitle:action:", "contents": "initWithTitle:action:(${1:NSString* title}, action:${2:SEL action})" },  
    { "trigger": "initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:", "contents": "initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:(${1:NSString* title}, delegate:${2:id delegate}, cancelButtonTitle:${3:NSString* cancelButtonTitle}, destructiveButtonTitle:${4:NSString* destructiveButtonTitle}, otherButtonTitles:${5:NSString* otherButtonTitles})" },  
    { "trigger": "initWithTitle:image:tag:", "contents": "initWithTitle:image:tag:(${1:NSString* title}, image:${2:UIImage* image}, tag:${3:NSInteger tag})" },  
    { "trigger": "initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:", "contents": "initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:(${1:NSString* title}, message:${2:NSString* message}, delegate:${3:id delegate}, cancelButtonTitle:${4:NSString* cancelButtonTitle}, otherButtonTitles:${5:NSString* otherButtonTitles})" },  
    { "trigger": "initWithTitle:style:target:action:", "contents": "initWithTitle:style:target:action:(${1:NSString* title}, style:${2:UIBarButtonItemStyle style}, target:${3:id target}, action:${4:SEL action})" },  
    { "trigger": "initWithTrack:outputSettings:", "contents": "initWithTrack:outputSettings:(${1:AVAssetTrack* track}, outputSettings:${2:NSDictionary* outputSettings})" },  
    { "trigger": "initWithTransitionStyle:navigationOrientation:options:", "contents": "initWithTransitionStyle:navigationOrientation:options:(${1:UIPageViewControllerTransitionStyle style}, navigationOrientation:${2:UIPageViewControllerNavigationOrientation navigationOrientation}, options:${3:NSDictionary* options})" },  
    { "trigger": "initWithTrust:", "contents": "initWithTrust:(${1:SecTrustRef trust})" },  
    { "trigger": "initWithTypes:error:", "contents": "initWithTypes:error:(${1:NSTextCheckingTypes checkingTypes}, error:${2:NSError** error})" },  
    { "trigger": "initWithType:subpredicates:", "contents": "initWithType:subpredicates:(${1:NSCompoundPredicateType type}, subpredicates:${2:NSArray* subpredicates})" },  
    { "trigger": "initWithURL:", "contents": "initWithURL:(${1:NSURL* url})" },  
    { "trigger": "initWithURL:", "contents": "initWithURL:(${1:NSURL* URL})" },  
    { "trigger": "initWithURL:", "contents": "initWithURL:(${1:NSURL* url})" },  
    { "trigger": "initWithURL:", "contents": "initWithURL:(${1:NSURL* URL})" },  
    { "trigger": "initWithURL:", "contents": "initWithURL:(${1:NSURL* URL})" },  
    { "trigger": "initWithURL:MIMEType:expectedContentLength:textEncodingName:", "contents": "initWithURL:MIMEType:expectedContentLength:textEncodingName:(${1:NSURL* URL}, MIMEType:${2:NSString* MIMEType}, expectedContentLength:${3:NSInteger length}, textEncodingName:${4:NSString* name})" },  
    { "trigger": "initWithURL:append:", "contents": "initWithURL:append:(${1:NSURL* url}, append:${2:BOOL shouldAppend})" },  
    { "trigger": "initWithURL:cachePolicy:timeoutInterval:", "contents": "initWithURL:cachePolicy:timeoutInterval:(${1:NSURL* URL}, cachePolicy:${2:NSURLRequestCachePolicy cachePolicy}, timeoutInterval:${3:NSTimeInterval timeoutInterval})" },  
    { "trigger": "initWithURL:fileType:error:", "contents": "initWithURL:fileType:error:(${1:NSURL* outputURL}, fileType:${2:NSString* outputFileType}, error:${3:NSError** outError})" },  
    { "trigger": "initWithURL:options:", "contents": "initWithURL:options:(${1:NSURL* URL}, options:${2:NSDictionary* options})" },  
    { "trigger": "initWithURL:options:error:", "contents": "initWithURL:options:error:(${1:NSURL* url}, options:${2:NSFileWrapperReadingOptions options}, error:${3:NSError** outError})" },  
    { "trigger": "initWithURL:parameters:requestMethod:", "contents": "initWithURL:parameters:requestMethod:(${1:NSURL* url}, parameters:${2:NSDictionary* parameters}, requestMethod:${3:TWRequestMethod requestMethod})" },  
    { "trigger": "initWithURL:settings:error:", "contents": "initWithURL:settings:error:(${1:NSURL* url}, settings:${2:NSDictionary* settings}, error:${3:NSError** outError})" },  
    { "trigger": "initWithURL:statusCode:HTTPVersion:headerFields:", "contents": "initWithURL:statusCode:HTTPVersion:headerFields:(${1:NSURL* url}, statusCode:${2:NSInteger statusCode}, HTTPVersion:${3:NSString* HTTPVersion}, headerFields:${4:NSDictionary* headerFields})" },  
    { "trigger": "initWithURL:trackID:sourceTimeRange:targetTimeRange:", "contents": "initWithURL:trackID:sourceTimeRange:targetTimeRange:(${1:NSURL* URL}, trackID:${2:CMPersistentTrackID trackID}, sourceTimeRange:${3:CMTimeRange sourceTimeRange}, targetTimeRange:${4:CMTimeRange targetTimeRange})" },  
    { "trigger": "initWithUTF8String:", "contents": "initWithUTF8String:(${1:char* nullTerminatedCString})" },  
    { "trigger": "initWithUnsignedChar:", "contents": "initWithUnsignedChar:(${1:unsigned char value})" },  
    { "trigger": "initWithUnsignedInt:", "contents": "initWithUnsignedInt:(${1:unsigned int value})" },  
    { "trigger": "initWithUnsignedInteger:", "contents": "initWithUnsignedInteger:(${1:NSUInteger value})" },  
    { "trigger": "initWithUnsignedLong:", "contents": "initWithUnsignedLong:(${1:unsigned long value})" },  
    { "trigger": "initWithUnsignedLongLong:", "contents": "initWithUnsignedLongLong:(${1:unsigned long long value})" },  
    { "trigger": "initWithUnsignedShort:", "contents": "initWithUnsignedShort:(${1:unsigned short value})" },  
    { "trigger": "initWithUser:", "contents": "initWithUser:(${1:NSString* username})" },  
    { "trigger": "initWithUser:password:persistence:", "contents": "initWithUser:password:persistence:(${1:NSString* user}, password:${2:NSString* password}, persistence:${3:NSURLCredentialPersistence persistence})" },  
    { "trigger": "initWithValues:count:", "contents": "initWithValues:count:(${1:CGFloat* values}, count:${2:size_t count})" },  
    { "trigger": "initWithVideoTracks:videoSettings:", "contents": "initWithVideoTracks:videoSettings:(${1:NSArray* videoTracks}, videoSettings:${2:NSDictionary* videoSettings})" },  
    { "trigger": "initWithWhite:alpha:", "contents": "initWithWhite:alpha:(${1:CGFloat white}, alpha:${2:CGFloat alpha})" },  
    { "trigger": "initWithX:", "contents": "initWithX:(${1:CGFloat x})" },  
    { "trigger": "initWithX:Y:", "contents": "initWithX:Y:(${1:CGFloat x}, Y:${2:CGFloat y})" },  
    { "trigger": "initWithX:Y:Z:", "contents": "initWithX:Y:Z:(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z})" },  
    { "trigger": "initWithX:Y:Z:W:", "contents": "initWithX:Y:Z:W:(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z}, W:${4:CGFloat w})" },  
    { "trigger": "initialPlaybackTime" },  
    { "trigger": "inlandWater" },  
    { "trigger": "input" },  
    { "trigger": "inputAccessoryView" },  
    { "trigger": "inputAccessoryView" },  
    { "trigger": "inputAccessoryView" },  
    { "trigger": "inputDelegate" },  
    { "trigger": "inputDelegate" },  
    { "trigger": "inputImageMaximumSize" },  
    { "trigger": "inputIsAvailable" },  
    { "trigger": "inputIsAvailableChanged:", "contents": "inputIsAvailableChanged:(${1:BOOL isInputAvailable})" },  
    { "trigger": "inputIsAvailableChanged:", "contents": "inputIsAvailableChanged:(${1:BOOL isInputAvailable})" },  
    { "trigger": "inputKeys" },  
    { "trigger": "inputMeterLevel" },  
    { "trigger": "inputParameters" },  
    { "trigger": "inputParameters" },  
    { "trigger": "inputPorts" },  
    { "trigger": "inputStream" },  
    { "trigger": "inputView" },  
    { "trigger": "inputView" },  
    { "trigger": "inputView" },  
    { "trigger": "inputs" },  
    { "trigger": "inputs" },  
    { "trigger": "insertAttributedString:atIndex:", "contents": "insertAttributedString:atIndex:(${1:NSAttributedString* attrString}, atIndex:${2:NSUInteger loc})" },  
    { "trigger": "insertDictationResult:", "contents": "insertDictationResult:(${1:NSArray* dictationResult})" },  
    { "trigger": "insertDictationResult:", "contents": "insertDictationResult:(${1:NSArray* dictationResult})" },  
    { "trigger": "insertEmptyTimeRange:", "contents": "insertEmptyTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "insertEmptyTimeRange:", "contents": "insertEmptyTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "insertItem:afterItem:", "contents": "insertItem:afterItem:(${1:AVPlayerItem* item}, afterItem:${2:AVPlayerItem* afterItem})" },  
    { "trigger": "insertObject:", "contents": "insertObject:(${1:NSManagedObject* object})" },  
    { "trigger": "insertObject:atIndex:", "contents": "insertObject:atIndex:(${1:id anObject}, atIndex:${2:NSUInteger index})" },  
    { "trigger": "insertObject:atIndex:", "contents": "insertObject:atIndex:(${1:id object}, atIndex:${2:NSUInteger idx})" },  
    { "trigger": "insertObjects:atIndexes:", "contents": "insertObjects:atIndexes:(${1:NSArray* objects}, atIndexes:${2:NSIndexSet* indexes})" },  
    { "trigger": "insertObjects:atIndexes:", "contents": "insertObjects:atIndexes:(${1:NSArray* objects}, atIndexes:${2:NSIndexSet* indexes})" },  
    { "trigger": "insertOverlay:aboveOverlay:", "contents": "insertOverlay:aboveOverlay:(${1:id overlay}, aboveOverlay:${2:id sibling})" },  
    { "trigger": "insertOverlay:atIndex:", "contents": "insertOverlay:atIndex:(${1:id overlay}, atIndex:${2:NSUInteger index})" },  
    { "trigger": "insertOverlay:belowOverlay:", "contents": "insertOverlay:belowOverlay:(${1:id overlay}, belowOverlay:${2:id sibling})" },  
    { "trigger": "insertRowsAtIndexPaths:withRowAnimation:", "contents": "insertRowsAtIndexPaths:withRowAnimation:(${1:NSArray* indexPaths}, withRowAnimation:${2:UITableViewRowAnimation animation})" },  
    { "trigger": "insertSections:withRowAnimation:", "contents": "insertSections:withRowAnimation:(${1:NSIndexSet* sections}, withRowAnimation:${2:UITableViewRowAnimation animation})" },  
    { "trigger": "insertSegmentWithImage:atIndex:animated:", "contents": "insertSegmentWithImage:atIndex:animated:(${1:UIImage* image}, atIndex:${2:NSUInteger segment}, animated:${3:BOOL animated})" },  
    { "trigger": "insertSegmentWithTitle:atIndex:animated:", "contents": "insertSegmentWithTitle:atIndex:animated:(${1:NSString* title}, atIndex:${2:NSUInteger segment}, animated:${3:BOOL animated})" },  
    { "trigger": "insertString:atIndex:", "contents": "insertString:atIndex:(${1:NSString* aString}, atIndex:${2:NSUInteger loc})" },  
    { "trigger": "insertSublayer:above:", "contents": "insertSublayer:above:(${1:CALayer* layer}, above:${2:CALayer* sibling})" },  
    { "trigger": "insertSublayer:atIndex:", "contents": "insertSublayer:atIndex:(${1:CALayer* layer}, atIndex:${2:unsigned int idx})" },  
    { "trigger": "insertSublayer:below:", "contents": "insertSublayer:below:(${1:CALayer* layer}, below:${2:CALayer* sibling})" },  
    { "trigger": "insertSubview:aboveSubview:", "contents": "insertSubview:aboveSubview:(${1:UIView* view}, aboveSubview:${2:UIView* siblingSubview})" },  
    { "trigger": "insertSubview:atIndex:", "contents": "insertSubview:atIndex:(${1:UIView* view}, atIndex:${2:NSInteger index})" },  
    { "trigger": "insertSubview:belowSubview:", "contents": "insertSubview:belowSubview:(${1:UIView* view}, belowSubview:${2:UIView* siblingSubview})" },  
    { "trigger": "insertText:", "contents": "insertText:(${1:NSString* text})" },  
    { "trigger": "insertText:", "contents": "insertText:(${1:NSString* text})" },  
    { "trigger": "insertTimeRange:ofAsset:atTime:error:", "contents": "insertTimeRange:ofAsset:atTime:error:(${1:CMTimeRange timeRange}, ofAsset:${2:AVAsset* asset}, atTime:${3:CMTime startTime}, error:${4:NSError** outError})" },  
    { "trigger": "insertTimeRange:ofTrack:atTime:error:", "contents": "insertTimeRange:ofTrack:atTime:error:(${1:CMTimeRange timeRange}, ofTrack:${2:AVAssetTrack* track}, atTime:${3:CMTime startTime}, error:${4:NSError** error})" },  
    { "trigger": "insertTimeRanges:ofTracks:atTime:error:", "contents": "insertTimeRanges:ofTracks:atTime:error:(${1:NSArray* timeRanges}, ofTracks:${2:NSArray* tracks}, atTime:${3:CMTime startTime}, error:${4:NSError** error})" },  
    { "trigger": "insertedObjects" },  
    { "trigger": "insertedObjects" },  
    { "trigger": "instanceAlphaOffset" },  
    { "trigger": "instanceBlueOffset" },  
    { "trigger": "instanceColor" },  
    { "trigger": "instanceCount" },  
    { "trigger": "instanceDelay" },  
    { "trigger": "instanceGreenOffset" },  
    { "trigger": "instanceRedOffset" },  
    { "trigger": "instanceTransform" },  
    { "trigger": "instantiateInitialViewController" },  
    { "trigger": "instantiateViewControllerWithIdentifier:", "contents": "instantiateViewControllerWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "instantiateWithOwner:options:", "contents": "instantiateWithOwner:options:(${1:id ownerOrNil}, options:${2:NSDictionary* optionsOrNil})" },  
    { "trigger": "instructions" },  
    { "trigger": "instructions" },  
    { "trigger": "intValue" },  
    { "trigger": "intValue" },  
    { "trigger": "integerForKey:", "contents": "integerForKey:(${1:NSString* defaultName})" },  
    { "trigger": "integerValue" },  
    { "trigger": "integerValue" },  
    { "trigger": "interfaceOrientation" },  
    { "trigger": "interiorPolygons" },  
    { "trigger": "internationalCurrencySymbol" },  
    { "trigger": "intersectOrderedSet:", "contents": "intersectOrderedSet:(${1:NSOrderedSet* other})" },  
    { "trigger": "intersectSet:", "contents": "intersectSet:(${1:NSSet* other})" },  
    { "trigger": "intersectSet:", "contents": "intersectSet:(${1:NSSet* otherSet})" },  
    { "trigger": "intersectsIndexesInRange:", "contents": "intersectsIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "intersectsMapRect:", "contents": "intersectsMapRect:(${1:MKMapRect mapRect})" },  
    { "trigger": "intersectsMapRect:", "contents": "intersectsMapRect:(${1:MKMapRect mapRect})" },  
    { "trigger": "intersectsOrderedSet:", "contents": "intersectsOrderedSet:(${1:NSOrderedSet* other})" },  
    { "trigger": "intersectsSet:", "contents": "intersectsSet:(${1:NSSet* set})" },  
    { "trigger": "intersectsSet:", "contents": "intersectsSet:(${1:NSSet* otherSet})" },  
    { "trigger": "interstitialAdActionDidFinish:", "contents": "interstitialAdActionDidFinish:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdActionDidFinish:", "contents": "interstitialAdActionDidFinish:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdActionShouldBegin:willLeaveApplication:", "contents": "interstitialAdActionShouldBegin:willLeaveApplication:(${1:ADInterstitialAd* interstitialAd}, willLeaveApplication:${2:BOOL willLeave})" },  
    { "trigger": "interstitialAdActionShouldBegin:willLeaveApplication:", "contents": "interstitialAdActionShouldBegin:willLeaveApplication:(${1:ADInterstitialAd* interstitialAd}, willLeaveApplication:${2:BOOL willLeave})" },  
    { "trigger": "interstitialAdDidLoad:", "contents": "interstitialAdDidLoad:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdDidLoad:", "contents": "interstitialAdDidLoad:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdDidUnload:", "contents": "interstitialAdDidUnload:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdDidUnload:", "contents": "interstitialAdDidUnload:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdWillLoad:", "contents": "interstitialAdWillLoad:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAdWillLoad:", "contents": "interstitialAdWillLoad:(${1:ADInterstitialAd* interstitialAd})" },  
    { "trigger": "interstitialAd:didFailWithError:", "contents": "interstitialAd:didFailWithError:(${1:ADInterstitialAd* interstitialAd}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "interstitialAd:didFailWithError:", "contents": "interstitialAd:didFailWithError:(${1:ADInterstitialAd* interstitialAd}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "interval" },  
    { "trigger": "invalidProductIdentifiers" },  
    { "trigger": "invalidate" },  
    { "trigger": "invalidate" },  
    { "trigger": "invalidate" },  
    { "trigger": "invalidatePath" },  
    { "trigger": "inverseRelationship" },  
    { "trigger": "invert" },  
    { "trigger": "invertedSet" },  
    { "trigger": "inviteHandler" },  
    { "trigger": "inviter" },  
    { "trigger": "invocation" },  
    { "trigger": "invoke" },  
    { "trigger": "invokeWithTarget:", "contents": "invokeWithTarget:(${1:id target})" },  
    { "trigger": "isAbsolutePath" },  
    { "trigger": "isAbstract" },  
    { "trigger": "isAccelerometerActive" },  
    { "trigger": "isAccelerometerAvailable" },  
    { "trigger": "isAccessibilityElement" },  
    { "trigger": "isAccessibilityElement" },  
    { "trigger": "isAccessibilityElement" },  
    { "trigger": "isActionInProgress" },  
    { "trigger": "isActive" },  
    { "trigger": "isActive" },  
    { "trigger": "isActive" },  
    { "trigger": "isAdditive" },  
    { "trigger": "isAdjustingExposure" },  
    { "trigger": "isAdjustingFocus" },  
    { "trigger": "isAdjustingWhiteBalance" },  
    { "trigger": "isAirPlayVideoActive" },  
    { "trigger": "isAirPlayVideoActive" },  
    { "trigger": "isAllDay" },  
    { "trigger": "isAnimating" },  
    { "trigger": "isAnimating" },  
    { "trigger": "isAtEnd" },  
    { "trigger": "isAuthenticated" },  
    { "trigger": "isAvailable" },  
    { "trigger": "isBannerLoaded" },  
    { "trigger": "isBannerViewActionInProgress" },  
    { "trigger": "isBatteryMonitoringEnabled" },  
    { "trigger": "isBeingDismissed" },  
    { "trigger": "isBeingPresented" },  
    { "trigger": "isBroadcasted" },  
    { "trigger": "isCancelled" },  
    { "trigger": "isCancelled" },  
    { "trigger": "isCapturingStillImage" },  
    { "trigger": "isClosedCaptionDisplayEnabled" },  
    { "trigger": "isCompatibleWithSavedPhotosAlbum" },  
    { "trigger": "isCompleted" },  
    { "trigger": "isComposable" },  
    { "trigger": "isConcurrent" },  
    { "trigger": "isConfiguration:compatibleWithStoreMetadata:", "contents": "isConfiguration:compatibleWithStoreMetadata:(${1:NSString* configuration}, compatibleWithStoreMetadata:${2:NSDictionary* metadata})" },  
    { "trigger": "isConflict" },  
    { "trigger": "isConnected" },  
    { "trigger": "isConnected" },  
    { "trigger": "isConnected" },  
    { "trigger": "isContentDiscarded" },  
    { "trigger": "isContentDiscarded" },  
    { "trigger": "isContinuous" },  
    { "trigger": "isContinuous" },  
    { "trigger": "isCountOnlyRequest" },  
    { "trigger": "isCumulative" },  
    { "trigger": "isCustomizing" },  
    { "trigger": "isDaylightSavingTime" },  
    { "trigger": "isDaylightSavingTimeForDate:", "contents": "isDaylightSavingTimeForDate:(${1:NSDate* aDate})" },  
    { "trigger": "isDecelerating" },  
    { "trigger": "isDeletableFileAtPath:", "contents": "isDeletableFileAtPath:(${1:NSString* path})" },  
    { "trigger": "isDeleted" },  
    { "trigger": "isDescendantOfView:", "contents": "isDescendantOfView:(${1:UIView* view})" },  
    { "trigger": "isDetached" },  
    { "trigger": "isDeviceMotionActive" },  
    { "trigger": "isDeviceMotionAvailable" },  
    { "trigger": "isDirectionalLockEnabled" },  
    { "trigger": "isDirectory" },  
    { "trigger": "isDiscardable" },  
    { "trigger": "isDoubleSided" },  
    { "trigger": "isDoubleSided" },  
    { "trigger": "isDraggable" },  
    { "trigger": "isDragging" },  
    { "trigger": "isEditable" },  
    { "trigger": "isEditable" },  
    { "trigger": "isEditable" },  
    { "trigger": "isEditing" },  
    { "trigger": "isEditing" },  
    { "trigger": "isEditing" },  
    { "trigger": "isEditing" },  
    { "trigger": "isEmpty" },  
    { "trigger": "isEmpty" },  
    { "trigger": "isEmpty" },  
    { "trigger": "isEmpty" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabled" },  
    { "trigger": "isEnabledForSegmentAtIndex:", "contents": "isEnabledForSegmentAtIndex:(${1:NSUInteger segment})" },  
    { "trigger": "isEqual:", "contents": "isEqual:(${1:id object})" },  
    { "trigger": "isEqual:", "contents": "isEqual:(${1:id object})" },  
    { "trigger": "isEqualToArray:", "contents": "isEqualToArray:(${1:NSArray* otherArray})" },  
    { "trigger": "isEqualToAttributedString:", "contents": "isEqualToAttributedString:(${1:NSAttributedString* other})" },  
    { "trigger": "isEqualToData:", "contents": "isEqualToData:(${1:NSData* other})" },  
    { "trigger": "isEqualToDate:", "contents": "isEqualToDate:(${1:NSDate* otherDate})" },  
    { "trigger": "isEqualToDictionary:", "contents": "isEqualToDictionary:(${1:NSDictionary* otherDictionary})" },  
    { "trigger": "isEqualToIndexSet:", "contents": "isEqualToIndexSet:(${1:NSIndexSet* indexSet})" },  
    { "trigger": "isEqualToNumber:", "contents": "isEqualToNumber:(${1:NSNumber* number})" },  
    { "trigger": "isEqualToOrderedSet:", "contents": "isEqualToOrderedSet:(${1:NSOrderedSet* other})" },  
    { "trigger": "isEqualToSet:", "contents": "isEqualToSet:(${1:NSSet* otherSet})" },  
    { "trigger": "isEqualToString:", "contents": "isEqualToString:(${1:NSString* aString})" },  
    { "trigger": "isEqualToTimeZone:", "contents": "isEqualToTimeZone:(${1:NSTimeZone* aTimeZone})" },  
    { "trigger": "isEqualToValue:", "contents": "isEqualToValue:(${1:NSValue* value})" },  
    { "trigger": "isExclusiveTouch" },  
    { "trigger": "isExecutableFileAtPath:", "contents": "isExecutableFileAtPath:(${1:NSString* path})" },  
    { "trigger": "isExecuting" },  
    { "trigger": "isExecuting" },  
    { "trigger": "isExportable" },  
    { "trigger": "isExposureModeSupported:", "contents": "isExposureModeSupported:(${1:AVCaptureExposureMode exposureMode})" },  
    { "trigger": "isExposurePointOfInterestSupported" },  
    { "trigger": "isFault" },  
    { "trigger": "isFileReferenceURL" },  
    { "trigger": "isFileURL" },  
    { "trigger": "isFinished" },  
    { "trigger": "isFinished" },  
    { "trigger": "isFirstResponder" },  
    { "trigger": "isFlashActive" },  
    { "trigger": "isFlashAvailable" },  
    { "trigger": "isFlashModeSupported:", "contents": "isFlashModeSupported:(${1:AVCaptureFlashMode flashMode})" },  
    { "trigger": "isFocusModeSupported:", "contents": "isFocusModeSupported:(${1:AVCaptureFocusMode focusMode})" },  
    { "trigger": "isFocusPointOfInterestSupported" },  
    { "trigger": "isFriend" },  
    { "trigger": "isFullscreen" },  
    { "trigger": "isGathering" },  
    { "trigger": "isGeneratingDeviceOrientationNotifications" },  
    { "trigger": "isGeocoding" },  
    { "trigger": "isGeometryFlipped" },  
    { "trigger": "isGyroActive" },  
    { "trigger": "isGyroAvailable" },  
    { "trigger": "isHTTPOnly" },  
    { "trigger": "isHidden" },  
    { "trigger": "isHidden" },  
    { "trigger": "isHidden" },  
    { "trigger": "isHidden" },  
    { "trigger": "isHighlighted" },  
    { "trigger": "isHighlighted" },  
    { "trigger": "isHighlighted" },  
    { "trigger": "isHighlighted" },  
    { "trigger": "isHighlighted" },  
    { "trigger": "isHosted" },  
    { "trigger": "isHosted" },  
    { "trigger": "isIdleTimerDisabled" },  
    { "trigger": "isIgnoringInteractionEvents" },  
    { "trigger": "isImmutable" },  
    { "trigger": "isIndexed" },  
    { "trigger": "isIndexedBySpotlight" },  
    { "trigger": "isInputMeteringEnabled" },  
    { "trigger": "isInserted" },  
    { "trigger": "isInterrupted" },  
    { "trigger": "isKeyWindow" },  
    { "trigger": "isKindOfClass:", "contents": "isKindOfClass:(${1:Class aClass})" },  
    { "trigger": "isKindOfClass:", "contents": "isKindOfClass:(${1:Class aClass})" },  
    { "trigger": "isKindOfEntity:", "contents": "isKindOfEntity:(${1:NSEntityDescription* entity})" },  
    { "trigger": "isLenient" },  
    { "trigger": "isLenient" },  
    { "trigger": "isLoaded" },  
    { "trigger": "isLoaded" },  
    { "trigger": "isLoading" },  
    { "trigger": "isLoading" },  
    { "trigger": "isMagnetometerActive" },  
    { "trigger": "isMagnetometerAvailable" },  
    { "trigger": "isMainThread" },  
    { "trigger": "isMemberOfClass:", "contents": "isMemberOfClass:(${1:Class aClass})" },  
    { "trigger": "isMemberOfClass:", "contents": "isMemberOfClass:(${1:Class aClass})" },  
    { "trigger": "isMenuVisible" },  
    { "trigger": "isMeteringEnabled" },  
    { "trigger": "isMeteringEnabled" },  
    { "trigger": "isMicrophoneMuted" },  
    { "trigger": "isMirrored" },  
    { "trigger": "isMirroringSupported" },  
    { "trigger": "isModalInPopover" },  
    { "trigger": "isMomentary" },  
    { "trigger": "isMovingFromParentViewController" },  
    { "trigger": "isMovingToParentViewController" },  
    { "trigger": "isMultipleTouchEnabled" },  
    { "trigger": "isMultitaskingSupported" },  
    { "trigger": "isNavigationBarHidden" },  
    { "trigger": "isNetworkActivityIndicatorVisible" },  
    { "trigger": "isNew" },  
    { "trigger": "isNotifying" },  
    { "trigger": "isOn" },  
    { "trigger": "isOneway" },  
    { "trigger": "isOpaque" },  
    { "trigger": "isOpaque" },  
    { "trigger": "isOptional" },  
    { "trigger": "isOrdered" },  
    { "trigger": "isOrientationSupported" },  
    { "trigger": "isOutputMeteringEnabled" },  
    { "trigger": "isPagingEnabled" },  
    { "trigger": "isPartialStringValidationEnabled" },  
    { "trigger": "isPartialStringValid:newEditingString:errorDescription:", "contents": "isPartialStringValid:newEditingString:errorDescription:(${1:NSString* partialString}, newEditingString:${2:NSString** newString}, errorDescription:${3:NSString** error})" },  
    { "trigger": "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", "contents": "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:(${1:NSString** partialStringPtr}, proposedSelectedRange:${2:NSRangePointer proposedSelRangePtr}, originalString:${3:NSString* origString}, originalSelectedRange:${4:NSRange origSelRange}, errorDescription:${5:NSString** error})" },  
    { "trigger": "isPaused" },  
    { "trigger": "isPaused" },  
    { "trigger": "isPersistent" },  
    { "trigger": "isPlayable" },  
    { "trigger": "isPlayable" },  
    { "trigger": "isPlayable" },  
    { "trigger": "isPlaybackBufferEmpty" },  
    { "trigger": "isPlaybackBufferFull" },  
    { "trigger": "isPlaybackLikelyToKeepUp" },  
    { "trigger": "isPlaying" },  
    { "trigger": "isPopoverVisible" },  
    { "trigger": "isPosition:atBoundary:inDirection:", "contents": "isPosition:atBoundary:inDirection:(${1:UITextPosition* position}, atBoundary:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "isPosition:atBoundary:inDirection:", "contents": "isPosition:atBoundary:inDirection:(${1:UITextPosition* position}, atBoundary:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "isPosition:withinTextUnit:inDirection:", "contents": "isPosition:withinTextUnit:inDirection:(${1:UITextPosition* position}, withinTextUnit:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "isPosition:withinTextUnit:inDirection:", "contents": "isPosition:withinTextUnit:inDirection:(${1:UITextPosition* position}, withinTextUnit:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "isPreparedToPlay" },  
    { "trigger": "isPreparedToPlay" },  
    { "trigger": "isProtectedDataAvailable" },  
    { "trigger": "isProximityMonitoringEnabled" },  
    { "trigger": "isProximitySensingEnabled" },  
    { "trigger": "isProxy" },  
    { "trigger": "isProxy" },  
    { "trigger": "isProxy" },  
    { "trigger": "isQuerying" },  
    { "trigger": "isReadOnly" },  
    { "trigger": "isReadable" },  
    { "trigger": "isReadableFileAtPath:", "contents": "isReadableFileAtPath:(${1:NSString* path})" },  
    { "trigger": "isReady" },  
    { "trigger": "isReadyForDisplay" },  
    { "trigger": "isReadyForMoreMediaData" },  
    { "trigger": "isRecording" },  
    { "trigger": "isRecording" },  
    { "trigger": "isRedoing" },  
    { "trigger": "isRegularFile" },  
    { "trigger": "isRemovedOnCompletion" },  
    { "trigger": "isResolved" },  
    { "trigger": "isRunning" },  
    { "trigger": "isScrollEnabled" },  
    { "trigger": "isScrollEnabled" },  
    { "trigger": "isSearchResultsButtonSelected" },  
    { "trigger": "isSecure" },  
    { "trigger": "isSecureTextEntry" },  
    { "trigger": "isSecureTextEntry" },  
    { "trigger": "isSelected" },  
    { "trigger": "isSelected" },  
    { "trigger": "isSelected" },  
    { "trigger": "isSelfContained" },  
    { "trigger": "isSessionOnly" },  
    { "trigger": "isStarted" },  
    { "trigger": "isStatusBarHidden" },  
    { "trigger": "isStopped" },  
    { "trigger": "isStoredInExternalRecord" },  
    { "trigger": "isSubjectAreaChangeMonitoringEnabled" },  
    { "trigger": "isSubscribed" },  
    { "trigger": "isSubsetOfOrderedSet:", "contents": "isSubsetOfOrderedSet:(${1:NSOrderedSet* other})" },  
    { "trigger": "isSubsetOfSet:", "contents": "isSubsetOfSet:(${1:NSSet* set})" },  
    { "trigger": "isSubsetOfSet:", "contents": "isSubsetOfSet:(${1:NSSet* otherSet})" },  
    { "trigger": "isSupersetOfSet:", "contents": "isSupersetOfSet:(${1:NSCharacterSet* theOtherSet})" },  
    { "trigger": "isSuspended" },  
    { "trigger": "isSymbolicLink" },  
    { "trigger": "isTemporaryID" },  
    { "trigger": "isToMany" },  
    { "trigger": "isToolbarHidden" },  
    { "trigger": "isTorchAvailable" },  
    { "trigger": "isTorchModeSupported:", "contents": "isTorchModeSupported:(${1:AVCaptureTorchMode torchMode})" },  
    { "trigger": "isTouchInside" },  
    { "trigger": "isTracking" },  
    { "trigger": "isTracking" },  
    { "trigger": "isTransient" },  
    { "trigger": "isTranslucent" },  
    { "trigger": "isTranslucent" },  
    { "trigger": "isTranslucent" },  
    { "trigger": "isUbiquitousItemAtURL:", "contents": "isUbiquitousItemAtURL:(${1:NSURL* url})" },  
    { "trigger": "isUnderage" },  
    { "trigger": "isUndoRegistrationEnabled" },  
    { "trigger": "isUndoing" },  
    { "trigger": "isUpdated" },  
    { "trigger": "isUpdating" },  
    { "trigger": "isUserInteractionEnabled" },  
    { "trigger": "isUserInteractionEnabled" },  
    { "trigger": "isUserInteractionEnabled" },  
    { "trigger": "isUserLocationVisible" },  
    { "trigger": "isValid" },  
    { "trigger": "isValid" },  
    { "trigger": "isValidForAsset:timeRange:validationDelegate:", "contents": "isValidForAsset:timeRange:validationDelegate:(${1:AVAsset* asset}, timeRange:${2:CMTimeRange timeRange}, validationDelegate:${3:id validationDelegate})" },  
    { "trigger": "isVideoMaxFrameDurationSupported" },  
    { "trigger": "isVideoMinFrameDurationSupported" },  
    { "trigger": "isVideoMirrored" },  
    { "trigger": "isVideoMirroringSupported" },  
    { "trigger": "isVideoOrientationSupported" },  
    { "trigger": "isViewLoaded" },  
    { "trigger": "isVisible" },  
    { "trigger": "isVisible" },  
    { "trigger": "isVisible" },  
    { "trigger": "isWhiteBalanceModeSupported:", "contents": "isWhiteBalanceModeSupported:(${1:AVCaptureWhiteBalanceMode whiteBalanceMode})" },  
    { "trigger": "isWrapped" },  
    { "trigger": "isWritableFileAtPath:", "contents": "isWritableFileAtPath:(${1:NSString* path})" },  
    { "trigger": "isZoomBouncing" },  
    { "trigger": "isZoomEnabled" },  
    { "trigger": "isZooming" },  
    { "trigger": "isoCountryCode" },  
    { "trigger": "issue" },  
    { "trigger": "issueWithName:", "contents": "issueWithName:(${1:NSString* name})" },  
    { "trigger": "issues" },  
    { "trigger": "itemAtURL:didMoveToURL:", "contents": "itemAtURL:didMoveToURL:(${1:NSURL* oldURL}, didMoveToURL:${2:NSURL* newURL})" },  
    { "trigger": "itemSections" },  
    { "trigger": "itemSetWithPasteboardTypes:", "contents": "itemSetWithPasteboardTypes:(${1:NSArray* pasteboardTypes})" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "items" },  
    { "trigger": "jobName" },  
    { "trigger": "key" },  
    { "trigger": "key" },  
    { "trigger": "key" },  
    { "trigger": "key" },  
    { "trigger": "keyEnumerator" },  
    { "trigger": "keyForFileWrapper:", "contents": "keyForFileWrapper:(${1:NSFileWrapper* child})" },  
    { "trigger": "keyPath" },  
    { "trigger": "keyPath" },  
    { "trigger": "keySpace" },  
    { "trigger": "keySpace" },  
    { "trigger": "keyTimes" },  
    { "trigger": "keyWindow" },  
    { "trigger": "keyboardAppearance" },  
    { "trigger": "keyboardAppearance" },  
    { "trigger": "keyboardType" },  
    { "trigger": "keyboardType" },  
    { "trigger": "keyboardType" },  
    { "trigger": "keysOfEntriesPassingTest:", "contents": "keysOfEntriesPassingTest:(${1:BOOL (^)(id, id, BOOL *) predicate})" },  
    { "trigger": "keysOfEntriesWithOptions:passingTest:", "contents": "keysOfEntriesWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, id, BOOL *) predicate})" },  
    { "trigger": "keysSortedByValueUsingComparator:", "contents": "keysSortedByValueUsingComparator:(${1:NSComparator cmptr})" },  
    { "trigger": "keysSortedByValueUsingSelector:", "contents": "keysSortedByValueUsingSelector:(${1:SEL comparator})" },  
    { "trigger": "keysSortedByValueWithOptions:usingComparator:", "contents": "keysSortedByValueWithOptions:usingComparator:(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})" },  
    { "trigger": "keyspace" },  
    { "trigger": "label" },  
    { "trigger": "label" },  
    { "trigger": "landscapeImagePhone" },  
    { "trigger": "landscapeImagePhoneInsets" },  
    { "trigger": "languageCode" },  
    { "trigger": "languageCode" },  
    { "trigger": "languageMap" },  
    { "trigger": "languagesForScript:", "contents": "languagesForScript:(${1:NSString* script})" },  
    { "trigger": "lastIndex" },  
    { "trigger": "lastModifiedDate" },  
    { "trigger": "lastModifiedDate" },  
    { "trigger": "lastObject" },  
    { "trigger": "lastObject" },  
    { "trigger": "lastPathComponent" },  
    { "trigger": "lastPathComponent" },  
    { "trigger": "lastReportedDate" },  
    { "trigger": "lastTurnDate" },  
    { "trigger": "laterDate:", "contents": "laterDate:(${1:NSDate* anotherDate})" },  
    { "trigger": "layer" },  
    { "trigger": "layerInstructions" },  
    { "trigger": "layerInstructions" },  
    { "trigger": "layoutIfNeeded" },  
    { "trigger": "layoutIfNeeded" },  
    { "trigger": "layoutSublayers" },  
    { "trigger": "layoutSublayersOfLayer:", "contents": "layoutSublayersOfLayer:(${1:CALayer* layer})" },  
    { "trigger": "layoutSublayersOfLayer:", "contents": "layoutSublayersOfLayer:(${1:CALayer* layer})" },  
    { "trigger": "layoutSubviews" },  
    { "trigger": "leaderboardDelegate" },  
    { "trigger": "leaderboardViewControllerDidFinish:", "contents": "leaderboardViewControllerDidFinish:(${1:GKLeaderboardViewController* viewController})" },  
    { "trigger": "leaderboardViewControllerDidFinish:", "contents": "leaderboardViewControllerDidFinish:(${1:GKLeaderboardViewController* viewController})" },  
    { "trigger": "leading" },  
    { "trigger": "leftBarButtonItem" },  
    { "trigger": "leftBarButtonItems" },  
    { "trigger": "leftCalloutAccessoryView" },  
    { "trigger": "leftCapWidth" },  
    { "trigger": "leftExpression" },  
    { "trigger": "leftExpression" },  
    { "trigger": "leftEyePosition" },  
    { "trigger": "leftItemsSupplementBackButton" },  
    { "trigger": "leftView" },  
    { "trigger": "leftViewMode" },  
    { "trigger": "leftViewRectForBounds:", "contents": "leftViewRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "length" },  
    { "trigger": "length" },  
    { "trigger": "length" },  
    { "trigger": "length" },  
    { "trigger": "lengthOfBytesUsingEncoding:", "contents": "lengthOfBytesUsingEncoding:(${1:NSStringEncoding enc})" },  
    { "trigger": "level" },  
    { "trigger": "levelsOfDetail" },  
    { "trigger": "levelsOfDetailBias" },  
    { "trigger": "levelsOfUndo" },  
    { "trigger": "lifetime" },  
    { "trigger": "lifetime" },  
    { "trigger": "lifetimeRange" },  
    { "trigger": "light0" },  
    { "trigger": "light1" },  
    { "trigger": "light2" },  
    { "trigger": "lightModelAmbientColor" },  
    { "trigger": "lightModelTwoSided" },  
    { "trigger": "lightingType" },  
    { "trigger": "limitDateForMode:", "contents": "limitDateForMode:(${1:NSString* mode})" },  
    { "trigger": "lineBreakMode" },  
    { "trigger": "lineBreakMode" },  
    { "trigger": "lineBreakMode" },  
    { "trigger": "lineCap" },  
    { "trigger": "lineCap" },  
    { "trigger": "lineCapStyle" },  
    { "trigger": "lineDashPattern" },  
    { "trigger": "lineDashPattern" },  
    { "trigger": "lineDashPhase" },  
    { "trigger": "lineDashPhase" },  
    { "trigger": "lineHeight" },  
    { "trigger": "lineJoin" },  
    { "trigger": "lineJoin" },  
    { "trigger": "lineJoinStyle" },  
    { "trigger": "lineNumber" },  
    { "trigger": "lineRangeForRange:", "contents": "lineRangeForRange:(${1:NSRange range})" },  
    { "trigger": "lineWidth" },  
    { "trigger": "lineWidth" },  
    { "trigger": "lineWidth" },  
    { "trigger": "linearAttenuation" },  
    { "trigger": "linguisticTagsInRange:scheme:options:orthography:tokenRanges:", "contents": "linguisticTagsInRange:scheme:options:orthography:tokenRanges:(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, orthography:${4:NSOrthography* orthography}, tokenRanges:${5:NSArray** tokenRanges})" },  
    { "trigger": "linkItemAtPath:toPath:error:", "contents": "linkItemAtPath:toPath:error:(${1:NSString* srcPath}, toPath:${2:NSString* dstPath}, error:${3:NSError** error})" },  
    { "trigger": "linkItemAtURL:toURL:error:", "contents": "linkItemAtURL:toURL:error:(${1:NSURL* srcURL}, toURL:${2:NSURL* dstURL}, error:${3:NSError** error})" },  
    { "trigger": "load:", "contents": "load:(${1:NSError** error})" },  
    { "trigger": "load" },  
    { "trigger": "loadAndReturnError:", "contents": "loadAndReturnError:(${1:NSError** error})" },  
    { "trigger": "loadData:MIMEType:textEncodingName:baseURL:", "contents": "loadData:MIMEType:textEncodingName:baseURL:(${1:NSData* data}, MIMEType:${2:NSString* MIMEType}, textEncodingName:${3:NSString* textEncodingName}, baseURL:${4:NSURL* baseURL})" },  
    { "trigger": "loadFriendsWithCompletionHandler:", "contents": "loadFriendsWithCompletionHandler:(${1:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "loadFromContents:ofType:error:", "contents": "loadFromContents:ofType:error:(${1:id contents}, ofType:${2:NSString* typeName}, error:${3:NSError** outError})" },  
    { "trigger": "loadHTMLString:baseURL:", "contents": "loadHTMLString:baseURL:(${1:NSString* string}, baseURL:${2:NSURL* baseURL})" },  
    { "trigger": "loadImageWithCompletionHandler:", "contents": "loadImageWithCompletionHandler:(${1:void (^)(UIImage *, NSError *) completionHandler})" },  
    { "trigger": "loadMatchDataWithCompletionHandler:", "contents": "loadMatchDataWithCompletionHandler:(${1:void (^)(NSData *, NSError *) completionHandler})" },  
    { "trigger": "loadMetadata:", "contents": "loadMetadata:(${1:NSError** error})" },  
    { "trigger": "loadMetadata:", "contents": "loadMetadata:(${1:NSError** error})" },  
    { "trigger": "loadNibNamed:owner:options:", "contents": "loadNibNamed:owner:options:(${1:NSString* name}, owner:${2:id owner}, options:${3:NSDictionary* options})" },  
    { "trigger": "loadPhotoForSize:withCompletionHandler:", "contents": "loadPhotoForSize:withCompletionHandler:(${1:GKPhotoSize size}, withCompletionHandler:${2:void (^)(UIImage *, NSError *) completionHandler})" },  
    { "trigger": "loadRequest:", "contents": "loadRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "loadScoresWithCompletionHandler:", "contents": "loadScoresWithCompletionHandler:(${1:void (^)(NSArray *, NSError *) completionHandler})" },  
    { "trigger": "loadState" },  
    { "trigger": "loadValuesAsynchronouslyForKeys:completionHandler:", "contents": "loadValuesAsynchronouslyForKeys:completionHandler:(${1:NSArray* keys}, completionHandler:${2:void (^)(void) handler})" },  
    { "trigger": "loadValuesAsynchronouslyForKeys:completionHandler:", "contents": "loadValuesAsynchronouslyForKeys:completionHandler:(${1:NSArray* keys}, completionHandler:${2:void (^)(void) handler})" },  
    { "trigger": "loadValuesAsynchronouslyForKeys:completionHandler:", "contents": "loadValuesAsynchronouslyForKeys:completionHandler:(${1:NSArray* keys}, completionHandler:${2:void (^)(void) handler})" },  
    { "trigger": "loadView" },  
    { "trigger": "loadedTimeRanges" },  
    { "trigger": "localName" },  
    { "trigger": "localPlayerScore" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "locale" },  
    { "trigger": "localeIdentifier" },  
    { "trigger": "locality" },  
    { "trigger": "localizationDictionary" },  
    { "trigger": "localizations" },  
    { "trigger": "localizedCaseInsensitiveCompare:", "contents": "localizedCaseInsensitiveCompare:(${1:NSString* string})" },  
    { "trigger": "localizedCompare:", "contents": "localizedCompare:(${1:NSString* string})" },  
    { "trigger": "localizedDescription" },  
    { "trigger": "localizedDescription" },  
    { "trigger": "localizedFailureReason" },  
    { "trigger": "localizedInfoDictionary" },  
    { "trigger": "localizedModel" },  
    { "trigger": "localizedName" },  
    { "trigger": "localizedName" },  
    { "trigger": "localizedName" },  
    { "trigger": "localizedNameOfSavingComputer" },  
    { "trigger": "localizedName:locale:", "contents": "localizedName:locale:(${1:NSTimeZoneNameStyle style}, locale:${2:NSLocale* locale})" },  
    { "trigger": "localizedRecoveryOptions" },  
    { "trigger": "localizedRecoverySuggestion" },  
    { "trigger": "localizedStandardCompare:", "contents": "localizedStandardCompare:(${1:NSString* string})" },  
    { "trigger": "localizedStringForKey:value:table:", "contents": "localizedStringForKey:value:table:(${1:NSString* key}, value:${2:NSString* value}, table:${3:NSString* tableName})" },  
    { "trigger": "localizedTitle" },  
    { "trigger": "location" },  
    { "trigger": "location" },  
    { "trigger": "location" },  
    { "trigger": "location" },  
    { "trigger": "locationInView:", "contents": "locationInView:(${1:UIView* view})" },  
    { "trigger": "locationInView:", "contents": "locationInView:(${1:UIView* view})" },  
    { "trigger": "locationManagerShouldDisplayHeadingCalibration:", "contents": "locationManagerShouldDisplayHeadingCalibration:(${1:CLLocationManager* manager})" },  
    { "trigger": "locationManagerShouldDisplayHeadingCalibration:", "contents": "locationManagerShouldDisplayHeadingCalibration:(${1:CLLocationManager* manager})" },  
    { "trigger": "locationManager:didChangeAuthorizationStatus:", "contents": "locationManager:didChangeAuthorizationStatus:(${1:CLLocationManager* manager}, didChangeAuthorizationStatus:${2:CLAuthorizationStatus status})" },  
    { "trigger": "locationManager:didChangeAuthorizationStatus:", "contents": "locationManager:didChangeAuthorizationStatus:(${1:CLLocationManager* manager}, didChangeAuthorizationStatus:${2:CLAuthorizationStatus status})" },  
    { "trigger": "locationManager:didEnterRegion:", "contents": "locationManager:didEnterRegion:(${1:CLLocationManager* manager}, didEnterRegion:${2:CLRegion* region})" },  
    { "trigger": "locationManager:didEnterRegion:", "contents": "locationManager:didEnterRegion:(${1:CLLocationManager* manager}, didEnterRegion:${2:CLRegion* region})" },  
    { "trigger": "locationManager:didExitRegion:", "contents": "locationManager:didExitRegion:(${1:CLLocationManager* manager}, didExitRegion:${2:CLRegion* region})" },  
    { "trigger": "locationManager:didExitRegion:", "contents": "locationManager:didExitRegion:(${1:CLLocationManager* manager}, didExitRegion:${2:CLRegion* region})" },  
    { "trigger": "locationManager:didFailWithError:", "contents": "locationManager:didFailWithError:(${1:CLLocationManager* manager}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "locationManager:didFailWithError:", "contents": "locationManager:didFailWithError:(${1:CLLocationManager* manager}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "locationManager:didStartMonitoringForRegion:", "contents": "locationManager:didStartMonitoringForRegion:(${1:CLLocationManager* manager}, didStartMonitoringForRegion:${2:CLRegion* region})" },  
    { "trigger": "locationManager:didStartMonitoringForRegion:", "contents": "locationManager:didStartMonitoringForRegion:(${1:CLLocationManager* manager}, didStartMonitoringForRegion:${2:CLRegion* region})" },  
    { "trigger": "locationManager:didUpdateHeading:", "contents": "locationManager:didUpdateHeading:(${1:CLLocationManager* manager}, didUpdateHeading:${2:CLHeading* newHeading})" },  
    { "trigger": "locationManager:didUpdateHeading:", "contents": "locationManager:didUpdateHeading:(${1:CLLocationManager* manager}, didUpdateHeading:${2:CLHeading* newHeading})" },  
    { "trigger": "locationManager:didUpdateToLocation:fromLocation:", "contents": "locationManager:didUpdateToLocation:fromLocation:(${1:CLLocationManager* manager}, didUpdateToLocation:${2:CLLocation* newLocation}, fromLocation:${3:CLLocation* oldLocation})" },  
    { "trigger": "locationManager:didUpdateToLocation:fromLocation:", "contents": "locationManager:didUpdateToLocation:fromLocation:(${1:CLLocationManager* manager}, didUpdateToLocation:${2:CLLocation* newLocation}, fromLocation:${3:CLLocation* oldLocation})" },  
    { "trigger": "locationManager:monitoringDidFailForRegion:withError:", "contents": "locationManager:monitoringDidFailForRegion:withError:(${1:CLLocationManager* manager}, monitoringDidFailForRegion:${2:CLRegion* region}, withError:${3:NSError* error})" },  
    { "trigger": "locationManager:monitoringDidFailForRegion:withError:", "contents": "locationManager:monitoringDidFailForRegion:withError:(${1:CLLocationManager* manager}, monitoringDidFailForRegion:${2:CLRegion* region}, withError:${3:NSError* error})" },  
    { "trigger": "locationOfTouch:inView:", "contents": "locationOfTouch:inView:(${1:NSUInteger touchIndex}, inView:${2:UIView* view})" },  
    { "trigger": "locationServicesEnabled" },  
    { "trigger": "locations" },  
    { "trigger": "lock" },  
    { "trigger": "lock" },  
    { "trigger": "lock" },  
    { "trigger": "lock" },  
    { "trigger": "lockBeforeDate:", "contents": "lockBeforeDate:(${1:NSDate* limit})" },  
    { "trigger": "lockBeforeDate:", "contents": "lockBeforeDate:(${1:NSDate* limit})" },  
    { "trigger": "lockBeforeDate:", "contents": "lockBeforeDate:(${1:NSDate* limit})" },  
    { "trigger": "lockForConfiguration:", "contents": "lockForConfiguration:(${1:NSError** outError})" },  
    { "trigger": "lockWhenCondition:", "contents": "lockWhenCondition:(${1:NSInteger condition})" },  
    { "trigger": "lockWhenCondition:beforeDate:", "contents": "lockWhenCondition:beforeDate:(${1:NSInteger condition}, beforeDate:${2:NSDate* limit})" },  
    { "trigger": "lockedObjects" },  
    { "trigger": "longCharacterIsMember:", "contents": "longCharacterIsMember:(${1:UTF32Char theLongChar})" },  
    { "trigger": "longEraSymbols" },  
    { "trigger": "longLongForKey:", "contents": "longLongForKey:(${1:NSString* aKey})" },  
    { "trigger": "longLongValue" },  
    { "trigger": "longLongValue" },  
    { "trigger": "longValue" },  
    { "trigger": "lossyCString" },  
    { "trigger": "lowercaseString" },  
    { "trigger": "lyrics" },  
    { "trigger": "machPort" },  
    { "trigger": "magneticField" },  
    { "trigger": "magneticField" },  
    { "trigger": "magneticHeading" },  
    { "trigger": "magnetometerData" },  
    { "trigger": "magnetometerUpdateInterval" },  
    { "trigger": "magnificationFilter" },  
    { "trigger": "magnificationFilter" },  
    { "trigger": "mailComposeController:didFinishWithResult:error:", "contents": "mailComposeController:didFinishWithResult:error:(${1:MFMailComposeViewController* controller}, didFinishWithResult:${2:MFMailComposeResult result}, error:${3:NSError* error})" },  
    { "trigger": "mailComposeController:didFinishWithResult:error:", "contents": "mailComposeController:didFinishWithResult:error:(${1:MFMailComposeViewController* controller}, didFinishWithResult:${2:MFMailComposeResult result}, error:${3:NSError* error})" },  
    { "trigger": "mailComposeDelegate" },  
    { "trigger": "main" },  
    { "trigger": "main" },  
    { "trigger": "mainDocumentURL" },  
    { "trigger": "makeKeyAndVisible" },  
    { "trigger": "makeKeyWindow" },  
    { "trigger": "makeObjectsPerformSelector:", "contents": "makeObjectsPerformSelector:(${1:SEL aSelector})" },  
    { "trigger": "makeObjectsPerformSelector:", "contents": "makeObjectsPerformSelector:(${1:SEL aSelector})" },  
    { "trigger": "makeObjectsPerformSelector:withObject:", "contents": "makeObjectsPerformSelector:withObject:(${1:SEL aSelector}, withObject:${2:id argument})" },  
    { "trigger": "makeObjectsPerformSelector:withObject:", "contents": "makeObjectsPerformSelector:withObject:(${1:SEL aSelector}, withObject:${2:id argument})" },  
    { "trigger": "makeTextWritingDirectionLeftToRight:", "contents": "makeTextWritingDirectionLeftToRight:(${1:id sender})" },  
    { "trigger": "makeTextWritingDirectionLeftToRight:", "contents": "makeTextWritingDirectionLeftToRight:(${1:id sender})" },  
    { "trigger": "makeTextWritingDirectionRightToLeft:", "contents": "makeTextWritingDirectionRightToLeft:(${1:id sender})" },  
    { "trigger": "makeTextWritingDirectionRightToLeft:", "contents": "makeTextWritingDirectionRightToLeft:(${1:id sender})" },  
    { "trigger": "managedObjectClassName" },  
    { "trigger": "managedObjectContext" },  
    { "trigger": "managedObjectContext" },  
    { "trigger": "managedObjectContext" },  
    { "trigger": "managedObjectContextDidRegisterObjectsWithIDs:", "contents": "managedObjectContextDidRegisterObjectsWithIDs:(${1:NSArray* objectIDs})" },  
    { "trigger": "managedObjectContextDidUnregisterObjectsWithIDs:", "contents": "managedObjectContextDidUnregisterObjectsWithIDs:(${1:NSArray* objectIDs})" },  
    { "trigger": "managedObjectIDForURIRepresentation:", "contents": "managedObjectIDForURIRepresentation:(${1:NSURL* url})" },  
    { "trigger": "managedObjectModel" },  
    { "trigger": "managedObjectModel" },  
    { "trigger": "managedObjectModel" },  
    { "trigger": "manufacturer" },  
    { "trigger": "mapPointForPoint:", "contents": "mapPointForPoint:(${1:CGPoint point})" },  
    { "trigger": "mapRectForRect:", "contents": "mapRectForRect:(${1:CGRect rect})" },  
    { "trigger": "mapRectThatFits:", "contents": "mapRectThatFits:(${1:MKMapRect mapRect})" },  
    { "trigger": "mapRectThatFits:edgePadding:", "contents": "mapRectThatFits:edgePadding:(${1:MKMapRect mapRect}, edgePadding:${2:UIEdgeInsets insets})" },  
    { "trigger": "mapType" },  
    { "trigger": "mapView" },  
    { "trigger": "mapViewDidFailLoadingMap:withError:", "contents": "mapViewDidFailLoadingMap:withError:(${1:MKMapView* mapView}, withError:${2:NSError* error})" },  
    { "trigger": "mapViewDidFailLoadingMap:withError:", "contents": "mapViewDidFailLoadingMap:withError:(${1:MKMapView* mapView}, withError:${2:NSError* error})" },  
    { "trigger": "mapViewDidFinishLoadingMap:", "contents": "mapViewDidFinishLoadingMap:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewDidFinishLoadingMap:", "contents": "mapViewDidFinishLoadingMap:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewDidStopLocatingUser:", "contents": "mapViewDidStopLocatingUser:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewDidStopLocatingUser:", "contents": "mapViewDidStopLocatingUser:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewWillStartLoadingMap:", "contents": "mapViewWillStartLoadingMap:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewWillStartLoadingMap:", "contents": "mapViewWillStartLoadingMap:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewWillStartLocatingUser:", "contents": "mapViewWillStartLocatingUser:(${1:MKMapView* mapView})" },  
    { "trigger": "mapViewWillStartLocatingUser:", "contents": "mapViewWillStartLocatingUser:(${1:MKMapView* mapView})" },  
    { "trigger": "mapView:annotationView:calloutAccessoryControlTapped:", "contents": "mapView:annotationView:calloutAccessoryControlTapped:(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, calloutAccessoryControlTapped:${3:UIControl* control})" },  
    { "trigger": "mapView:annotationView:calloutAccessoryControlTapped:", "contents": "mapView:annotationView:calloutAccessoryControlTapped:(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, calloutAccessoryControlTapped:${3:UIControl* control})" },  
    { "trigger": "mapView:annotationView:didChangeDragState:fromOldState:", "contents": "mapView:annotationView:didChangeDragState:fromOldState:(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, didChangeDragState:${3:MKAnnotationViewDragState newState}, fromOldState:${4:MKAnnotationViewDragState oldState})" },  
    { "trigger": "mapView:annotationView:didChangeDragState:fromOldState:", "contents": "mapView:annotationView:didChangeDragState:fromOldState:(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, didChangeDragState:${3:MKAnnotationViewDragState newState}, fromOldState:${4:MKAnnotationViewDragState oldState})" },  
    { "trigger": "mapView:didAddAnnotationViews:", "contents": "mapView:didAddAnnotationViews:(${1:MKMapView* mapView}, didAddAnnotationViews:${2:NSArray* views})" },  
    { "trigger": "mapView:didAddAnnotationViews:", "contents": "mapView:didAddAnnotationViews:(${1:MKMapView* mapView}, didAddAnnotationViews:${2:NSArray* views})" },  
    { "trigger": "mapView:didAddOverlayViews:", "contents": "mapView:didAddOverlayViews:(${1:MKMapView* mapView}, didAddOverlayViews:${2:NSArray* overlayViews})" },  
    { "trigger": "mapView:didAddOverlayViews:", "contents": "mapView:didAddOverlayViews:(${1:MKMapView* mapView}, didAddOverlayViews:${2:NSArray* overlayViews})" },  
    { "trigger": "mapView:didChangeUserTrackingMode:animated:", "contents": "mapView:didChangeUserTrackingMode:animated:(${1:MKMapView* mapView}, didChangeUserTrackingMode:${2:MKUserTrackingMode mode}, animated:${3:BOOL animated})" },  
    { "trigger": "mapView:didChangeUserTrackingMode:animated:", "contents": "mapView:didChangeUserTrackingMode:animated:(${1:MKMapView* mapView}, didChangeUserTrackingMode:${2:MKUserTrackingMode mode}, animated:${3:BOOL animated})" },  
    { "trigger": "mapView:didDeselectAnnotationView:", "contents": "mapView:didDeselectAnnotationView:(${1:MKMapView* mapView}, didDeselectAnnotationView:${2:MKAnnotationView* view})" },  
    { "trigger": "mapView:didDeselectAnnotationView:", "contents": "mapView:didDeselectAnnotationView:(${1:MKMapView* mapView}, didDeselectAnnotationView:${2:MKAnnotationView* view})" },  
    { "trigger": "mapView:didFailToLocateUserWithError:", "contents": "mapView:didFailToLocateUserWithError:(${1:MKMapView* mapView}, didFailToLocateUserWithError:${2:NSError* error})" },  
    { "trigger": "mapView:didFailToLocateUserWithError:", "contents": "mapView:didFailToLocateUserWithError:(${1:MKMapView* mapView}, didFailToLocateUserWithError:${2:NSError* error})" },  
    { "trigger": "mapView:didSelectAnnotationView:", "contents": "mapView:didSelectAnnotationView:(${1:MKMapView* mapView}, didSelectAnnotationView:${2:MKAnnotationView* view})" },  
    { "trigger": "mapView:didSelectAnnotationView:", "contents": "mapView:didSelectAnnotationView:(${1:MKMapView* mapView}, didSelectAnnotationView:${2:MKAnnotationView* view})" },  
    { "trigger": "mapView:didUpdateUserLocation:", "contents": "mapView:didUpdateUserLocation:(${1:MKMapView* mapView}, didUpdateUserLocation:${2:MKUserLocation* userLocation})" },  
    { "trigger": "mapView:didUpdateUserLocation:", "contents": "mapView:didUpdateUserLocation:(${1:MKMapView* mapView}, didUpdateUserLocation:${2:MKUserLocation* userLocation})" },  
    { "trigger": "mapView:regionDidChangeAnimated:", "contents": "mapView:regionDidChangeAnimated:(${1:MKMapView* mapView}, regionDidChangeAnimated:${2:BOOL animated})" },  
    { "trigger": "mapView:regionDidChangeAnimated:", "contents": "mapView:regionDidChangeAnimated:(${1:MKMapView* mapView}, regionDidChangeAnimated:${2:BOOL animated})" },  
    { "trigger": "mapView:regionWillChangeAnimated:", "contents": "mapView:regionWillChangeAnimated:(${1:MKMapView* mapView}, regionWillChangeAnimated:${2:BOOL animated})" },  
    { "trigger": "mapView:regionWillChangeAnimated:", "contents": "mapView:regionWillChangeAnimated:(${1:MKMapView* mapView}, regionWillChangeAnimated:${2:BOOL animated})" },  
    { "trigger": "mapView:viewForAnnotation:", "contents": "mapView:viewForAnnotation:(${1:MKMapView* mapView}, viewForAnnotation:${2:id annotation})" },  
    { "trigger": "mapView:viewForAnnotation:", "contents": "mapView:viewForAnnotation:(${1:MKMapView* mapView}, viewForAnnotation:${2:id annotation})" },  
    { "trigger": "mapView:viewForOverlay:", "contents": "mapView:viewForOverlay:(${1:MKMapView* mapView}, viewForOverlay:${2:id overlay})" },  
    { "trigger": "mapView:viewForOverlay:", "contents": "mapView:viewForOverlay:(${1:MKMapView* mapView}, viewForOverlay:${2:id overlay})" },  
    { "trigger": "mappingModel" },  
    { "trigger": "mappingType" },  
    { "trigger": "markAsFinished" },  
    { "trigger": "markedTextRange" },  
    { "trigger": "markedTextRange" },  
    { "trigger": "markedTextStyle" },  
    { "trigger": "markedTextStyle" },  
    { "trigger": "markupText" },  
    { "trigger": "mask" },  
    { "trigger": "masksToBounds" },  
    { "trigger": "matchData" },  
    { "trigger": "matchID" },  
    { "trigger": "matchOutcome" },  
    { "trigger": "matchRequest" },  
    { "trigger": "match:connectionWithPlayerFailed:withError:", "contents": "match:connectionWithPlayerFailed:withError:(${1:GKMatch* match}, connectionWithPlayerFailed:${2:NSString* playerID}, withError:${3:NSError* error})" },  
    { "trigger": "match:connectionWithPlayerFailed:withError:", "contents": "match:connectionWithPlayerFailed:withError:(${1:GKMatch* match}, connectionWithPlayerFailed:${2:NSString* playerID}, withError:${3:NSError* error})" },  
    { "trigger": "match:didFailWithError:", "contents": "match:didFailWithError:(${1:GKMatch* match}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "match:didFailWithError:", "contents": "match:didFailWithError:(${1:GKMatch* match}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "match:didReceiveData:fromPlayer:", "contents": "match:didReceiveData:fromPlayer:(${1:GKMatch* match}, didReceiveData:${2:NSData* data}, fromPlayer:${3:NSString* playerID})" },  
    { "trigger": "match:didReceiveData:fromPlayer:", "contents": "match:didReceiveData:fromPlayer:(${1:GKMatch* match}, didReceiveData:${2:NSData* data}, fromPlayer:${3:NSString* playerID})" },  
    { "trigger": "matchesContentsOfURL:", "contents": "matchesContentsOfURL:(${1:NSURL* url})" },  
    { "trigger": "matchesInString:options:range:", "contents": "matchesInString:options:range:(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})" },  
    { "trigger": "matchmakerDelegate" },  
    { "trigger": "matchmakerViewControllerWasCancelled:", "contents": "matchmakerViewControllerWasCancelled:(${1:GKMatchmakerViewController* viewController})" },  
    { "trigger": "matchmakerViewControllerWasCancelled:", "contents": "matchmakerViewControllerWasCancelled:(${1:GKMatchmakerViewController* viewController})" },  
    { "trigger": "matchmakerViewController:didFailWithError:", "contents": "matchmakerViewController:didFailWithError:(${1:GKMatchmakerViewController* viewController}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "matchmakerViewController:didFailWithError:", "contents": "matchmakerViewController:didFailWithError:(${1:GKMatchmakerViewController* viewController}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "matchmakerViewController:didFindMatch:", "contents": "matchmakerViewController:didFindMatch:(${1:GKMatchmakerViewController* viewController}, didFindMatch:${2:GKMatch* match})" },  
    { "trigger": "matchmakerViewController:didFindMatch:", "contents": "matchmakerViewController:didFindMatch:(${1:GKMatchmakerViewController* viewController}, didFindMatch:${2:GKMatch* match})" },  
    { "trigger": "matchmakerViewController:didFindPlayers:", "contents": "matchmakerViewController:didFindPlayers:(${1:GKMatchmakerViewController* viewController}, didFindPlayers:${2:NSArray* playerIDs})" },  
    { "trigger": "matchmakerViewController:didFindPlayers:", "contents": "matchmakerViewController:didFindPlayers:(${1:GKMatchmakerViewController* viewController}, didFindPlayers:${2:NSArray* playerIDs})" },  
    { "trigger": "matchmakerViewController:didReceiveAcceptFromHostedPlayer:", "contents": "matchmakerViewController:didReceiveAcceptFromHostedPlayer:(${1:GKMatchmakerViewController* viewController}, didReceiveAcceptFromHostedPlayer:${2:NSString* playerID})" },  
    { "trigger": "matchmakerViewController:didReceiveAcceptFromHostedPlayer:", "contents": "matchmakerViewController:didReceiveAcceptFromHostedPlayer:(${1:GKMatchmakerViewController* viewController}, didReceiveAcceptFromHostedPlayer:${2:NSString* playerID})" },  
    { "trigger": "match:player:didChangeState:", "contents": "match:player:didChangeState:(${1:GKMatch* match}, player:${2:NSString* playerID}, didChangeState:${3:GKPlayerConnectionState state})" },  
    { "trigger": "match:player:didChangeState:", "contents": "match:player:didChangeState:(${1:GKMatch* match}, player:${2:NSString* playerID}, didChangeState:${3:GKPlayerConnectionState state})" },  
    { "trigger": "match:shouldReinvitePlayer:", "contents": "match:shouldReinvitePlayer:(${1:GKMatch* match}, shouldReinvitePlayer:${2:NSString* playerID})" },  
    { "trigger": "match:shouldReinvitePlayer:", "contents": "match:shouldReinvitePlayer:(${1:GKMatch* match}, shouldReinvitePlayer:${2:NSString* playerID})" },  
    { "trigger": "material" },  
    { "trigger": "matrix" },  
    { "trigger": "maxConcurrentOperationCount" },  
    { "trigger": "maxCount" },  
    { "trigger": "maxDuration" },  
    { "trigger": "maxPlayers" },  
    { "trigger": "maxRange" },  
    { "trigger": "maxRecordedDuration" },  
    { "trigger": "maxRecordedFileSize" },  
    { "trigger": "maximum" },  
    { "trigger": "maximumContentHeight" },  
    { "trigger": "maximumContentWidth" },  
    { "trigger": "maximumDate" },  
    { "trigger": "maximumFractionDigits" },  
    { "trigger": "maximumIntegerDigits" },  
    { "trigger": "maximumLengthOfBytesUsingEncoding:", "contents": "maximumLengthOfBytesUsingEncoding:(${1:NSStringEncoding enc})" },  
    { "trigger": "maximumNumberOfTouches" },  
    { "trigger": "maximumPoints" },  
    { "trigger": "maximumRangeOfUnit:", "contents": "maximumRangeOfUnit:(${1:NSCalendarUnit unit})" },  
    { "trigger": "maximumRegionMonitoringDistance" },  
    { "trigger": "maximumSignificantDigits" },  
    { "trigger": "maximumSize" },  
    { "trigger": "maximumTrackImageForState:", "contents": "maximumTrackImageForState:(${1:UIControlState state})" },  
    { "trigger": "maximumTrackTintColor" },  
    { "trigger": "maximumValue" },  
    { "trigger": "maximumValue" },  
    { "trigger": "maximumValueImage" },  
    { "trigger": "maximumValueImageRectForBounds:", "contents": "maximumValueImageRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "maximumZoomScale" },  
    { "trigger": "mediaPickerDidCancel:", "contents": "mediaPickerDidCancel:(${1:MPMediaPickerController* mediaPicker})" },  
    { "trigger": "mediaPickerDidCancel:", "contents": "mediaPickerDidCancel:(${1:MPMediaPickerController* mediaPicker})" },  
    { "trigger": "mediaPicker:didPickMediaItems:", "contents": "mediaPicker:didPickMediaItems:(${1:MPMediaPickerController* mediaPicker}, didPickMediaItems:${2:MPMediaItemCollection* mediaItemCollection})" },  
    { "trigger": "mediaPicker:didPickMediaItems:", "contents": "mediaPicker:didPickMediaItems:(${1:MPMediaPickerController* mediaPicker}, didPickMediaItems:${2:MPMediaItemCollection* mediaItemCollection})" },  
    { "trigger": "mediaPlaybackAllowsAirPlay" },  
    { "trigger": "mediaPlaybackRequiresUserAction" },  
    { "trigger": "mediaSelectionGroupForMediaCharacteristic:", "contents": "mediaSelectionGroupForMediaCharacteristic:(${1:NSString* mediaCharacteristic})" },  
    { "trigger": "mediaSelectionOptionWithPropertyList:", "contents": "mediaSelectionOptionWithPropertyList:(${1:id plist})" },  
    { "trigger": "mediaSubTypes" },  
    { "trigger": "mediaTimeScale" },  
    { "trigger": "mediaType" },  
    { "trigger": "mediaType" },  
    { "trigger": "mediaType" },  
    { "trigger": "mediaType" },  
    { "trigger": "mediaType" },  
    { "trigger": "mediaTypes" },  
    { "trigger": "mediaTypes" },  
    { "trigger": "mediaTypes" },  
    { "trigger": "member:", "contents": "member:(${1:id object})" },  
    { "trigger": "memoryCapacity" },  
    { "trigger": "menuFrame" },  
    { "trigger": "menuItems" },  
    { "trigger": "mergeChangesFromContextDidSaveNotification:", "contents": "mergeChangesFromContextDidSaveNotification:(${1:NSNotification* notification})" },  
    { "trigger": "mergePolicy" },  
    { "trigger": "mergeType" },  
    { "trigger": "message" },  
    { "trigger": "message" },  
    { "trigger": "message" },  
    { "trigger": "messageComposeDelegate" },  
    { "trigger": "messageComposeViewController:didFinishWithResult:", "contents": "messageComposeViewController:didFinishWithResult:(${1:MFMessageComposeViewController* controller}, didFinishWithResult:${2:MessageComposeResult result})" },  
    { "trigger": "messageComposeViewController:didFinishWithResult:", "contents": "messageComposeViewController:didFinishWithResult:(${1:MFMessageComposeViewController* controller}, didFinishWithResult:${2:MessageComposeResult result})" },  
    { "trigger": "metadata" },  
    { "trigger": "metadata" },  
    { "trigger": "metadata" },  
    { "trigger": "metadata" },  
    { "trigger": "metadata" },  
    { "trigger": "metadata" },  
    { "trigger": "metadataForFormat:", "contents": "metadataForFormat:(${1:NSString* format})" },  
    { "trigger": "metadataForFormat:", "contents": "metadataForFormat:(${1:NSString* format})" },  
    { "trigger": "metadataForFormat:", "contents": "metadataForFormat:(${1:NSString* format})" },  
    { "trigger": "metadataForPersistentStore:", "contents": "metadataForPersistentStore:(${1:NSPersistentStore* store})" },  
    { "trigger": "metadataQuery:replacementObjectForResultObject:", "contents": "metadataQuery:replacementObjectForResultObject:(${1:NSMetadataQuery* query}, replacementObjectForResultObject:${2:NSMetadataItem* result})" },  
    { "trigger": "metadataQuery:replacementObjectForResultObject:", "contents": "metadataQuery:replacementObjectForResultObject:(${1:NSMetadataQuery* query}, replacementObjectForResultObject:${2:NSMetadataItem* result})" },  
    { "trigger": "metadataQuery:replacementValueForAttribute:value:", "contents": "metadataQuery:replacementValueForAttribute:value:(${1:NSMetadataQuery* query}, replacementValueForAttribute:${2:NSString* attrName}, value:${3:id attrValue})" },  
    { "trigger": "metadataQuery:replacementValueForAttribute:value:", "contents": "metadataQuery:replacementValueForAttribute:value:(${1:NSMetadataQuery* query}, replacementValueForAttribute:${2:NSString* attrName}, value:${3:id attrValue})" },  
    { "trigger": "methodForSelector:", "contents": "methodForSelector:(${1:SEL aSelector})" },  
    { "trigger": "methodReturnLength" },  
    { "trigger": "methodReturnType" },  
    { "trigger": "methodSignature" },  
    { "trigger": "methodSignatureForSelector:", "contents": "methodSignatureForSelector:(${1:SEL sel})" },  
    { "trigger": "methodSignatureForSelector:", "contents": "methodSignatureForSelector:(${1:SEL aSelector})" },  
    { "trigger": "migratePersistentStore:toURL:options:withType:error:", "contents": "migratePersistentStore:toURL:options:withType:error:(${1:NSPersistentStore* store}, toURL:${2:NSURL* URL}, options:${3:NSDictionary* options}, withType:${4:NSString* storeType}, error:${5:NSError** error})" },  
    { "trigger": "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:", "contents": "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:(${1:NSURL* sourceURL}, type:${2:NSString* sStoreType}, options:${3:NSDictionary* sOptions}, withMappingModel:${4:NSMappingModel* mappings}, toDestinationURL:${5:NSURL* dURL}, destinationType:${6:NSString* dStoreType}, destinationOptions:${7:NSDictionary* dOptions}, error:${8:NSError** error})" },  
    { "trigger": "migrationProgress" },  
    { "trigger": "minCount" },  
    { "trigger": "minFrameDuration" },  
    { "trigger": "minFreeDiskSpaceLimit" },  
    { "trigger": "minPlayers" },  
    { "trigger": "minificationFilter" },  
    { "trigger": "minificationFilter" },  
    { "trigger": "minificationFilterBias" },  
    { "trigger": "minificationFilterBias" },  
    { "trigger": "minimum" },  
    { "trigger": "minimumDate" },  
    { "trigger": "minimumDaysInFirstWeek" },  
    { "trigger": "minimumFontSize" },  
    { "trigger": "minimumFontSize" },  
    { "trigger": "minimumFractionDigits" },  
    { "trigger": "minimumIntegerDigits" },  
    { "trigger": "minimumNumberOfTouches" },  
    { "trigger": "minimumPressDuration" },  
    { "trigger": "minimumRangeOfUnit:", "contents": "minimumRangeOfUnit:(${1:NSCalendarUnit unit})" },  
    { "trigger": "minimumSignificantDigits" },  
    { "trigger": "minimumTrackImageForState:", "contents": "minimumTrackImageForState:(${1:UIControlState state})" },  
    { "trigger": "minimumTrackTintColor" },  
    { "trigger": "minimumValue" },  
    { "trigger": "minimumValue" },  
    { "trigger": "minimumValueImage" },  
    { "trigger": "minimumValueImageRectForBounds:", "contents": "minimumValueImageRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "minimumZoomScale" },  
    { "trigger": "minusOrderedSet:", "contents": "minusOrderedSet:(${1:NSOrderedSet* other})" },  
    { "trigger": "minusSet:", "contents": "minusSet:(${1:NSSet* otherSet})" },  
    { "trigger": "minusSet:", "contents": "minusSet:(${1:NSSet* other})" },  
    { "trigger": "minusSign" },  
    { "trigger": "minute" },  
    { "trigger": "minuteInterval" },  
    { "trigger": "mirroredScreen" },  
    { "trigger": "miterLimit" },  
    { "trigger": "miterLimit" },  
    { "trigger": "miterLimit" },  
    { "trigger": "mobileCountryCode" },  
    { "trigger": "mobileNetworkCode" },  
    { "trigger": "modalPresentationStyle" },  
    { "trigger": "modalTransitionStyle" },  
    { "trigger": "modalViewController" },  
    { "trigger": "mode" },  
    { "trigger": "mode" },  
    { "trigger": "model" },  
    { "trigger": "modelConfiguration" },  
    { "trigger": "modelID" },  
    { "trigger": "modelLayer" },  
    { "trigger": "modelNumber" },  
    { "trigger": "modelviewMatrix" },  
    { "trigger": "modificationDate" },  
    { "trigger": "monitoredRegions" },  
    { "trigger": "month" },  
    { "trigger": "monthSymbols" },  
    { "trigger": "monthsOfTheYear" },  
    { "trigger": "moreNavigationController" },  
    { "trigger": "motionBegan:withEvent:", "contents": "motionBegan:withEvent:(${1:UIEventSubtype motion}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "motionCancelled:withEvent:", "contents": "motionCancelled:withEvent:(${1:UIEventSubtype motion}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "motionEnded:withEvent:", "contents": "motionEnded:withEvent:(${1:UIEventSubtype motion}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "mountedVolumeURLsIncludingResourceValuesForKeys:options:", "contents": "mountedVolumeURLsIncludingResourceValuesForKeys:options:(${1:NSArray* propertyKeys}, options:${2:NSVolumeEnumerationOptions options})" },  
    { "trigger": "mouthPosition" },  
    { "trigger": "moveItemAtPath:toPath:error:", "contents": "moveItemAtPath:toPath:error:(${1:NSString* srcPath}, toPath:${2:NSString* dstPath}, error:${3:NSError** error})" },  
    { "trigger": "moveItemAtURL:toURL:error:", "contents": "moveItemAtURL:toURL:error:(${1:NSURL* srcURL}, toURL:${2:NSURL* dstURL}, error:${3:NSError** error})" },  
    { "trigger": "moveObjectsAtIndexes:toIndex:", "contents": "moveObjectsAtIndexes:toIndex:(${1:NSIndexSet* indexes}, toIndex:${2:NSUInteger idx})" },  
    { "trigger": "moveRowAtIndexPath:toIndexPath:", "contents": "moveRowAtIndexPath:toIndexPath:(${1:NSIndexPath* indexPath}, toIndexPath:${2:NSIndexPath* newIndexPath})" },  
    { "trigger": "moveSection:toSection:", "contents": "moveSection:toSection:(${1:NSInteger section}, toSection:${2:NSInteger newSection})" },  
    { "trigger": "moveToPoint:", "contents": "moveToPoint:(${1:CGPoint point})" },  
    { "trigger": "movieControlMode" },  
    { "trigger": "movieFragmentInterval" },  
    { "trigger": "movieFragmentInterval" },  
    { "trigger": "movieMediaTypes" },  
    { "trigger": "moviePlayer" },  
    { "trigger": "movieSourceType" },  
    { "trigger": "movieTimeScale" },  
    { "trigger": "multipleSelectionBackgroundView" },  
    { "trigger": "multiplier" },  
    { "trigger": "multiplyByInverseOfAttitude:", "contents": "multiplyByInverseOfAttitude:(${1:CMAttitude* attitude})" },  
    { "trigger": "mutableArrayValueForKey:", "contents": "mutableArrayValueForKey:(${1:NSString* key})" },  
    { "trigger": "mutableArrayValueForKey:", "contents": "mutableArrayValueForKey:(${1:NSString* key})" },  
    { "trigger": "mutableArrayValueForKeyPath:", "contents": "mutableArrayValueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "mutableArrayValueForKeyPath:", "contents": "mutableArrayValueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "mutableBytes" },  
    { "trigger": "mutableCopy" },  
    { "trigger": "mutableCopyWithZone:", "contents": "mutableCopyWithZone:(${1:NSZone* zone})" },  
    { "trigger": "mutableCopyWithZone:", "contents": "mutableCopyWithZone:(${1:NSZone* zone})" },  
    { "trigger": "mutableOrderedSetValueForKey:", "contents": "mutableOrderedSetValueForKey:(${1:NSString* key})" },  
    { "trigger": "mutableOrderedSetValueForKey:", "contents": "mutableOrderedSetValueForKey:(${1:NSString* key})" },  
    { "trigger": "mutableOrderedSetValueForKeyPath:", "contents": "mutableOrderedSetValueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "mutableOrderedSetValueForKeyPath:", "contents": "mutableOrderedSetValueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "mutableSetValueForKey:", "contents": "mutableSetValueForKey:(${1:NSString* key})" },  
    { "trigger": "mutableSetValueForKey:", "contents": "mutableSetValueForKey:(${1:NSString* key})" },  
    { "trigger": "mutableSetValueForKeyPath:", "contents": "mutableSetValueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "mutableSetValueForKeyPath:", "contents": "mutableSetValueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "mutableString" },  
    { "trigger": "mutableTrackCompatibleWithTrack:", "contents": "mutableTrackCompatibleWithTrack:(${1:AVAssetTrack* track})" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "name" },  
    { "trigger": "naturalSize" },  
    { "trigger": "naturalSize" },  
    { "trigger": "naturalSize" },  
    { "trigger": "naturalSize" },  
    { "trigger": "naturalSize" },  
    { "trigger": "naturalTimeScale" },  
    { "trigger": "naturalTimeScale" },  
    { "trigger": "navigationBar" },  
    { "trigger": "navigationBar:didPopItem:", "contents": "navigationBar:didPopItem:(${1:UINavigationBar* navigationBar}, didPopItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:didPopItem:", "contents": "navigationBar:didPopItem:(${1:UINavigationBar* navigationBar}, didPopItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:didPushItem:", "contents": "navigationBar:didPushItem:(${1:UINavigationBar* navigationBar}, didPushItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:didPushItem:", "contents": "navigationBar:didPushItem:(${1:UINavigationBar* navigationBar}, didPushItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:shouldPopItem:", "contents": "navigationBar:shouldPopItem:(${1:UINavigationBar* navigationBar}, shouldPopItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:shouldPopItem:", "contents": "navigationBar:shouldPopItem:(${1:UINavigationBar* navigationBar}, shouldPopItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:shouldPushItem:", "contents": "navigationBar:shouldPushItem:(${1:UINavigationBar* navigationBar}, shouldPushItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationBar:shouldPushItem:", "contents": "navigationBar:shouldPushItem:(${1:UINavigationBar* navigationBar}, shouldPushItem:${2:UINavigationItem* item})" },  
    { "trigger": "navigationController" },  
    { "trigger": "navigationController:didShowViewController:animated:", "contents": "navigationController:didShowViewController:animated:(${1:UINavigationController* navigationController}, didShowViewController:${2:UIViewController* viewController}, animated:${3:BOOL animated})" },  
    { "trigger": "navigationController:didShowViewController:animated:", "contents": "navigationController:didShowViewController:animated:(${1:UINavigationController* navigationController}, didShowViewController:${2:UIViewController* viewController}, animated:${3:BOOL animated})" },  
    { "trigger": "navigationController:willShowViewController:animated:", "contents": "navigationController:willShowViewController:animated:(${1:UINavigationController* navigationController}, willShowViewController:${2:UIViewController* viewController}, animated:${3:BOOL animated})" },  
    { "trigger": "navigationController:willShowViewController:animated:", "contents": "navigationController:willShowViewController:animated:(${1:UINavigationController* navigationController}, willShowViewController:${2:UIViewController* viewController}, animated:${3:BOOL animated})" },  
    { "trigger": "navigationItem" },  
    { "trigger": "navigationOrientation" },  
    { "trigger": "needsDisplay" },  
    { "trigger": "needsDisplayOnBoundsChange" },  
    { "trigger": "needsLayout" },  
    { "trigger": "negativeFormat" },  
    { "trigger": "negativeInfinitySymbol" },  
    { "trigger": "negativePrefix" },  
    { "trigger": "negativeSuffix" },  
    { "trigger": "netServiceBrowserDidStopSearch:", "contents": "netServiceBrowserDidStopSearch:(${1:NSNetServiceBrowser* aNetServiceBrowser})" },  
    { "trigger": "netServiceBrowserDidStopSearch:", "contents": "netServiceBrowserDidStopSearch:(${1:NSNetServiceBrowser* aNetServiceBrowser})" },  
    { "trigger": "netServiceBrowserWillSearch:", "contents": "netServiceBrowserWillSearch:(${1:NSNetServiceBrowser* aNetServiceBrowser})" },  
    { "trigger": "netServiceBrowserWillSearch:", "contents": "netServiceBrowserWillSearch:(${1:NSNetServiceBrowser* aNetServiceBrowser})" },  
    { "trigger": "netServiceBrowser:didFindDomain:moreComing:", "contents": "netServiceBrowser:didFindDomain:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didFindDomain:${2:NSString* domainString}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didFindDomain:moreComing:", "contents": "netServiceBrowser:didFindDomain:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didFindDomain:${2:NSString* domainString}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didFindService:moreComing:", "contents": "netServiceBrowser:didFindService:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didFindService:${2:NSNetService* aNetService}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didFindService:moreComing:", "contents": "netServiceBrowser:didFindService:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didFindService:${2:NSNetService* aNetService}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didNotSearch:", "contents": "netServiceBrowser:didNotSearch:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didNotSearch:${2:NSDictionary* errorDict})" },  
    { "trigger": "netServiceBrowser:didNotSearch:", "contents": "netServiceBrowser:didNotSearch:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didNotSearch:${2:NSDictionary* errorDict})" },  
    { "trigger": "netServiceBrowser:didRemoveDomain:moreComing:", "contents": "netServiceBrowser:didRemoveDomain:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didRemoveDomain:${2:NSString* domainString}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didRemoveDomain:moreComing:", "contents": "netServiceBrowser:didRemoveDomain:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didRemoveDomain:${2:NSString* domainString}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didRemoveService:moreComing:", "contents": "netServiceBrowser:didRemoveService:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didRemoveService:${2:NSNetService* aNetService}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceBrowser:didRemoveService:moreComing:", "contents": "netServiceBrowser:didRemoveService:moreComing:(${1:NSNetServiceBrowser* aNetServiceBrowser}, didRemoveService:${2:NSNetService* aNetService}, moreComing:${3:BOOL moreComing})" },  
    { "trigger": "netServiceDidPublish:", "contents": "netServiceDidPublish:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceDidPublish:", "contents": "netServiceDidPublish:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceDidResolveAddress:", "contents": "netServiceDidResolveAddress:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceDidResolveAddress:", "contents": "netServiceDidResolveAddress:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceDidStop:", "contents": "netServiceDidStop:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceDidStop:", "contents": "netServiceDidStop:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceDomain" },  
    { "trigger": "netServiceName" },  
    { "trigger": "netServiceWillPublish:", "contents": "netServiceWillPublish:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceWillPublish:", "contents": "netServiceWillPublish:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceWillResolve:", "contents": "netServiceWillResolve:(${1:NSNetService* sender})" },  
    { "trigger": "netServiceWillResolve:", "contents": "netServiceWillResolve:(${1:NSNetService* sender})" },  
    { "trigger": "netService:didNotPublish:", "contents": "netService:didNotPublish:(${1:NSNetService* sender}, didNotPublish:${2:NSDictionary* errorDict})" },  
    { "trigger": "netService:didNotPublish:", "contents": "netService:didNotPublish:(${1:NSNetService* sender}, didNotPublish:${2:NSDictionary* errorDict})" },  
    { "trigger": "netService:didNotResolve:", "contents": "netService:didNotResolve:(${1:NSNetService* sender}, didNotResolve:${2:NSDictionary* errorDict})" },  
    { "trigger": "netService:didNotResolve:", "contents": "netService:didNotResolve:(${1:NSNetService* sender}, didNotResolve:${2:NSDictionary* errorDict})" },  
    { "trigger": "netService:didUpdateTXTRecordData:", "contents": "netService:didUpdateTXTRecordData:(${1:NSNetService* sender}, didUpdateTXTRecordData:${2:NSData* data})" },  
    { "trigger": "netService:didUpdateTXTRecordData:", "contents": "netService:didUpdateTXTRecordData:(${1:NSNetService* sender}, didUpdateTXTRecordData:${2:NSData* data})" },  
    { "trigger": "networkName" },  
    { "trigger": "networkPort" },  
    { "trigger": "networkServiceType" },  
    { "trigger": "newCacheNodeForManagedObject:", "contents": "newCacheNodeForManagedObject:(${1:NSManagedObject* managedObject})" },  
    { "trigger": "newObjectIDForEntity:referenceObject:", "contents": "newObjectIDForEntity:referenceObject:(${1:NSEntityDescription* entity}, referenceObject:${2:id data})" },  
    { "trigger": "newPersonViewController:didCompleteWithNewPerson:", "contents": "newPersonViewController:didCompleteWithNewPerson:(${1:ABNewPersonViewController* newPersonView}, didCompleteWithNewPerson:${2:ABRecordRef person})" },  
    { "trigger": "newPersonViewController:didCompleteWithNewPerson:", "contents": "newPersonViewController:didCompleteWithNewPerson:(${1:ABNewPersonViewController* newPersonView}, didCompleteWithNewPerson:${2:ABRecordRef person})" },  
    { "trigger": "newPersonViewDelegate" },  
    { "trigger": "newReferenceObjectForManagedObject:", "contents": "newReferenceObjectForManagedObject:(${1:NSManagedObject* managedObject})" },  
    { "trigger": "newValueForRelationship:forObjectWithID:withContext:error:", "contents": "newValueForRelationship:forObjectWithID:withContext:error:(${1:NSRelationshipDescription* relationship}, forObjectWithID:${2:NSManagedObjectID* objectID}, withContext:${3:NSManagedObjectContext* context}, error:${4:NSError** error})" },  
    { "trigger": "newValuesForObjectWithID:withContext:error:", "contents": "newValuesForObjectWithID:withContext:error:(${1:NSManagedObjectID* objectID}, withContext:${2:NSManagedObjectContext* context}, error:${3:NSError** error})" },  
    { "trigger": "newVersionNumber" },  
    { "trigger": "newsstandAssetDownload" },  
    { "trigger": "nextDaylightSavingTimeTransition" },  
    { "trigger": "nextDaylightSavingTimeTransitionAfterDate:", "contents": "nextDaylightSavingTimeTransitionAfterDate:(${1:NSDate* aDate})" },  
    { "trigger": "nextObject" },  
    { "trigger": "nextResponder" },  
    { "trigger": "nibBundle" },  
    { "trigger": "nibName" },  
    { "trigger": "nilSymbol" },  
    { "trigger": "nominalFrameRate" },  
    { "trigger": "nonretainedObjectValue" },  
    { "trigger": "normalMatrix" },  
    { "trigger": "notANumberSymbol" },  
    { "trigger": "notes" },  
    { "trigger": "notificationBatchingInterval" },  
    { "trigger": "nowPlayingInfo" },  
    { "trigger": "nowPlayingItem" },  
    { "trigger": "numberFromString:", "contents": "numberFromString:(${1:NSString* string})" },  
    { "trigger": "numberOfArguments" },  
    { "trigger": "numberOfAssets" },  
    { "trigger": "numberOfButtons" },  
    { "trigger": "numberOfButtons" },  
    { "trigger": "numberOfBytesTransferred" },  
    { "trigger": "numberOfBytesTransferred" },  
    { "trigger": "numberOfCaptureGroups" },  
    { "trigger": "numberOfChannels" },  
    { "trigger": "numberOfComponents" },  
    { "trigger": "numberOfComponents" },  
    { "trigger": "numberOfComponentsInPickerView:", "contents": "numberOfComponentsInPickerView:(${1:UIPickerView* pickerView})" },  
    { "trigger": "numberOfComponentsInPickerView:", "contents": "numberOfComponentsInPickerView:(${1:UIPickerView* pickerView})" },  
    { "trigger": "numberOfDroppedVideoFrames" },  
    { "trigger": "numberOfDroppedVideoFrames" },  
    { "trigger": "numberOfItems" },  
    { "trigger": "numberOfLines" },  
    { "trigger": "numberOfLoops" },  
    { "trigger": "numberOfMatchesInString:options:range:", "contents": "numberOfMatchesInString:options:range:(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})" },  
    { "trigger": "numberOfObjects" },  
    { "trigger": "numberOfObjects" },  
    { "trigger": "numberOfPages" },  
    { "trigger": "numberOfPages" },  
    { "trigger": "numberOfPreviewItemsInPreviewController:", "contents": "numberOfPreviewItemsInPreviewController:(${1:QLPreviewController* controller})" },  
    { "trigger": "numberOfPreviewItemsInPreviewController:", "contents": "numberOfPreviewItemsInPreviewController:(${1:QLPreviewController* controller})" },  
    { "trigger": "numberOfRanges" },  
    { "trigger": "numberOfRowsInComponent:", "contents": "numberOfRowsInComponent:(${1:NSInteger component})" },  
    { "trigger": "numberOfRowsInSection:", "contents": "numberOfRowsInSection:(${1:NSInteger section})" },  
    { "trigger": "numberOfSections" },  
    { "trigger": "numberOfSectionsInTableView:", "contents": "numberOfSectionsInTableView:(${1:UITableView* tableView})" },  
    { "trigger": "numberOfSectionsInTableView:", "contents": "numberOfSectionsInTableView:(${1:UITableView* tableView})" },  
    { "trigger": "numberOfSegments" },  
    { "trigger": "numberOfSegmentsDownloaded" },  
    { "trigger": "numberOfSegmentsDownloaded" },  
    { "trigger": "numberOfServerAddressChanges" },  
    { "trigger": "numberOfServerAddressChanges" },  
    { "trigger": "numberOfStalls" },  
    { "trigger": "numberOfStalls" },  
    { "trigger": "numberOfTapsRequired" },  
    { "trigger": "numberOfTapsRequired" },  
    { "trigger": "numberOfTouches" },  
    { "trigger": "numberOfTouchesRequired" },  
    { "trigger": "numberOfTouchesRequired" },  
    { "trigger": "numberOfTouchesRequired" },  
    { "trigger": "numberStyle" },  
    { "trigger": "numberValue" },  
    { "trigger": "objCType" },  
    { "trigger": "objCType" },  
    { "trigger": "object" },  
    { "trigger": "objectAtIndex:", "contents": "objectAtIndex:(${1:NSUInteger idx})" },  
    { "trigger": "objectAtIndex:", "contents": "objectAtIndex:(${1:NSUInteger index})" },  
    { "trigger": "objectAtIndexPath:", "contents": "objectAtIndexPath:(${1:NSIndexPath* indexPath})" },  
    { "trigger": "objectEnumerator" },  
    { "trigger": "objectEnumerator" },  
    { "trigger": "objectEnumerator" },  
    { "trigger": "objectEnumerator" },  
    { "trigger": "objectEnumerator" },  
    { "trigger": "objectForInfoDictionaryKey:", "contents": "objectForInfoDictionaryKey:(${1:NSString* key})" },  
    { "trigger": "objectForKey:", "contents": "objectForKey:(${1:id key})" },  
    { "trigger": "objectForKey:", "contents": "objectForKey:(${1:id key})" },  
    { "trigger": "objectForKey:", "contents": "objectForKey:(${1:id aKey})" },  
    { "trigger": "objectForKey:", "contents": "objectForKey:(${1:NSString* defaultName})" },  
    { "trigger": "objectForKey:", "contents": "objectForKey:(${1:NSString* aKey})" },  
    { "trigger": "objectID" },  
    { "trigger": "objectID" },  
    { "trigger": "objectID" },  
    { "trigger": "objectIDForEntity:referenceObject:", "contents": "objectIDForEntity:referenceObject:(${1:NSEntityDescription* entity}, referenceObject:${2:id data})" },  
    { "trigger": "objectIsForcedForKey:", "contents": "objectIsForcedForKey:(${1:NSString* key})" },  
    { "trigger": "objectIsForcedForKey:inDomain:", "contents": "objectIsForcedForKey:inDomain:(${1:NSString* key}, inDomain:${2:NSString* domain})" },  
    { "trigger": "objectRegisteredForID:", "contents": "objectRegisteredForID:(${1:NSManagedObjectID* objectID})" },  
    { "trigger": "objectSnapshot" },  
    { "trigger": "objectWithID:", "contents": "objectWithID:(${1:NSManagedObjectID* objectID})" },  
    { "trigger": "objectZone" },  
    { "trigger": "objects" },  
    { "trigger": "objects" },  
    { "trigger": "objectsAtIndexes:", "contents": "objectsAtIndexes:(${1:NSIndexSet* indexes})" },  
    { "trigger": "objectsAtIndexes:", "contents": "objectsAtIndexes:(${1:NSIndexSet* indexes})" },  
    { "trigger": "objectsForKeys:notFoundMarker:", "contents": "objectsForKeys:notFoundMarker:(${1:NSArray* keys}, notFoundMarker:${2:id marker})" },  
    { "trigger": "objectsPassingTest:", "contents": "objectsPassingTest:(${1:BOOL (^)(id, BOOL *) predicate})" },  
    { "trigger": "objectsWithOptions:passingTest:", "contents": "objectsWithOptions:passingTest:(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, BOOL *) predicate})" },  
    { "trigger": "observationInfo" },  
    { "trigger": "observationInfo" },  
    { "trigger": "observationInfo" },  
    { "trigger": "observeValueForKeyPath:ofObject:change:context:", "contents": "observeValueForKeyPath:ofObject:change:context:(${1:NSString* keyPath}, ofObject:${2:id object}, change:${3:NSDictionary* change}, context:${4:void* context})" },  
    { "trigger": "observeValueForKeyPath:ofObject:change:context:", "contents": "observeValueForKeyPath:ofObject:change:context:(${1:NSString* keyPath}, ofObject:${2:id object}, change:${3:NSDictionary* change}, context:${4:void* context})" },  
    { "trigger": "observeValueForKeyPath:ofObject:change:context:", "contents": "observeValueForKeyPath:ofObject:change:context:(${1:NSString* keyPath}, ofObject:${2:id object}, change:${3:NSDictionary* change}, context:${4:void* context})" },  
    { "trigger": "observedBitrate" },  
    { "trigger": "observedBitrate" },  
    { "trigger": "obtainPermanentIDsForObjects:error:", "contents": "obtainPermanentIDsForObjects:error:(${1:NSArray* objects}, error:${2:NSError** error})" },  
    { "trigger": "obtainPermanentIDsForObjects:error:", "contents": "obtainPermanentIDsForObjects:error:(${1:NSArray* array}, error:${2:NSError** error})" },  
    { "trigger": "occurrenceCount" },  
    { "trigger": "ocean" },  
    { "trigger": "offsetFromPosition:toPosition:", "contents": "offsetFromPosition:toPosition:(${1:UITextPosition* from}, toPosition:${2:UITextPosition* toPosition})" },  
    { "trigger": "offsetFromPosition:toPosition:", "contents": "offsetFromPosition:toPosition:(${1:UITextPosition* from}, toPosition:${2:UITextPosition* toPosition})" },  
    { "trigger": "offsetInFile" },  
    { "trigger": "oldVersionNumber" },  
    { "trigger": "onTintColor" },  
    { "trigger": "opacity" },  
    { "trigger": "open" },  
    { "trigger": "openURL:", "contents": "openURL:(${1:NSURL* url})" },  
    { "trigger": "openWithCompletionHandler:", "contents": "openWithCompletionHandler:(${1:void (^)(BOOL) completionHandler})" },  
    { "trigger": "operand" },  
    { "trigger": "operatingSystem" },  
    { "trigger": "operatingSystemName" },  
    { "trigger": "operatingSystemVersionString" },  
    { "trigger": "operationCount" },  
    { "trigger": "operations" },  
    { "trigger": "options" },  
    { "trigger": "options" },  
    { "trigger": "options" },  
    { "trigger": "options" },  
    { "trigger": "ordinalityOfUnit:inUnit:forDate:", "contents": "ordinalityOfUnit:inUnit:forDate:(${1:NSCalendarUnit smaller}, inUnit:${2:NSCalendarUnit larger}, forDate:${3:NSDate* date})" },  
    { "trigger": "organizer" },  
    { "trigger": "orientation" },  
    { "trigger": "orientation" },  
    { "trigger": "orientation" },  
    { "trigger": "orientation" },  
    { "trigger": "originalAsset" },  
    { "trigger": "originalRequest" },  
    { "trigger": "originalTransaction" },  
    { "trigger": "orthography" },  
    { "trigger": "orthographyAtIndex:effectiveRange:", "contents": "orthographyAtIndex:effectiveRange:(${1:NSUInteger charIndex}, effectiveRange:${2:NSRangePointer effectiveRange})" },  
    { "trigger": "output" },  
    { "trigger": "outputFileType" },  
    { "trigger": "outputFileType" },  
    { "trigger": "outputFileURL" },  
    { "trigger": "outputFormat" },  
    { "trigger": "outputImage" },  
    { "trigger": "outputImageMaximumSize" },  
    { "trigger": "outputKeys" },  
    { "trigger": "outputMeterLevel" },  
    { "trigger": "outputSettings" },  
    { "trigger": "outputSettings" },  
    { "trigger": "outputSettings" },  
    { "trigger": "outputStream" },  
    { "trigger": "outputType" },  
    { "trigger": "outputURL" },  
    { "trigger": "outputURL" },  
    { "trigger": "outputs" },  
    { "trigger": "outputs" },  
    { "trigger": "overlay" },  
    { "trigger": "overlays" },  
    { "trigger": "overscanCompensation" },  
    { "trigger": "paddingCharacter" },  
    { "trigger": "paddingPosition" },  
    { "trigger": "pageCount" },  
    { "trigger": "pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:", "contents": "pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:(${1:UIPageViewController* pageViewController}, didFinishAnimating:${2:BOOL finished}, previousViewControllers:${3:NSArray* previousViewControllers}, transitionCompleted:${4:BOOL completed})" },  
    { "trigger": "pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:", "contents": "pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:(${1:UIPageViewController* pageViewController}, didFinishAnimating:${2:BOOL finished}, previousViewControllers:${3:NSArray* previousViewControllers}, transitionCompleted:${4:BOOL completed})" },  
    { "trigger": "pageViewController:spineLocationForInterfaceOrientation:", "contents": "pageViewController:spineLocationForInterfaceOrientation:(${1:UIPageViewController* pageViewController}, spineLocationForInterfaceOrientation:${2:UIInterfaceOrientation orientation})" },  
    { "trigger": "pageViewController:spineLocationForInterfaceOrientation:", "contents": "pageViewController:spineLocationForInterfaceOrientation:(${1:UIPageViewController* pageViewController}, spineLocationForInterfaceOrientation:${2:UIInterfaceOrientation orientation})" },  
    { "trigger": "pageViewController:viewControllerAfterViewController:", "contents": "pageViewController:viewControllerAfterViewController:(${1:UIPageViewController* pageViewController}, viewControllerAfterViewController:${2:UIViewController* viewController})" },  
    { "trigger": "pageViewController:viewControllerAfterViewController:", "contents": "pageViewController:viewControllerAfterViewController:(${1:UIPageViewController* pageViewController}, viewControllerAfterViewController:${2:UIViewController* viewController})" },  
    { "trigger": "pageViewController:viewControllerBeforeViewController:", "contents": "pageViewController:viewControllerBeforeViewController:(${1:UIPageViewController* pageViewController}, viewControllerBeforeViewController:${2:UIViewController* viewController})" },  
    { "trigger": "pageViewController:viewControllerBeforeViewController:", "contents": "pageViewController:viewControllerBeforeViewController:(${1:UIPageViewController* pageViewController}, viewControllerBeforeViewController:${2:UIViewController* viewController})" },  
    { "trigger": "pan" },  
    { "trigger": "panGestureRecognizer" },  
    { "trigger": "paperRect" },  
    { "trigger": "paperSize" },  
    { "trigger": "paragraphRangeForRange:", "contents": "paragraphRangeForRange:(${1:NSRange range})" },  
    { "trigger": "parameterString" },  
    { "trigger": "parameters" },  
    { "trigger": "parentContext" },  
    { "trigger": "parentGroup" },  
    { "trigger": "parentViewController" },  
    { "trigger": "parse" },  
    { "trigger": "parserDidEndDocument:", "contents": "parserDidEndDocument:(${1:NSXMLParser* parser})" },  
    { "trigger": "parserDidEndDocument:", "contents": "parserDidEndDocument:(${1:NSXMLParser* parser})" },  
    { "trigger": "parserDidStartDocument:", "contents": "parserDidStartDocument:(${1:NSXMLParser* parser})" },  
    { "trigger": "parserDidStartDocument:", "contents": "parserDidStartDocument:(${1:NSXMLParser* parser})" },  
    { "trigger": "parserError" },  
    { "trigger": "parser:didEndElement:namespaceURI:qualifiedName:", "contents": "parser:didEndElement:namespaceURI:qualifiedName:(${1:NSXMLParser* parser}, didEndElement:${2:NSString* elementName}, namespaceURI:${3:NSString* namespaceURI}, qualifiedName:${4:NSString* qName})" },  
    { "trigger": "parser:didEndElement:namespaceURI:qualifiedName:", "contents": "parser:didEndElement:namespaceURI:qualifiedName:(${1:NSXMLParser* parser}, didEndElement:${2:NSString* elementName}, namespaceURI:${3:NSString* namespaceURI}, qualifiedName:${4:NSString* qName})" },  
    { "trigger": "parser:didEndMappingPrefix:", "contents": "parser:didEndMappingPrefix:(${1:NSXMLParser* parser}, didEndMappingPrefix:${2:NSString* prefix})" },  
    { "trigger": "parser:didEndMappingPrefix:", "contents": "parser:didEndMappingPrefix:(${1:NSXMLParser* parser}, didEndMappingPrefix:${2:NSString* prefix})" },  
    { "trigger": "parser:didStartElement:namespaceURI:qualifiedName:attributes:", "contents": "parser:didStartElement:namespaceURI:qualifiedName:attributes:(${1:NSXMLParser* parser}, didStartElement:${2:NSString* elementName}, namespaceURI:${3:NSString* namespaceURI}, qualifiedName:${4:NSString* qName}, attributes:${5:NSDictionary* attributeDict})" },  
    { "trigger": "parser:didStartElement:namespaceURI:qualifiedName:attributes:", "contents": "parser:didStartElement:namespaceURI:qualifiedName:attributes:(${1:NSXMLParser* parser}, didStartElement:${2:NSString* elementName}, namespaceURI:${3:NSString* namespaceURI}, qualifiedName:${4:NSString* qName}, attributes:${5:NSDictionary* attributeDict})" },  
    { "trigger": "parser:didStartMappingPrefix:toURI:", "contents": "parser:didStartMappingPrefix:toURI:(${1:NSXMLParser* parser}, didStartMappingPrefix:${2:NSString* prefix}, toURI:${3:NSString* namespaceURI})" },  
    { "trigger": "parser:didStartMappingPrefix:toURI:", "contents": "parser:didStartMappingPrefix:toURI:(${1:NSXMLParser* parser}, didStartMappingPrefix:${2:NSString* prefix}, toURI:${3:NSString* namespaceURI})" },  
    { "trigger": "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:", "contents": "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:(${1:NSXMLParser* parser}, foundAttributeDeclarationWithName:${2:NSString* attributeName}, forElement:${3:NSString* elementName}, type:${4:NSString* type}, defaultValue:${5:NSString* defaultValue})" },  
    { "trigger": "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:", "contents": "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:(${1:NSXMLParser* parser}, foundAttributeDeclarationWithName:${2:NSString* attributeName}, forElement:${3:NSString* elementName}, type:${4:NSString* type}, defaultValue:${5:NSString* defaultValue})" },  
    { "trigger": "parser:foundCDATA:", "contents": "parser:foundCDATA:(${1:NSXMLParser* parser}, foundCDATA:${2:NSData* CDATABlock})" },  
    { "trigger": "parser:foundCDATA:", "contents": "parser:foundCDATA:(${1:NSXMLParser* parser}, foundCDATA:${2:NSData* CDATABlock})" },  
    { "trigger": "parser:foundCharacters:", "contents": "parser:foundCharacters:(${1:NSXMLParser* parser}, foundCharacters:${2:NSString* string})" },  
    { "trigger": "parser:foundCharacters:", "contents": "parser:foundCharacters:(${1:NSXMLParser* parser}, foundCharacters:${2:NSString* string})" },  
    { "trigger": "parser:foundComment:", "contents": "parser:foundComment:(${1:NSXMLParser* parser}, foundComment:${2:NSString* comment})" },  
    { "trigger": "parser:foundComment:", "contents": "parser:foundComment:(${1:NSXMLParser* parser}, foundComment:${2:NSString* comment})" },  
    { "trigger": "parser:foundElementDeclarationWithName:model:", "contents": "parser:foundElementDeclarationWithName:model:(${1:NSXMLParser* parser}, foundElementDeclarationWithName:${2:NSString* elementName}, model:${3:NSString* model})" },  
    { "trigger": "parser:foundElementDeclarationWithName:model:", "contents": "parser:foundElementDeclarationWithName:model:(${1:NSXMLParser* parser}, foundElementDeclarationWithName:${2:NSString* elementName}, model:${3:NSString* model})" },  
    { "trigger": "parser:foundExternalEntityDeclarationWithName:publicID:systemID:", "contents": "parser:foundExternalEntityDeclarationWithName:publicID:systemID:(${1:NSXMLParser* parser}, foundExternalEntityDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID})" },  
    { "trigger": "parser:foundExternalEntityDeclarationWithName:publicID:systemID:", "contents": "parser:foundExternalEntityDeclarationWithName:publicID:systemID:(${1:NSXMLParser* parser}, foundExternalEntityDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID})" },  
    { "trigger": "parser:foundIgnorableWhitespace:", "contents": "parser:foundIgnorableWhitespace:(${1:NSXMLParser* parser}, foundIgnorableWhitespace:${2:NSString* whitespaceString})" },  
    { "trigger": "parser:foundIgnorableWhitespace:", "contents": "parser:foundIgnorableWhitespace:(${1:NSXMLParser* parser}, foundIgnorableWhitespace:${2:NSString* whitespaceString})" },  
    { "trigger": "parser:foundInternalEntityDeclarationWithName:value:", "contents": "parser:foundInternalEntityDeclarationWithName:value:(${1:NSXMLParser* parser}, foundInternalEntityDeclarationWithName:${2:NSString* name}, value:${3:NSString* value})" },  
    { "trigger": "parser:foundInternalEntityDeclarationWithName:value:", "contents": "parser:foundInternalEntityDeclarationWithName:value:(${1:NSXMLParser* parser}, foundInternalEntityDeclarationWithName:${2:NSString* name}, value:${3:NSString* value})" },  
    { "trigger": "parser:foundNotationDeclarationWithName:publicID:systemID:", "contents": "parser:foundNotationDeclarationWithName:publicID:systemID:(${1:NSXMLParser* parser}, foundNotationDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID})" },  
    { "trigger": "parser:foundNotationDeclarationWithName:publicID:systemID:", "contents": "parser:foundNotationDeclarationWithName:publicID:systemID:(${1:NSXMLParser* parser}, foundNotationDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID})" },  
    { "trigger": "parser:foundProcessingInstructionWithTarget:data:", "contents": "parser:foundProcessingInstructionWithTarget:data:(${1:NSXMLParser* parser}, foundProcessingInstructionWithTarget:${2:NSString* target}, data:${3:NSString* data})" },  
    { "trigger": "parser:foundProcessingInstructionWithTarget:data:", "contents": "parser:foundProcessingInstructionWithTarget:data:(${1:NSXMLParser* parser}, foundProcessingInstructionWithTarget:${2:NSString* target}, data:${3:NSString* data})" },  
    { "trigger": "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:", "contents": "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:(${1:NSXMLParser* parser}, foundUnparsedEntityDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID}, notationName:${5:NSString* notationName})" },  
    { "trigger": "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:", "contents": "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:(${1:NSXMLParser* parser}, foundUnparsedEntityDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID}, notationName:${5:NSString* notationName})" },  
    { "trigger": "parser:parseErrorOccurred:", "contents": "parser:parseErrorOccurred:(${1:NSXMLParser* parser}, parseErrorOccurred:${2:NSError* parseError})" },  
    { "trigger": "parser:parseErrorOccurred:", "contents": "parser:parseErrorOccurred:(${1:NSXMLParser* parser}, parseErrorOccurred:${2:NSError* parseError})" },  
    { "trigger": "parser:resolveExternalEntityName:systemID:", "contents": "parser:resolveExternalEntityName:systemID:(${1:NSXMLParser* parser}, resolveExternalEntityName:${2:NSString* name}, systemID:${3:NSString* systemID})" },  
    { "trigger": "parser:resolveExternalEntityName:systemID:", "contents": "parser:resolveExternalEntityName:systemID:(${1:NSXMLParser* parser}, resolveExternalEntityName:${2:NSString* name}, systemID:${3:NSString* systemID})" },  
    { "trigger": "parser:validationErrorOccurred:", "contents": "parser:validationErrorOccurred:(${1:NSXMLParser* parser}, validationErrorOccurred:${2:NSError* validationError})" },  
    { "trigger": "parser:validationErrorOccurred:", "contents": "parser:validationErrorOccurred:(${1:NSXMLParser* parser}, validationErrorOccurred:${2:NSError* validationError})" },  
    { "trigger": "participantID" },  
    { "trigger": "participantID" },  
    { "trigger": "participantQuitInTurnWithOutcome:nextParticipant:matchData:completionHandler:", "contents": "participantQuitInTurnWithOutcome:nextParticipant:matchData:completionHandler:(${1:GKTurnBasedMatchOutcome matchOutcome}, nextParticipant:${2:GKTurnBasedParticipant* nextParticipant}, matchData:${3:NSData* matchData}, completionHandler:${4:void (^)(NSError *) completionHandler})" },  
    { "trigger": "participantQuitOutOfTurnWithOutcome:withCompletionHandler:", "contents": "participantQuitOutOfTurnWithOutcome:withCompletionHandler:(${1:GKTurnBasedMatchOutcome matchOutcome}, withCompletionHandler:${2:void (^)(NSError *) completionHandler})" },  
    { "trigger": "participantRole" },  
    { "trigger": "participantStatus" },  
    { "trigger": "participantType" },  
    { "trigger": "participants" },  
    { "trigger": "passthroughViews" },  
    { "trigger": "password" },  
    { "trigger": "password" },  
    { "trigger": "paste:", "contents": "paste:(${1:id sender})" },  
    { "trigger": "paste:", "contents": "paste:(${1:id sender})" },  
    { "trigger": "pasteboardTypes" },  
    { "trigger": "pasteboardTypesForItemSet:", "contents": "pasteboardTypesForItemSet:(${1:NSIndexSet* itemSet})" },  
    { "trigger": "path" },  
    { "trigger": "path" },  
    { "trigger": "path" },  
    { "trigger": "path" },  
    { "trigger": "path" },  
    { "trigger": "pathComponents" },  
    { "trigger": "pathComponents" },  
    { "trigger": "pathContentOfSymbolicLinkAtPath:", "contents": "pathContentOfSymbolicLinkAtPath:(${1:NSString* path})" },  
    { "trigger": "pathExtension" },  
    { "trigger": "pathExtension" },  
    { "trigger": "pathForAuxiliaryExecutable:", "contents": "pathForAuxiliaryExecutable:(${1:NSString* executableName})" },  
    { "trigger": "pathForResource:ofType:", "contents": "pathForResource:ofType:(${1:NSString* name}, ofType:${2:NSString* ext})" },  
    { "trigger": "pathForResource:ofType:inDirectory:", "contents": "pathForResource:ofType:inDirectory:(${1:NSString* name}, ofType:${2:NSString* ext}, inDirectory:${3:NSString* subpath})" },  
    { "trigger": "pathForResource:ofType:inDirectory:forLocalization:", "contents": "pathForResource:ofType:inDirectory:forLocalization:(${1:NSString* name}, ofType:${2:NSString* ext}, inDirectory:${3:NSString* subpath}, forLocalization:${4:NSString* localizationName})" },  
    { "trigger": "pathsForResourcesOfType:inDirectory:", "contents": "pathsForResourcesOfType:inDirectory:(${1:NSString* ext}, inDirectory:${2:NSString* subpath})" },  
    { "trigger": "pathsForResourcesOfType:inDirectory:forLocalization:", "contents": "pathsForResourcesOfType:inDirectory:forLocalization:(${1:NSString* ext}, inDirectory:${2:NSString* subpath}, forLocalization:${3:NSString* localizationName})" },  
    { "trigger": "pathsMatchingExtensions:", "contents": "pathsMatchingExtensions:(${1:NSArray* filterTypes})" },  
    { "trigger": "pattern" },  
    { "trigger": "pause" },  
    { "trigger": "pause" },  
    { "trigger": "pause" },  
    { "trigger": "pause" },  
    { "trigger": "pause" },  
    { "trigger": "pause" },  
    { "trigger": "pauseOnWillResignActive" },  
    { "trigger": "payment" },  
    { "trigger": "paymentQueueRestoreCompletedTransactionsFinished:", "contents": "paymentQueueRestoreCompletedTransactionsFinished:(${1:SKPaymentQueue* queue})" },  
    { "trigger": "paymentQueueRestoreCompletedTransactionsFinished:", "contents": "paymentQueueRestoreCompletedTransactionsFinished:(${1:SKPaymentQueue* queue})" },  
    { "trigger": "paymentQueue:removedTransactions:", "contents": "paymentQueue:removedTransactions:(${1:SKPaymentQueue* queue}, removedTransactions:${2:NSArray* transactions})" },  
    { "trigger": "paymentQueue:removedTransactions:", "contents": "paymentQueue:removedTransactions:(${1:SKPaymentQueue* queue}, removedTransactions:${2:NSArray* transactions})" },  
    { "trigger": "paymentQueue:restoreCompletedTransactionsFailedWithError:", "contents": "paymentQueue:restoreCompletedTransactionsFailedWithError:(${1:SKPaymentQueue* queue}, restoreCompletedTransactionsFailedWithError:${2:NSError* error})" },  
    { "trigger": "paymentQueue:restoreCompletedTransactionsFailedWithError:", "contents": "paymentQueue:restoreCompletedTransactionsFailedWithError:(${1:SKPaymentQueue* queue}, restoreCompletedTransactionsFailedWithError:${2:NSError* error})" },  
    { "trigger": "paymentQueue:updatedTransactions:", "contents": "paymentQueue:updatedTransactions:(${1:SKPaymentQueue* queue}, updatedTransactions:${2:NSArray* transactions})" },  
    { "trigger": "paymentQueue:updatedTransactions:", "contents": "paymentQueue:updatedTransactions:(${1:SKPaymentQueue* queue}, updatedTransactions:${2:NSArray* transactions})" },  
    { "trigger": "peakHoldLevel" },  
    { "trigger": "peakPowerForChannel:", "contents": "peakPowerForChannel:(${1:NSUInteger channelNumber})" },  
    { "trigger": "peakPowerForChannel:", "contents": "peakPowerForChannel:(${1:NSUInteger channelNumber})" },  
    { "trigger": "peerID" },  
    { "trigger": "peerPickerControllerDidCancel:", "contents": "peerPickerControllerDidCancel:(${1:GKPeerPickerController* picker})" },  
    { "trigger": "peerPickerControllerDidCancel:", "contents": "peerPickerControllerDidCancel:(${1:GKPeerPickerController* picker})" },  
    { "trigger": "peerPickerController:didConnectPeer:toSession:", "contents": "peerPickerController:didConnectPeer:toSession:(${1:GKPeerPickerController* picker}, didConnectPeer:${2:NSString* peerID}, toSession:${3:GKSession* session})" },  
    { "trigger": "peerPickerController:didConnectPeer:toSession:", "contents": "peerPickerController:didConnectPeer:toSession:(${1:GKPeerPickerController* picker}, didConnectPeer:${2:NSString* peerID}, toSession:${3:GKSession* session})" },  
    { "trigger": "peerPickerController:didSelectConnectionType:", "contents": "peerPickerController:didSelectConnectionType:(${1:GKPeerPickerController* picker}, didSelectConnectionType:${2:GKPeerPickerConnectionType type})" },  
    { "trigger": "peerPickerController:didSelectConnectionType:", "contents": "peerPickerController:didSelectConnectionType:(${1:GKPeerPickerController* picker}, didSelectConnectionType:${2:GKPeerPickerConnectionType type})" },  
    { "trigger": "peerPickerController:sessionForConnectionType:", "contents": "peerPickerController:sessionForConnectionType:(${1:GKPeerPickerController* picker}, sessionForConnectionType:${2:GKPeerPickerConnectionType type})" },  
    { "trigger": "peerPickerController:sessionForConnectionType:", "contents": "peerPickerController:sessionForConnectionType:(${1:GKPeerPickerController* picker}, sessionForConnectionType:${2:GKPeerPickerConnectionType type})" },  
    { "trigger": "peersWithConnectionState:", "contents": "peersWithConnectionState:(${1:GKPeerConnectionState state})" },  
    { "trigger": "peoplePickerDelegate" },  
    { "trigger": "peoplePickerNavigationControllerDidCancel:", "contents": "peoplePickerNavigationControllerDidCancel:(${1:ABPeoplePickerNavigationController* peoplePicker})" },  
    { "trigger": "peoplePickerNavigationControllerDidCancel:", "contents": "peoplePickerNavigationControllerDidCancel:(${1:ABPeoplePickerNavigationController* peoplePicker})" },  
    { "trigger": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:", "contents": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:(${1:ABPeoplePickerNavigationController* peoplePicker}, shouldContinueAfterSelectingPerson:${2:ABRecordRef person})" },  
    { "trigger": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:", "contents": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:(${1:ABPeoplePickerNavigationController* peoplePicker}, shouldContinueAfterSelectingPerson:${2:ABRecordRef person})" },  
    { "trigger": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:", "contents": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:(${1:ABPeoplePickerNavigationController* peoplePicker}, shouldContinueAfterSelectingPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})" },  
    { "trigger": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:", "contents": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:(${1:ABPeoplePickerNavigationController* peoplePicker}, shouldContinueAfterSelectingPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})" },  
    { "trigger": "perMillSymbol" },  
    { "trigger": "percentComplete" },  
    { "trigger": "percentSymbol" },  
    { "trigger": "perform" },  
    { "trigger": "performAsynchronousFileAccessUsingBlock:", "contents": "performAsynchronousFileAccessUsingBlock:(${1:void (^)(void) block})" },  
    { "trigger": "performBlock:", "contents": "performBlock:(${1:void (^)() block})" },  
    { "trigger": "performBlockAndWait:", "contents": "performBlockAndWait:(${1:void (^)() block})" },  
    { "trigger": "performCustomValidationForEntityMapping:manager:error:", "contents": "performCustomValidationForEntityMapping:manager:error:(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})" },  
    { "trigger": "performDefaultHandlingForAuthenticationChallenge:", "contents": "performDefaultHandlingForAuthenticationChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "performDefaultHandlingForAuthenticationChallenge:", "contents": "performDefaultHandlingForAuthenticationChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "performFetch:", "contents": "performFetch:(${1:NSError** error})" },  
    { "trigger": "performRequestWithHandler:", "contents": "performRequestWithHandler:(${1:TWRequestHandler handler})" },  
    { "trigger": "performSegueWithIdentifier:sender:", "contents": "performSegueWithIdentifier:sender:(${1:NSString* identifier}, sender:${2:id sender})" },  
    { "trigger": "performSelector:", "contents": "performSelector:(${1:SEL aSelector})" },  
    { "trigger": "performSelector:", "contents": "performSelector:(${1:SEL aSelector})" },  
    { "trigger": "performSelectorInBackground:withObject:", "contents": "performSelectorInBackground:withObject:(${1:SEL aSelector}, withObject:${2:id arg})" },  
    { "trigger": "performSelectorInBackground:withObject:", "contents": "performSelectorInBackground:withObject:(${1:SEL aSelector}, withObject:${2:id arg})" },  
    { "trigger": "performSelectorOnMainThread:withObject:waitUntilDone:", "contents": "performSelectorOnMainThread:withObject:waitUntilDone:(${1:SEL aSelector}, withObject:${2:id arg}, waitUntilDone:${3:BOOL wait})" },  
    { "trigger": "performSelectorOnMainThread:withObject:waitUntilDone:", "contents": "performSelectorOnMainThread:withObject:waitUntilDone:(${1:SEL aSelector}, withObject:${2:id arg}, waitUntilDone:${3:BOOL wait})" },  
    { "trigger": "performSelectorOnMainThread:withObject:waitUntilDone:modes:", "contents": "performSelectorOnMainThread:withObject:waitUntilDone:modes:(${1:SEL aSelector}, withObject:${2:id arg}, waitUntilDone:${3:BOOL wait}, modes:${4:NSArray* array})" },  
    { "trigger": "performSelectorOnMainThread:withObject:waitUntilDone:modes:", "contents": "performSelectorOnMainThread:withObject:waitUntilDone:modes:(${1:SEL aSelector}, withObject:${2:id arg}, waitUntilDone:${3:BOOL wait}, modes:${4:NSArray* array})" },  
    { "trigger": "performSelector:onThread:withObject:waitUntilDone:", "contents": "performSelector:onThread:withObject:waitUntilDone:(${1:SEL aSelector}, onThread:${2:NSThread* thr}, withObject:${3:id arg}, waitUntilDone:${4:BOOL wait})" },  
    { "trigger": "performSelector:onThread:withObject:waitUntilDone:", "contents": "performSelector:onThread:withObject:waitUntilDone:(${1:SEL aSelector}, onThread:${2:NSThread* thr}, withObject:${3:id arg}, waitUntilDone:${4:BOOL wait})" },  
    { "trigger": "performSelector:onThread:withObject:waitUntilDone:modes:", "contents": "performSelector:onThread:withObject:waitUntilDone:modes:(${1:SEL aSelector}, onThread:${2:NSThread* thr}, withObject:${3:id arg}, waitUntilDone:${4:BOOL wait}, modes:${5:NSArray* array})" },  
    { "trigger": "performSelector:onThread:withObject:waitUntilDone:modes:", "contents": "performSelector:onThread:withObject:waitUntilDone:modes:(${1:SEL aSelector}, onThread:${2:NSThread* thr}, withObject:${3:id arg}, waitUntilDone:${4:BOOL wait}, modes:${5:NSArray* array})" },  
    { "trigger": "performSelector:target:argument:order:modes:", "contents": "performSelector:target:argument:order:modes:(${1:SEL aSelector}, target:${2:id target}, argument:${3:id arg}, order:${4:NSUInteger order}, modes:${5:NSArray* modes})" },  
    { "trigger": "performSelector:withObject:", "contents": "performSelector:withObject:(${1:SEL aSelector}, withObject:${2:id object})" },  
    { "trigger": "performSelector:withObject:", "contents": "performSelector:withObject:(${1:SEL aSelector}, withObject:${2:id object})" },  
    { "trigger": "performSelector:withObject:afterDelay:", "contents": "performSelector:withObject:afterDelay:(${1:SEL aSelector}, withObject:${2:id anArgument}, afterDelay:${3:NSTimeInterval delay})" },  
    { "trigger": "performSelector:withObject:afterDelay:", "contents": "performSelector:withObject:afterDelay:(${1:SEL aSelector}, withObject:${2:id anArgument}, afterDelay:${3:NSTimeInterval delay})" },  
    { "trigger": "performSelector:withObject:afterDelay:inModes:", "contents": "performSelector:withObject:afterDelay:inModes:(${1:SEL aSelector}, withObject:${2:id anArgument}, afterDelay:${3:NSTimeInterval delay}, inModes:${4:NSArray* modes})" },  
    { "trigger": "performSelector:withObject:afterDelay:inModes:", "contents": "performSelector:withObject:afterDelay:inModes:(${1:SEL aSelector}, withObject:${2:id anArgument}, afterDelay:${3:NSTimeInterval delay}, inModes:${4:NSArray* modes})" },  
    { "trigger": "performSelector:withObject:withObject:", "contents": "performSelector:withObject:withObject:(${1:SEL aSelector}, withObject:${2:id object1}, withObject:${3:id object2})" },  
    { "trigger": "performSelector:withObject:withObject:", "contents": "performSelector:withObject:withObject:(${1:SEL aSelector}, withObject:${2:id object1}, withObject:${3:id object2})" },  
    { "trigger": "peripheral" },  
    { "trigger": "peripheralDidUpdateRSSI:error:", "contents": "peripheralDidUpdateRSSI:error:(${1:CBPeripheral* peripheral}, error:${2:NSError* error})" },  
    { "trigger": "peripheralDidUpdateRSSI:error:", "contents": "peripheralDidUpdateRSSI:error:(${1:CBPeripheral* peripheral}, error:${2:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverCharacteristicsForService:error:", "contents": "peripheral:didDiscoverCharacteristicsForService:error:(${1:CBPeripheral* peripheral}, didDiscoverCharacteristicsForService:${2:CBService* service}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverCharacteristicsForService:error:", "contents": "peripheral:didDiscoverCharacteristicsForService:error:(${1:CBPeripheral* peripheral}, didDiscoverCharacteristicsForService:${2:CBService* service}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverDescriptorsForCharacteristic:error:", "contents": "peripheral:didDiscoverDescriptorsForCharacteristic:error:(${1:CBPeripheral* peripheral}, didDiscoverDescriptorsForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverDescriptorsForCharacteristic:error:", "contents": "peripheral:didDiscoverDescriptorsForCharacteristic:error:(${1:CBPeripheral* peripheral}, didDiscoverDescriptorsForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverIncludedServicesForService:error:", "contents": "peripheral:didDiscoverIncludedServicesForService:error:(${1:CBPeripheral* peripheral}, didDiscoverIncludedServicesForService:${2:CBService* service}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverIncludedServicesForService:error:", "contents": "peripheral:didDiscoverIncludedServicesForService:error:(${1:CBPeripheral* peripheral}, didDiscoverIncludedServicesForService:${2:CBService* service}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverServices:", "contents": "peripheral:didDiscoverServices:(${1:CBPeripheral* peripheral}, didDiscoverServices:${2:NSError* error})" },  
    { "trigger": "peripheral:didDiscoverServices:", "contents": "peripheral:didDiscoverServices:(${1:CBPeripheral* peripheral}, didDiscoverServices:${2:NSError* error})" },  
    { "trigger": "peripheral:didUpdateNotificationStateForCharacteristic:error:", "contents": "peripheral:didUpdateNotificationStateForCharacteristic:error:(${1:CBPeripheral* peripheral}, didUpdateNotificationStateForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didUpdateNotificationStateForCharacteristic:error:", "contents": "peripheral:didUpdateNotificationStateForCharacteristic:error:(${1:CBPeripheral* peripheral}, didUpdateNotificationStateForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didUpdateValueForCharacteristic:error:", "contents": "peripheral:didUpdateValueForCharacteristic:error:(${1:CBPeripheral* peripheral}, didUpdateValueForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didUpdateValueForCharacteristic:error:", "contents": "peripheral:didUpdateValueForCharacteristic:error:(${1:CBPeripheral* peripheral}, didUpdateValueForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didUpdateValueForDescriptor:error:", "contents": "peripheral:didUpdateValueForDescriptor:error:(${1:CBPeripheral* peripheral}, didUpdateValueForDescriptor:${2:CBDescriptor* descriptor}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didUpdateValueForDescriptor:error:", "contents": "peripheral:didUpdateValueForDescriptor:error:(${1:CBPeripheral* peripheral}, didUpdateValueForDescriptor:${2:CBDescriptor* descriptor}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didWriteValueForCharacteristic:error:", "contents": "peripheral:didWriteValueForCharacteristic:error:(${1:CBPeripheral* peripheral}, didWriteValueForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didWriteValueForCharacteristic:error:", "contents": "peripheral:didWriteValueForCharacteristic:error:(${1:CBPeripheral* peripheral}, didWriteValueForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didWriteValueForDescriptor:error:", "contents": "peripheral:didWriteValueForDescriptor:error:(${1:CBPeripheral* peripheral}, didWriteValueForDescriptor:${2:CBDescriptor* descriptor}, error:${3:NSError* error})" },  
    { "trigger": "peripheral:didWriteValueForDescriptor:error:", "contents": "peripheral:didWriteValueForDescriptor:error:(${1:CBPeripheral* peripheral}, didWriteValueForDescriptor:${2:CBDescriptor* descriptor}, error:${3:NSError* error})" },  
    { "trigger": "persistedSnapshot" },  
    { "trigger": "persistence" },  
    { "trigger": "persistentDomainForName:", "contents": "persistentDomainForName:(${1:NSString* domainName})" },  
    { "trigger": "persistentDomainNames" },  
    { "trigger": "persistentIdentifier" },  
    { "trigger": "persistentStore" },  
    { "trigger": "persistentStoreCoordinator" },  
    { "trigger": "persistentStoreCoordinator" },  
    { "trigger": "persistentStoreForURL:", "contents": "persistentStoreForURL:(${1:NSURL* URL})" },  
    { "trigger": "persistentStoreOptions" },  
    { "trigger": "persistentStoreTypeForFileType:", "contents": "persistentStoreTypeForFileType:(${1:NSString* fileType})" },  
    { "trigger": "persistentStores" },  
    { "trigger": "personViewController:shouldPerformDefaultActionForPerson:property:identifier:", "contents": "personViewController:shouldPerformDefaultActionForPerson:property:identifier:(${1:ABPersonViewController* personViewController}, shouldPerformDefaultActionForPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})" },  
    { "trigger": "personViewController:shouldPerformDefaultActionForPerson:property:identifier:", "contents": "personViewController:shouldPerformDefaultActionForPerson:property:identifier:(${1:ABPersonViewController* personViewController}, shouldPerformDefaultActionForPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})" },  
    { "trigger": "personViewDelegate" },  
    { "trigger": "phase" },  
    { "trigger": "phoneNumber" },  
    { "trigger": "physicalMemory" },  
    { "trigger": "pickerView:accessibilityHintForComponent:", "contents": "pickerView:accessibilityHintForComponent:(${1:UIPickerView* pickerView}, accessibilityHintForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:accessibilityHintForComponent:", "contents": "pickerView:accessibilityHintForComponent:(${1:UIPickerView* pickerView}, accessibilityHintForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:accessibilityLabelForComponent:", "contents": "pickerView:accessibilityLabelForComponent:(${1:UIPickerView* pickerView}, accessibilityLabelForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:accessibilityLabelForComponent:", "contents": "pickerView:accessibilityLabelForComponent:(${1:UIPickerView* pickerView}, accessibilityLabelForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:didSelectRow:inComponent:", "contents": "pickerView:didSelectRow:inComponent:(${1:UIPickerView* pickerView}, didSelectRow:${2:NSInteger row}, inComponent:${3:NSInteger component})" },  
    { "trigger": "pickerView:didSelectRow:inComponent:", "contents": "pickerView:didSelectRow:inComponent:(${1:UIPickerView* pickerView}, didSelectRow:${2:NSInteger row}, inComponent:${3:NSInteger component})" },  
    { "trigger": "pickerView:numberOfRowsInComponent:", "contents": "pickerView:numberOfRowsInComponent:(${1:UIPickerView* pickerView}, numberOfRowsInComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:numberOfRowsInComponent:", "contents": "pickerView:numberOfRowsInComponent:(${1:UIPickerView* pickerView}, numberOfRowsInComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:rowHeightForComponent:", "contents": "pickerView:rowHeightForComponent:(${1:UIPickerView* pickerView}, rowHeightForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:rowHeightForComponent:", "contents": "pickerView:rowHeightForComponent:(${1:UIPickerView* pickerView}, rowHeightForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:titleForRow:forComponent:", "contents": "pickerView:titleForRow:forComponent:(${1:UIPickerView* pickerView}, titleForRow:${2:NSInteger row}, forComponent:${3:NSInteger component})" },  
    { "trigger": "pickerView:titleForRow:forComponent:", "contents": "pickerView:titleForRow:forComponent:(${1:UIPickerView* pickerView}, titleForRow:${2:NSInteger row}, forComponent:${3:NSInteger component})" },  
    { "trigger": "pickerView:viewForRow:forComponent:reusingView:", "contents": "pickerView:viewForRow:forComponent:reusingView:(${1:UIPickerView* pickerView}, viewForRow:${2:NSInteger row}, forComponent:${3:NSInteger component}, reusingView:${4:UIView* view})" },  
    { "trigger": "pickerView:viewForRow:forComponent:reusingView:", "contents": "pickerView:viewForRow:forComponent:reusingView:(${1:UIPickerView* pickerView}, viewForRow:${2:NSInteger row}, forComponent:${3:NSInteger component}, reusingView:${4:UIView* view})" },  
    { "trigger": "pickerView:widthForComponent:", "contents": "pickerView:widthForComponent:(${1:UIPickerView* pickerView}, widthForComponent:${2:NSInteger component})" },  
    { "trigger": "pickerView:widthForComponent:", "contents": "pickerView:widthForComponent:(${1:UIPickerView* pickerView}, widthForComponent:${2:NSInteger component})" },  
    { "trigger": "pinColor" },  
    { "trigger": "pinchGestureRecognizer" },  
    { "trigger": "pitch" },  
    { "trigger": "pixelAspectRatio" },  
    { "trigger": "pixelBufferPool" },  
    { "trigger": "placeholder" },  
    { "trigger": "placeholder" },  
    { "trigger": "placeholderRectForBounds:", "contents": "placeholderRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "placemark" },  
    { "trigger": "play" },  
    { "trigger": "play" },  
    { "trigger": "play" },  
    { "trigger": "play" },  
    { "trigger": "play" },  
    { "trigger": "playAtTime:", "contents": "playAtTime:(${1:NSTimeInterval time})" },  
    { "trigger": "playInputClick" },  
    { "trigger": "playableDuration" },  
    { "trigger": "playbackSessionID" },  
    { "trigger": "playbackSessionID" },  
    { "trigger": "playbackSessionID" },  
    { "trigger": "playbackSessionID" },  
    { "trigger": "playbackStartDate" },  
    { "trigger": "playbackStartDate" },  
    { "trigger": "playbackStartOffset" },  
    { "trigger": "playbackStartOffset" },  
    { "trigger": "playbackState" },  
    { "trigger": "playbackState" },  
    { "trigger": "player" },  
    { "trigger": "playerAttributes" },  
    { "trigger": "playerGroup" },  
    { "trigger": "playerID" },  
    { "trigger": "playerID" },  
    { "trigger": "playerID" },  
    { "trigger": "playerIDs" },  
    { "trigger": "playerIDs" },  
    { "trigger": "playerItem" },  
    { "trigger": "playerScope" },  
    { "trigger": "playerStateUpdateHandler" },  
    { "trigger": "playersToInvite" },  
    { "trigger": "plusSign" },  
    { "trigger": "pointCount" },  
    { "trigger": "pointForMapPoint:", "contents": "pointForMapPoint:(${1:MKMapPoint mapPoint})" },  
    { "trigger": "pointInside:withEvent:", "contents": "pointInside:withEvent:(${1:CGPoint point}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "pointSize" },  
    { "trigger": "pointerValue" },  
    { "trigger": "points" },  
    { "trigger": "polygon" },  
    { "trigger": "polyline" },  
    { "trigger": "popNavigationItemAnimated:", "contents": "popNavigationItemAnimated:(${1:BOOL animated})" },  
    { "trigger": "popToRootViewControllerAnimated:", "contents": "popToRootViewControllerAnimated:(${1:BOOL animated})" },  
    { "trigger": "popToViewController:animated:", "contents": "popToViewController:animated:(${1:UIViewController* viewController}, animated:${2:BOOL animated})" },  
    { "trigger": "popViewControllerAnimated:", "contents": "popViewControllerAnimated:(${1:BOOL animated})" },  
    { "trigger": "popoverArrowDirection" },  
    { "trigger": "popoverBackgroundViewClass" },  
    { "trigger": "popoverContentSize" },  
    { "trigger": "popoverController" },  
    { "trigger": "popoverControllerDidDismissPopover:", "contents": "popoverControllerDidDismissPopover:(${1:UIPopoverController* popoverController})" },  
    { "trigger": "popoverControllerDidDismissPopover:", "contents": "popoverControllerDidDismissPopover:(${1:UIPopoverController* popoverController})" },  
    { "trigger": "popoverControllerShouldDismissPopover:", "contents": "popoverControllerShouldDismissPopover:(${1:UIPopoverController* popoverController})" },  
    { "trigger": "popoverControllerShouldDismissPopover:", "contents": "popoverControllerShouldDismissPopover:(${1:UIPopoverController* popoverController})" },  
    { "trigger": "popoverLayoutMargins" },  
    { "trigger": "port" },  
    { "trigger": "port" },  
    { "trigger": "port" },  
    { "trigger": "port" },  
    { "trigger": "portList" },  
    { "trigger": "ports" },  
    { "trigger": "position" },  
    { "trigger": "position" },  
    { "trigger": "position" },  
    { "trigger": "positionAdjustmentForSearchBarIcon:", "contents": "positionAdjustmentForSearchBarIcon:(${1:UISearchBarIcon icon})" },  
    { "trigger": "positionFromPosition:inDirection:offset:", "contents": "positionFromPosition:inDirection:offset:(${1:UITextPosition* position}, inDirection:${2:UITextLayoutDirection direction}, offset:${3:NSInteger offset})" },  
    { "trigger": "positionFromPosition:inDirection:offset:", "contents": "positionFromPosition:inDirection:offset:(${1:UITextPosition* position}, inDirection:${2:UITextLayoutDirection direction}, offset:${3:NSInteger offset})" },  
    { "trigger": "positionFromPosition:offset:", "contents": "positionFromPosition:offset:(${1:UITextPosition* position}, offset:${2:NSInteger offset})" },  
    { "trigger": "positionFromPosition:offset:", "contents": "positionFromPosition:offset:(${1:UITextPosition* position}, offset:${2:NSInteger offset})" },  
    { "trigger": "positionFromPosition:toBoundary:inDirection:", "contents": "positionFromPosition:toBoundary:inDirection:(${1:UITextPosition* position}, toBoundary:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "positionFromPosition:toBoundary:inDirection:", "contents": "positionFromPosition:toBoundary:inDirection:(${1:UITextPosition* position}, toBoundary:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "positionWithinRange:atCharacterOffset:", "contents": "positionWithinRange:atCharacterOffset:(${1:UITextRange* range}, atCharacterOffset:${2:NSInteger offset})" },  
    { "trigger": "positionWithinRange:atCharacterOffset:", "contents": "positionWithinRange:atCharacterOffset:(${1:UITextRange* range}, atCharacterOffset:${2:NSInteger offset})" },  
    { "trigger": "positionWithinRange:farthestInDirection:", "contents": "positionWithinRange:farthestInDirection:(${1:UITextRange* range}, farthestInDirection:${2:UITextLayoutDirection direction})" },  
    { "trigger": "positionWithinRange:farthestInDirection:", "contents": "positionWithinRange:farthestInDirection:(${1:UITextRange* range}, farthestInDirection:${2:UITextLayoutDirection direction})" },  
    { "trigger": "positiveFormat" },  
    { "trigger": "positiveInfinitySymbol" },  
    { "trigger": "positivePrefix" },  
    { "trigger": "positiveSuffix" },  
    { "trigger": "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:", "contents": "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:(${1:NSUInteger charIndex}, scheme:${2:NSString* tagScheme}, tokenRange:${3:NSRangePointer tokenRange}, sentenceRange:${4:NSRangePointer sentenceRange}, scores:${5:NSArray** scores})" },  
    { "trigger": "possibleTitles" },  
    { "trigger": "postNotification:", "contents": "postNotification:(${1:NSNotification* notification})" },  
    { "trigger": "postNotificationName:object:", "contents": "postNotificationName:object:(${1:NSString* aName}, object:${2:id anObject})" },  
    { "trigger": "postNotificationName:object:userInfo:", "contents": "postNotificationName:object:userInfo:(${1:NSString* aName}, object:${2:id anObject}, userInfo:${3:NSDictionary* aUserInfo})" },  
    { "trigger": "postalCode" },  
    { "trigger": "posterImage" },  
    { "trigger": "precomposedStringWithCanonicalMapping" },  
    { "trigger": "precomposedStringWithCompatibilityMapping" },  
    { "trigger": "predicate" },  
    { "trigger": "predicate" },  
    { "trigger": "predicate" },  
    { "trigger": "predicateForEventsWithStartDate:endDate:calendars:", "contents": "predicateForEventsWithStartDate:endDate:calendars:(${1:NSDate* startDate}, endDate:${2:NSDate* endDate}, calendars:${3:NSArray* calendars})" },  
    { "trigger": "predicateFormat" },  
    { "trigger": "predicateOperatorType" },  
    { "trigger": "predicateWithSubstitutionVariables:", "contents": "predicateWithSubstitutionVariables:(${1:NSDictionary* variables})" },  
    { "trigger": "preferredFilename" },  
    { "trigger": "preferredFrameSize" },  
    { "trigger": "preferredFramesPerSecond" },  
    { "trigger": "preferredHardwareSampleRate" },  
    { "trigger": "preferredIOBufferDuration" },  
    { "trigger": "preferredLocalizations" },  
    { "trigger": "preferredMode" },  
    { "trigger": "preferredRate" },  
    { "trigger": "preferredTransform" },  
    { "trigger": "preferredTransform" },  
    { "trigger": "preferredTransform" },  
    { "trigger": "preferredVolume" },  
    { "trigger": "preferredVolume" },  
    { "trigger": "preferredVolume" },  
    { "trigger": "preflightAndReturnError:", "contents": "preflightAndReturnError:(${1:NSError** error})" },  
    { "trigger": "prepareForDeletion" },  
    { "trigger": "prepareForDrawingPages:", "contents": "prepareForDrawingPages:(${1:NSRange range})" },  
    { "trigger": "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:", "contents": "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:(${1:NSArray* readingURLs}, options:${2:NSFileCoordinatorReadingOptions readingOptions}, writingItemsAtURLs:${3:NSArray* writingURLs}, options:${4:NSFileCoordinatorWritingOptions writingOptions}, error:${5:NSError** outError}, byAccessor:${6:void (^)(void (^)(void)) batchAccessor})" },  
    { "trigger": "prepareForReuse" },  
    { "trigger": "prepareForReuse" },  
    { "trigger": "prepareForSegue:sender:", "contents": "prepareForSegue:sender:(${1:UIStoryboardSegue* segue}, sender:${2:id sender})" },  
    { "trigger": "prepareToDraw" },  
    { "trigger": "prepareToDraw" },  
    { "trigger": "prepareToDraw" },  
    { "trigger": "prepareToDraw" },  
    { "trigger": "prepareToDraw" },  
    { "trigger": "prepareToPlay" },  
    { "trigger": "prepareToPlay" },  
    { "trigger": "prepareToPlay" },  
    { "trigger": "prepareToRecord" },  
    { "trigger": "prepareWithInvocationTarget:", "contents": "prepareWithInvocationTarget:(${1:id target})" },  
    { "trigger": "presentAnimated:completionHandler:", "contents": "presentAnimated:completionHandler:(${1:BOOL animated}, completionHandler:${2:UIPrintInteractionCompletionHandler completion})" },  
    { "trigger": "presentFromBarButtonItem:animated:completionHandler:", "contents": "presentFromBarButtonItem:animated:completionHandler:(${1:UIBarButtonItem* item}, animated:${2:BOOL animated}, completionHandler:${3:UIPrintInteractionCompletionHandler completion})" },  
    { "trigger": "presentFromRect:inView:animated:completionHandler:", "contents": "presentFromRect:inView:animated:completionHandler:(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated}, completionHandler:${4:UIPrintInteractionCompletionHandler completion})" },  
    { "trigger": "presentFromViewController:", "contents": "presentFromViewController:(${1:UIViewController* viewController})" },  
    { "trigger": "presentInView:", "contents": "presentInView:(${1:UIView* containerView})" },  
    { "trigger": "presentLocalNotificationNow:", "contents": "presentLocalNotificationNow:(${1:UILocalNotification* notification})" },  
    { "trigger": "presentModalViewController:animated:", "contents": "presentModalViewController:animated:(${1:UIViewController* modalViewController}, animated:${2:BOOL animated})" },  
    { "trigger": "presentMoviePlayerViewControllerAnimated:", "contents": "presentMoviePlayerViewControllerAnimated:(${1:MPMoviePlayerViewController* moviePlayerViewController})" },  
    { "trigger": "presentOpenInMenuFromBarButtonItem:animated:", "contents": "presentOpenInMenuFromBarButtonItem:animated:(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})" },  
    { "trigger": "presentOpenInMenuFromRect:inView:animated:", "contents": "presentOpenInMenuFromRect:inView:animated:(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated})" },  
    { "trigger": "presentOptionsMenuFromBarButtonItem:animated:", "contents": "presentOptionsMenuFromBarButtonItem:animated:(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})" },  
    { "trigger": "presentOptionsMenuFromRect:inView:animated:", "contents": "presentOptionsMenuFromRect:inView:animated:(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated})" },  
    { "trigger": "presentPopoverFromBarButtonItem:permittedArrowDirections:animated:", "contents": "presentPopoverFromBarButtonItem:permittedArrowDirections:animated:(${1:UIBarButtonItem* item}, permittedArrowDirections:${2:UIPopoverArrowDirection arrowDirections}, animated:${3:BOOL animated})" },  
    { "trigger": "presentPopoverFromRect:inView:permittedArrowDirections:animated:", "contents": "presentPopoverFromRect:inView:permittedArrowDirections:animated:(${1:CGRect rect}, inView:${2:UIView* view}, permittedArrowDirections:${3:UIPopoverArrowDirection arrowDirections}, animated:${4:BOOL animated})" },  
    { "trigger": "presentPreviewAnimated:", "contents": "presentPreviewAnimated:(${1:BOOL animated})" },  
    { "trigger": "presentRenderbuffer:", "contents": "presentRenderbuffer:(${1:NSUInteger target})" },  
    { "trigger": "presentViewController:animated:completion:", "contents": "presentViewController:animated:completion:(${1:UIViewController* viewControllerToPresent}, animated:${2:BOOL flag}, completion:${3:void (^)(void) completion})" },  
    { "trigger": "presentationLayer" },  
    { "trigger": "presentationSize" },  
    { "trigger": "presentedItemDidChange" },  
    { "trigger": "presentedItemDidChange" },  
    { "trigger": "presentedItemDidGainVersion:", "contents": "presentedItemDidGainVersion:(${1:NSFileVersion* version})" },  
    { "trigger": "presentedItemDidGainVersion:", "contents": "presentedItemDidGainVersion:(${1:NSFileVersion* version})" },  
    { "trigger": "presentedItemDidLoseVersion:", "contents": "presentedItemDidLoseVersion:(${1:NSFileVersion* version})" },  
    { "trigger": "presentedItemDidLoseVersion:", "contents": "presentedItemDidLoseVersion:(${1:NSFileVersion* version})" },  
    { "trigger": "presentedItemDidMoveToURL:", "contents": "presentedItemDidMoveToURL:(${1:NSURL* newURL})" },  
    { "trigger": "presentedItemDidMoveToURL:", "contents": "presentedItemDidMoveToURL:(${1:NSURL* newURL})" },  
    { "trigger": "presentedItemDidResolveConflictVersion:", "contents": "presentedItemDidResolveConflictVersion:(${1:NSFileVersion* version})" },  
    { "trigger": "presentedItemDidResolveConflictVersion:", "contents": "presentedItemDidResolveConflictVersion:(${1:NSFileVersion* version})" },  
    { "trigger": "presentedItemOperationQueue" },  
    { "trigger": "presentedItemOperationQueue" },  
    { "trigger": "presentedItemURL" },  
    { "trigger": "presentedItemURL" },  
    { "trigger": "presentedSubitemAtURL:didGainVersion:", "contents": "presentedSubitemAtURL:didGainVersion:(${1:NSURL* url}, didGainVersion:${2:NSFileVersion* version})" },  
    { "trigger": "presentedSubitemAtURL:didGainVersion:", "contents": "presentedSubitemAtURL:didGainVersion:(${1:NSURL* url}, didGainVersion:${2:NSFileVersion* version})" },  
    { "trigger": "presentedSubitemAtURL:didLoseVersion:", "contents": "presentedSubitemAtURL:didLoseVersion:(${1:NSURL* url}, didLoseVersion:${2:NSFileVersion* version})" },  
    { "trigger": "presentedSubitemAtURL:didLoseVersion:", "contents": "presentedSubitemAtURL:didLoseVersion:(${1:NSURL* url}, didLoseVersion:${2:NSFileVersion* version})" },  
    { "trigger": "presentedSubitemAtURL:didMoveToURL:", "contents": "presentedSubitemAtURL:didMoveToURL:(${1:NSURL* oldURL}, didMoveToURL:${2:NSURL* newURL})" },  
    { "trigger": "presentedSubitemAtURL:didMoveToURL:", "contents": "presentedSubitemAtURL:didMoveToURL:(${1:NSURL* oldURL}, didMoveToURL:${2:NSURL* newURL})" },  
    { "trigger": "presentedSubitemAtURL:didResolveConflictVersion:", "contents": "presentedSubitemAtURL:didResolveConflictVersion:(${1:NSURL* url}, didResolveConflictVersion:${2:NSFileVersion* version})" },  
    { "trigger": "presentedSubitemAtURL:didResolveConflictVersion:", "contents": "presentedSubitemAtURL:didResolveConflictVersion:(${1:NSURL* url}, didResolveConflictVersion:${2:NSFileVersion* version})" },  
    { "trigger": "presentedSubitemDidAppearAtURL:", "contents": "presentedSubitemDidAppearAtURL:(${1:NSURL* url})" },  
    { "trigger": "presentedSubitemDidAppearAtURL:", "contents": "presentedSubitemDidAppearAtURL:(${1:NSURL* url})" },  
    { "trigger": "presentedSubitemDidChangeAtURL:", "contents": "presentedSubitemDidChangeAtURL:(${1:NSURL* url})" },  
    { "trigger": "presentedSubitemDidChangeAtURL:", "contents": "presentedSubitemDidChangeAtURL:(${1:NSURL* url})" },  
    { "trigger": "presentedViewController" },  
    { "trigger": "presentingViewController" },  
    { "trigger": "presentsWithGesture" },  
    { "trigger": "preservesDepth" },  
    { "trigger": "preservesDepth" },  
    { "trigger": "presetName" },  
    { "trigger": "previewControllerDidDismiss:", "contents": "previewControllerDidDismiss:(${1:QLPreviewController* controller})" },  
    { "trigger": "previewControllerDidDismiss:", "contents": "previewControllerDidDismiss:(${1:QLPreviewController* controller})" },  
    { "trigger": "previewControllerWillDismiss:", "contents": "previewControllerWillDismiss:(${1:QLPreviewController* controller})" },  
    { "trigger": "previewControllerWillDismiss:", "contents": "previewControllerWillDismiss:(${1:QLPreviewController* controller})" },  
    { "trigger": "previewController:frameForPreviewItem:inSourceView:", "contents": "previewController:frameForPreviewItem:inSourceView:(${1:QLPreviewController* controller}, frameForPreviewItem:${2:id item}, inSourceView:${3:UIView** view})" },  
    { "trigger": "previewController:frameForPreviewItem:inSourceView:", "contents": "previewController:frameForPreviewItem:inSourceView:(${1:QLPreviewController* controller}, frameForPreviewItem:${2:id item}, inSourceView:${3:UIView** view})" },  
    { "trigger": "previewController:previewItemAtIndex:", "contents": "previewController:previewItemAtIndex:(${1:QLPreviewController* controller}, previewItemAtIndex:${2:NSInteger index})" },  
    { "trigger": "previewController:previewItemAtIndex:", "contents": "previewController:previewItemAtIndex:(${1:QLPreviewController* controller}, previewItemAtIndex:${2:NSInteger index})" },  
    { "trigger": "previewController:shouldOpenURL:forPreviewItem:", "contents": "previewController:shouldOpenURL:forPreviewItem:(${1:QLPreviewController* controller}, shouldOpenURL:${2:NSURL* url}, forPreviewItem:${3:id item})" },  
    { "trigger": "previewController:shouldOpenURL:forPreviewItem:", "contents": "previewController:shouldOpenURL:forPreviewItem:(${1:QLPreviewController* controller}, shouldOpenURL:${2:NSURL* url}, forPreviewItem:${3:id item})" },  
    { "trigger": "previewController:transitionImageForPreviewItem:contentRect:", "contents": "previewController:transitionImageForPreviewItem:contentRect:(${1:QLPreviewController* controller}, transitionImageForPreviewItem:${2:id item}, contentRect:${3:CGRect* contentRect})" },  
    { "trigger": "previewController:transitionImageForPreviewItem:contentRect:", "contents": "previewController:transitionImageForPreviewItem:contentRect:(${1:QLPreviewController* controller}, transitionImageForPreviewItem:${2:id item}, contentRect:${3:CGRect* contentRect})" },  
    { "trigger": "previewItemTitle" },  
    { "trigger": "previewItemTitle" },  
    { "trigger": "previewItemURL" },  
    { "trigger": "previewItemURL" },  
    { "trigger": "previousFailureCount" },  
    { "trigger": "previousLocationInView:", "contents": "previousLocationInView:(${1:UIView* view})" },  
    { "trigger": "price" },  
    { "trigger": "priceLocale" },  
    { "trigger": "primaryLanguage" },  
    { "trigger": "primitiveValueForKey:", "contents": "primitiveValueForKey:(${1:NSString* key})" },  
    { "trigger": "principalClass" },  
    { "trigger": "printFormatter" },  
    { "trigger": "printFormatters" },  
    { "trigger": "printFormattersForPageAtIndex:", "contents": "printFormattersForPageAtIndex:(${1:NSInteger pageIndex})" },  
    { "trigger": "printInfo" },  
    { "trigger": "printInteractionControllerDidDismissPrinterOptions:", "contents": "printInteractionControllerDidDismissPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerDidDismissPrinterOptions:", "contents": "printInteractionControllerDidDismissPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerDidFinishJob:", "contents": "printInteractionControllerDidFinishJob:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerDidFinishJob:", "contents": "printInteractionControllerDidFinishJob:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerDidPresentPrinterOptions:", "contents": "printInteractionControllerDidPresentPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerDidPresentPrinterOptions:", "contents": "printInteractionControllerDidPresentPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerParentViewController:", "contents": "printInteractionControllerParentViewController:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerParentViewController:", "contents": "printInteractionControllerParentViewController:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerWillDismissPrinterOptions:", "contents": "printInteractionControllerWillDismissPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerWillDismissPrinterOptions:", "contents": "printInteractionControllerWillDismissPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerWillPresentPrinterOptions:", "contents": "printInteractionControllerWillPresentPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerWillPresentPrinterOptions:", "contents": "printInteractionControllerWillPresentPrinterOptions:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerWillStartJob:", "contents": "printInteractionControllerWillStartJob:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionControllerWillStartJob:", "contents": "printInteractionControllerWillStartJob:(${1:UIPrintInteractionController* printInteractionController})" },  
    { "trigger": "printInteractionController:choosePaper:", "contents": "printInteractionController:choosePaper:(${1:UIPrintInteractionController* printInteractionController}, choosePaper:${2:NSArray* paperList})" },  
    { "trigger": "printInteractionController:choosePaper:", "contents": "printInteractionController:choosePaper:(${1:UIPrintInteractionController* printInteractionController}, choosePaper:${2:NSArray* paperList})" },  
    { "trigger": "printPageRenderer" },  
    { "trigger": "printPageRenderer" },  
    { "trigger": "printPaper" },  
    { "trigger": "printRect" },  
    { "trigger": "printableRect" },  
    { "trigger": "printableRect" },  
    { "trigger": "printerID" },  
    { "trigger": "printingItem" },  
    { "trigger": "printingItems" },  
    { "trigger": "privateFrameworksPath" },  
    { "trigger": "privateFrameworksURL" },  
    { "trigger": "processIdentifier" },  
    { "trigger": "processName" },  
    { "trigger": "processPendingChanges" },  
    { "trigger": "processorCount" },  
    { "trigger": "productIdentifier" },  
    { "trigger": "productIdentifier" },  
    { "trigger": "productIdentifier" },  
    { "trigger": "products" },  
    { "trigger": "productsRequest:didReceiveResponse:", "contents": "productsRequest:didReceiveResponse:(${1:SKProductsRequest* request}, didReceiveResponse:${2:SKProductsResponse* response})" },  
    { "trigger": "productsRequest:didReceiveResponse:", "contents": "productsRequest:didReceiveResponse:(${1:SKProductsRequest* request}, didReceiveResponse:${2:SKProductsResponse* response})" },  
    { "trigger": "progress" },  
    { "trigger": "progress" },  
    { "trigger": "progressImage" },  
    { "trigger": "progressTintColor" },  
    { "trigger": "progressViewStyle" },  
    { "trigger": "projectionMatrix" },  
    { "trigger": "prompt" },  
    { "trigger": "prompt" },  
    { "trigger": "prompt" },  
    { "trigger": "propagatesDeletesAtEndOfEvent" },  
    { "trigger": "properties" },  
    { "trigger": "properties" },  
    { "trigger": "properties" },  
    { "trigger": "properties" },  
    { "trigger": "propertiesByName" },  
    { "trigger": "propertiesToFetch" },  
    { "trigger": "propertiesToGroupBy" },  
    { "trigger": "property" },  
    { "trigger": "propertyCache" },  
    { "trigger": "propertyForKey:", "contents": "propertyForKey:(${1:NSString* key})" },  
    { "trigger": "propertyList" },  
    { "trigger": "propertyList" },  
    { "trigger": "propertyListFromStringsFileFormat" },  
    { "trigger": "proposedCredential" },  
    { "trigger": "protectionSpace" },  
    { "trigger": "protocol" },  
    { "trigger": "protocol" },  
    { "trigger": "protocolFamily" },  
    { "trigger": "protocolString" },  
    { "trigger": "protocolStrings" },  
    { "trigger": "providesPreciseDurationAndTiming" },  
    { "trigger": "providesPresentationContextTransitionStyle" },  
    { "trigger": "proximityState" },  
    { "trigger": "proxyType" },  
    { "trigger": "publicID" },  
    { "trigger": "publish" },  
    { "trigger": "publishWithOptions:", "contents": "publishWithOptions:(${1:NSNetServiceOptions options})" },  
    { "trigger": "purpose" },  
    { "trigger": "pushNavigationItem:animated:", "contents": "pushNavigationItem:animated:(${1:UINavigationItem* item}, animated:${2:BOOL animated})" },  
    { "trigger": "pushViewController:animated:", "contents": "pushViewController:animated:(${1:UIViewController* viewController}, animated:${2:BOOL animated})" },  
    { "trigger": "quadraticAttenuation" },  
    { "trigger": "quantity" },  
    { "trigger": "quantity" },  
    { "trigger": "quarter" },  
    { "trigger": "quarterSymbols" },  
    { "trigger": "quaternion" },  
    { "trigger": "query" },  
    { "trigger": "queryActivityWithCompletionHandler:", "contents": "queryActivityWithCompletionHandler:(${1:void (^)(NSInteger, NSError *) completionHandler})" },  
    { "trigger": "queryPlayerGroupActivity:withCompletionHandler:", "contents": "queryPlayerGroupActivity:withCompletionHandler:(${1:NSUInteger playerGroup}, withCompletionHandler:${2:void (^)(NSInteger, NSError *) completionHandler})" },  
    { "trigger": "queuePriority" },  
    { "trigger": "radius" },  
    { "trigger": "radius" },  
    { "trigger": "raise" },  
    { "trigger": "range" },  
    { "trigger": "range" },  
    { "trigger": "range" },  
    { "trigger": "rangeAtIndex:", "contents": "rangeAtIndex:(${1:NSUInteger idx})" },  
    { "trigger": "rangeEnclosingPosition:withGranularity:inDirection:", "contents": "rangeEnclosingPosition:withGranularity:inDirection:(${1:UITextPosition* position}, withGranularity:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "rangeEnclosingPosition:withGranularity:inDirection:", "contents": "rangeEnclosingPosition:withGranularity:inDirection:(${1:UITextPosition* position}, withGranularity:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})" },  
    { "trigger": "rangeOfCharacterFromSet:", "contents": "rangeOfCharacterFromSet:(${1:NSCharacterSet* aSet})" },  
    { "trigger": "rangeOfCharacterFromSet:options:", "contents": "rangeOfCharacterFromSet:options:(${1:NSCharacterSet* aSet}, options:${2:NSStringCompareOptions mask})" },  
    { "trigger": "rangeOfCharacterFromSet:options:range:", "contents": "rangeOfCharacterFromSet:options:range:(${1:NSCharacterSet* aSet}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange searchRange})" },  
    { "trigger": "rangeOfComposedCharacterSequenceAtIndex:", "contents": "rangeOfComposedCharacterSequenceAtIndex:(${1:NSUInteger index})" },  
    { "trigger": "rangeOfComposedCharacterSequencesForRange:", "contents": "rangeOfComposedCharacterSequencesForRange:(${1:NSRange range})" },  
    { "trigger": "rangeOfData:options:range:", "contents": "rangeOfData:options:range:(${1:NSData* dataToFind}, options:${2:NSDataSearchOptions mask}, range:${3:NSRange searchRange})" },  
    { "trigger": "rangeOfFirstMatchInString:options:range:", "contents": "rangeOfFirstMatchInString:options:range:(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})" },  
    { "trigger": "rangeOfMisspelledWordInString:range:startingAt:wrap:language:", "contents": "rangeOfMisspelledWordInString:range:startingAt:wrap:language:(${1:NSString* stringToCheck}, range:${2:NSRange range}, startingAt:${3:NSInteger startingOffset}, wrap:${4:BOOL wrapFlag}, language:${5:NSString* language})" },  
    { "trigger": "rangeOfString:", "contents": "rangeOfString:(${1:NSString* aString})" },  
    { "trigger": "rangeOfString:options:", "contents": "rangeOfString:options:(${1:NSString* aString}, options:${2:NSStringCompareOptions mask})" },  
    { "trigger": "rangeOfString:options:range:", "contents": "rangeOfString:options:range:(${1:NSString* aString}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange searchRange})" },  
    { "trigger": "rangeOfString:options:range:locale:", "contents": "rangeOfString:options:range:locale:(${1:NSString* aString}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange searchRange}, locale:${4:NSLocale* locale})" },  
    { "trigger": "rangeOfUnit:inUnit:forDate:", "contents": "rangeOfUnit:inUnit:forDate:(${1:NSCalendarUnit smaller}, inUnit:${2:NSCalendarUnit larger}, forDate:${3:NSDate* date})" },  
    { "trigger": "rangeOfUnit:startDate:interval:forDate:", "contents": "rangeOfUnit:startDate:interval:forDate:(${1:NSCalendarUnit unit}, startDate:${2:NSDate** datep}, interval:${3:NSTimeInterval* tip}, forDate:${4:NSDate* date})" },  
    { "trigger": "rangeValue" },  
    { "trigger": "rank" },  
    { "trigger": "rasterizationScale" },  
    { "trigger": "rate" },  
    { "trigger": "rate" },  
    { "trigger": "readAdditionalContentFromURL:error:", "contents": "readAdditionalContentFromURL:error:(${1:NSURL* absoluteURL}, error:${2:NSError** error})" },  
    { "trigger": "readDataOfLength:", "contents": "readDataOfLength:(${1:NSUInteger length})" },  
    { "trigger": "readDataToEndOfFile" },  
    { "trigger": "readFromURL:error:", "contents": "readFromURL:error:(${1:NSURL* url}, error:${2:NSError** outError})" },  
    { "trigger": "readFromURL:options:error:", "contents": "readFromURL:options:error:(${1:NSURL* url}, options:${2:NSFileWrapperReadingOptions options}, error:${3:NSError** outError})" },  
    { "trigger": "readInBackgroundAndNotify" },  
    { "trigger": "readInBackgroundAndNotifyForModes:", "contents": "readInBackgroundAndNotifyForModes:(${1:NSArray* modes})" },  
    { "trigger": "readRSSI" },  
    { "trigger": "readToEndOfFileInBackgroundAndNotify" },  
    { "trigger": "readToEndOfFileInBackgroundAndNotifyForModes:", "contents": "readToEndOfFileInBackgroundAndNotifyForModes:(${1:NSArray* modes})" },  
    { "trigger": "readValueForCharacteristic:", "contents": "readValueForCharacteristic:(${1:CBCharacteristic* characteristic})" },  
    { "trigger": "readValueForDescriptor:", "contents": "readValueForDescriptor:(${1:CBDescriptor* descriptor})" },  
    { "trigger": "readabilityHandler" },  
    { "trigger": "read:maxLength:", "contents": "read:maxLength:(${1:uint8_t* buffer}, maxLength:${2:NSUInteger len})" },  
    { "trigger": "realm" },  
    { "trigger": "reason" },  
    { "trigger": "receivedData:fromParticipantID:", "contents": "receivedData:fromParticipantID:(${1:NSData* arbitraryData}, fromParticipantID:${2:NSString* participantID})" },  
    { "trigger": "receivedRealTimeData:fromParticipantID:", "contents": "receivedRealTimeData:fromParticipantID:(${1:NSData* audio}, fromParticipantID:${2:NSString* participantID})" },  
    { "trigger": "receivesCredentialSecurely" },  
    { "trigger": "recipients" },  
    { "trigger": "record" },  
    { "trigger": "recordForDuration:", "contents": "recordForDuration:(${1:NSTimeInterval duration})" },  
    { "trigger": "recordedDuration" },  
    { "trigger": "recordedFileSize" },  
    { "trigger": "recoveryAttempter" },  
    { "trigger": "rectForFooterInSection:", "contents": "rectForFooterInSection:(${1:NSInteger section})" },  
    { "trigger": "rectForHeaderInSection:", "contents": "rectForHeaderInSection:(${1:NSInteger section})" },  
    { "trigger": "rectForMapRect:", "contents": "rectForMapRect:(${1:MKMapRect mapRect})" },  
    { "trigger": "rectForPageAtIndex:", "contents": "rectForPageAtIndex:(${1:NSInteger pageIndex})" },  
    { "trigger": "rectForRowAtIndexPath:", "contents": "rectForRowAtIndexPath:(${1:NSIndexPath* indexPath})" },  
    { "trigger": "rectForSection:", "contents": "rectForSection:(${1:NSInteger section})" },  
    { "trigger": "recurrenceEnd" },  
    { "trigger": "recurrenceRule" },  
    { "trigger": "recurrenceRules" },  
    { "trigger": "red" },  
    { "trigger": "redRange" },  
    { "trigger": "redSpeed" },  
    { "trigger": "redo" },  
    { "trigger": "redo" },  
    { "trigger": "redoActionIsDiscardable" },  
    { "trigger": "redoActionName" },  
    { "trigger": "redoMenuItemTitle" },  
    { "trigger": "redoMenuTitleForUndoActionName:", "contents": "redoMenuTitleForUndoActionName:(${1:NSString* actionName})" },  
    { "trigger": "referenceObjectForObjectID:", "contents": "referenceObjectForObjectID:(${1:NSManagedObjectID* objectID})" },  
    { "trigger": "referenceObjectForObjectID:", "contents": "referenceObjectForObjectID:(${1:NSManagedObjectID* objectID})" },  
    { "trigger": "referenceRestrictions" },  
    { "trigger": "refresh" },  
    { "trigger": "refresh" },  
    { "trigger": "refreshCurrentPreviewItem" },  
    { "trigger": "refreshObject:mergeChanges:", "contents": "refreshObject:mergeChanges:(${1:NSManagedObject* object}, mergeChanges:${2:BOOL flag})" },  
    { "trigger": "refreshSourcesIfNecessary" },  
    { "trigger": "region" },  
    { "trigger": "region" },  
    { "trigger": "regionThatFits:", "contents": "regionThatFits:(${1:MKCoordinateRegion region})" },  
    { "trigger": "registerDefaults:", "contents": "registerDefaults:(${1:NSDictionary* registrationDictionary})" },  
    { "trigger": "registerForLocalNotifications" },  
    { "trigger": "registerForRemoteNotificationTypes:", "contents": "registerForRemoteNotificationTypes:(${1:UIRemoteNotificationType types})" },  
    { "trigger": "registerNib:forCellReuseIdentifier:", "contents": "registerNib:forCellReuseIdentifier:(${1:UINib* nib}, forCellReuseIdentifier:${2:NSString* identifier})" },  
    { "trigger": "registerUndoWithTarget:selector:object:", "contents": "registerUndoWithTarget:selector:object:(${1:id target}, selector:${2:SEL selector}, object:${3:id anObject})" },  
    { "trigger": "registeredObjects" },  
    { "trigger": "regularExpression" },  
    { "trigger": "regularFileContents" },  
    { "trigger": "rejectProtectionSpaceAndContinueWithChallenge:", "contents": "rejectProtectionSpaceAndContinueWithChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "rejectProtectionSpaceAndContinueWithChallenge:", "contents": "rejectProtectionSpaceAndContinueWithChallenge:(${1:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "relationshipKeyPathsForPrefetching" },  
    { "trigger": "relationshipMappings" },  
    { "trigger": "relationshipsByName" },  
    { "trigger": "relationshipsWithDestinationEntity:", "contents": "relationshipsWithDestinationEntity:(${1:NSEntityDescription* entity})" },  
    { "trigger": "relativeOffset" },  
    { "trigger": "relativePath" },  
    { "trigger": "relativeString" },  
    { "trigger": "release" },  
    { "trigger": "release" },  
    { "trigger": "relinquishPresentedItemToReader:", "contents": "relinquishPresentedItemToReader:(${1:void (^)(void (^)(void)) reader})" },  
    { "trigger": "relinquishPresentedItemToReader:", "contents": "relinquishPresentedItemToReader:(${1:void (^)(void (^)(void)) reader})" },  
    { "trigger": "relinquishPresentedItemToWriter:", "contents": "relinquishPresentedItemToWriter:(${1:void (^)(void (^)(void)) writer})" },  
    { "trigger": "relinquishPresentedItemToWriter:", "contents": "relinquishPresentedItemToWriter:(${1:void (^)(void (^)(void)) writer})" },  
    { "trigger": "reload" },  
    { "trigger": "reloadAllComponents" },  
    { "trigger": "reloadComponent:", "contents": "reloadComponent:(${1:NSInteger component})" },  
    { "trigger": "reloadData" },  
    { "trigger": "reloadData" },  
    { "trigger": "reloadInputViews" },  
    { "trigger": "reloadRowsAtIndexPaths:withRowAnimation:", "contents": "reloadRowsAtIndexPaths:withRowAnimation:(${1:NSArray* indexPaths}, withRowAnimation:${2:UITableViewRowAnimation animation})" },  
    { "trigger": "reloadSectionIndexTitles" },  
    { "trigger": "reloadSections:withRowAnimation:", "contents": "reloadSections:withRowAnimation:(${1:NSIndexSet* sections}, withRowAnimation:${2:UITableViewRowAnimation animation})" },  
    { "trigger": "remoteControlReceivedWithEvent:", "contents": "remoteControlReceivedWithEvent:(${1:UIEvent* event})" },  
    { "trigger": "remoteParticipantVolume" },  
    { "trigger": "removeAlarm:", "contents": "removeAlarm:(${1:EKAlarm* alarm})" },  
    { "trigger": "removeAllActions" },  
    { "trigger": "removeAllActionsWithTarget:", "contents": "removeAllActionsWithTarget:(${1:id target})" },  
    { "trigger": "removeAllAnimations" },  
    { "trigger": "removeAllCachedResponses" },  
    { "trigger": "removeAllImages" },  
    { "trigger": "removeAllIndexes" },  
    { "trigger": "removeAllItems" },  
    { "trigger": "removeAllObjects" },  
    { "trigger": "removeAllObjects" },  
    { "trigger": "removeAllObjects" },  
    { "trigger": "removeAllObjects" },  
    { "trigger": "removeAllObjects" },  
    { "trigger": "removeAllPoints" },  
    { "trigger": "removeAllSegments" },  
    { "trigger": "removeAllURLs" },  
    { "trigger": "removeAndReturnError:", "contents": "removeAndReturnError:(${1:NSError** outError})" },  
    { "trigger": "removeAnimationForKey:", "contents": "removeAnimationForKey:(${1:NSString* key})" },  
    { "trigger": "removeAnnotation:", "contents": "removeAnnotation:(${1:id annotation})" },  
    { "trigger": "removeAnnotations:", "contents": "removeAnnotations:(${1:NSArray* annotations})" },  
    { "trigger": "removeAttribute:range:", "contents": "removeAttribute:range:(${1:NSString* name}, range:${2:NSRange range})" },  
    { "trigger": "removeCachedResponseForRequest:", "contents": "removeCachedResponseForRequest:(${1:NSURLRequest* request})" },  
    { "trigger": "removeCalendar:commit:error:", "contents": "removeCalendar:commit:error:(${1:EKCalendar* calendar}, commit:${2:BOOL commit}, error:${3:NSError** error})" },  
    { "trigger": "removeCharactersInRange:", "contents": "removeCharactersInRange:(${1:NSRange aRange})" },  
    { "trigger": "removeCharactersInString:", "contents": "removeCharactersInString:(${1:NSString* aString})" },  
    { "trigger": "removeConnection:", "contents": "removeConnection:(${1:MIDINetworkConnection* connection})" },  
    { "trigger": "removeContact:", "contents": "removeContact:(${1:MIDINetworkHost* contact})" },  
    { "trigger": "removeCredential:forProtectionSpace:", "contents": "removeCredential:forProtectionSpace:(${1:NSURLCredential* credential}, forProtectionSpace:${2:NSURLProtectionSpace* space})" },  
    { "trigger": "removeDependency:", "contents": "removeDependency:(${1:NSOperation* op})" },  
    { "trigger": "removeEvent:span:commit:error:", "contents": "removeEvent:span:commit:error:(${1:EKEvent* event}, span:${2:EKSpan span}, commit:${3:BOOL commit}, error:${4:NSError** error})" },  
    { "trigger": "removeEvent:span:error:", "contents": "removeEvent:span:error:(${1:EKEvent* event}, span:${2:EKSpan span}, error:${3:NSError** error})" },  
    { "trigger": "removeFileWrapper:", "contents": "removeFileWrapper:(${1:NSFileWrapper* child})" },  
    { "trigger": "removeFilterPredicate:", "contents": "removeFilterPredicate:(${1:MPMediaPredicate* predicate})" },  
    { "trigger": "removeFromParentViewController" },  
    { "trigger": "removeFromPrintPageRenderer" },  
    { "trigger": "removeFromRunLoop:forMode:", "contents": "removeFromRunLoop:forMode:(${1:NSRunLoop* runloop}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeFromRunLoop:forMode:", "contents": "removeFromRunLoop:forMode:(${1:NSRunLoop* runLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeFromRunLoop:forMode:", "contents": "removeFromRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeFromRunLoop:forMode:", "contents": "removeFromRunLoop:forMode:(${1:NSRunLoop* runLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeFromRunLoop:forMode:", "contents": "removeFromRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeFromRunLoop:forMode:", "contents": "removeFromRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeFromSuperlayer" },  
    { "trigger": "removeFromSuperview" },  
    { "trigger": "removeGestureRecognizer:", "contents": "removeGestureRecognizer:(${1:UIGestureRecognizer* gestureRecognizer})" },  
    { "trigger": "removeIndex:", "contents": "removeIndex:(${1:NSUInteger value})" },  
    { "trigger": "removeIndexes:", "contents": "removeIndexes:(${1:NSIndexSet* indexSet})" },  
    { "trigger": "removeIndexesInRange:", "contents": "removeIndexesInRange:(${1:NSRange range})" },  
    { "trigger": "removeInput:", "contents": "removeInput:(${1:AVCaptureInput* input})" },  
    { "trigger": "removeIssue:", "contents": "removeIssue:(${1:NKIssue* issue})" },  
    { "trigger": "removeItem:", "contents": "removeItem:(${1:AVPlayerItem* item})" },  
    { "trigger": "removeItemAtPath:error:", "contents": "removeItemAtPath:error:(${1:NSString* path}, error:${2:NSError** error})" },  
    { "trigger": "removeItemAtURL:error:", "contents": "removeItemAtURL:error:(${1:NSURL* URL}, error:${2:NSError** error})" },  
    { "trigger": "removeLastObject" },  
    { "trigger": "removeObject:", "contents": "removeObject:(${1:id anObject})" },  
    { "trigger": "removeObject:", "contents": "removeObject:(${1:id object})" },  
    { "trigger": "removeObject:", "contents": "removeObject:(${1:id object})" },  
    { "trigger": "removeObject:", "contents": "removeObject:(${1:id object})" },  
    { "trigger": "removeObjectAtIndex:", "contents": "removeObjectAtIndex:(${1:NSUInteger idx})" },  
    { "trigger": "removeObjectAtIndex:", "contents": "removeObjectAtIndex:(${1:NSUInteger index})" },  
    { "trigger": "removeObjectForKey:", "contents": "removeObjectForKey:(${1:NSString* aKey})" },  
    { "trigger": "removeObjectForKey:", "contents": "removeObjectForKey:(${1:id aKey})" },  
    { "trigger": "removeObjectForKey:", "contents": "removeObjectForKey:(${1:id key})" },  
    { "trigger": "removeObjectForKey:", "contents": "removeObjectForKey:(${1:NSString* defaultName})" },  
    { "trigger": "removeObjectIdenticalTo:", "contents": "removeObjectIdenticalTo:(${1:id anObject})" },  
    { "trigger": "removeObjectIdenticalTo:inRange:", "contents": "removeObjectIdenticalTo:inRange:(${1:id anObject}, inRange:${2:NSRange range})" },  
    { "trigger": "removeObject:inRange:", "contents": "removeObject:inRange:(${1:id anObject}, inRange:${2:NSRange range})" },  
    { "trigger": "removeObjectsAtIndexes:", "contents": "removeObjectsAtIndexes:(${1:NSIndexSet* indexes})" },  
    { "trigger": "removeObjectsAtIndexes:", "contents": "removeObjectsAtIndexes:(${1:NSIndexSet* indexes})" },  
    { "trigger": "removeObjectsForKeys:", "contents": "removeObjectsForKeys:(${1:NSArray* keyArray})" },  
    { "trigger": "removeObjectsFromIndices:numIndices:", "contents": "removeObjectsFromIndices:numIndices:(${1:NSUInteger* indices}, numIndices:${2:NSUInteger cnt})" },  
    { "trigger": "removeObjectsInArray:", "contents": "removeObjectsInArray:(${1:NSArray* otherArray})" },  
    { "trigger": "removeObjectsInArray:", "contents": "removeObjectsInArray:(${1:NSArray* array})" },  
    { "trigger": "removeObjectsInRange:", "contents": "removeObjectsInRange:(${1:NSRange range})" },  
    { "trigger": "removeObjectsInRange:", "contents": "removeObjectsInRange:(${1:NSRange range})" },  
    { "trigger": "removeObserver:", "contents": "removeObserver:(${1:id observer})" },  
    { "trigger": "removeObserver:forKeyPath:", "contents": "removeObserver:forKeyPath:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "removeObserver:forKeyPath:", "contents": "removeObserver:forKeyPath:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "removeObserver:forKeyPath:", "contents": "removeObserver:forKeyPath:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "removeObserver:forKeyPath:", "contents": "removeObserver:forKeyPath:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "removeObserver:forKeyPath:", "contents": "removeObserver:forKeyPath:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "removeObserver:forKeyPath:context:", "contents": "removeObserver:forKeyPath:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, context:${3:void* context})" },  
    { "trigger": "removeObserver:forKeyPath:context:", "contents": "removeObserver:forKeyPath:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, context:${3:void* context})" },  
    { "trigger": "removeObserver:forKeyPath:context:", "contents": "removeObserver:forKeyPath:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, context:${3:void* context})" },  
    { "trigger": "removeObserver:forKeyPath:context:", "contents": "removeObserver:forKeyPath:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, context:${3:void* context})" },  
    { "trigger": "removeObserver:forKeyPath:context:", "contents": "removeObserver:forKeyPath:context:(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, context:${3:void* context})" },  
    { "trigger": "removeObserver:fromObjectsAtIndexes:forKeyPath:", "contents": "removeObserver:fromObjectsAtIndexes:forKeyPath:(${1:NSObject* observer}, fromObjectsAtIndexes:${2:NSIndexSet* indexes}, forKeyPath:${3:NSString* keyPath})" },  
    { "trigger": "removeObserver:fromObjectsAtIndexes:forKeyPath:context:", "contents": "removeObserver:fromObjectsAtIndexes:forKeyPath:context:(${1:NSObject* observer}, fromObjectsAtIndexes:${2:NSIndexSet* indexes}, forKeyPath:${3:NSString* keyPath}, context:${4:void* context})" },  
    { "trigger": "removeObserver:name:object:", "contents": "removeObserver:name:object:(${1:id observer}, name:${2:NSString* aName}, object:${3:id anObject})" },  
    { "trigger": "removeOutput:", "contents": "removeOutput:(${1:AVCaptureOutput* output})" },  
    { "trigger": "removeOverlay:", "contents": "removeOverlay:(${1:id overlay})" },  
    { "trigger": "removeOverlays:", "contents": "removeOverlays:(${1:NSArray* overlays})" },  
    { "trigger": "removePersistentDomainForName:", "contents": "removePersistentDomainForName:(${1:NSString* domainName})" },  
    { "trigger": "removePersistentStore:error:", "contents": "removePersistentStore:error:(${1:NSPersistentStore* store}, error:${2:NSError** error})" },  
    { "trigger": "removePort:forMode:", "contents": "removePort:forMode:(${1:NSPort* aPort}, forMode:${2:NSString* mode})" },  
    { "trigger": "removeRecurrenceRule:", "contents": "removeRecurrenceRule:(${1:EKRecurrenceRule* rule})" },  
    { "trigger": "removeSegmentAtIndex:animated:", "contents": "removeSegmentAtIndex:animated:(${1:NSUInteger segment}, animated:${2:BOOL animated})" },  
    { "trigger": "removeSuiteNamed:", "contents": "removeSuiteNamed:(${1:NSString* suiteName})" },  
    { "trigger": "removeTarget:action:", "contents": "removeTarget:action:(${1:id target}, action:${2:SEL action})" },  
    { "trigger": "removeTarget:action:forControlEvents:", "contents": "removeTarget:action:forControlEvents:(${1:id target}, action:${2:SEL action}, forControlEvents:${3:UIControlEvents controlEvents})" },  
    { "trigger": "removeTimeObserver:", "contents": "removeTimeObserver:(${1:id observer})" },  
    { "trigger": "removeTimeRange:", "contents": "removeTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "removeTimeRange:", "contents": "removeTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "removeTrack:", "contents": "removeTrack:(${1:AVCompositionTrack* track})" },  
    { "trigger": "removeTransactionObserver:", "contents": "removeTransactionObserver:(${1:id observer})" },  
    { "trigger": "removeVolatileDomainForName:", "contents": "removeVolatileDomainForName:(${1:NSString* domainName})" },  
    { "trigger": "removeWithCompletionHandler:", "contents": "removeWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "renamingIdentifier" },  
    { "trigger": "renamingIdentifier" },  
    { "trigger": "renderInContext:", "contents": "renderInContext:(${1:CGContextRef ctx})" },  
    { "trigger": "renderMode" },  
    { "trigger": "renderScale" },  
    { "trigger": "renderScale" },  
    { "trigger": "renderSize" },  
    { "trigger": "renderSize" },  
    { "trigger": "renderbufferStorage:fromDrawable:", "contents": "renderbufferStorage:fromDrawable:(${1:NSUInteger target}, fromDrawable:${2:id drawable})" },  
    { "trigger": "render:toBitmap:rowBytes:bounds:format:colorSpace:", "contents": "render:toBitmap:rowBytes:bounds:format:colorSpace:(${1:CIImage* im}, toBitmap:${2:void* data}, rowBytes:${3:ptrdiff_t rb}, bounds:${4:CGRect r}, format:${5:CIFormat f}, colorSpace:${6:CGColorSpaceRef cs})" },  
    { "trigger": "render:toCVPixelBuffer:", "contents": "render:toCVPixelBuffer:(${1:CIImage* image}, toCVPixelBuffer:${2:CVPixelBufferRef buffer})" },  
    { "trigger": "render:toCVPixelBuffer:bounds:colorSpace:", "contents": "render:toCVPixelBuffer:bounds:colorSpace:(${1:CIImage* image}, toCVPixelBuffer:${2:CVPixelBufferRef buffer}, bounds:${3:CGRect r}, colorSpace:${4:CGColorSpaceRef cs})" },  
    { "trigger": "repeatCalendar" },  
    { "trigger": "repeatCount" },  
    { "trigger": "repeatCount" },  
    { "trigger": "repeatDuration" },  
    { "trigger": "repeatDuration" },  
    { "trigger": "repeatInterval" },  
    { "trigger": "repeatMode" },  
    { "trigger": "repeatMode" },  
    { "trigger": "replaceBytesInRange:withBytes:", "contents": "replaceBytesInRange:withBytes:(${1:NSRange range}, withBytes:${2:void* bytes})" },  
    { "trigger": "replaceBytesInRange:withBytes:length:", "contents": "replaceBytesInRange:withBytes:length:(${1:NSRange range}, withBytes:${2:void* replacementBytes}, length:${3:NSUInteger replacementLength})" },  
    { "trigger": "replaceCharactersInRange:withAttributedString:", "contents": "replaceCharactersInRange:withAttributedString:(${1:NSRange range}, withAttributedString:${2:NSAttributedString* attrString})" },  
    { "trigger": "replaceCharactersInRange:withString:", "contents": "replaceCharactersInRange:withString:(${1:NSRange range}, withString:${2:NSString* str})" },  
    { "trigger": "replaceCharactersInRange:withString:", "contents": "replaceCharactersInRange:withString:(${1:NSRange range}, withString:${2:NSString* aString})" },  
    { "trigger": "replaceCurrentItemWithPlayerItem:", "contents": "replaceCurrentItemWithPlayerItem:(${1:AVPlayerItem* item})" },  
    { "trigger": "replaceItemAtURL:options:error:", "contents": "replaceItemAtURL:options:error:(${1:NSURL* url}, options:${2:NSFileVersionReplacingOptions options}, error:${3:NSError** error})" },  
    { "trigger": "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", "contents": "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:(${1:NSURL* originalItemURL}, withItemAtURL:${2:NSURL* newItemURL}, backupItemName:${3:NSString* backupItemName}, options:${4:NSFileManagerItemReplacementOptions options}, resultingItemURL:${5:NSURL** resultingURL}, error:${6:NSError** error})" },  
    { "trigger": "replaceMatchesInString:options:range:withTemplate:", "contents": "replaceMatchesInString:options:range:withTemplate:(${1:NSMutableString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range}, withTemplate:${4:NSString* templ})" },  
    { "trigger": "replaceObjectAtIndex:withObject:", "contents": "replaceObjectAtIndex:withObject:(${1:NSUInteger idx}, withObject:${2:id object})" },  
    { "trigger": "replaceObjectAtIndex:withObject:", "contents": "replaceObjectAtIndex:withObject:(${1:NSUInteger index}, withObject:${2:id anObject})" },  
    { "trigger": "replaceObjectsAtIndexes:withObjects:", "contents": "replaceObjectsAtIndexes:withObjects:(${1:NSIndexSet* indexes}, withObjects:${2:NSArray* objects})" },  
    { "trigger": "replaceObjectsAtIndexes:withObjects:", "contents": "replaceObjectsAtIndexes:withObjects:(${1:NSIndexSet* indexes}, withObjects:${2:NSArray* objects})" },  
    { "trigger": "replaceObjectsInRange:withObjectsFromArray:", "contents": "replaceObjectsInRange:withObjectsFromArray:(${1:NSRange range}, withObjectsFromArray:${2:NSArray* otherArray})" },  
    { "trigger": "replaceObjectsInRange:withObjectsFromArray:range:", "contents": "replaceObjectsInRange:withObjectsFromArray:range:(${1:NSRange range}, withObjectsFromArray:${2:NSArray* otherArray}, range:${3:NSRange otherRange})" },  
    { "trigger": "replaceObjectsInRange:withObjects:count:", "contents": "replaceObjectsInRange:withObjects:count:(${1:NSRange range}, withObjects:${2:id* objects}, count:${3:NSUInteger count})" },  
    { "trigger": "replaceOccurrencesOfString:withString:options:range:", "contents": "replaceOccurrencesOfString:withString:options:range:(${1:NSString* target}, withString:${2:NSString* replacement}, options:${3:NSStringCompareOptions options}, range:${4:NSRange searchRange})" },  
    { "trigger": "replaceRange:withText:", "contents": "replaceRange:withText:(${1:UITextRange* range}, withText:${2:NSString* text})" },  
    { "trigger": "replaceRange:withText:", "contents": "replaceRange:withText:(${1:UITextRange* range}, withText:${2:NSString* text})" },  
    { "trigger": "replaceSublayer:with:", "contents": "replaceSublayer:with:(${1:CALayer* layer}, with:${2:CALayer* layer2})" },  
    { "trigger": "replacementObjectForCoder:", "contents": "replacementObjectForCoder:(${1:NSCoder* aCoder})" },  
    { "trigger": "replacementObjectForCoder:", "contents": "replacementObjectForCoder:(${1:NSCoder* aCoder})" },  
    { "trigger": "replacementObjectForKeyedArchiver:", "contents": "replacementObjectForKeyedArchiver:(${1:NSKeyedArchiver* archiver})" },  
    { "trigger": "replacementObjectForKeyedArchiver:", "contents": "replacementObjectForKeyedArchiver:(${1:NSKeyedArchiver* archiver})" },  
    { "trigger": "replacementString" },  
    { "trigger": "replacementStringForResult:inString:offset:template:", "contents": "replacementStringForResult:inString:offset:template:(${1:NSTextCheckingResult* result}, inString:${2:NSString* string}, offset:${3:NSInteger offset}, template:${4:NSString* templ})" },  
    { "trigger": "reportAchievementWithCompletionHandler:", "contents": "reportAchievementWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "reportScoreWithCompletionHandler:", "contents": "reportScoreWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "representationForUTI:", "contents": "representationForUTI:(${1:NSString* representationUTI})" },  
    { "trigger": "representativeItem" },  
    { "trigger": "request" },  
    { "trigger": "request" },  
    { "trigger": "requestAccessToAccountsWithType:withCompletionHandler:", "contents": "requestAccessToAccountsWithType:withCompletionHandler:(${1:ACAccountType* accountType}, withCompletionHandler:${2:ACAccountStoreRequestAccessCompletionHandler handler})" },  
    { "trigger": "requestData" },  
    { "trigger": "requestData" },  
    { "trigger": "requestDidFinish:", "contents": "requestDidFinish:(${1:SKRequest* request})" },  
    { "trigger": "requestDidFinish:", "contents": "requestDidFinish:(${1:SKRequest* request})" },  
    { "trigger": "requestExpression" },  
    { "trigger": "requestMediaDataWhenReadyOnQueue:usingBlock:", "contents": "requestMediaDataWhenReadyOnQueue:usingBlock:(${1:dispatch_queue_t queue}, usingBlock:${2:void (^)(void) block})" },  
    { "trigger": "requestMethod" },  
    { "trigger": "requestThumbnailImagesAtTimes:timeOption:", "contents": "requestThumbnailImagesAtTimes:timeOption:(${1:NSArray* playbackTimes}, timeOption:${2:MPMovieTimeOption option})" },  
    { "trigger": "requestType" },  
    { "trigger": "request:didFailWithError:", "contents": "request:didFailWithError:(${1:SKRequest* request}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "request:didFailWithError:", "contents": "request:didFailWithError:(${1:SKRequest* request}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "requestedTimeToleranceAfter" },  
    { "trigger": "requestedTimeToleranceBefore" },  
    { "trigger": "requireGestureRecognizerToFail:", "contents": "requireGestureRecognizerToFail:(${1:UIGestureRecognizer* otherGestureRecognizer})" },  
    { "trigger": "requiredContentSizeIdentifiers" },  
    { "trigger": "reservedSpaceLength" },  
    { "trigger": "reset" },  
    { "trigger": "reset" },  
    { "trigger": "reset" },  
    { "trigger": "reset" },  
    { "trigger": "reset" },  
    { "trigger": "resetBytesInRange:", "contents": "resetBytesInRange:(${1:NSRange range})" },  
    { "trigger": "resignFirstResponder" },  
    { "trigger": "resignKeyWindow" },  
    { "trigger": "resizableImageWithCapInsets:", "contents": "resizableImageWithCapInsets:(${1:UIEdgeInsets capInsets})" },  
    { "trigger": "resolve" },  
    { "trigger": "resolveConflicts:error:", "contents": "resolveConflicts:error:(${1:NSArray* list}, error:${2:NSError** error})" },  
    { "trigger": "resolveWithTimeout:", "contents": "resolveWithTimeout:(${1:NSTimeInterval timeout})" },  
    { "trigger": "resourcePath" },  
    { "trigger": "resourceSpecifier" },  
    { "trigger": "resourceURL" },  
    { "trigger": "resourceValuesForKeys:error:", "contents": "resourceValuesForKeys:error:(${1:NSArray* keys}, error:${2:NSError** error})" },  
    { "trigger": "respondsToSelector:", "contents": "respondsToSelector:(${1:SEL aSelector})" },  
    { "trigger": "respondsToSelector:", "contents": "respondsToSelector:(${1:SEL aSelector})" },  
    { "trigger": "response" },  
    { "trigger": "restoreCompletedTransactions" },  
    { "trigger": "result" },  
    { "trigger": "resultAtIndex:", "contents": "resultAtIndex:(${1:NSUInteger idx})" },  
    { "trigger": "resultAtIndex:", "contents": "resultAtIndex:(${1:NSUInteger idx})" },  
    { "trigger": "resultByAdjustingRangesWithOffset:", "contents": "resultByAdjustingRangesWithOffset:(${1:NSInteger offset})" },  
    { "trigger": "resultCount" },  
    { "trigger": "resultCount" },  
    { "trigger": "resultType" },  
    { "trigger": "resultType" },  
    { "trigger": "results" },  
    { "trigger": "results" },  
    { "trigger": "resumeOnDidBecomeActive" },  
    { "trigger": "retain" },  
    { "trigger": "retain" },  
    { "trigger": "retainArguments" },  
    { "trigger": "retainCount" },  
    { "trigger": "retainCount" },  
    { "trigger": "retainsRegisteredObjects" },  
    { "trigger": "retrieveConnectedPeripherals" },  
    { "trigger": "retrievePeripherals:", "contents": "retrievePeripherals:(${1:NSArray* peripheralUUIDs})" },  
    { "trigger": "returnKeyType" },  
    { "trigger": "returnKeyType" },  
    { "trigger": "returnsDistinctResults" },  
    { "trigger": "returnsObjectsAsFaults" },  
    { "trigger": "reuseIdentifier" },  
    { "trigger": "reuseIdentifier" },  
    { "trigger": "reverseGeocodeLocation:completionHandler:", "contents": "reverseGeocodeLocation:completionHandler:(${1:CLLocation* location}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})" },  
    { "trigger": "reverseGeocoder:didFailWithError:", "contents": "reverseGeocoder:didFailWithError:(${1:MKReverseGeocoder* geocoder}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "reverseGeocoder:didFailWithError:", "contents": "reverseGeocoder:didFailWithError:(${1:MKReverseGeocoder* geocoder}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "reverseGeocoder:didFindPlacemark:", "contents": "reverseGeocoder:didFindPlacemark:(${1:MKReverseGeocoder* geocoder}, didFindPlacemark:${2:MKPlacemark* placemark})" },  
    { "trigger": "reverseGeocoder:didFindPlacemark:", "contents": "reverseGeocoder:didFindPlacemark:(${1:MKReverseGeocoder* geocoder}, didFindPlacemark:${2:MKPlacemark* placemark})" },  
    { "trigger": "reverseObjectEnumerator" },  
    { "trigger": "reverseObjectEnumerator" },  
    { "trigger": "reversePlaybackEndTime" },  
    { "trigger": "reverseTransformedValue:", "contents": "reverseTransformedValue:(${1:id value})" },  
    { "trigger": "reversedOrderedSet" },  
    { "trigger": "reversedSortDescriptor" },  
    { "trigger": "reversesTitleShadowWhenHighlighted" },  
    { "trigger": "revertToContentsOfURL:completionHandler:", "contents": "revertToContentsOfURL:completionHandler:(${1:NSURL* url}, completionHandler:${2:void (^)(BOOL) completionHandler})" },  
    { "trigger": "rightBarButtonItem" },  
    { "trigger": "rightBarButtonItems" },  
    { "trigger": "rightCalloutAccessoryView" },  
    { "trigger": "rightExpression" },  
    { "trigger": "rightExpression" },  
    { "trigger": "rightEyePosition" },  
    { "trigger": "rightView" },  
    { "trigger": "rightViewMode" },  
    { "trigger": "rightViewRectForBounds:", "contents": "rightViewRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "roll" },  
    { "trigger": "rollback" },  
    { "trigger": "rollback" },  
    { "trigger": "rootViewController" },  
    { "trigger": "rotatingFooterView" },  
    { "trigger": "rotatingHeaderView" },  
    { "trigger": "rotation" },  
    { "trigger": "rotationMatrix" },  
    { "trigger": "rotationMode" },  
    { "trigger": "rotationRate" },  
    { "trigger": "rotationRate" },  
    { "trigger": "roundingIncrement" },  
    { "trigger": "roundingMode" },  
    { "trigger": "roundingMode" },  
    { "trigger": "roundingMode" },  
    { "trigger": "row" },  
    { "trigger": "rowHeight" },  
    { "trigger": "rowSizeForComponent:", "contents": "rowSizeForComponent:(${1:NSInteger component})" },  
    { "trigger": "run" },  
    { "trigger": "runActionForKey:object:arguments:", "contents": "runActionForKey:object:arguments:(${1:NSString* event}, object:${2:id anObject}, arguments:${3:NSDictionary* dict})" },  
    { "trigger": "runActionForKey:object:arguments:", "contents": "runActionForKey:object:arguments:(${1:NSString* event}, object:${2:id anObject}, arguments:${3:NSDictionary* dict})" },  
    { "trigger": "runLoopModes" },  
    { "trigger": "runMode:beforeDate:", "contents": "runMode:beforeDate:(${1:NSString* mode}, beforeDate:${2:NSDate* limitDate})" },  
    { "trigger": "runUntilDate:", "contents": "runUntilDate:(${1:NSDate* limitDate})" },  
    { "trigger": "sampleBufferCallbackQueue" },  
    { "trigger": "sampleBufferCallbackQueue" },  
    { "trigger": "sampleBufferDelegate" },  
    { "trigger": "sampleBufferDelegate" },  
    { "trigger": "samplePresentationTimeForTrackTime:", "contents": "samplePresentationTimeForTrackTime:(${1:CMTime trackTime})" },  
    { "trigger": "save:", "contents": "save:(${1:NSError** error})" },  
    { "trigger": "save:", "contents": "save:(${1:NSError** error})" },  
    { "trigger": "saveAccount:withCompletionHandler:", "contents": "saveAccount:withCompletionHandler:(${1:ACAccount* account}, withCompletionHandler:${2:ACAccountStoreSaveCompletionHandler completionHandler})" },  
    { "trigger": "saveCalendar:commit:error:", "contents": "saveCalendar:commit:error:(${1:EKCalendar* calendar}, commit:${2:BOOL commit}, error:${3:NSError** error})" },  
    { "trigger": "saveEvent:span:commit:error:", "contents": "saveEvent:span:commit:error:(${1:EKEvent* event}, span:${2:EKSpan span}, commit:${3:BOOL commit}, error:${4:NSError** error})" },  
    { "trigger": "saveEvent:span:error:", "contents": "saveEvent:span:error:(${1:EKEvent* event}, span:${2:EKSpan span}, error:${3:NSError** error})" },  
    { "trigger": "savePresentedItemChangesWithCompletionHandler:", "contents": "savePresentedItemChangesWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "savePresentedItemChangesWithCompletionHandler:", "contents": "savePresentedItemChangesWithCompletionHandler:(${1:void (^)(NSError *) completionHandler})" },  
    { "trigger": "saveToURL:forSaveOperation:completionHandler:", "contents": "saveToURL:forSaveOperation:completionHandler:(${1:NSURL* url}, forSaveOperation:${2:UIDocumentSaveOperation saveOperation}, completionHandler:${3:void (^)(BOOL) completionHandler})" },  
    { "trigger": "savingFileType" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scale" },  
    { "trigger": "scaleRange" },  
    { "trigger": "scaleSpeed" },  
    { "trigger": "scaleTimeRange:toDuration:", "contents": "scaleTimeRange:toDuration:(${1:CMTimeRange timeRange}, toDuration:${2:CMTime duration})" },  
    { "trigger": "scaleTimeRange:toDuration:", "contents": "scaleTimeRange:toDuration:(${1:CMTimeRange timeRange}, toDuration:${2:CMTime duration})" },  
    { "trigger": "scalesPageToFit" },  
    { "trigger": "scalingMode" },  
    { "trigger": "scanCharactersFromSet:intoString:", "contents": "scanCharactersFromSet:intoString:(${1:NSCharacterSet* set}, intoString:${2:NSString** value})" },  
    { "trigger": "scanDecimal:", "contents": "scanDecimal:(${1:NSDecimal* dcm})" },  
    { "trigger": "scanDouble:", "contents": "scanDouble:(${1:double* value})" },  
    { "trigger": "scanFloat:", "contents": "scanFloat:(${1:float* value})" },  
    { "trigger": "scanForPeripheralsWithServices:options:", "contents": "scanForPeripheralsWithServices:options:(${1:NSArray* serviceUUIDs}, options:${2:NSDictionary* options})" },  
    { "trigger": "scanHexDouble:", "contents": "scanHexDouble:(${1:double* result})" },  
    { "trigger": "scanHexFloat:", "contents": "scanHexFloat:(${1:float* result})" },  
    { "trigger": "scanHexInt:", "contents": "scanHexInt:(${1:unsigned int* value})" },  
    { "trigger": "scanHexLongLong:", "contents": "scanHexLongLong:(${1:unsigned long long* result})" },  
    { "trigger": "scanInt:", "contents": "scanInt:(${1:int* value})" },  
    { "trigger": "scanInteger:", "contents": "scanInteger:(${1:NSInteger* value})" },  
    { "trigger": "scanLocation" },  
    { "trigger": "scanLongLong:", "contents": "scanLongLong:(${1:long long* value})" },  
    { "trigger": "scanString:intoString:", "contents": "scanString:intoString:(${1:NSString* string}, intoString:${2:NSString** value})" },  
    { "trigger": "scanUpToCharactersFromSet:intoString:", "contents": "scanUpToCharactersFromSet:intoString:(${1:NSCharacterSet* set}, intoString:${2:NSString** value})" },  
    { "trigger": "scanUpToString:intoString:", "contents": "scanUpToString:intoString:(${1:NSString* string}, intoString:${2:NSString** value})" },  
    { "trigger": "scheduleInRunLoop:forMode:", "contents": "scheduleInRunLoop:forMode:(${1:NSRunLoop* runLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "scheduleInRunLoop:forMode:", "contents": "scheduleInRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "scheduleInRunLoop:forMode:", "contents": "scheduleInRunLoop:forMode:(${1:NSRunLoop* runLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "scheduleInRunLoop:forMode:", "contents": "scheduleInRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "scheduleInRunLoop:forMode:", "contents": "scheduleInRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "scheduleInRunLoop:forMode:", "contents": "scheduleInRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "scheduleLocalNotification:", "contents": "scheduleLocalNotification:(${1:UILocalNotification* notification})" },  
    { "trigger": "scheduledLocalNotifications" },  
    { "trigger": "scheme" },  
    { "trigger": "scopeBarBackgroundImage" },  
    { "trigger": "scopeBarButtonBackgroundImageForState:", "contents": "scopeBarButtonBackgroundImageForState:(${1:UIControlState state})" },  
    { "trigger": "scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:", "contents": "scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:(${1:UIControlState leftState}, rightSegmentState:${2:UIControlState rightState})" },  
    { "trigger": "scopeBarButtonTitleTextAttributesForState:", "contents": "scopeBarButtonTitleTextAttributesForState:(${1:UIControlState state})" },  
    { "trigger": "scopeButtonTitles" },  
    { "trigger": "scores" },  
    { "trigger": "screen" },  
    { "trigger": "scrollIndicatorInsets" },  
    { "trigger": "scrollMode" },  
    { "trigger": "scrollPoint:", "contents": "scrollPoint:(${1:CGPoint p})" },  
    { "trigger": "scrollRangeToVisible:", "contents": "scrollRangeToVisible:(${1:NSRange range})" },  
    { "trigger": "scrollRectToVisible:", "contents": "scrollRectToVisible:(${1:CGRect r})" },  
    { "trigger": "scrollRectToVisible:animated:", "contents": "scrollRectToVisible:animated:(${1:CGRect rect}, animated:${2:BOOL animated})" },  
    { "trigger": "scrollToNearestSelectedRowAtScrollPosition:animated:", "contents": "scrollToNearestSelectedRowAtScrollPosition:animated:(${1:UITableViewScrollPosition scrollPosition}, animated:${2:BOOL animated})" },  
    { "trigger": "scrollToPoint:", "contents": "scrollToPoint:(${1:CGPoint p})" },  
    { "trigger": "scrollToRect:", "contents": "scrollToRect:(${1:CGRect r})" },  
    { "trigger": "scrollToRowAtIndexPath:atScrollPosition:animated:", "contents": "scrollToRowAtIndexPath:atScrollPosition:animated:(${1:NSIndexPath* indexPath}, atScrollPosition:${2:UITableViewScrollPosition scrollPosition}, animated:${3:BOOL animated})" },  
    { "trigger": "scrollView" },  
    { "trigger": "scrollViewDidEndDecelerating:", "contents": "scrollViewDidEndDecelerating:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidEndDecelerating:", "contents": "scrollViewDidEndDecelerating:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidEndDragging:willDecelerate:", "contents": "scrollViewDidEndDragging:willDecelerate:(${1:UIScrollView* scrollView}, willDecelerate:${2:BOOL decelerate})" },  
    { "trigger": "scrollViewDidEndDragging:willDecelerate:", "contents": "scrollViewDidEndDragging:willDecelerate:(${1:UIScrollView* scrollView}, willDecelerate:${2:BOOL decelerate})" },  
    { "trigger": "scrollViewDidEndScrollingAnimation:", "contents": "scrollViewDidEndScrollingAnimation:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidEndScrollingAnimation:", "contents": "scrollViewDidEndScrollingAnimation:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidEndZooming:withView:atScale:", "contents": "scrollViewDidEndZooming:withView:atScale:(${1:UIScrollView* scrollView}, withView:${2:UIView* view}, atScale:${3:float scale})" },  
    { "trigger": "scrollViewDidEndZooming:withView:atScale:", "contents": "scrollViewDidEndZooming:withView:atScale:(${1:UIScrollView* scrollView}, withView:${2:UIView* view}, atScale:${3:float scale})" },  
    { "trigger": "scrollViewDidScroll:", "contents": "scrollViewDidScroll:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidScroll:", "contents": "scrollViewDidScroll:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidScrollToTop:", "contents": "scrollViewDidScrollToTop:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidScrollToTop:", "contents": "scrollViewDidScrollToTop:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidZoom:", "contents": "scrollViewDidZoom:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewDidZoom:", "contents": "scrollViewDidZoom:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewShouldScrollToTop:", "contents": "scrollViewShouldScrollToTop:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewShouldScrollToTop:", "contents": "scrollViewShouldScrollToTop:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewWillBeginDecelerating:", "contents": "scrollViewWillBeginDecelerating:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewWillBeginDecelerating:", "contents": "scrollViewWillBeginDecelerating:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewWillBeginDragging:", "contents": "scrollViewWillBeginDragging:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewWillBeginDragging:", "contents": "scrollViewWillBeginDragging:(${1:UIScrollView* scrollView})" },  
    { "trigger": "scrollViewWillBeginZooming:withView:", "contents": "scrollViewWillBeginZooming:withView:(${1:UIScrollView* scrollView}, withView:${2:UIView* view})" },  
    { "trigger": "scrollViewWillBeginZooming:withView:", "contents": "scrollViewWillBeginZooming:withView:(${1:UIScrollView* scrollView}, withView:${2:UIView* view})" },  
    { "trigger": "scrollViewWillEndDragging:withVelocity:targetContentOffset:", "contents": "scrollViewWillEndDragging:withVelocity:targetContentOffset:(${1:UIScrollView* scrollView}, withVelocity:${2:CGPoint velocity}, targetContentOffset:${3:CGPoint* targetContentOffset})" },  
    { "trigger": "scrollViewWillEndDragging:withVelocity:targetContentOffset:", "contents": "scrollViewWillEndDragging:withVelocity:targetContentOffset:(${1:UIScrollView* scrollView}, withVelocity:${2:CGPoint velocity}, targetContentOffset:${3:CGPoint* targetContentOffset})" },  
    { "trigger": "scrollsToTop" },  
    { "trigger": "searchBar" },  
    { "trigger": "searchBarBookmarkButtonClicked:", "contents": "searchBarBookmarkButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarBookmarkButtonClicked:", "contents": "searchBarBookmarkButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarCancelButtonClicked:", "contents": "searchBarCancelButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarCancelButtonClicked:", "contents": "searchBarCancelButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarResultsListButtonClicked:", "contents": "searchBarResultsListButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarResultsListButtonClicked:", "contents": "searchBarResultsListButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarSearchButtonClicked:", "contents": "searchBarSearchButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarSearchButtonClicked:", "contents": "searchBarSearchButtonClicked:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarShouldBeginEditing:", "contents": "searchBarShouldBeginEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarShouldBeginEditing:", "contents": "searchBarShouldBeginEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarShouldEndEditing:", "contents": "searchBarShouldEndEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarShouldEndEditing:", "contents": "searchBarShouldEndEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarTextDidBeginEditing:", "contents": "searchBarTextDidBeginEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarTextDidBeginEditing:", "contents": "searchBarTextDidBeginEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarTextDidEndEditing:", "contents": "searchBarTextDidEndEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBarTextDidEndEditing:", "contents": "searchBarTextDidEndEditing:(${1:UISearchBar* searchBar})" },  
    { "trigger": "searchBar:selectedScopeButtonIndexDidChange:", "contents": "searchBar:selectedScopeButtonIndexDidChange:(${1:UISearchBar* searchBar}, selectedScopeButtonIndexDidChange:${2:NSInteger selectedScope})" },  
    { "trigger": "searchBar:selectedScopeButtonIndexDidChange:", "contents": "searchBar:selectedScopeButtonIndexDidChange:(${1:UISearchBar* searchBar}, selectedScopeButtonIndexDidChange:${2:NSInteger selectedScope})" },  
    { "trigger": "searchBar:shouldChangeTextInRange:replacementText:", "contents": "searchBar:shouldChangeTextInRange:replacementText:(${1:UISearchBar* searchBar}, shouldChangeTextInRange:${2:NSRange range}, replacementText:${3:NSString* text})" },  
    { "trigger": "searchBar:shouldChangeTextInRange:replacementText:", "contents": "searchBar:shouldChangeTextInRange:replacementText:(${1:UISearchBar* searchBar}, shouldChangeTextInRange:${2:NSRange range}, replacementText:${3:NSString* text})" },  
    { "trigger": "searchBar:textDidChange:", "contents": "searchBar:textDidChange:(${1:UISearchBar* searchBar}, textDidChange:${2:NSString* searchText})" },  
    { "trigger": "searchBar:textDidChange:", "contents": "searchBar:textDidChange:(${1:UISearchBar* searchBar}, textDidChange:${2:NSString* searchText})" },  
    { "trigger": "searchContentsController" },  
    { "trigger": "searchDisplayController" },  
    { "trigger": "searchDisplayControllerDidBeginSearch:", "contents": "searchDisplayControllerDidBeginSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerDidBeginSearch:", "contents": "searchDisplayControllerDidBeginSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerDidEndSearch:", "contents": "searchDisplayControllerDidEndSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerDidEndSearch:", "contents": "searchDisplayControllerDidEndSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerWillBeginSearch:", "contents": "searchDisplayControllerWillBeginSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerWillBeginSearch:", "contents": "searchDisplayControllerWillBeginSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerWillEndSearch:", "contents": "searchDisplayControllerWillEndSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayControllerWillEndSearch:", "contents": "searchDisplayControllerWillEndSearch:(${1:UISearchDisplayController* controller})" },  
    { "trigger": "searchDisplayController:didHideSearchResultsTableView:", "contents": "searchDisplayController:didHideSearchResultsTableView:(${1:UISearchDisplayController* controller}, didHideSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:didHideSearchResultsTableView:", "contents": "searchDisplayController:didHideSearchResultsTableView:(${1:UISearchDisplayController* controller}, didHideSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:didLoadSearchResultsTableView:", "contents": "searchDisplayController:didLoadSearchResultsTableView:(${1:UISearchDisplayController* controller}, didLoadSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:didLoadSearchResultsTableView:", "contents": "searchDisplayController:didLoadSearchResultsTableView:(${1:UISearchDisplayController* controller}, didLoadSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:didShowSearchResultsTableView:", "contents": "searchDisplayController:didShowSearchResultsTableView:(${1:UISearchDisplayController* controller}, didShowSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:didShowSearchResultsTableView:", "contents": "searchDisplayController:didShowSearchResultsTableView:(${1:UISearchDisplayController* controller}, didShowSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:shouldReloadTableForSearchScope:", "contents": "searchDisplayController:shouldReloadTableForSearchScope:(${1:UISearchDisplayController* controller}, shouldReloadTableForSearchScope:${2:NSInteger searchOption})" },  
    { "trigger": "searchDisplayController:shouldReloadTableForSearchScope:", "contents": "searchDisplayController:shouldReloadTableForSearchScope:(${1:UISearchDisplayController* controller}, shouldReloadTableForSearchScope:${2:NSInteger searchOption})" },  
    { "trigger": "searchDisplayController:shouldReloadTableForSearchString:", "contents": "searchDisplayController:shouldReloadTableForSearchString:(${1:UISearchDisplayController* controller}, shouldReloadTableForSearchString:${2:NSString* searchString})" },  
    { "trigger": "searchDisplayController:shouldReloadTableForSearchString:", "contents": "searchDisplayController:shouldReloadTableForSearchString:(${1:UISearchDisplayController* controller}, shouldReloadTableForSearchString:${2:NSString* searchString})" },  
    { "trigger": "searchDisplayController:willHideSearchResultsTableView:", "contents": "searchDisplayController:willHideSearchResultsTableView:(${1:UISearchDisplayController* controller}, willHideSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:willHideSearchResultsTableView:", "contents": "searchDisplayController:willHideSearchResultsTableView:(${1:UISearchDisplayController* controller}, willHideSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:willShowSearchResultsTableView:", "contents": "searchDisplayController:willShowSearchResultsTableView:(${1:UISearchDisplayController* controller}, willShowSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:willShowSearchResultsTableView:", "contents": "searchDisplayController:willShowSearchResultsTableView:(${1:UISearchDisplayController* controller}, willShowSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:willUnloadSearchResultsTableView:", "contents": "searchDisplayController:willUnloadSearchResultsTableView:(${1:UISearchDisplayController* controller}, willUnloadSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchDisplayController:willUnloadSearchResultsTableView:", "contents": "searchDisplayController:willUnloadSearchResultsTableView:(${1:UISearchDisplayController* controller}, willUnloadSearchResultsTableView:${2:UITableView* tableView})" },  
    { "trigger": "searchFieldBackgroundImageForState:", "contents": "searchFieldBackgroundImageForState:(${1:UIControlState state})" },  
    { "trigger": "searchFieldBackgroundPositionAdjustment" },  
    { "trigger": "searchForBrowsableDomains" },  
    { "trigger": "searchForRegistrationDomains" },  
    { "trigger": "searchForServicesOfType:inDomain:", "contents": "searchForServicesOfType:inDomain:(${1:NSString* type}, inDomain:${2:NSString* domainString})" },  
    { "trigger": "searchResultsDataSource" },  
    { "trigger": "searchResultsDelegate" },  
    { "trigger": "searchResultsTableView" },  
    { "trigger": "searchResultsTitle" },  
    { "trigger": "searchScopes" },  
    { "trigger": "searchTextPositionAdjustment" },  
    { "trigger": "second" },  
    { "trigger": "secondaryGroupingSize" },  
    { "trigger": "secondsFromGMT" },  
    { "trigger": "secondsFromGMTForDate:", "contents": "secondsFromGMTForDate:(${1:NSDate* aDate})" },  
    { "trigger": "section" },  
    { "trigger": "sectionFooterHeight" },  
    { "trigger": "sectionForObject:collationStringSelector:", "contents": "sectionForObject:collationStringSelector:(${1:id object}, collationStringSelector:${2:SEL selector})" },  
    { "trigger": "sectionForSectionIndexTitleAtIndex:", "contents": "sectionForSectionIndexTitleAtIndex:(${1:NSInteger indexTitleIndex})" },  
    { "trigger": "sectionForSectionIndexTitle:atIndex:", "contents": "sectionForSectionIndexTitle:atIndex:(${1:NSString* title}, atIndex:${2:NSInteger sectionIndex})" },  
    { "trigger": "sectionHeaderHeight" },  
    { "trigger": "sectionIndexMinimumDisplayRowCount" },  
    { "trigger": "sectionIndexTitleForSectionName:", "contents": "sectionIndexTitleForSectionName:(${1:NSString* sectionName})" },  
    { "trigger": "sectionIndexTitles" },  
    { "trigger": "sectionIndexTitles" },  
    { "trigger": "sectionIndexTitlesForTableView:", "contents": "sectionIndexTitlesForTableView:(${1:UITableView* tableView})" },  
    { "trigger": "sectionIndexTitlesForTableView:", "contents": "sectionIndexTitlesForTableView:(${1:UITableView* tableView})" },  
    { "trigger": "sectionNameKeyPath" },  
    { "trigger": "sectionTitles" },  
    { "trigger": "sections" },  
    { "trigger": "seed" },  
    { "trigger": "seekToDate:", "contents": "seekToDate:(${1:NSDate* date})" },  
    { "trigger": "seekToEndOfFile" },  
    { "trigger": "seekToFileOffset:", "contents": "seekToFileOffset:(${1:unsigned long long offset})" },  
    { "trigger": "seekToTime:", "contents": "seekToTime:(${1:CMTime time})" },  
    { "trigger": "seekToTime:", "contents": "seekToTime:(${1:CMTime time})" },  
    { "trigger": "seekToTime:completionHandler:", "contents": "seekToTime:completionHandler:(${1:CMTime time}, completionHandler:${2:void (^)(BOOL) completionHandler})" },  
    { "trigger": "seekToTime:completionHandler:", "contents": "seekToTime:completionHandler:(${1:CMTime time}, completionHandler:${2:void (^)(BOOL) completionHandler})" },  
    { "trigger": "seekToTime:toleranceBefore:toleranceAfter:", "contents": "seekToTime:toleranceBefore:toleranceAfter:(${1:CMTime time}, toleranceBefore:${2:CMTime toleranceBefore}, toleranceAfter:${3:CMTime toleranceAfter})" },  
    { "trigger": "seekToTime:toleranceBefore:toleranceAfter:", "contents": "seekToTime:toleranceBefore:toleranceAfter:(${1:CMTime time}, toleranceBefore:${2:CMTime toleranceBefore}, toleranceAfter:${3:CMTime toleranceAfter})" },  
    { "trigger": "seekToTime:toleranceBefore:toleranceAfter:completionHandler:", "contents": "seekToTime:toleranceBefore:toleranceAfter:completionHandler:(${1:CMTime time}, toleranceBefore:${2:CMTime toleranceBefore}, toleranceAfter:${3:CMTime toleranceAfter}, completionHandler:${4:void (^)(BOOL) completionHandler})" },  
    { "trigger": "seekToTime:toleranceBefore:toleranceAfter:completionHandler:", "contents": "seekToTime:toleranceBefore:toleranceAfter:completionHandler:(${1:CMTime time}, toleranceBefore:${2:CMTime toleranceBefore}, toleranceAfter:${3:CMTime toleranceAfter}, completionHandler:${4:void (^)(BOOL) completionHandler})" },  
    { "trigger": "seekableTimeRanges" },  
    { "trigger": "segmentForTrackTime:", "contents": "segmentForTrackTime:(${1:CMTime trackTime})" },  
    { "trigger": "segmentedControlStyle" },  
    { "trigger": "segments" },  
    { "trigger": "segments" },  
    { "trigger": "segments" },  
    { "trigger": "segmentsDownloadedDuration" },  
    { "trigger": "segmentsDownloadedDuration" },  
    { "trigger": "select:", "contents": "select:(${1:id sender})" },  
    { "trigger": "select:", "contents": "select:(${1:id sender})" },  
    { "trigger": "selectAll:", "contents": "selectAll:(${1:id sender})" },  
    { "trigger": "selectAll:", "contents": "selectAll:(${1:id sender})" },  
    { "trigger": "selectAnnotation:animated:", "contents": "selectAnnotation:animated:(${1:id annotation}, animated:${2:BOOL animated})" },  
    { "trigger": "selectMediaOption:inMediaSelectionGroup:", "contents": "selectMediaOption:inMediaSelectionGroup:(${1:AVMediaSelectionOption* mediaSelectionOption}, inMediaSelectionGroup:${2:AVMediaSelectionGroup* mediaSelectionGroup})" },  
    { "trigger": "selectRowAtIndexPath:animated:scrollPosition:", "contents": "selectRowAtIndexPath:animated:scrollPosition:(${1:NSIndexPath* indexPath}, animated:${2:BOOL animated}, scrollPosition:${3:UITableViewScrollPosition scrollPosition})" },  
    { "trigger": "selectRow:inComponent:animated:", "contents": "selectRow:inComponent:animated:(${1:NSInteger row}, inComponent:${2:NSInteger component}, animated:${3:BOOL animated})" },  
    { "trigger": "selectedAnnotations" },  
    { "trigger": "selectedBackgroundView" },  
    { "trigger": "selectedCalendars" },  
    { "trigger": "selectedImage" },  
    { "trigger": "selectedImageTintColor" },  
    { "trigger": "selectedIndex" },  
    { "trigger": "selectedItem" },  
    { "trigger": "selectedMediaOptionInMediaSelectionGroup:", "contents": "selectedMediaOptionInMediaSelectionGroup:(${1:AVMediaSelectionGroup* mediaSelectionGroup})" },  
    { "trigger": "selectedRange" },  
    { "trigger": "selectedRowInComponent:", "contents": "selectedRowInComponent:(${1:NSInteger component})" },  
    { "trigger": "selectedScopeButtonIndex" },  
    { "trigger": "selectedSegmentIndex" },  
    { "trigger": "selectedTextColor" },  
    { "trigger": "selectedTextRange" },  
    { "trigger": "selectedTextRange" },  
    { "trigger": "selectedViewController" },  
    { "trigger": "selectionAffinity" },  
    { "trigger": "selectionAffinity" },  
    { "trigger": "selectionDidChange:", "contents": "selectionDidChange:(${1:id textInput})" },  
    { "trigger": "selectionDidChange:", "contents": "selectionDidChange:(${1:id textInput})" },  
    { "trigger": "selectionIndicatorImage" },  
    { "trigger": "selectionStyle" },  
    { "trigger": "selectionStyle" },  
    { "trigger": "selectionWillChange:", "contents": "selectionWillChange:(${1:id textInput})" },  
    { "trigger": "selectionWillChange:", "contents": "selectionWillChange:(${1:id textInput})" },  
    { "trigger": "selector" },  
    { "trigger": "selector" },  
    { "trigger": "self" },  
    { "trigger": "self" },  
    { "trigger": "sendActionsForControlEvents:", "contents": "sendActionsForControlEvents:(${1:UIControlEvents controlEvents})" },  
    { "trigger": "sendAction:to:forEvent:", "contents": "sendAction:to:forEvent:(${1:SEL action}, to:${2:id target}, forEvent:${3:UIEvent* event})" },  
    { "trigger": "sendAction:to:from:forEvent:", "contents": "sendAction:to:from:forEvent:(${1:SEL action}, to:${2:id target}, from:${3:id sender}, forEvent:${4:UIEvent* event})" },  
    { "trigger": "sendBeforeDate:components:from:reserved:", "contents": "sendBeforeDate:components:from:reserved:(${1:NSDate* limitDate}, components:${2:NSMutableArray* components}, from:${3:NSPort* receivePort}, reserved:${4:NSUInteger headerSpaceReserved})" },  
    { "trigger": "sendBeforeDate:msgid:components:from:reserved:", "contents": "sendBeforeDate:msgid:components:from:reserved:(${1:NSDate* limitDate}, msgid:${2:NSUInteger msgID}, components:${3:NSMutableArray* components}, from:${4:NSPort* receivePort}, reserved:${5:NSUInteger headerSpaceReserved})" },  
    { "trigger": "sendDataToAllPeers:withDataMode:error:", "contents": "sendDataToAllPeers:withDataMode:error:(${1:NSData* data}, withDataMode:${2:GKSendDataMode mode}, error:${3:NSError** error})" },  
    { "trigger": "sendDataToAllPlayers:withDataMode:error:", "contents": "sendDataToAllPlayers:withDataMode:error:(${1:NSData* data}, withDataMode:${2:GKMatchSendDataMode mode}, error:${3:NSError** error})" },  
    { "trigger": "sendData:toPeers:withDataMode:error:", "contents": "sendData:toPeers:withDataMode:error:(${1:NSData* data}, toPeers:${2:NSArray* peers}, withDataMode:${3:GKSendDataMode mode}, error:${4:NSError** error})" },  
    { "trigger": "sendData:toPlayers:withDataMode:error:", "contents": "sendData:toPlayers:withDataMode:error:(${1:NSData* data}, toPlayers:${2:NSArray* playerIDs}, withDataMode:${3:GKMatchSendDataMode mode}, error:${4:NSError** error})" },  
    { "trigger": "sendEvent:", "contents": "sendEvent:(${1:UIEvent* event})" },  
    { "trigger": "sendEvent:", "contents": "sendEvent:(${1:UIEvent* event})" },  
    { "trigger": "sendSubviewToBack:", "contents": "sendSubviewToBack:(${1:UIView* view})" },  
    { "trigger": "sender" },  
    { "trigger": "sentenceRangeForRange:", "contents": "sentenceRangeForRange:(${1:NSRange range})" },  
    { "trigger": "separatorColor" },  
    { "trigger": "separatorStyle" },  
    { "trigger": "serialNumber" },  
    { "trigger": "serializedRepresentation" },  
    { "trigger": "serverAddress" },  
    { "trigger": "serverAddress" },  
    { "trigger": "serverAddress" },  
    { "trigger": "serverAddress" },  
    { "trigger": "serverTrust" },  
    { "trigger": "service" },  
    { "trigger": "services" },  
    { "trigger": "session" },  
    { "trigger": "sessionID" },  
    { "trigger": "sessionMode" },  
    { "trigger": "sessionPreset" },  
    { "trigger": "session:connectionWithPeerFailed:withError:", "contents": "session:connectionWithPeerFailed:withError:(${1:GKSession* session}, connectionWithPeerFailed:${2:NSString* peerID}, withError:${3:NSError* error})" },  
    { "trigger": "session:connectionWithPeerFailed:withError:", "contents": "session:connectionWithPeerFailed:withError:(${1:GKSession* session}, connectionWithPeerFailed:${2:NSString* peerID}, withError:${3:NSError* error})" },  
    { "trigger": "session:didFailWithError:", "contents": "session:didFailWithError:(${1:GKSession* session}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "session:didFailWithError:", "contents": "session:didFailWithError:(${1:GKSession* session}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "session:didReceiveConnectionRequestFromPeer:", "contents": "session:didReceiveConnectionRequestFromPeer:(${1:GKSession* session}, didReceiveConnectionRequestFromPeer:${2:NSString* peerID})" },  
    { "trigger": "session:didReceiveConnectionRequestFromPeer:", "contents": "session:didReceiveConnectionRequestFromPeer:(${1:GKSession* session}, didReceiveConnectionRequestFromPeer:${2:NSString* peerID})" },  
    { "trigger": "session:peer:didChangeState:", "contents": "session:peer:didChangeState:(${1:GKSession* session}, peer:${2:NSString* peerID}, didChangeState:${3:GKPeerConnectionState state})" },  
    { "trigger": "session:peer:didChangeState:", "contents": "session:peer:didChangeState:(${1:GKSession* session}, peer:${2:NSString* peerID}, didChangeState:${3:GKPeerConnectionState state})" },  
    { "trigger": "set" },  
    { "trigger": "set" },  
    { "trigger": "setAMSymbol:", "contents": "setAMSymbol:(${1:NSString* string})" },  
    { "trigger": "setAbsoluteDate:", "contents": "setAbsoluteDate:(${1:NSDate* absoluteDate})" },  
    { "trigger": "setAbstract:", "contents": "setAbstract:(${1:BOOL flag})" },  
    { "trigger": "setAccelerometerUpdateInterval:", "contents": "setAccelerometerUpdateInterval:(${1:NSTimeInterval accelerometerUpdateInterval})" },  
    { "trigger": "setAccessibilityActivationPoint:", "contents": "setAccessibilityActivationPoint:(${1:CGPoint accessibilityActivationPoint})" },  
    { "trigger": "setAccessibilityActivationPoint:", "contents": "setAccessibilityActivationPoint:(${1:CGPoint accessibilityActivationPoint})" },  
    { "trigger": "setAccessibilityContainer:", "contents": "setAccessibilityContainer:(${1:id accessibilityContainer})" },  
    { "trigger": "setAccessibilityElementsHidden:", "contents": "setAccessibilityElementsHidden:(${1:BOOL accessibilityElementsHidden})" },  
    { "trigger": "setAccessibilityElementsHidden:", "contents": "setAccessibilityElementsHidden:(${1:BOOL accessibilityElementsHidden})" },  
    { "trigger": "setAccessibilityFrame:", "contents": "setAccessibilityFrame:(${1:CGRect accessibilityFrame})" },  
    { "trigger": "setAccessibilityFrame:", "contents": "setAccessibilityFrame:(${1:CGRect accessibilityFrame})" },  
    { "trigger": "setAccessibilityFrame:", "contents": "setAccessibilityFrame:(${1:CGRect accessibilityFrame})" },  
    { "trigger": "setAccessibilityHint:", "contents": "setAccessibilityHint:(${1:NSString* accessibilityHint})" },  
    { "trigger": "setAccessibilityHint:", "contents": "setAccessibilityHint:(${1:NSString* accessibilityHint})" },  
    { "trigger": "setAccessibilityHint:", "contents": "setAccessibilityHint:(${1:NSString* accessibilityHint})" },  
    { "trigger": "setAccessibilityIdentifier:", "contents": "setAccessibilityIdentifier:(${1:NSString* accessibilityIdentifier})" },  
    { "trigger": "setAccessibilityIdentifier:", "contents": "setAccessibilityIdentifier:(${1:NSString* accessibilityIdentifier})" },  
    { "trigger": "setAccessibilityLabel:", "contents": "setAccessibilityLabel:(${1:NSString* accessibilityLabel})" },  
    { "trigger": "setAccessibilityLabel:", "contents": "setAccessibilityLabel:(${1:NSString* accessibilityLabel})" },  
    { "trigger": "setAccessibilityLabel:", "contents": "setAccessibilityLabel:(${1:NSString* accessibilityLabel})" },  
    { "trigger": "setAccessibilityLanguage:", "contents": "setAccessibilityLanguage:(${1:NSString* accessibilityLanguage})" },  
    { "trigger": "setAccessibilityLanguage:", "contents": "setAccessibilityLanguage:(${1:NSString* accessibilityLanguage})" },  
    { "trigger": "setAccessibilityTraits:", "contents": "setAccessibilityTraits:(${1:UIAccessibilityTraits accessibilityTraits})" },  
    { "trigger": "setAccessibilityTraits:", "contents": "setAccessibilityTraits:(${1:UIAccessibilityTraits accessibilityTraits})" },  
    { "trigger": "setAccessibilityTraits:", "contents": "setAccessibilityTraits:(${1:UIAccessibilityTraits accessibilityTraits})" },  
    { "trigger": "setAccessibilityValue:", "contents": "setAccessibilityValue:(${1:NSString* accessibilityValue})" },  
    { "trigger": "setAccessibilityValue:", "contents": "setAccessibilityValue:(${1:NSString* accessibilityValue})" },  
    { "trigger": "setAccessibilityValue:", "contents": "setAccessibilityValue:(${1:NSString* accessibilityValue})" },  
    { "trigger": "setAccessibilityViewIsModal:", "contents": "setAccessibilityViewIsModal:(${1:BOOL accessibilityViewIsModal})" },  
    { "trigger": "setAccessibilityViewIsModal:", "contents": "setAccessibilityViewIsModal:(${1:BOOL accessibilityViewIsModal})" },  
    { "trigger": "setAccessoryAction:", "contents": "setAccessoryAction:(${1:SEL accessoryAction})" },  
    { "trigger": "setAccessoryType:", "contents": "setAccessoryType:(${1:UITableViewCellAccessoryType accessoryType})" },  
    { "trigger": "setAccessoryView:", "contents": "setAccessoryView:(${1:UIView* accessoryView})" },  
    { "trigger": "setAccount:", "contents": "setAccount:(${1:ACAccount* account})" },  
    { "trigger": "setAccountDescription:", "contents": "setAccountDescription:(${1:NSString* accountDescription})" },  
    { "trigger": "setAccountType:", "contents": "setAccountType:(${1:ACAccountType* accountType})" },  
    { "trigger": "setAchievementDelegate:", "contents": "setAchievementDelegate:(${1:id achievementDelegate})" },  
    { "trigger": "setAction:", "contents": "setAction:(${1:SEL action})" },  
    { "trigger": "setAction:", "contents": "setAction:(${1:SEL action})" },  
    { "trigger": "setActionAtItemEnd:", "contents": "setActionAtItemEnd:(${1:AVPlayerActionAtItemEnd actionAtItemEnd})" },  
    { "trigger": "setActionIsDiscardable:", "contents": "setActionIsDiscardable:(${1:BOOL discardable})" },  
    { "trigger": "setActionName:", "contents": "setActionName:(${1:NSString* actionName})" },  
    { "trigger": "setActionSheetStyle:", "contents": "setActionSheetStyle:(${1:UIActionSheetStyle actionSheetStyle})" },  
    { "trigger": "setActions:", "contents": "setActions:(${1:NSDictionary* actions})" },  
    { "trigger": "setActive:", "contents": "setActive:(${1:BOOL active})" },  
    { "trigger": "setActive:", "contents": "setActive:(${1:BOOL active})" },  
    { "trigger": "setActive:animated:", "contents": "setActive:animated:(${1:BOOL visible}, animated:${2:BOOL animated})" },  
    { "trigger": "setActive:error:", "contents": "setActive:error:(${1:BOOL beActive}, error:${2:NSError** outError})" },  
    { "trigger": "setActive:withFlags:error:", "contents": "setActive:withFlags:error:(${1:BOOL beActive}, withFlags:${2:NSInteger flags}, error:${3:NSError** outError})" },  
    { "trigger": "setActivityIndicatorViewStyle:", "contents": "setActivityIndicatorViewStyle:(${1:UIActivityIndicatorViewStyle activityIndicatorViewStyle})" },  
    { "trigger": "setAdditive:", "contents": "setAdditive:(${1:BOOL additive})" },  
    { "trigger": "setAddressBook:", "contents": "setAddressBook:(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "setAddressBook:", "contents": "setAddressBook:(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "setAddressBook:", "contents": "setAddressBook:(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "setAddressBook:", "contents": "setAddressBook:(${1:ABAddressBookRef addressBook})" },  
    { "trigger": "setAdjustsFontSizeToFitWidth:", "contents": "setAdjustsFontSizeToFitWidth:(${1:BOOL adjustsFontSizeToFitWidth})" },  
    { "trigger": "setAdjustsFontSizeToFitWidth:", "contents": "setAdjustsFontSizeToFitWidth:(${1:BOOL adjustsFontSizeToFitWidth})" },  
    { "trigger": "setAdjustsImageWhenDisabled:", "contents": "setAdjustsImageWhenDisabled:(${1:BOOL adjustsImageWhenDisabled})" },  
    { "trigger": "setAdjustsImageWhenHighlighted:", "contents": "setAdjustsImageWhenHighlighted:(${1:BOOL adjustsImageWhenHighlighted})" },  
    { "trigger": "setAdvertisingSection:", "contents": "setAdvertisingSection:(${1:NSString* advertisingSection})" },  
    { "trigger": "setAffectedStores:", "contents": "setAffectedStores:(${1:NSArray* stores})" },  
    { "trigger": "setAffectedStores:", "contents": "setAffectedStores:(${1:NSArray* stores})" },  
    { "trigger": "setAffineTransform:", "contents": "setAffineTransform:(${1:CGAffineTransform m})" },  
    { "trigger": "setAlarms:", "contents": "setAlarms:(${1:NSArray* alarms})" },  
    { "trigger": "setAlertAction:", "contents": "setAlertAction:(${1:NSString* alertAction})" },  
    { "trigger": "setAlertBody:", "contents": "setAlertBody:(${1:NSString* alertBody})" },  
    { "trigger": "setAlertLaunchImage:", "contents": "setAlertLaunchImage:(${1:NSString* alertLaunchImage})" },  
    { "trigger": "setAlertViewStyle:", "contents": "setAlertViewStyle:(${1:UIAlertViewStyle alertViewStyle})" },  
    { "trigger": "setAlignmentMode:", "contents": "setAlignmentMode:(${1:NSString* alignmentMode})" },  
    { "trigger": "setAllDay:", "contents": "setAllDay:(${1:BOOL allDay})" },  
    { "trigger": "setAllHTTPHeaderFields:", "contents": "setAllHTTPHeaderFields:(${1:NSDictionary* headerFields})" },  
    { "trigger": "setAllowableMovement:", "contents": "setAllowableMovement:(${1:CGFloat allowableMovement})" },  
    { "trigger": "setAllowsActions:", "contents": "setAllowsActions:(${1:BOOL allowsActions})" },  
    { "trigger": "setAllowsActions:", "contents": "setAllowsActions:(${1:BOOL allowsActions})" },  
    { "trigger": "setAllowsAddingToAddressBook:", "contents": "setAllowsAddingToAddressBook:(${1:BOOL allowsAddingToAddressBook})" },  
    { "trigger": "setAllowsAirPlay:", "contents": "setAllowsAirPlay:(${1:BOOL allowsAirPlay})" },  
    { "trigger": "setAllowsAirPlayVideo:", "contents": "setAllowsAirPlayVideo:(${1:BOOL allowsAirPlayVideo})" },  
    { "trigger": "setAllowsCalendarPreview:", "contents": "setAllowsCalendarPreview:(${1:BOOL allowsCalendarPreview})" },  
    { "trigger": "setAllowsEditing:", "contents": "setAllowsEditing:(${1:BOOL allowsEditing})" },  
    { "trigger": "setAllowsEditing:", "contents": "setAllowsEditing:(${1:BOOL allowsEditing})" },  
    { "trigger": "setAllowsEditing:", "contents": "setAllowsEditing:(${1:BOOL allowsEditing})" },  
    { "trigger": "setAllowsExternalBinaryDataStorage:", "contents": "setAllowsExternalBinaryDataStorage:(${1:BOOL flag})" },  
    { "trigger": "setAllowsFloats:", "contents": "setAllowsFloats:(${1:BOOL flag})" },  
    { "trigger": "setAllowsImageEditing:", "contents": "setAllowsImageEditing:(${1:BOOL allowsImageEditing})" },  
    { "trigger": "setAllowsInlineMediaPlayback:", "contents": "setAllowsInlineMediaPlayback:(${1:BOOL allowsInlineMediaPlayback})" },  
    { "trigger": "setAllowsMultipleSelection:", "contents": "setAllowsMultipleSelection:(${1:BOOL allowsMultipleSelection})" },  
    { "trigger": "setAllowsMultipleSelectionDuringEditing:", "contents": "setAllowsMultipleSelectionDuringEditing:(${1:BOOL allowsMultipleSelectionDuringEditing})" },  
    { "trigger": "setAllowsPickingMultipleItems:", "contents": "setAllowsPickingMultipleItems:(${1:BOOL allowsPickingMultipleItems})" },  
    { "trigger": "setAllowsSelection:", "contents": "setAllowsSelection:(${1:BOOL allowsSelection})" },  
    { "trigger": "setAllowsSelectionDuringEditing:", "contents": "setAllowsSelectionDuringEditing:(${1:BOOL allowsSelectionDuringEditing})" },  
    { "trigger": "setAlpha:", "contents": "setAlpha:(${1:CGFloat alpha})" },  
    { "trigger": "setAlphaRange:", "contents": "setAlphaRange:(${1:float alphaRange})" },  
    { "trigger": "setAlphaSpeed:", "contents": "setAlphaSpeed:(${1:float alphaSpeed})" },  
    { "trigger": "setAlternateName:", "contents": "setAlternateName:(${1:NSString* alternateName})" },  
    { "trigger": "setAlwaysBounceHorizontal:", "contents": "setAlwaysBounceHorizontal:(${1:BOOL alwaysBounceHorizontal})" },  
    { "trigger": "setAlwaysBounceVertical:", "contents": "setAlwaysBounceVertical:(${1:BOOL alwaysBounceVertical})" },  
    { "trigger": "setAlwaysCopiesSampleData:", "contents": "setAlwaysCopiesSampleData:(${1:BOOL alwaysCopiesSampleData})" },  
    { "trigger": "setAlwaysDiscardsLateVideoFrames:", "contents": "setAlwaysDiscardsLateVideoFrames:(${1:BOOL alwaysDiscardsLateVideoFrames})" },  
    { "trigger": "setAlwaysShowsDecimalSeparator:", "contents": "setAlwaysShowsDecimalSeparator:(${1:BOOL b})" },  
    { "trigger": "setAmbientColor:", "contents": "setAmbientColor:(${1:GLKVector4 ambientColor})" },  
    { "trigger": "setAmbientColor:", "contents": "setAmbientColor:(${1:GLKVector4 ambientColor})" },  
    { "trigger": "setAnchorPoint:", "contents": "setAnchorPoint:(${1:CGPoint anchorPoint})" },  
    { "trigger": "setAnchorPointZ:", "contents": "setAnchorPointZ:(${1:CGFloat anchorPointZ})" },  
    { "trigger": "setAnimatesDrop:", "contents": "setAnimatesDrop:(${1:BOOL animatesDrop})" },  
    { "trigger": "setAnimationDuration:", "contents": "setAnimationDuration:(${1:NSTimeInterval animationDuration})" },  
    { "trigger": "setAnimationImages:", "contents": "setAnimationImages:(${1:NSArray* animationImages})" },  
    { "trigger": "setAnimationRepeatCount:", "contents": "setAnimationRepeatCount:(${1:NSInteger animationRepeatCount})" },  
    { "trigger": "setAnimationTool:", "contents": "setAnimationTool:(${1:AVVideoCompositionCoreAnimationTool* animationTool})" },  
    { "trigger": "setAnimations:", "contents": "setAnimations:(${1:NSArray* animations})" },  
    { "trigger": "setAnnotation:", "contents": "setAnnotation:(${1:id annotation})" },  
    { "trigger": "setAnnotation:", "contents": "setAnnotation:(${1:id annotation})" },  
    { "trigger": "setApertureMode:", "contents": "setApertureMode:(${1:NSString* apertureMode})" },  
    { "trigger": "setApplicationIconBadgeNumber:", "contents": "setApplicationIconBadgeNumber:(${1:NSInteger applicationIconBadgeNumber})" },  
    { "trigger": "setApplicationIconBadgeNumber:", "contents": "setApplicationIconBadgeNumber:(${1:NSInteger applicationIconBadgeNumber})" },  
    { "trigger": "setApplicationSupportsShakeToEdit:", "contents": "setApplicationSupportsShakeToEdit:(${1:BOOL applicationSupportsShakeToEdit})" },  
    { "trigger": "setAppliesPreferredTrackTransform:", "contents": "setAppliesPreferredTrackTransform:(${1:BOOL appliesPreferredTrackTransform})" },  
    { "trigger": "setApportionsSegmentWidthsByContent:", "contents": "setApportionsSegmentWidthsByContent:(${1:BOOL apportionsSegmentWidthsByContent})" },  
    { "trigger": "setArgument:atIndex:", "contents": "setArgument:atIndex:(${1:void* argumentLocation}, atIndex:${2:NSInteger idx})" },  
    { "trigger": "setArray:", "contents": "setArray:(${1:NSArray* otherArray})" },  
    { "trigger": "setArray:forKey:", "contents": "setArray:forKey:(${1:NSArray* anArray}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setArrowDirection:", "contents": "setArrowDirection:(${1:UIPopoverArrowDirection arrowDirection})" },  
    { "trigger": "setArrowDirection:", "contents": "setArrowDirection:(${1:UIMenuControllerArrowDirection arrowDirection})" },  
    { "trigger": "setArrowOffset:", "contents": "setArrowOffset:(${1:CGFloat arrowOffset})" },  
    { "trigger": "setAssetsFilter:", "contents": "setAssetsFilter:(${1:ALAssetsFilter* filter})" },  
    { "trigger": "setAttributeMappings:", "contents": "setAttributeMappings:(${1:NSArray* mappings})" },  
    { "trigger": "setAttributeType:", "contents": "setAttributeType:(${1:NSAttributeType type})" },  
    { "trigger": "setAttributeValueClassName:", "contents": "setAttributeValueClassName:(${1:NSString* className})" },  
    { "trigger": "setAttributedString:", "contents": "setAttributedString:(${1:NSAttributedString* attrString})" },  
    { "trigger": "setAttributes:ofItemAtPath:error:", "contents": "setAttributes:ofItemAtPath:error:(${1:NSDictionary* attributes}, ofItemAtPath:${2:NSString* path}, error:${3:NSError** error})" },  
    { "trigger": "setAttributes:range:", "contents": "setAttributes:range:(${1:NSDictionary* attrs}, range:${2:NSRange range})" },  
    { "trigger": "setAudioMix:", "contents": "setAudioMix:(${1:AVAudioMix* audioMix})" },  
    { "trigger": "setAudioMix:", "contents": "setAudioMix:(${1:AVAudioMix* audioMix})" },  
    { "trigger": "setAudioMix:", "contents": "setAudioMix:(${1:AVAudioMix* audioMix})" },  
    { "trigger": "setAutocapitalizationType:", "contents": "setAutocapitalizationType:(${1:UITextAutocapitalizationType autocapitalizationType})" },  
    { "trigger": "setAutocapitalizationType:", "contents": "setAutocapitalizationType:(${1:UITextAutocapitalizationType autocapitalizationType})" },  
    { "trigger": "setAutocapitalizationType:", "contents": "setAutocapitalizationType:(${1:UITextAutocapitalizationType autocapitalizationType})" },  
    { "trigger": "setAutocorrectionType:", "contents": "setAutocorrectionType:(${1:UITextAutocorrectionType autocorrectionType})" },  
    { "trigger": "setAutocorrectionType:", "contents": "setAutocorrectionType:(${1:UITextAutocorrectionType autocorrectionType})" },  
    { "trigger": "setAutocorrectionType:", "contents": "setAutocorrectionType:(${1:UITextAutocorrectionType autocorrectionType})" },  
    { "trigger": "setAutomaticallyAdjustsMirroring:", "contents": "setAutomaticallyAdjustsMirroring:(${1:BOOL automaticallyAdjustsMirroring})" },  
    { "trigger": "setAutorepeat:", "contents": "setAutorepeat:(${1:BOOL autorepeat})" },  
    { "trigger": "setAutoresizesSubviews:", "contents": "setAutoresizesSubviews:(${1:BOOL autoresizesSubviews})" },  
    { "trigger": "setAutoresizingMask:", "contents": "setAutoresizingMask:(${1:UIViewAutoresizing autoresizingMask})" },  
    { "trigger": "setAutoreverses:", "contents": "setAutoreverses:(${1:BOOL autoreverses})" },  
    { "trigger": "setAutoreverses:", "contents": "setAutoreverses:(${1:BOOL autoreverses})" },  
    { "trigger": "setAvailability:", "contents": "setAvailability:(${1:EKEventAvailability availability})" },  
    { "trigger": "setAvailable:", "contents": "setAvailable:(${1:BOOL available})" },  
    { "trigger": "setBackBarButtonItem:", "contents": "setBackBarButtonItem:(${1:UIBarButtonItem* backBarButtonItem})" },  
    { "trigger": "setBackButtonBackgroundImage:forState:barMetrics:", "contents": "setBackButtonBackgroundImage:forState:barMetrics:(${1:UIImage* backgroundImage}, forState:${2:UIControlState state}, barMetrics:${3:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:", "contents": "setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:(${1:CGFloat adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackButtonTitlePositionAdjustment:forBarMetrics:", "contents": "setBackButtonTitlePositionAdjustment:forBarMetrics:(${1:UIOffset adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackground:", "contents": "setBackground:(${1:UIImage* background})" },  
    { "trigger": "setBackgroundColor:", "contents": "setBackgroundColor:(${1:CGColorRef backgroundColor})" },  
    { "trigger": "setBackgroundColor:", "contents": "setBackgroundColor:(${1:CGColorRef backgroundColor})" },  
    { "trigger": "setBackgroundColor:", "contents": "setBackgroundColor:(${1:UIColor* backgroundColor})" },  
    { "trigger": "setBackgroundColor:", "contents": "setBackgroundColor:(${1:CGColorRef backgroundColor})" },  
    { "trigger": "setBackgroundColor:", "contents": "setBackgroundColor:(${1:UIColor* backgroundColor})" },  
    { "trigger": "setBackgroundFilters:", "contents": "setBackgroundFilters:(${1:NSArray* backgroundFilters})" },  
    { "trigger": "setBackgroundImage:", "contents": "setBackgroundImage:(${1:UIImage* backgroundImage})" },  
    { "trigger": "setBackgroundImage:", "contents": "setBackgroundImage:(${1:UIImage* backgroundImage})" },  
    { "trigger": "setBackgroundImage:forBarMetrics:", "contents": "setBackgroundImage:forBarMetrics:(${1:UIImage* backgroundImage}, forBarMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackgroundImage:forState:", "contents": "setBackgroundImage:forState:(${1:UIImage* image}, forState:${2:UIControlState state})" },  
    { "trigger": "setBackgroundImage:forState:barMetrics:", "contents": "setBackgroundImage:forState:barMetrics:(${1:UIImage* backgroundImage}, forState:${2:UIControlState state}, barMetrics:${3:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackgroundImage:forState:barMetrics:", "contents": "setBackgroundImage:forState:barMetrics:(${1:UIImage* backgroundImage}, forState:${2:UIControlState state}, barMetrics:${3:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackgroundImage:forToolbarPosition:barMetrics:", "contents": "setBackgroundImage:forToolbarPosition:barMetrics:(${1:UIImage* backgroundImage}, forToolbarPosition:${2:UIToolbarPosition topOrBottom}, barMetrics:${3:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackgroundVerticalPositionAdjustment:forBarMetrics:", "contents": "setBackgroundVerticalPositionAdjustment:forBarMetrics:(${1:CGFloat adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "setBackgroundView:", "contents": "setBackgroundView:(${1:UIView* backgroundView})" },  
    { "trigger": "setBackgroundView:", "contents": "setBackgroundView:(${1:UIView* backgroundView})" },  
    { "trigger": "setBadgeValue:", "contents": "setBadgeValue:(${1:NSString* badgeValue})" },  
    { "trigger": "setBarStyle:", "contents": "setBarStyle:(${1:UIBarStyle barStyle})" },  
    { "trigger": "setBarStyle:", "contents": "setBarStyle:(${1:UIBarStyle barStyle})" },  
    { "trigger": "setBarStyle:", "contents": "setBarStyle:(${1:UIBarStyle barStyle})" },  
    { "trigger": "setBaseWritingDirection:forRange:", "contents": "setBaseWritingDirection:forRange:(${1:UITextWritingDirection writingDirection}, forRange:${2:UITextRange* range})" },  
    { "trigger": "setBaseWritingDirection:forRange:", "contents": "setBaseWritingDirection:forRange:(${1:UITextWritingDirection writingDirection}, forRange:${2:UITextRange* range})" },  
    { "trigger": "setBaselineAdjustment:", "contents": "setBaselineAdjustment:(${1:UIBaselineAdjustment baselineAdjustment})" },  
    { "trigger": "setBatteryMonitoringEnabled:", "contents": "setBatteryMonitoringEnabled:(${1:BOOL batteryMonitoringEnabled})" },  
    { "trigger": "setBccRecipients:", "contents": "setBccRecipients:(${1:NSArray* bccRecipients})" },  
    { "trigger": "setBeginTime:", "contents": "setBeginTime:(${1:CFTimeInterval beginTime})" },  
    { "trigger": "setBeginTime:", "contents": "setBeginTime:(${1:CFTimeInterval beginTime})" },  
    { "trigger": "setBiasValues:", "contents": "setBiasValues:(${1:NSArray* biasValues})" },  
    { "trigger": "setBirthRate:", "contents": "setBirthRate:(${1:float birthRate})" },  
    { "trigger": "setBirthRate:", "contents": "setBirthRate:(${1:float birthRate})" },  
    { "trigger": "setBlueRange:", "contents": "setBlueRange:(${1:float blueRange})" },  
    { "trigger": "setBlueSpeed:", "contents": "setBlueSpeed:(${1:float blueSpeed})" },  
    { "trigger": "setBody:", "contents": "setBody:(${1:NSString* body})" },  
    { "trigger": "setBool:forKey:", "contents": "setBool:forKey:(${1:BOOL value}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setBool:forKey:", "contents": "setBool:forKey:(${1:BOOL value}, forKey:${2:NSString* defaultName})" },  
    { "trigger": "setBorderColor:", "contents": "setBorderColor:(${1:CGColorRef borderColor})" },  
    { "trigger": "setBorderStyle:", "contents": "setBorderStyle:(${1:UITextBorderStyle borderStyle})" },  
    { "trigger": "setBorderWidth:", "contents": "setBorderWidth:(${1:CGFloat borderWidth})" },  
    { "trigger": "setBounces:", "contents": "setBounces:(${1:BOOL bounces})" },  
    { "trigger": "setBouncesZoom:", "contents": "setBouncesZoom:(${1:BOOL bouncesZoom})" },  
    { "trigger": "setBounds:", "contents": "setBounds:(${1:CGRect bounds})" },  
    { "trigger": "setBounds:", "contents": "setBounds:(${1:CGRect bounds})" },  
    { "trigger": "setBrightness:", "contents": "setBrightness:(${1:CGFloat brightness})" },  
    { "trigger": "setByAddingObject:", "contents": "setByAddingObject:(${1:id anObject})" },  
    { "trigger": "setByAddingObjectsFromArray:", "contents": "setByAddingObjectsFromArray:(${1:NSArray* other})" },  
    { "trigger": "setByAddingObjectsFromSet:", "contents": "setByAddingObjectsFromSet:(${1:NSSet* other})" },  
    { "trigger": "setByValue:", "contents": "setByValue:(${1:id byValue})" },  
    { "trigger": "setCGColor:", "contents": "setCGColor:(${1:CGColorRef CGColor})" },  
    { "trigger": "setCGPath:", "contents": "setCGPath:(${1:CGPathRef CGPath})" },  
    { "trigger": "setCachePolicy:", "contents": "setCachePolicy:(${1:NSURLRequestCachePolicy policy})" },  
    { "trigger": "setCalculationMode:", "contents": "setCalculationMode:(${1:NSString* calculationMode})" },  
    { "trigger": "setCalendar:", "contents": "setCalendar:(${1:NSCalendar* calendar})" },  
    { "trigger": "setCalendar:", "contents": "setCalendar:(${1:NSCalendar* calendar})" },  
    { "trigger": "setCalendar:", "contents": "setCalendar:(${1:NSCalendar* cal})" },  
    { "trigger": "setCalendar:", "contents": "setCalendar:(${1:EKCalendar* calendar})" },  
    { "trigger": "setCallEventHandler:", "contents": "setCallEventHandler:(${1:void (^)(CTCall *) callEventHandler})" },  
    { "trigger": "setCalloutOffset:", "contents": "setCalloutOffset:(${1:CGPoint calloutOffset})" },  
    { "trigger": "setCameraCaptureMode:", "contents": "setCameraCaptureMode:(${1:UIImagePickerControllerCameraCaptureMode cameraCaptureMode})" },  
    { "trigger": "setCameraDevice:", "contents": "setCameraDevice:(${1:UIImagePickerControllerCameraDevice cameraDevice})" },  
    { "trigger": "setCameraFlashMode:", "contents": "setCameraFlashMode:(${1:UIImagePickerControllerCameraFlashMode cameraFlashMode})" },  
    { "trigger": "setCameraOverlayView:", "contents": "setCameraOverlayView:(${1:UIView* cameraOverlayView})" },  
    { "trigger": "setCameraViewTransform:", "contents": "setCameraViewTransform:(${1:CGAffineTransform cameraViewTransform})" },  
    { "trigger": "setCanCancelContentTouches:", "contents": "setCanCancelContentTouches:(${1:BOOL canCancelContentTouches})" },  
    { "trigger": "setCanShowCallout:", "contents": "setCanShowCallout:(${1:BOOL canShowCallout})" },  
    { "trigger": "setCancelButtonIndex:", "contents": "setCancelButtonIndex:(${1:NSInteger cancelButtonIndex})" },  
    { "trigger": "setCancelButtonIndex:", "contents": "setCancelButtonIndex:(${1:NSInteger cancelButtonIndex})" },  
    { "trigger": "setCancelsTouchesInView:", "contents": "setCancelsTouchesInView:(${1:BOOL cancelsTouchesInView})" },  
    { "trigger": "setCaseSensitive:", "contents": "setCaseSensitive:(${1:BOOL flag})" },  
    { "trigger": "setCategory:", "contents": "setCategory:(${1:NSString* category})" },  
    { "trigger": "setCategory:", "contents": "setCategory:(${1:NSString* category})" },  
    { "trigger": "setCategory:", "contents": "setCategory:(${1:NSString* category})" },  
    { "trigger": "setCategory:error:", "contents": "setCategory:error:(${1:NSString* theCategory}, error:${2:NSError** outError})" },  
    { "trigger": "setCcRecipients:", "contents": "setCcRecipients:(${1:NSArray* ccRecipients})" },  
    { "trigger": "setCenter:", "contents": "setCenter:(${1:GLKVector3 center})" },  
    { "trigger": "setCenter:", "contents": "setCenter:(${1:CGPoint center})" },  
    { "trigger": "setCenterCoordinate:", "contents": "setCenterCoordinate:(${1:CLLocationCoordinate2D centerCoordinate})" },  
    { "trigger": "setCenterCoordinate:animated:", "contents": "setCenterCoordinate:animated:(${1:CLLocationCoordinate2D coordinate}, animated:${2:BOOL animated})" },  
    { "trigger": "setCenterOffset:", "contents": "setCenterOffset:(${1:CGPoint centerOffset})" },  
    { "trigger": "setCharactersToBeSkipped:", "contents": "setCharactersToBeSkipped:(${1:NSCharacterSet* set})" },  
    { "trigger": "setClassName:forClass:", "contents": "setClassName:forClass:(${1:NSString* codedName}, forClass:${2:Class cls})" },  
    { "trigger": "setClass:forClassName:", "contents": "setClass:forClassName:(${1:Class cls}, forClassName:${2:NSString* codedName})" },  
    { "trigger": "setClearButtonMode:", "contents": "setClearButtonMode:(${1:UITextFieldViewMode clearButtonMode})" },  
    { "trigger": "setClearsContextBeforeDrawing:", "contents": "setClearsContextBeforeDrawing:(${1:BOOL clearsContextBeforeDrawing})" },  
    { "trigger": "setClearsOnBeginEditing:", "contents": "setClearsOnBeginEditing:(${1:BOOL clearsOnBeginEditing})" },  
    { "trigger": "setClearsSelectionOnViewWillAppear:", "contents": "setClearsSelectionOnViewWillAppear:(${1:BOOL clearsSelectionOnViewWillAppear})" },  
    { "trigger": "setClient:", "contents": "setClient:(${1:id client})" },  
    { "trigger": "setClipsToBounds:", "contents": "setClipsToBounds:(${1:BOOL clipsToBounds})" },  
    { "trigger": "setClosedCaptionDisplayEnabled:", "contents": "setClosedCaptionDisplayEnabled:(${1:BOOL closedCaptionDisplayEnabled})" },  
    { "trigger": "setColor:", "contents": "setColor:(${1:UIColor* color})" },  
    { "trigger": "setColor:", "contents": "setColor:(${1:UIColor* color})" },  
    { "trigger": "setColor:", "contents": "setColor:(${1:UIColor* color})" },  
    { "trigger": "setColor:", "contents": "setColor:(${1:GLKVector4 color})" },  
    { "trigger": "setColor:", "contents": "setColor:(${1:CGColorRef color})" },  
    { "trigger": "setColorMaterialEnabled:", "contents": "setColorMaterialEnabled:(${1:GLboolean colorMaterialEnabled})" },  
    { "trigger": "setColors:", "contents": "setColors:(${1:NSArray* colors})" },  
    { "trigger": "setColors:", "contents": "setColors:(${1:NSArray* colors})" },  
    { "trigger": "setCompletionBlock:", "contents": "setCompletionBlock:(${1:void (^)(void) block})" },  
    { "trigger": "setCompletionHandler:", "contents": "setCompletionHandler:(${1:TWTweetComposeViewControllerCompletionHandler completionHandler})" },  
    { "trigger": "setComposeViewDelegate:", "contents": "setComposeViewDelegate:(${1:id composeViewDelegate})" },  
    { "trigger": "setCompositingFilter:", "contents": "setCompositingFilter:(${1:id compositingFilter})" },  
    { "trigger": "setCompoundIndexes:", "contents": "setCompoundIndexes:(${1:NSArray* value})" },  
    { "trigger": "setConnectionPolicy:", "contents": "setConnectionPolicy:(${1:MIDINetworkConnectionPolicy connectionPolicy})" },  
    { "trigger": "setConnectionTypesMask:", "contents": "setConnectionTypesMask:(${1:GKPeerPickerConnectionType connectionTypesMask})" },  
    { "trigger": "setConstantAttenuation:", "contents": "setConstantAttenuation:(${1:GLfloat constantAttenuation})" },  
    { "trigger": "setConstantColor:", "contents": "setConstantColor:(${1:GLKVector4 constantColor})" },  
    { "trigger": "setContentEdgeInsets:", "contents": "setContentEdgeInsets:(${1:UIEdgeInsets contentEdgeInsets})" },  
    { "trigger": "setContentHorizontalAlignment:", "contents": "setContentHorizontalAlignment:(${1:UIControlContentHorizontalAlignment contentHorizontalAlignment})" },  
    { "trigger": "setContentInset:", "contents": "setContentInset:(${1:UIEdgeInsets contentInset})" },  
    { "trigger": "setContentInsets:", "contents": "setContentInsets:(${1:UIEdgeInsets contentInsets})" },  
    { "trigger": "setContentMode:", "contents": "setContentMode:(${1:UIViewContentMode contentMode})" },  
    { "trigger": "setContentOffset:", "contents": "setContentOffset:(${1:CGPoint contentOffset})" },  
    { "trigger": "setContentOffset:animated:", "contents": "setContentOffset:animated:(${1:CGPoint contentOffset}, animated:${2:BOOL animated})" },  
    { "trigger": "setContentOffset:forSegmentAtIndex:", "contents": "setContentOffset:forSegmentAtIndex:(${1:CGSize offset}, forSegmentAtIndex:${2:NSUInteger segment})" },  
    { "trigger": "setContentPositionAdjustment:forSegmentType:barMetrics:", "contents": "setContentPositionAdjustment:forSegmentType:barMetrics:(${1:UIOffset adjustment}, forSegmentType:${2:UISegmentedControlSegment leftCenterRightOrAlone}, barMetrics:${3:UIBarMetrics barMetrics})" },  
    { "trigger": "setContentScaleFactor:", "contents": "setContentScaleFactor:(${1:CGFloat contentScaleFactor})" },  
    { "trigger": "setContentSize:", "contents": "setContentSize:(${1:CGSize contentSize})" },  
    { "trigger": "setContentSizeForViewInPopover:", "contents": "setContentSizeForViewInPopover:(${1:CGSize contentSizeForViewInPopover})" },  
    { "trigger": "setContentStretch:", "contents": "setContentStretch:(${1:CGRect contentStretch})" },  
    { "trigger": "setContentURL:", "contents": "setContentURL:(${1:NSURL* contentURL})" },  
    { "trigger": "setContentVerticalAlignment:", "contents": "setContentVerticalAlignment:(${1:UIControlContentVerticalAlignment contentVerticalAlignment})" },  
    { "trigger": "setContentViewController:", "contents": "setContentViewController:(${1:UIViewController* contentViewController})" },  
    { "trigger": "setContentViewController:animated:", "contents": "setContentViewController:animated:(${1:UIViewController* viewController}, animated:${2:BOOL animated})" },  
    { "trigger": "setContents:", "contents": "setContents:(${1:id contents})" },  
    { "trigger": "setContents:", "contents": "setContents:(${1:id contents})" },  
    { "trigger": "setContentsCenter:", "contents": "setContentsCenter:(${1:CGRect contentsCenter})" },  
    { "trigger": "setContentsGravity:", "contents": "setContentsGravity:(${1:NSString* contentsGravity})" },  
    { "trigger": "setContentsRect:", "contents": "setContentsRect:(${1:CGRect contentsRect})" },  
    { "trigger": "setContentsRect:", "contents": "setContentsRect:(${1:CGRect contentsRect})" },  
    { "trigger": "setContentsScale:", "contents": "setContentsScale:(${1:CGFloat contentsScale})" },  
    { "trigger": "setContext:", "contents": "setContext:(${1:EAGLContext* context})" },  
    { "trigger": "setContext:", "contents": "setContext:(${1:uint64_t context})" },  
    { "trigger": "setContinuityValues:", "contents": "setContinuityValues:(${1:NSArray* continuityValues})" },  
    { "trigger": "setContinuous:", "contents": "setContinuous:(${1:BOOL continuous})" },  
    { "trigger": "setContinuous:", "contents": "setContinuous:(${1:BOOL continuous})" },  
    { "trigger": "setControlStyle:", "contents": "setControlStyle:(${1:MPMovieControlStyle controlStyle})" },  
    { "trigger": "setCookie:", "contents": "setCookie:(${1:NSHTTPCookie* cookie})" },  
    { "trigger": "setCookieAcceptPolicy:", "contents": "setCookieAcceptPolicy:(${1:NSHTTPCookieAcceptPolicy cookieAcceptPolicy})" },  
    { "trigger": "setCookies:forURL:mainDocumentURL:", "contents": "setCookies:forURL:mainDocumentURL:(${1:NSArray* cookies}, forURL:${2:NSURL* URL}, mainDocumentURL:${3:NSURL* mainDocumentURL})" },  
    { "trigger": "setCoordinate:", "contents": "setCoordinate:(${1:CLLocationCoordinate2D newCoordinate})" },  
    { "trigger": "setCoordinate:", "contents": "setCoordinate:(${1:CLLocationCoordinate2D coordinate})" },  
    { "trigger": "setCoordinate:", "contents": "setCoordinate:(${1:CLLocationCoordinate2D newCoordinate})" },  
    { "trigger": "setCornerRadius:", "contents": "setCornerRadius:(${1:CGFloat cornerRadius})" },  
    { "trigger": "setCountDownDuration:", "contents": "setCountDownDuration:(${1:NSTimeInterval countDownDuration})" },  
    { "trigger": "setCountLimit:", "contents": "setCountLimit:(${1:NSUInteger lim})" },  
    { "trigger": "setCredential:", "contents": "setCredential:(${1:ACAccountCredential* credential})" },  
    { "trigger": "setCredential:forProtectionSpace:", "contents": "setCredential:forProtectionSpace:(${1:NSURLCredential* credential}, forProtectionSpace:${2:NSURLProtectionSpace* space})" },  
    { "trigger": "setCumulative:", "contents": "setCumulative:(${1:BOOL cumulative})" },  
    { "trigger": "setCurrencyCode:", "contents": "setCurrencyCode:(${1:NSString* string})" },  
    { "trigger": "setCurrencyDecimalSeparator:", "contents": "setCurrencyDecimalSeparator:(${1:NSString* string})" },  
    { "trigger": "setCurrencyGroupingSeparator:", "contents": "setCurrencyGroupingSeparator:(${1:NSString* string})" },  
    { "trigger": "setCurrencySymbol:", "contents": "setCurrencySymbol:(${1:NSString* string})" },  
    { "trigger": "setCurrentContentSizeIdentifier:", "contents": "setCurrentContentSizeIdentifier:(${1:NSString* currentContentSizeIdentifier})" },  
    { "trigger": "setCurrentMode:", "contents": "setCurrentMode:(${1:UIScreenMode* currentMode})" },  
    { "trigger": "setCurrentPage:", "contents": "setCurrentPage:(${1:NSInteger currentPage})" },  
    { "trigger": "setCurrentPlaybackRate:", "contents": "setCurrentPlaybackRate:(${1:float currentPlaybackRate})" },  
    { "trigger": "setCurrentPlaybackRate:", "contents": "setCurrentPlaybackRate:(${1:float currentPlaybackRate})" },  
    { "trigger": "setCurrentPlaybackTime:", "contents": "setCurrentPlaybackTime:(${1:NSTimeInterval currentPlaybackTime})" },  
    { "trigger": "setCurrentPlaybackTime:", "contents": "setCurrentPlaybackTime:(${1:NSTimeInterval currentPlaybackTime})" },  
    { "trigger": "setCurrentPlaybackTime:", "contents": "setCurrentPlaybackTime:(${1:NSTimeInterval currentPlaybackTime})" },  
    { "trigger": "setCurrentPreviewItemIndex:", "contents": "setCurrentPreviewItemIndex:(${1:NSInteger currentPreviewItemIndex})" },  
    { "trigger": "setCurrentTime:", "contents": "setCurrentTime:(${1:NSTimeInterval currentTime})" },  
    { "trigger": "setCurrentlyReadingIssue:", "contents": "setCurrentlyReadingIssue:(${1:NKIssue* currentlyReadingIssue})" },  
    { "trigger": "setCustomView:", "contents": "setCustomView:(${1:UIView* customView})" },  
    { "trigger": "setCustomizableViewControllers:", "contents": "setCustomizableViewControllers:(${1:NSArray* customizableViewControllers})" },  
    { "trigger": "setData:", "contents": "setData:(${1:NSData* data})" },  
    { "trigger": "setDataDetectorTypes:", "contents": "setDataDetectorTypes:(${1:UIDataDetectorTypes dataDetectorTypes})" },  
    { "trigger": "setDataDetectorTypes:", "contents": "setDataDetectorTypes:(${1:UIDataDetectorTypes dataDetectorTypes})" },  
    { "trigger": "setDataReceiveHandler:withContext:", "contents": "setDataReceiveHandler:withContext:(${1:id handler}, withContext:${2:void* context})" },  
    { "trigger": "setDataSource:", "contents": "setDataSource:(${1:id dataSource})" },  
    { "trigger": "setDataSource:", "contents": "setDataSource:(${1:id dataSource})" },  
    { "trigger": "setDataSource:", "contents": "setDataSource:(${1:id dataSource})" },  
    { "trigger": "setDataSource:", "contents": "setDataSource:(${1:id dataSource})" },  
    { "trigger": "setData:forKey:", "contents": "setData:forKey:(${1:NSData* aData}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setData:forPasteboardType:", "contents": "setData:forPasteboardType:(${1:NSData* data}, forPasteboardType:${2:NSString* pasteboardType})" },  
    { "trigger": "setDate:", "contents": "setDate:(${1:NSDate* date})" },  
    { "trigger": "setDateFormat:", "contents": "setDateFormat:(${1:NSString* string})" },  
    { "trigger": "setDatePickerMode:", "contents": "setDatePickerMode:(${1:UIDatePickerMode datePickerMode})" },  
    { "trigger": "setDateStyle:", "contents": "setDateStyle:(${1:NSDateFormatterStyle style})" },  
    { "trigger": "setDate:animated:", "contents": "setDate:animated:(${1:NSDate* date}, animated:${2:BOOL animated})" },  
    { "trigger": "setDay:", "contents": "setDay:(${1:NSInteger v})" },  
    { "trigger": "setDecelerationRate:", "contents": "setDecelerationRate:(${1:float decelerationRate})" },  
    { "trigger": "setDecimalSeparator:", "contents": "setDecimalSeparator:(${1:NSString* string})" },  
    { "trigger": "setDefaultCredential:forProtectionSpace:", "contents": "setDefaultCredential:forProtectionSpace:(${1:NSURLCredential* credential}, forProtectionSpace:${2:NSURLProtectionSpace* space})" },  
    { "trigger": "setDefaultDate:", "contents": "setDefaultDate:(${1:NSDate* date})" },  
    { "trigger": "setDefaultInvitationMessage:", "contents": "setDefaultInvitationMessage:(${1:NSString* defaultInvitationMessage})" },  
    { "trigger": "setDefaultValue:", "contents": "setDefaultValue:(${1:id value})" },  
    { "trigger": "setDefaults" },  
    { "trigger": "setDefersCurrentPageDisplay:", "contents": "setDefersCurrentPageDisplay:(${1:BOOL defersCurrentPageDisplay})" },  
    { "trigger": "setDefinesPresentationContext:", "contents": "setDefinesPresentationContext:(${1:BOOL definesPresentationContext})" },  
    { "trigger": "setDelaysContentTouches:", "contents": "setDelaysContentTouches:(${1:BOOL delaysContentTouches})" },  
    { "trigger": "setDelaysTouchesBegan:", "contents": "setDelaysTouchesBegan:(${1:BOOL delaysTouchesBegan})" },  
    { "trigger": "setDelaysTouchesEnded:", "contents": "setDelaysTouchesEnded:(${1:BOOL delaysTouchesEnded})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id anObject})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id anObject})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:NSObject* delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id d})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegate:", "contents": "setDelegate:(${1:id delegate})" },  
    { "trigger": "setDelegateQueue:", "contents": "setDelegateQueue:(${1:NSOperationQueue* queue})" },  
    { "trigger": "setDeleteRule:", "contents": "setDeleteRule:(${1:NSDeleteRule rule})" },  
    { "trigger": "setDensity:", "contents": "setDensity:(${1:GLfloat density})" },  
    { "trigger": "setDesiredAccuracy:", "contents": "setDesiredAccuracy:(${1:CLLocationAccuracy desiredAccuracy})" },  
    { "trigger": "setDestinationEntity:", "contents": "setDestinationEntity:(${1:NSEntityDescription* entity})" },  
    { "trigger": "setDestinationEntityName:", "contents": "setDestinationEntityName:(${1:NSString* name})" },  
    { "trigger": "setDestinationEntityVersionHash:", "contents": "setDestinationEntityVersionHash:(${1:NSData* vhash})" },  
    { "trigger": "setDestructiveButtonIndex:", "contents": "setDestructiveButtonIndex:(${1:NSInteger destructiveButtonIndex})" },  
    { "trigger": "setDetectsPhoneNumbers:", "contents": "setDetectsPhoneNumbers:(${1:BOOL detectsPhoneNumbers})" },  
    { "trigger": "setDeviceMotionUpdateInterval:", "contents": "setDeviceMotionUpdateInterval:(${1:NSTimeInterval deviceMotionUpdateInterval})" },  
    { "trigger": "setDictionary:", "contents": "setDictionary:(${1:NSDictionary* otherDictionary})" },  
    { "trigger": "setDictionary:forKey:", "contents": "setDictionary:forKey:(${1:NSDictionary* aDictionary}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setDiffuseColor:", "contents": "setDiffuseColor:(${1:GLKVector4 diffuseColor})" },  
    { "trigger": "setDiffuseColor:", "contents": "setDiffuseColor:(${1:GLKVector4 diffuseColor})" },  
    { "trigger": "setDirection:", "contents": "setDirection:(${1:UISwipeGestureRecognizerDirection direction})" },  
    { "trigger": "setDirectionalLockEnabled:", "contents": "setDirectionalLockEnabled:(${1:BOOL directionalLockEnabled})" },  
    { "trigger": "setDisabledBackground:", "contents": "setDisabledBackground:(${1:UIImage* disabledBackground})" },  
    { "trigger": "setDiscardable:", "contents": "setDiscardable:(${1:BOOL discardable})" },  
    { "trigger": "setDisconnectTimeout:", "contents": "setDisconnectTimeout:(${1:NSTimeInterval disconnectTimeout})" },  
    { "trigger": "setDiskCapacity:", "contents": "setDiskCapacity:(${1:NSUInteger diskCapacity})" },  
    { "trigger": "setDisplayedPerson:", "contents": "setDisplayedPerson:(${1:ABRecordRef displayedPerson})" },  
    { "trigger": "setDisplayedPerson:", "contents": "setDisplayedPerson:(${1:ABRecordRef displayedPerson})" },  
    { "trigger": "setDisplayedPerson:", "contents": "setDisplayedPerson:(${1:ABRecordRef displayedPerson})" },  
    { "trigger": "setDisplayedProperties:", "contents": "setDisplayedProperties:(${1:NSArray* displayedProperties})" },  
    { "trigger": "setDisplayedProperties:", "contents": "setDisplayedProperties:(${1:NSArray* displayedProperties})" },  
    { "trigger": "setDistanceFilter:", "contents": "setDistanceFilter:(${1:CLLocationDistance distanceFilter})" },  
    { "trigger": "setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:", "contents": "setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:(${1:UIImage* dividerImage}, forLeftSegmentState:${2:UIControlState leftState}, rightSegmentState:${3:UIControlState rightState}, barMetrics:${4:UIBarMetrics barMetrics})" },  
    { "trigger": "setDoesRelativeDateFormatting:", "contents": "setDoesRelativeDateFormatting:(${1:BOOL b})" },  
    { "trigger": "setDoubleSided:", "contents": "setDoubleSided:(${1:BOOL doubleSided})" },  
    { "trigger": "setDoubleSided:", "contents": "setDoubleSided:(${1:BOOL doubleSided})" },  
    { "trigger": "setDouble:forKey:", "contents": "setDouble:forKey:(${1:double value}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setDouble:forKey:", "contents": "setDouble:forKey:(${1:double value}, forKey:${2:NSString* defaultName})" },  
    { "trigger": "setDragState:", "contents": "setDragState:(${1:MKAnnotationViewDragState dragState})" },  
    { "trigger": "setDragState:animated:", "contents": "setDragState:animated:(${1:MKAnnotationViewDragState newDragState}, animated:${2:BOOL animated})" },  
    { "trigger": "setDraggable:", "contents": "setDraggable:(${1:BOOL draggable})" },  
    { "trigger": "setDrawableColorFormat:", "contents": "setDrawableColorFormat:(${1:GLKViewDrawableColorFormat drawableColorFormat})" },  
    { "trigger": "setDrawableDepthFormat:", "contents": "setDrawableDepthFormat:(${1:GLKViewDrawableDepthFormat drawableDepthFormat})" },  
    { "trigger": "setDrawableMultisample:", "contents": "setDrawableMultisample:(${1:GLKViewDrawableMultisample drawableMultisample})" },  
    { "trigger": "setDrawableProperties:", "contents": "setDrawableProperties:(${1:NSDictionary* drawableProperties})" },  
    { "trigger": "setDrawableProperties:", "contents": "setDrawableProperties:(${1:NSDictionary* drawableProperties})" },  
    { "trigger": "setDrawableStencilFormat:", "contents": "setDrawableStencilFormat:(${1:GLKViewDrawableStencilFormat drawableStencilFormat})" },  
    { "trigger": "setDuplex:", "contents": "setDuplex:(${1:UIPrintInfoDuplex duplex})" },  
    { "trigger": "setDuration:", "contents": "setDuration:(${1:CFTimeInterval duration})" },  
    { "trigger": "setDuration:", "contents": "setDuration:(${1:CMTime duration})" },  
    { "trigger": "setDuration:", "contents": "setDuration:(${1:CFTimeInterval duration})" },  
    { "trigger": "setEdgeAntialiasingMask:", "contents": "setEdgeAntialiasingMask:(${1:unsigned int edgeAntialiasingMask})" },  
    { "trigger": "setEditAction:", "contents": "setEditAction:(${1:SEL editAction})" },  
    { "trigger": "setEditViewDelegate:", "contents": "setEditViewDelegate:(${1:id editViewDelegate})" },  
    { "trigger": "setEditable:", "contents": "setEditable:(${1:BOOL editable})" },  
    { "trigger": "setEditing:", "contents": "setEditing:(${1:BOOL editing})" },  
    { "trigger": "setEditing:", "contents": "setEditing:(${1:BOOL editing})" },  
    { "trigger": "setEditing:", "contents": "setEditing:(${1:BOOL editing})" },  
    { "trigger": "setEditingAccessoryType:", "contents": "setEditingAccessoryType:(${1:UITableViewCellAccessoryType editingAccessoryType})" },  
    { "trigger": "setEditingAccessoryView:", "contents": "setEditingAccessoryView:(${1:UIView* editingAccessoryView})" },  
    { "trigger": "setEditing:animated:", "contents": "setEditing:animated:(${1:BOOL editing}, animated:${2:BOOL animated})" },  
    { "trigger": "setEditing:animated:", "contents": "setEditing:animated:(${1:BOOL editing}, animated:${2:BOOL animated})" },  
    { "trigger": "setEditing:animated:", "contents": "setEditing:animated:(${1:BOOL editing}, animated:${2:BOOL animated})" },  
    { "trigger": "setEmissionLatitude:", "contents": "setEmissionLatitude:(${1:CGFloat emissionLatitude})" },  
    { "trigger": "setEmissionLongitude:", "contents": "setEmissionLongitude:(${1:CGFloat emissionLongitude})" },  
    { "trigger": "setEmissionRange:", "contents": "setEmissionRange:(${1:CGFloat emissionRange})" },  
    { "trigger": "setEmissiveColor:", "contents": "setEmissiveColor:(${1:GLKVector4 emissiveColor})" },  
    { "trigger": "setEmitterCells:", "contents": "setEmitterCells:(${1:NSArray* emitterCells})" },  
    { "trigger": "setEmitterCells:", "contents": "setEmitterCells:(${1:NSArray* emitterCells})" },  
    { "trigger": "setEmitterDepth:", "contents": "setEmitterDepth:(${1:CGFloat emitterDepth})" },  
    { "trigger": "setEmitterMode:", "contents": "setEmitterMode:(${1:NSString* emitterMode})" },  
    { "trigger": "setEmitterPosition:", "contents": "setEmitterPosition:(${1:CGPoint emitterPosition})" },  
    { "trigger": "setEmitterShape:", "contents": "setEmitterShape:(${1:NSString* emitterShape})" },  
    { "trigger": "setEmitterSize:", "contents": "setEmitterSize:(${1:CGSize emitterSize})" },  
    { "trigger": "setEmitterZPosition:", "contents": "setEmitterZPosition:(${1:CGFloat emitterZPosition})" },  
    { "trigger": "setEnablePostProcessing:", "contents": "setEnablePostProcessing:(${1:BOOL enablePostProcessing})" },  
    { "trigger": "setEnableRate:", "contents": "setEnableRate:(${1:BOOL enableRate})" },  
    { "trigger": "setEnableSetNeedsDisplay:", "contents": "setEnableSetNeedsDisplay:(${1:BOOL enableSetNeedsDisplay})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:GLboolean enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:GLboolean enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:BOOL enabled})" },  
    { "trigger": "setEnabled:", "contents": "setEnabled:(${1:GLboolean enabled})" },  
    { "trigger": "setEnabled:forSegmentAtIndex:", "contents": "setEnabled:forSegmentAtIndex:(${1:BOOL enabled}, forSegmentAtIndex:${2:NSUInteger segment})" },  
    { "trigger": "setEnablesReturnKeyAutomatically:", "contents": "setEnablesReturnKeyAutomatically:(${1:BOOL enablesReturnKeyAutomatically})" },  
    { "trigger": "setEnablesReturnKeyAutomatically:", "contents": "setEnablesReturnKeyAutomatically:(${1:BOOL enablesReturnKeyAutomatically})" },  
    { "trigger": "setEnd:", "contents": "setEnd:(${1:GLfloat end})" },  
    { "trigger": "setEndDate:", "contents": "setEndDate:(${1:NSDate* endDate})" },  
    { "trigger": "setEndPlaybackTime:", "contents": "setEndPlaybackTime:(${1:NSTimeInterval endPlaybackTime})" },  
    { "trigger": "setEndPoint:", "contents": "setEndPoint:(${1:CGPoint endPoint})" },  
    { "trigger": "setEndProgress:", "contents": "setEndProgress:(${1:float endProgress})" },  
    { "trigger": "setEntities:", "contents": "setEntities:(${1:NSArray* entities})" },  
    { "trigger": "setEntities:forConfiguration:", "contents": "setEntities:forConfiguration:(${1:NSArray* entities}, forConfiguration:${2:NSString* configuration})" },  
    { "trigger": "setEntity:", "contents": "setEntity:(${1:NSEntityDescription* entity})" },  
    { "trigger": "setEntityMappings:", "contents": "setEntityMappings:(${1:NSArray* mappings})" },  
    { "trigger": "setEntityMigrationPolicyClassName:", "contents": "setEntityMigrationPolicyClassName:(${1:NSString* name})" },  
    { "trigger": "setEnvMode:", "contents": "setEnvMode:(${1:GLint envMode})" },  
    { "trigger": "setEra:", "contents": "setEra:(${1:NSInteger v})" },  
    { "trigger": "setEraSymbols:", "contents": "setEraSymbols:(${1:NSArray* array})" },  
    { "trigger": "setEvent:", "contents": "setEvent:(${1:EKEvent* event})" },  
    { "trigger": "setEvent:", "contents": "setEvent:(${1:EKEvent* event})" },  
    { "trigger": "setEventStore:", "contents": "setEventStore:(${1:EKEventStore* eventStore})" },  
    { "trigger": "setEvictsObjectsWithDiscardedContent:", "contents": "setEvictsObjectsWithDiscardedContent:(${1:BOOL b})" },  
    { "trigger": "setExclusiveTouch:", "contents": "setExclusiveTouch:(${1:BOOL exclusiveTouch})" },  
    { "trigger": "setExpectsMediaDataInRealTime:", "contents": "setExpectsMediaDataInRealTime:(${1:BOOL expectsMediaDataInRealTime})" },  
    { "trigger": "setExponentSymbol:", "contents": "setExponentSymbol:(${1:NSString* string})" },  
    { "trigger": "setExposureMode:", "contents": "setExposureMode:(${1:AVCaptureExposureMode exposureMode})" },  
    { "trigger": "setExposurePointOfInterest:", "contents": "setExposurePointOfInterest:(${1:CGPoint exposurePointOfInterest})" },  
    { "trigger": "setExpression:", "contents": "setExpression:(${1:NSExpression* expression})" },  
    { "trigger": "setExpressionResultType:", "contents": "setExpressionResultType:(${1:NSAttributeType type})" },  
    { "trigger": "setExtendedLanguageTag:", "contents": "setExtendedLanguageTag:(${1:NSString* extendedLanguageTag})" },  
    { "trigger": "setExtraAttributes:", "contents": "setExtraAttributes:(${1:NSDictionary* extraAttributes})" },  
    { "trigger": "setFetchBatchSize:", "contents": "setFetchBatchSize:(${1:NSUInteger bsize})" },  
    { "trigger": "setFetchLimit:", "contents": "setFetchLimit:(${1:NSUInteger limit})" },  
    { "trigger": "setFetchOffset:", "contents": "setFetchOffset:(${1:NSUInteger offset})" },  
    { "trigger": "setFetchRequest:", "contents": "setFetchRequest:(${1:NSFetchRequest* fetchRequest})" },  
    { "trigger": "setFetchRequestTemplate:forName:", "contents": "setFetchRequestTemplate:forName:(${1:NSFetchRequest* fetchRequestTemplate}, forName:${2:NSString* name})" },  
    { "trigger": "setFileAttributes:", "contents": "setFileAttributes:(${1:NSDictionary* fileAttributes})" },  
    { "trigger": "setFileLengthLimit:", "contents": "setFileLengthLimit:(${1:long long fileLengthLimit})" },  
    { "trigger": "setFileModificationDate:", "contents": "setFileModificationDate:(${1:NSDate* fileModificationDate})" },  
    { "trigger": "setFilename:", "contents": "setFilename:(${1:NSString* fileName})" },  
    { "trigger": "setFill" },  
    { "trigger": "setFillColor:", "contents": "setFillColor:(${1:UIColor* fillColor})" },  
    { "trigger": "setFillColor:", "contents": "setFillColor:(${1:CGColorRef fillColor})" },  
    { "trigger": "setFillMode:", "contents": "setFillMode:(${1:NSString* fillMode})" },  
    { "trigger": "setFillMode:", "contents": "setFillMode:(${1:NSString* fillMode})" },  
    { "trigger": "setFillRule:", "contents": "setFillRule:(${1:NSString* fillRule})" },  
    { "trigger": "setFilter:", "contents": "setFilter:(${1:id filter})" },  
    { "trigger": "setFilterPredicates:", "contents": "setFilterPredicates:(${1:NSSet* filterPredicates})" },  
    { "trigger": "setFilters:", "contents": "setFilters:(${1:NSArray* filters})" },  
    { "trigger": "setFinishedSelectedImage:withFinishedUnselectedImage:", "contents": "setFinishedSelectedImage:withFinishedUnselectedImage:(${1:UIImage* selectedImage}, withFinishedUnselectedImage:${2:UIImage* unselectedImage})" },  
    { "trigger": "setFireDate:", "contents": "setFireDate:(${1:NSDate* fireDate})" },  
    { "trigger": "setFireDate:", "contents": "setFireDate:(${1:NSDate* date})" },  
    { "trigger": "setFirstWeekday:", "contents": "setFirstWeekday:(${1:NSUInteger weekday})" },  
    { "trigger": "setFlashMode:", "contents": "setFlashMode:(${1:AVCaptureFlashMode flashMode})" },  
    { "trigger": "setFlatness:", "contents": "setFlatness:(${1:CGFloat flatness})" },  
    { "trigger": "setFloat:forKey:", "contents": "setFloat:forKey:(${1:float value}, forKey:${2:NSString* defaultName})" },  
    { "trigger": "setFocusMode:", "contents": "setFocusMode:(${1:AVCaptureFocusMode focusMode})" },  
    { "trigger": "setFocusPointOfInterest:", "contents": "setFocusPointOfInterest:(${1:CGPoint focusPointOfInterest})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:CFTypeRef font})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:UIFont* font})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:UIFont* font})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:UIFont* font})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:UIFont* font})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:UIFont* font})" },  
    { "trigger": "setFont:", "contents": "setFont:(${1:UIFont* font})" },  
    { "trigger": "setFontSize:", "contents": "setFontSize:(${1:CGFloat fontSize})" },  
    { "trigger": "setFooterHeight:", "contents": "setFooterHeight:(${1:CGFloat footerHeight})" },  
    { "trigger": "setForegroundColor:", "contents": "setForegroundColor:(${1:CGColorRef foregroundColor})" },  
    { "trigger": "setFormatWidth:", "contents": "setFormatWidth:(${1:NSUInteger number})" },  
    { "trigger": "setFormatterBehavior:", "contents": "setFormatterBehavior:(${1:NSDateFormatterBehavior behavior})" },  
    { "trigger": "setFormatterBehavior:", "contents": "setFormatterBehavior:(${1:NSNumberFormatterBehavior behavior})" },  
    { "trigger": "setForwardPlaybackEndTime:", "contents": "setForwardPlaybackEndTime:(${1:CMTime forwardPlaybackEndTime})" },  
    { "trigger": "setFrame:", "contents": "setFrame:(${1:CGRect frame})" },  
    { "trigger": "setFrame:", "contents": "setFrame:(${1:CGRect frame})" },  
    { "trigger": "setFrameDuration:", "contents": "setFrameDuration:(${1:CMTime frameDuration})" },  
    { "trigger": "setFrameInterval:", "contents": "setFrameInterval:(${1:NSInteger frameInterval})" },  
    { "trigger": "setFromValue:", "contents": "setFromValue:(${1:id fromValue})" },  
    { "trigger": "setFullscreen:", "contents": "setFullscreen:(${1:BOOL fullscreen})" },  
    { "trigger": "setFullscreen:animated:", "contents": "setFullscreen:animated:(${1:BOOL fullscreen}, animated:${2:BOOL animated})" },  
    { "trigger": "setGeneratesCalendarDates:", "contents": "setGeneratesCalendarDates:(${1:BOOL b})" },  
    { "trigger": "setGeneratesDecimalNumbers:", "contents": "setGeneratesDecimalNumbers:(${1:BOOL b})" },  
    { "trigger": "setGeometryFlipped:", "contents": "setGeometryFlipped:(${1:BOOL geometryFlipped})" },  
    { "trigger": "setGestureRecognizers:", "contents": "setGestureRecognizers:(${1:NSArray* gestureRecognizers})" },  
    { "trigger": "setGreenRange:", "contents": "setGreenRange:(${1:float greenRange})" },  
    { "trigger": "setGreenSpeed:", "contents": "setGreenSpeed:(${1:float greenSpeed})" },  
    { "trigger": "setGregorianStartDate:", "contents": "setGregorianStartDate:(${1:NSDate* date})" },  
    { "trigger": "setGroupingAttributes:", "contents": "setGroupingAttributes:(${1:NSArray* attrs})" },  
    { "trigger": "setGroupingSeparator:", "contents": "setGroupingSeparator:(${1:NSString* string})" },  
    { "trigger": "setGroupingSize:", "contents": "setGroupingSize:(${1:NSUInteger number})" },  
    { "trigger": "setGroupingType:", "contents": "setGroupingType:(${1:MPMediaGrouping groupingType})" },  
    { "trigger": "setGroupsByEvent:", "contents": "setGroupsByEvent:(${1:BOOL groupsByEvent})" },  
    { "trigger": "setGyroUpdateInterval:", "contents": "setGyroUpdateInterval:(${1:NSTimeInterval gyroUpdateInterval})" },  
    { "trigger": "setHTTPBody:", "contents": "setHTTPBody:(${1:NSData* data})" },  
    { "trigger": "setHTTPBodyStream:", "contents": "setHTTPBodyStream:(${1:NSInputStream* inputStream})" },  
    { "trigger": "setHTTPMethod:", "contents": "setHTTPMethod:(${1:NSString* method})" },  
    { "trigger": "setHTTPShouldHandleCookies:", "contents": "setHTTPShouldHandleCookies:(${1:BOOL should})" },  
    { "trigger": "setHTTPShouldUsePipelining:", "contents": "setHTTPShouldUsePipelining:(${1:BOOL shouldUsePipelining})" },  
    { "trigger": "setHasAction:", "contents": "setHasAction:(${1:BOOL hasAction})" },  
    { "trigger": "setHavingPredicate:", "contents": "setHavingPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "setHeaderHeight:", "contents": "setHeaderHeight:(${1:CGFloat headerHeight})" },  
    { "trigger": "setHeadingFilter:", "contents": "setHeadingFilter:(${1:CLLocationDegrees headingFilter})" },  
    { "trigger": "setHeadingOrientation:", "contents": "setHeadingOrientation:(${1:CLDeviceOrientation headingOrientation})" },  
    { "trigger": "setHidden:", "contents": "setHidden:(${1:BOOL hidden})" },  
    { "trigger": "setHidden:", "contents": "setHidden:(${1:BOOL hidden})" },  
    { "trigger": "setHidesAccessoryWhenEditing:", "contents": "setHidesAccessoryWhenEditing:(${1:BOOL hidesAccessoryWhenEditing})" },  
    { "trigger": "setHidesBackButton:", "contents": "setHidesBackButton:(${1:BOOL hidesBackButton})" },  
    { "trigger": "setHidesBackButton:animated:", "contents": "setHidesBackButton:animated:(${1:BOOL hidesBackButton}, animated:${2:BOOL animated})" },  
    { "trigger": "setHidesBottomBarWhenPushed:", "contents": "setHidesBottomBarWhenPushed:(${1:BOOL hidesBottomBarWhenPushed})" },  
    { "trigger": "setHidesForSinglePage:", "contents": "setHidesForSinglePage:(${1:BOOL hidesForSinglePage})" },  
    { "trigger": "setHidesWhenStopped:", "contents": "setHidesWhenStopped:(${1:BOOL hidesWhenStopped})" },  
    { "trigger": "setHighlighted:", "contents": "setHighlighted:(${1:BOOL highlighted})" },  
    { "trigger": "setHighlighted:", "contents": "setHighlighted:(${1:BOOL highlighted})" },  
    { "trigger": "setHighlighted:", "contents": "setHighlighted:(${1:BOOL highlighted})" },  
    { "trigger": "setHighlighted:", "contents": "setHighlighted:(${1:BOOL highlighted})" },  
    { "trigger": "setHighlighted:", "contents": "setHighlighted:(${1:BOOL highlighted})" },  
    { "trigger": "setHighlightedAnimationImages:", "contents": "setHighlightedAnimationImages:(${1:NSArray* highlightedAnimationImages})" },  
    { "trigger": "setHighlightedImage:", "contents": "setHighlightedImage:(${1:UIImage* highlightedImage})" },  
    { "trigger": "setHighlightedItemForProperty:withIdentifier:", "contents": "setHighlightedItemForProperty:withIdentifier:(${1:ABPropertyID property}, withIdentifier:${2:ABMultiValueIdentifier identifier})" },  
    { "trigger": "setHighlightedTextColor:", "contents": "setHighlightedTextColor:(${1:UIColor* highlightedTextColor})" },  
    { "trigger": "setHighlighted:animated:", "contents": "setHighlighted:animated:(${1:BOOL highlighted}, animated:${2:BOOL animated})" },  
    { "trigger": "setHosted:", "contents": "setHosted:(${1:BOOL hosted})" },  
    { "trigger": "setHostedPlayerReady:", "contents": "setHostedPlayerReady:(${1:NSString* playerID})" },  
    { "trigger": "setHostedPlayer:connected:", "contents": "setHostedPlayer:connected:(${1:NSString* playerID}, connected:${2:BOOL connected})" },  
    { "trigger": "setHour:", "contents": "setHour:(${1:NSInteger v})" },  
    { "trigger": "setIdentifier:", "contents": "setIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "setIdentifier:", "contents": "setIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "setIdleTimerDisabled:", "contents": "setIdleTimerDisabled:(${1:BOOL idleTimerDisabled})" },  
    { "trigger": "setIgnoredWords:", "contents": "setIgnoredWords:(${1:NSArray* words})" },  
    { "trigger": "setImage:", "contents": "setImage:(${1:UIImage* image})" },  
    { "trigger": "setImage:", "contents": "setImage:(${1:UIImage* image})" },  
    { "trigger": "setImage:", "contents": "setImage:(${1:UIImage* image})" },  
    { "trigger": "setImage:", "contents": "setImage:(${1:UIImage* image})" },  
    { "trigger": "setImage:", "contents": "setImage:(${1:UIImage* image})" },  
    { "trigger": "setImageData:metadata:completionBlock:", "contents": "setImageData:metadata:completionBlock:(${1:NSData* imageData}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})" },  
    { "trigger": "setImageEdgeInsets:", "contents": "setImageEdgeInsets:(${1:UIEdgeInsets imageEdgeInsets})" },  
    { "trigger": "setImageInsets:", "contents": "setImageInsets:(${1:UIEdgeInsets imageInsets})" },  
    { "trigger": "setImage:forSearchBarIcon:state:", "contents": "setImage:forSearchBarIcon:state:(${1:UIImage* iconImage}, forSearchBarIcon:${2:UISearchBarIcon icon}, state:${3:UIControlState state})" },  
    { "trigger": "setImage:forSegmentAtIndex:", "contents": "setImage:forSegmentAtIndex:(${1:UIImage* image}, forSegmentAtIndex:${2:NSUInteger segment})" },  
    { "trigger": "setImage:forState:", "contents": "setImage:forState:(${1:UIImage* image}, forState:${2:UIControlState state})" },  
    { "trigger": "setImages:", "contents": "setImages:(${1:NSArray* images})" },  
    { "trigger": "setIncludesPendingChanges:", "contents": "setIncludesPendingChanges:(${1:BOOL flag})" },  
    { "trigger": "setIncludesPropertyValues:", "contents": "setIncludesPropertyValues:(${1:BOOL yesNo})" },  
    { "trigger": "setIncludesSubentities:", "contents": "setIncludesSubentities:(${1:BOOL yesNo})" },  
    { "trigger": "setIndentationLevel:", "contents": "setIndentationLevel:(${1:NSInteger indentationLevel})" },  
    { "trigger": "setIndentationWidth:", "contents": "setIndentationWidth:(${1:CGFloat indentationWidth})" },  
    { "trigger": "setIndexed:", "contents": "setIndexed:(${1:BOOL flag})" },  
    { "trigger": "setIndexedBySpotlight:", "contents": "setIndexedBySpotlight:(${1:BOOL flag})" },  
    { "trigger": "setIndicatorStyle:", "contents": "setIndicatorStyle:(${1:UIScrollViewIndicatorStyle indicatorStyle})" },  
    { "trigger": "setInitialPlaybackTime:", "contents": "setInitialPlaybackTime:(${1:NSTimeInterval initialPlaybackTime})" },  
    { "trigger": "setInitialText:", "contents": "setInitialText:(${1:NSString* text})" },  
    { "trigger": "setInputAccessoryView:", "contents": "setInputAccessoryView:(${1:UIView* inputAccessoryView})" },  
    { "trigger": "setInputAccessoryView:", "contents": "setInputAccessoryView:(${1:UIView* inputAccessoryView})" },  
    { "trigger": "setInputDelegate:", "contents": "setInputDelegate:(${1:id inputDelegate})" },  
    { "trigger": "setInputDelegate:", "contents": "setInputDelegate:(${1:id inputDelegate})" },  
    { "trigger": "setInputMeteringEnabled:", "contents": "setInputMeteringEnabled:(${1:BOOL inputMeteringEnabled})" },  
    { "trigger": "setInputParameters:", "contents": "setInputParameters:(${1:NSArray* inputParameters})" },  
    { "trigger": "setInputView:", "contents": "setInputView:(${1:UIView* inputView})" },  
    { "trigger": "setInputView:", "contents": "setInputView:(${1:UIView* inputView})" },  
    { "trigger": "setInstanceAlphaOffset:", "contents": "setInstanceAlphaOffset:(${1:float instanceAlphaOffset})" },  
    { "trigger": "setInstanceBlueOffset:", "contents": "setInstanceBlueOffset:(${1:float instanceBlueOffset})" },  
    { "trigger": "setInstanceColor:", "contents": "setInstanceColor:(${1:CGColorRef instanceColor})" },  
    { "trigger": "setInstanceCount:", "contents": "setInstanceCount:(${1:NSInteger instanceCount})" },  
    { "trigger": "setInstanceDelay:", "contents": "setInstanceDelay:(${1:CFTimeInterval instanceDelay})" },  
    { "trigger": "setInstanceGreenOffset:", "contents": "setInstanceGreenOffset:(${1:float instanceGreenOffset})" },  
    { "trigger": "setInstanceRedOffset:", "contents": "setInstanceRedOffset:(${1:float instanceRedOffset})" },  
    { "trigger": "setInstanceTransform:", "contents": "setInstanceTransform:(${1:CATransform3D instanceTransform})" },  
    { "trigger": "setInstructions:", "contents": "setInstructions:(${1:NSArray* instructions})" },  
    { "trigger": "setInteger:forKey:", "contents": "setInteger:forKey:(${1:NSInteger value}, forKey:${2:NSString* defaultName})" },  
    { "trigger": "setInternationalCurrencySymbol:", "contents": "setInternationalCurrencySymbol:(${1:NSString* string})" },  
    { "trigger": "setInverseRelationship:", "contents": "setInverseRelationship:(${1:NSRelationshipDescription* relationship})" },  
    { "trigger": "setInviteHandler:", "contents": "setInviteHandler:(${1:void (^)(GKInvite *, NSArray *) inviteHandler})" },  
    { "trigger": "setIsAccessibilityElement:", "contents": "setIsAccessibilityElement:(${1:BOOL isAccessibilityElement})" },  
    { "trigger": "setIsAccessibilityElement:", "contents": "setIsAccessibilityElement:(${1:BOOL isAccessibilityElement})" },  
    { "trigger": "setIsAccessibilityElement:", "contents": "setIsAccessibilityElement:(${1:BOOL isAccessibilityElement})" },  
    { "trigger": "setItems:", "contents": "setItems:(${1:NSArray* items})" },  
    { "trigger": "setItems:", "contents": "setItems:(${1:NSArray* items})" },  
    { "trigger": "setItems:", "contents": "setItems:(${1:NSArray* items})" },  
    { "trigger": "setItems:", "contents": "setItems:(${1:NSArray* items})" },  
    { "trigger": "setItems:", "contents": "setItems:(${1:NSArray* items})" },  
    { "trigger": "setItems:animated:", "contents": "setItems:animated:(${1:NSArray* items}, animated:${2:BOOL animated})" },  
    { "trigger": "setItems:animated:", "contents": "setItems:animated:(${1:NSArray* items}, animated:${2:BOOL animated})" },  
    { "trigger": "setItems:animated:", "contents": "setItems:animated:(${1:NSArray* items}, animated:${2:BOOL animated})" },  
    { "trigger": "setJobName:", "contents": "setJobName:(${1:NSString* jobName})" },  
    { "trigger": "setKeepAliveTimeout:handler:", "contents": "setKeepAliveTimeout:handler:(${1:NSTimeInterval timeout}, handler:${2:void (^)(void) keepAliveHandler})" },  
    { "trigger": "setKey:", "contents": "setKey:(${1:id key})" },  
    { "trigger": "setKeyPath:", "contents": "setKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "setKeySpace:", "contents": "setKeySpace:(${1:NSString* keySpace})" },  
    { "trigger": "setKeyTimes:", "contents": "setKeyTimes:(${1:NSArray* keyTimes})" },  
    { "trigger": "setKeyboardAppearance:", "contents": "setKeyboardAppearance:(${1:UIKeyboardAppearance keyboardAppearance})" },  
    { "trigger": "setKeyboardAppearance:", "contents": "setKeyboardAppearance:(${1:UIKeyboardAppearance keyboardAppearance})" },  
    { "trigger": "setKeyboardType:", "contents": "setKeyboardType:(${1:UIKeyboardType keyboardType})" },  
    { "trigger": "setKeyboardType:", "contents": "setKeyboardType:(${1:UIKeyboardType keyboardType})" },  
    { "trigger": "setKeyboardType:", "contents": "setKeyboardType:(${1:UIKeyboardType keyboardType})" },  
    { "trigger": "setLabel:", "contents": "setLabel:(${1:NSString* label})" },  
    { "trigger": "setLabel:", "contents": "setLabel:(${1:NSString* label})" },  
    { "trigger": "setLandscapeImagePhone:", "contents": "setLandscapeImagePhone:(${1:UIImage* landscapeImagePhone})" },  
    { "trigger": "setLandscapeImagePhoneInsets:", "contents": "setLandscapeImagePhoneInsets:(${1:UIEdgeInsets landscapeImagePhoneInsets})" },  
    { "trigger": "setLanguageCode:", "contents": "setLanguageCode:(${1:NSString* languageCode})" },  
    { "trigger": "setLayerInstructions:", "contents": "setLayerInstructions:(${1:NSArray* layerInstructions})" },  
    { "trigger": "setLeaderboardDelegate:", "contents": "setLeaderboardDelegate:(${1:id leaderboardDelegate})" },  
    { "trigger": "setLeftBarButtonItem:", "contents": "setLeftBarButtonItem:(${1:UIBarButtonItem* leftBarButtonItem})" },  
    { "trigger": "setLeftBarButtonItem:animated:", "contents": "setLeftBarButtonItem:animated:(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})" },  
    { "trigger": "setLeftBarButtonItems:", "contents": "setLeftBarButtonItems:(${1:NSArray* leftBarButtonItems})" },  
    { "trigger": "setLeftBarButtonItems:animated:", "contents": "setLeftBarButtonItems:animated:(${1:NSArray* items}, animated:${2:BOOL animated})" },  
    { "trigger": "setLeftCalloutAccessoryView:", "contents": "setLeftCalloutAccessoryView:(${1:UIView* leftCalloutAccessoryView})" },  
    { "trigger": "setLeftItemsSupplementBackButton:", "contents": "setLeftItemsSupplementBackButton:(${1:BOOL leftItemsSupplementBackButton})" },  
    { "trigger": "setLeftView:", "contents": "setLeftView:(${1:UIView* leftView})" },  
    { "trigger": "setLeftViewMode:", "contents": "setLeftViewMode:(${1:UITextFieldViewMode leftViewMode})" },  
    { "trigger": "setLength:", "contents": "setLength:(${1:NSUInteger length})" },  
    { "trigger": "setLenient:", "contents": "setLenient:(${1:BOOL b})" },  
    { "trigger": "setLenient:", "contents": "setLenient:(${1:BOOL b})" },  
    { "trigger": "setLevelsOfDetail:", "contents": "setLevelsOfDetail:(${1:size_t levelsOfDetail})" },  
    { "trigger": "setLevelsOfDetailBias:", "contents": "setLevelsOfDetailBias:(${1:size_t levelsOfDetailBias})" },  
    { "trigger": "setLevelsOfUndo:", "contents": "setLevelsOfUndo:(${1:NSUInteger levels})" },  
    { "trigger": "setLifetime:", "contents": "setLifetime:(${1:float lifetime})" },  
    { "trigger": "setLifetime:", "contents": "setLifetime:(${1:float lifetime})" },  
    { "trigger": "setLifetimeRange:", "contents": "setLifetimeRange:(${1:float lifetimeRange})" },  
    { "trigger": "setLightModelAmbientColor:", "contents": "setLightModelAmbientColor:(${1:GLKVector4 lightModelAmbientColor})" },  
    { "trigger": "setLightModelTwoSided:", "contents": "setLightModelTwoSided:(${1:GLboolean lightModelTwoSided})" },  
    { "trigger": "setLightingType:", "contents": "setLightingType:(${1:GLKLightingType lightingType})" },  
    { "trigger": "setLineBreakMode:", "contents": "setLineBreakMode:(${1:UILineBreakMode lineBreakMode})" },  
    { "trigger": "setLineBreakMode:", "contents": "setLineBreakMode:(${1:UILineBreakMode lineBreakMode})" },  
    { "trigger": "setLineBreakMode:", "contents": "setLineBreakMode:(${1:UILineBreakMode lineBreakMode})" },  
    { "trigger": "setLineCap:", "contents": "setLineCap:(${1:NSString* lineCap})" },  
    { "trigger": "setLineCap:", "contents": "setLineCap:(${1:CGLineCap lineCap})" },  
    { "trigger": "setLineCapStyle:", "contents": "setLineCapStyle:(${1:CGLineCap lineCapStyle})" },  
    { "trigger": "setLineDashPattern:", "contents": "setLineDashPattern:(${1:NSArray* lineDashPattern})" },  
    { "trigger": "setLineDashPattern:", "contents": "setLineDashPattern:(${1:NSArray* lineDashPattern})" },  
    { "trigger": "setLineDashPhase:", "contents": "setLineDashPhase:(${1:CGFloat lineDashPhase})" },  
    { "trigger": "setLineDashPhase:", "contents": "setLineDashPhase:(${1:CGFloat lineDashPhase})" },  
    { "trigger": "setLineDash:count:phase:", "contents": "setLineDash:count:phase:(${1:CGFloat* pattern}, count:${2:NSInteger count}, phase:${3:CGFloat phase})" },  
    { "trigger": "setLineJoin:", "contents": "setLineJoin:(${1:CGLineJoin lineJoin})" },  
    { "trigger": "setLineJoin:", "contents": "setLineJoin:(${1:NSString* lineJoin})" },  
    { "trigger": "setLineJoinStyle:", "contents": "setLineJoinStyle:(${1:CGLineJoin lineJoinStyle})" },  
    { "trigger": "setLineWidth:", "contents": "setLineWidth:(${1:CGFloat lineWidth})" },  
    { "trigger": "setLineWidth:", "contents": "setLineWidth:(${1:CGFloat lineWidth})" },  
    { "trigger": "setLineWidth:", "contents": "setLineWidth:(${1:CGFloat lineWidth})" },  
    { "trigger": "setLinearAttenuation:", "contents": "setLinearAttenuation:(${1:GLfloat linearAttenuation})" },  
    { "trigger": "setLocale:", "contents": "setLocale:(${1:NSLocale* locale})" },  
    { "trigger": "setLocale:", "contents": "setLocale:(${1:NSLocale* locale})" },  
    { "trigger": "setLocale:", "contents": "setLocale:(${1:NSLocale* locale})" },  
    { "trigger": "setLocale:", "contents": "setLocale:(${1:NSLocale* locale})" },  
    { "trigger": "setLocale:", "contents": "setLocale:(${1:id locale})" },  
    { "trigger": "setLocale:", "contents": "setLocale:(${1:NSLocale* locale})" },  
    { "trigger": "setLocalizationDictionary:", "contents": "setLocalizationDictionary:(${1:NSDictionary* localizationDictionary})" },  
    { "trigger": "setLocation:", "contents": "setLocation:(${1:NSString* location})" },  
    { "trigger": "setLocations:", "contents": "setLocations:(${1:NSArray* locations})" },  
    { "trigger": "setLongEraSymbols:", "contents": "setLongEraSymbols:(${1:NSArray* array})" },  
    { "trigger": "setLongLong:forKey:", "contents": "setLongLong:forKey:(${1:long long value}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setMagnetometerUpdateInterval:", "contents": "setMagnetometerUpdateInterval:(${1:NSTimeInterval magnetometerUpdateInterval})" },  
    { "trigger": "setMagnificationFilter:", "contents": "setMagnificationFilter:(${1:NSString* magnificationFilter})" },  
    { "trigger": "setMagnificationFilter:", "contents": "setMagnificationFilter:(${1:NSString* magnificationFilter})" },  
    { "trigger": "setMailComposeDelegate:", "contents": "setMailComposeDelegate:(${1:id mailComposeDelegate})" },  
    { "trigger": "setMainDocumentURL:", "contents": "setMainDocumentURL:(${1:NSURL* URL})" },  
    { "trigger": "setManagedObjectClassName:", "contents": "setManagedObjectClassName:(${1:NSString* name})" },  
    { "trigger": "setMapType:", "contents": "setMapType:(${1:MKMapType mapType})" },  
    { "trigger": "setMapView:", "contents": "setMapView:(${1:MKMapView* mapView})" },  
    { "trigger": "setMappingType:", "contents": "setMappingType:(${1:NSEntityMappingType type})" },  
    { "trigger": "setMarkedTextStyle:", "contents": "setMarkedTextStyle:(${1:NSDictionary* markedTextStyle})" },  
    { "trigger": "setMarkedTextStyle:", "contents": "setMarkedTextStyle:(${1:NSDictionary* markedTextStyle})" },  
    { "trigger": "setMarkedText:selectedRange:", "contents": "setMarkedText:selectedRange:(${1:NSString* markedText}, selectedRange:${2:NSRange selectedRange})" },  
    { "trigger": "setMarkedText:selectedRange:", "contents": "setMarkedText:selectedRange:(${1:NSString* markedText}, selectedRange:${2:NSRange selectedRange})" },  
    { "trigger": "setMarkupText:", "contents": "setMarkupText:(${1:NSString* markupText})" },  
    { "trigger": "setMask:", "contents": "setMask:(${1:CALayer* mask})" },  
    { "trigger": "setMasksToBounds:", "contents": "setMasksToBounds:(${1:BOOL masksToBounds})" },  
    { "trigger": "setMatchOutcome:", "contents": "setMatchOutcome:(${1:GKTurnBasedMatchOutcome matchOutcome})" },  
    { "trigger": "setMatchmakerDelegate:", "contents": "setMatchmakerDelegate:(${1:id matchmakerDelegate})" },  
    { "trigger": "setMatrix:", "contents": "setMatrix:(${1:GLKMatrix3 matrix})" },  
    { "trigger": "setMaxConcurrentOperationCount:", "contents": "setMaxConcurrentOperationCount:(${1:NSInteger cnt})" },  
    { "trigger": "setMaxCount:", "contents": "setMaxCount:(${1:NSUInteger maxCount})" },  
    { "trigger": "setMaxPlayers:", "contents": "setMaxPlayers:(${1:NSUInteger maxPlayers})" },  
    { "trigger": "setMaxRecordedDuration:", "contents": "setMaxRecordedDuration:(${1:CMTime maxRecordedDuration})" },  
    { "trigger": "setMaxRecordedFileSize:", "contents": "setMaxRecordedFileSize:(${1:int64_t maxRecordedFileSize})" },  
    { "trigger": "setMaximum:", "contents": "setMaximum:(${1:NSNumber* number})" },  
    { "trigger": "setMaximumContentHeight:", "contents": "setMaximumContentHeight:(${1:CGFloat maximumContentHeight})" },  
    { "trigger": "setMaximumContentWidth:", "contents": "setMaximumContentWidth:(${1:CGFloat maximumContentWidth})" },  
    { "trigger": "setMaximumDate:", "contents": "setMaximumDate:(${1:NSDate* maximumDate})" },  
    { "trigger": "setMaximumFractionDigits:", "contents": "setMaximumFractionDigits:(${1:NSUInteger number})" },  
    { "trigger": "setMaximumIntegerDigits:", "contents": "setMaximumIntegerDigits:(${1:NSUInteger number})" },  
    { "trigger": "setMaximumNumberOfTouches:", "contents": "setMaximumNumberOfTouches:(${1:NSUInteger maximumNumberOfTouches})" },  
    { "trigger": "setMaximumSignificantDigits:", "contents": "setMaximumSignificantDigits:(${1:NSUInteger number})" },  
    { "trigger": "setMaximumSize:", "contents": "setMaximumSize:(${1:CGSize maximumSize})" },  
    { "trigger": "setMaximumTrackImage:forState:", "contents": "setMaximumTrackImage:forState:(${1:UIImage* image}, forState:${2:UIControlState state})" },  
    { "trigger": "setMaximumTrackTintColor:", "contents": "setMaximumTrackTintColor:(${1:UIColor* maximumTrackTintColor})" },  
    { "trigger": "setMaximumValue:", "contents": "setMaximumValue:(${1:double maximumValue})" },  
    { "trigger": "setMaximumValue:", "contents": "setMaximumValue:(${1:float maximumValue})" },  
    { "trigger": "setMaximumValueImage:", "contents": "setMaximumValueImage:(${1:UIImage* maximumValueImage})" },  
    { "trigger": "setMaximumZoomScale:", "contents": "setMaximumZoomScale:(${1:float maximumZoomScale})" },  
    { "trigger": "setMediaPlaybackAllowsAirPlay:", "contents": "setMediaPlaybackAllowsAirPlay:(${1:BOOL mediaPlaybackAllowsAirPlay})" },  
    { "trigger": "setMediaPlaybackRequiresUserAction:", "contents": "setMediaPlaybackRequiresUserAction:(${1:BOOL mediaPlaybackRequiresUserAction})" },  
    { "trigger": "setMediaTimeScale:", "contents": "setMediaTimeScale:(${1:CMTimeScale mediaTimeScale})" },  
    { "trigger": "setMediaTypes:", "contents": "setMediaTypes:(${1:NSArray* mediaTypes})" },  
    { "trigger": "setMemoryCapacity:", "contents": "setMemoryCapacity:(${1:NSUInteger memoryCapacity})" },  
    { "trigger": "setMenuItems:", "contents": "setMenuItems:(${1:NSArray* menuItems})" },  
    { "trigger": "setMenuVisible:", "contents": "setMenuVisible:(${1:BOOL menuVisible})" },  
    { "trigger": "setMenuVisible:animated:", "contents": "setMenuVisible:animated:(${1:BOOL menuVisible}, animated:${2:BOOL animated})" },  
    { "trigger": "setMergePolicy:", "contents": "setMergePolicy:(${1:id mergePolicy})" },  
    { "trigger": "setMessage:", "contents": "setMessage:(${1:NSString* message})" },  
    { "trigger": "setMessage:", "contents": "setMessage:(${1:NSString* message})" },  
    { "trigger": "setMessage:", "contents": "setMessage:(${1:NSString* message})" },  
    { "trigger": "setMessage:", "contents": "setMessage:(${1:NSString* message})" },  
    { "trigger": "setMessageBody:isHTML:", "contents": "setMessageBody:isHTML:(${1:NSString* body}, isHTML:${2:BOOL isHTML})" },  
    { "trigger": "setMessageComposeDelegate:", "contents": "setMessageComposeDelegate:(${1:id messageComposeDelegate})" },  
    { "trigger": "setMetadata:", "contents": "setMetadata:(${1:NSDictionary* storeMetadata})" },  
    { "trigger": "setMetadata:", "contents": "setMetadata:(${1:NSArray* metadata})" },  
    { "trigger": "setMetadata:", "contents": "setMetadata:(${1:NSArray* metadata})" },  
    { "trigger": "setMetadata:", "contents": "setMetadata:(${1:NSArray* metadata})" },  
    { "trigger": "setMetadata:", "contents": "setMetadata:(${1:NSArray* metadata})" },  
    { "trigger": "setMetadata:forPersistentStore:", "contents": "setMetadata:forPersistentStore:(${1:NSDictionary* metadata}, forPersistentStore:${2:NSPersistentStore* store})" },  
    { "trigger": "setMeteringEnabled:", "contents": "setMeteringEnabled:(${1:BOOL meteringEnabled})" },  
    { "trigger": "setMeteringEnabled:", "contents": "setMeteringEnabled:(${1:BOOL meteringEnabled})" },  
    { "trigger": "setMicrophoneMuted:", "contents": "setMicrophoneMuted:(${1:BOOL microphoneMuted})" },  
    { "trigger": "setMinCount:", "contents": "setMinCount:(${1:NSUInteger minCount})" },  
    { "trigger": "setMinFrameDuration:", "contents": "setMinFrameDuration:(${1:CMTime minFrameDuration})" },  
    { "trigger": "setMinFreeDiskSpaceLimit:", "contents": "setMinFreeDiskSpaceLimit:(${1:int64_t minFreeDiskSpaceLimit})" },  
    { "trigger": "setMinPlayers:", "contents": "setMinPlayers:(${1:NSUInteger minPlayers})" },  
    { "trigger": "setMinificationFilter:", "contents": "setMinificationFilter:(${1:NSString* minificationFilter})" },  
    { "trigger": "setMinificationFilter:", "contents": "setMinificationFilter:(${1:NSString* minificationFilter})" },  
    { "trigger": "setMinificationFilterBias:", "contents": "setMinificationFilterBias:(${1:float minificationFilterBias})" },  
    { "trigger": "setMinificationFilterBias:", "contents": "setMinificationFilterBias:(${1:float minificationFilterBias})" },  
    { "trigger": "setMinimum:", "contents": "setMinimum:(${1:NSNumber* number})" },  
    { "trigger": "setMinimumDate:", "contents": "setMinimumDate:(${1:NSDate* minimumDate})" },  
    { "trigger": "setMinimumDaysInFirstWeek:", "contents": "setMinimumDaysInFirstWeek:(${1:NSUInteger mdw})" },  
    { "trigger": "setMinimumFontSize:", "contents": "setMinimumFontSize:(${1:CGFloat minimumFontSize})" },  
    { "trigger": "setMinimumFontSize:", "contents": "setMinimumFontSize:(${1:CGFloat minimumFontSize})" },  
    { "trigger": "setMinimumFractionDigits:", "contents": "setMinimumFractionDigits:(${1:NSUInteger number})" },  
    { "trigger": "setMinimumIntegerDigits:", "contents": "setMinimumIntegerDigits:(${1:NSUInteger number})" },  
    { "trigger": "setMinimumNumberOfTouches:", "contents": "setMinimumNumberOfTouches:(${1:NSUInteger minimumNumberOfTouches})" },  
    { "trigger": "setMinimumPressDuration:", "contents": "setMinimumPressDuration:(${1:CFTimeInterval minimumPressDuration})" },  
    { "trigger": "setMinimumSignificantDigits:", "contents": "setMinimumSignificantDigits:(${1:NSUInteger number})" },  
    { "trigger": "setMinimumTrackImage:forState:", "contents": "setMinimumTrackImage:forState:(${1:UIImage* image}, forState:${2:UIControlState state})" },  
    { "trigger": "setMinimumTrackTintColor:", "contents": "setMinimumTrackTintColor:(${1:UIColor* minimumTrackTintColor})" },  
    { "trigger": "setMinimumValue:", "contents": "setMinimumValue:(${1:float minimumValue})" },  
    { "trigger": "setMinimumValue:", "contents": "setMinimumValue:(${1:double minimumValue})" },  
    { "trigger": "setMinimumValueImage:", "contents": "setMinimumValueImage:(${1:UIImage* minimumValueImage})" },  
    { "trigger": "setMinimumZoomScale:", "contents": "setMinimumZoomScale:(${1:float minimumZoomScale})" },  
    { "trigger": "setMinusSign:", "contents": "setMinusSign:(${1:NSString* string})" },  
    { "trigger": "setMinute:", "contents": "setMinute:(${1:NSInteger v})" },  
    { "trigger": "setMinuteInterval:", "contents": "setMinuteInterval:(${1:NSInteger minuteInterval})" },  
    { "trigger": "setMirrored:", "contents": "setMirrored:(${1:BOOL mirrored})" },  
    { "trigger": "setMiterLimit:", "contents": "setMiterLimit:(${1:CGFloat miterLimit})" },  
    { "trigger": "setMiterLimit:", "contents": "setMiterLimit:(${1:CGFloat miterLimit})" },  
    { "trigger": "setMiterLimit:", "contents": "setMiterLimit:(${1:CGFloat miterLimit})" },  
    { "trigger": "setModalInPopover:", "contents": "setModalInPopover:(${1:BOOL modalInPopover})" },  
    { "trigger": "setModalPresentationStyle:", "contents": "setModalPresentationStyle:(${1:UIModalPresentationStyle modalPresentationStyle})" },  
    { "trigger": "setModalTransitionStyle:", "contents": "setModalTransitionStyle:(${1:UIModalTransitionStyle modalTransitionStyle})" },  
    { "trigger": "setMode:", "contents": "setMode:(${1:GLint mode})" },  
    { "trigger": "setMode:error:", "contents": "setMode:error:(${1:NSString* theMode}, error:${2:NSError** outError})" },  
    { "trigger": "setModelConfiguration:", "contents": "setModelConfiguration:(${1:NSString* modelConfiguration})" },  
    { "trigger": "setModelviewMatrix:", "contents": "setModelviewMatrix:(${1:GLKMatrix4 modelviewMatrix})" },  
    { "trigger": "setMomentary:", "contents": "setMomentary:(${1:BOOL momentary})" },  
    { "trigger": "setMonth:", "contents": "setMonth:(${1:NSInteger v})" },  
    { "trigger": "setMonthSymbols:", "contents": "setMonthSymbols:(${1:NSArray* array})" },  
    { "trigger": "setMovieControlMode:", "contents": "setMovieControlMode:(${1:MPMovieControlMode movieControlMode})" },  
    { "trigger": "setMovieFragmentInterval:", "contents": "setMovieFragmentInterval:(${1:CMTime movieFragmentInterval})" },  
    { "trigger": "setMovieFragmentInterval:", "contents": "setMovieFragmentInterval:(${1:CMTime movieFragmentInterval})" },  
    { "trigger": "setMovieSourceType:", "contents": "setMovieSourceType:(${1:MPMovieSourceType movieSourceType})" },  
    { "trigger": "setMovieTimeScale:", "contents": "setMovieTimeScale:(${1:CMTimeScale movieTimeScale})" },  
    { "trigger": "setMultipleSelectionBackgroundView:", "contents": "setMultipleSelectionBackgroundView:(${1:UIView* multipleSelectionBackgroundView})" },  
    { "trigger": "setMultipleTouchEnabled:", "contents": "setMultipleTouchEnabled:(${1:BOOL multipleTouchEnabled})" },  
    { "trigger": "setMultiplier:", "contents": "setMultiplier:(${1:NSNumber* number})" },  
    { "trigger": "setMute:forPlayer:", "contents": "setMute:forPlayer:(${1:BOOL isMuted}, forPlayer:${2:NSString* playerID})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:GLuint name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* n})" },  
    { "trigger": "setName:", "contents": "setName:(${1:NSString* name})" },  
    { "trigger": "setNaturalSize:", "contents": "setNaturalSize:(${1:CGSize naturalSize})" },  
    { "trigger": "setNaturalTimeScale:", "contents": "setNaturalTimeScale:(${1:CMTimeScale naturalTimeScale})" },  
    { "trigger": "setNavigationBarHidden:", "contents": "setNavigationBarHidden:(${1:BOOL navigationBarHidden})" },  
    { "trigger": "setNavigationBarHidden:animated:", "contents": "setNavigationBarHidden:animated:(${1:BOOL hidden}, animated:${2:BOOL animated})" },  
    { "trigger": "setNeedsDisplay" },  
    { "trigger": "setNeedsDisplay" },  
    { "trigger": "setNeedsDisplayInMapRect:", "contents": "setNeedsDisplayInMapRect:(${1:MKMapRect mapRect})" },  
    { "trigger": "setNeedsDisplayInMapRect:zoomScale:", "contents": "setNeedsDisplayInMapRect:zoomScale:(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})" },  
    { "trigger": "setNeedsDisplayInRect:", "contents": "setNeedsDisplayInRect:(${1:CGRect rect})" },  
    { "trigger": "setNeedsDisplayInRect:", "contents": "setNeedsDisplayInRect:(${1:CGRect r})" },  
    { "trigger": "setNeedsDisplayOnBoundsChange:", "contents": "setNeedsDisplayOnBoundsChange:(${1:BOOL needsDisplayOnBoundsChange})" },  
    { "trigger": "setNeedsLayout" },  
    { "trigger": "setNeedsLayout" },  
    { "trigger": "setNegativeFormat:", "contents": "setNegativeFormat:(${1:NSString* format})" },  
    { "trigger": "setNegativeInfinitySymbol:", "contents": "setNegativeInfinitySymbol:(${1:NSString* string})" },  
    { "trigger": "setNegativePrefix:", "contents": "setNegativePrefix:(${1:NSString* string})" },  
    { "trigger": "setNegativeSuffix:", "contents": "setNegativeSuffix:(${1:NSString* string})" },  
    { "trigger": "setNetworkActivityIndicatorVisible:", "contents": "setNetworkActivityIndicatorVisible:(${1:BOOL networkActivityIndicatorVisible})" },  
    { "trigger": "setNetworkServiceType:", "contents": "setNetworkServiceType:(${1:NSURLRequestNetworkServiceType networkServiceType})" },  
    { "trigger": "setNewPersonViewDelegate:", "contents": "setNewPersonViewDelegate:(${1:id newPersonViewDelegate})" },  
    { "trigger": "setNewsstandIconImage:", "contents": "setNewsstandIconImage:(${1:UIImage* image})" },  
    { "trigger": "setNilSymbol:", "contents": "setNilSymbol:(${1:NSString* string})" },  
    { "trigger": "setNilValueForKey:", "contents": "setNilValueForKey:(${1:NSString* key})" },  
    { "trigger": "setNilValueForKey:", "contents": "setNilValueForKey:(${1:NSString* key})" },  
    { "trigger": "setNotANumberSymbol:", "contents": "setNotANumberSymbol:(${1:NSString* string})" },  
    { "trigger": "setNotes:", "contents": "setNotes:(${1:NSString* notes})" },  
    { "trigger": "setNotificationBatchingInterval:", "contents": "setNotificationBatchingInterval:(${1:NSTimeInterval ti})" },  
    { "trigger": "setNotifyValue:forCharacteristic:", "contents": "setNotifyValue:forCharacteristic:(${1:BOOL notifyValue}, forCharacteristic:${2:CBCharacteristic* characteristic})" },  
    { "trigger": "setNowPlayingInfo:", "contents": "setNowPlayingInfo:(${1:NSDictionary* nowPlayingInfo})" },  
    { "trigger": "setNowPlayingItem:", "contents": "setNowPlayingItem:(${1:MPMediaItem* nowPlayingItem})" },  
    { "trigger": "setNumberOfLines:", "contents": "setNumberOfLines:(${1:NSInteger numberOfLines})" },  
    { "trigger": "setNumberOfLoops:", "contents": "setNumberOfLoops:(${1:NSInteger numberOfLoops})" },  
    { "trigger": "setNumberOfPages:", "contents": "setNumberOfPages:(${1:NSInteger numberOfPages})" },  
    { "trigger": "setNumberOfTapsRequired:", "contents": "setNumberOfTapsRequired:(${1:NSUInteger numberOfTapsRequired})" },  
    { "trigger": "setNumberOfTapsRequired:", "contents": "setNumberOfTapsRequired:(${1:NSInteger numberOfTapsRequired})" },  
    { "trigger": "setNumberOfTouchesRequired:", "contents": "setNumberOfTouchesRequired:(${1:NSUInteger numberOfTouchesRequired})" },  
    { "trigger": "setNumberOfTouchesRequired:", "contents": "setNumberOfTouchesRequired:(${1:NSInteger numberOfTouchesRequired})" },  
    { "trigger": "setNumberOfTouchesRequired:", "contents": "setNumberOfTouchesRequired:(${1:NSUInteger numberOfTouchesRequired})" },  
    { "trigger": "setNumberStyle:", "contents": "setNumberStyle:(${1:NSNumberFormatterStyle style})" },  
    { "trigger": "setObjectZone:", "contents": "setObjectZone:(${1:NSZone* zone})" },  
    { "trigger": "setObject:atIndex:", "contents": "setObject:atIndex:(${1:id obj}, atIndex:${2:NSUInteger idx})" },  
    { "trigger": "setObject:forKey:", "contents": "setObject:forKey:(${1:id obj}, forKey:${2:id key})" },  
    { "trigger": "setObject:forKey:", "contents": "setObject:forKey:(${1:id anObject}, forKey:${2:id aKey})" },  
    { "trigger": "setObject:forKey:", "contents": "setObject:forKey:(${1:id anObject}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setObject:forKey:", "contents": "setObject:forKey:(${1:id value}, forKey:${2:NSString* defaultName})" },  
    { "trigger": "setObject:forKey:cost:", "contents": "setObject:forKey:cost:(${1:id obj}, forKey:${2:id key}, cost:${3:NSUInteger g})" },  
    { "trigger": "setObservationInfo:", "contents": "setObservationInfo:(${1:void* observationInfo})" },  
    { "trigger": "setObservationInfo:", "contents": "setObservationInfo:(${1:id inObservationInfo})" },  
    { "trigger": "setObservationInfo:", "contents": "setObservationInfo:(${1:void* observationInfo})" },  
    { "trigger": "setOn:", "contents": "setOn:(${1:BOOL on})" },  
    { "trigger": "setOnTintColor:", "contents": "setOnTintColor:(${1:UIColor* onTintColor})" },  
    { "trigger": "setOn:animated:", "contents": "setOn:animated:(${1:BOOL on}, animated:${2:BOOL animated})" },  
    { "trigger": "setOpacity:", "contents": "setOpacity:(${1:float opacity})" },  
    { "trigger": "setOpacityRampFromStartOpacity:toEndOpacity:timeRange:", "contents": "setOpacityRampFromStartOpacity:toEndOpacity:timeRange:(${1:float startOpacity}, toEndOpacity:${2:float endOpacity}, timeRange:${3:CMTimeRange timeRange})" },  
    { "trigger": "setOpacity:atTime:", "contents": "setOpacity:atTime:(${1:float opacity}, atTime:${2:CMTime time})" },  
    { "trigger": "setOpaque:", "contents": "setOpaque:(${1:BOOL opaque})" },  
    { "trigger": "setOpaque:", "contents": "setOpaque:(${1:BOOL opaque})" },  
    { "trigger": "setOptional:", "contents": "setOptional:(${1:BOOL flag})" },  
    { "trigger": "setOrdered:", "contents": "setOrdered:(${1:BOOL flag})" },  
    { "trigger": "setOrientation:", "contents": "setOrientation:(${1:UIPrintInfoOrientation orientation})" },  
    { "trigger": "setOrientation:", "contents": "setOrientation:(${1:AVCaptureVideoOrientation orientation})" },  
    { "trigger": "setOrthography:range:", "contents": "setOrthography:range:(${1:NSOrthography* orthography}, range:${2:NSRange range})" },  
    { "trigger": "setOutputFileType:", "contents": "setOutputFileType:(${1:NSString* outputFileType})" },  
    { "trigger": "setOutputFormat:", "contents": "setOutputFormat:(${1:NSPropertyListFormat format})" },  
    { "trigger": "setOutputMeteringEnabled:", "contents": "setOutputMeteringEnabled:(${1:BOOL outputMeteringEnabled})" },  
    { "trigger": "setOutputSettings:", "contents": "setOutputSettings:(${1:NSDictionary* outputSettings})" },  
    { "trigger": "setOutputType:", "contents": "setOutputType:(${1:UIPrintInfoOutputType outputType})" },  
    { "trigger": "setOutputURL:", "contents": "setOutputURL:(${1:NSURL* outputURL})" },  
    { "trigger": "setOverscanCompensation:", "contents": "setOverscanCompensation:(${1:UIScreenOverscanCompensation overscanCompensation})" },  
    { "trigger": "setPMSymbol:", "contents": "setPMSymbol:(${1:NSString* string})" },  
    { "trigger": "setPaddingCharacter:", "contents": "setPaddingCharacter:(${1:NSString* string})" },  
    { "trigger": "setPaddingPosition:", "contents": "setPaddingPosition:(${1:NSNumberFormatterPadPosition position})" },  
    { "trigger": "setPagingEnabled:", "contents": "setPagingEnabled:(${1:BOOL pagingEnabled})" },  
    { "trigger": "setPan:", "contents": "setPan:(${1:float pan})" },  
    { "trigger": "setParentContext:", "contents": "setParentContext:(${1:NSManagedObjectContext* parent})" },  
    { "trigger": "setParentGroup:", "contents": "setParentGroup:(${1:ABRecordRef parentGroup})" },  
    { "trigger": "setPartialStringValidationEnabled:", "contents": "setPartialStringValidationEnabled:(${1:BOOL b})" },  
    { "trigger": "setPassthroughViews:", "contents": "setPassthroughViews:(${1:NSArray* passthroughViews})" },  
    { "trigger": "setPath:", "contents": "setPath:(${1:CGPathRef path})" },  
    { "trigger": "setPath:", "contents": "setPath:(${1:CGPathRef path})" },  
    { "trigger": "setPath:", "contents": "setPath:(${1:CGPathRef path})" },  
    { "trigger": "setPauseOnWillResignActive:", "contents": "setPauseOnWillResignActive:(${1:BOOL pauseOnWillResignActive})" },  
    { "trigger": "setPaused:", "contents": "setPaused:(${1:BOOL paused})" },  
    { "trigger": "setPaused:", "contents": "setPaused:(${1:BOOL paused})" },  
    { "trigger": "setPeoplePickerDelegate:", "contents": "setPeoplePickerDelegate:(${1:id peoplePickerDelegate})" },  
    { "trigger": "setPerMillSymbol:", "contents": "setPerMillSymbol:(${1:NSString* string})" },  
    { "trigger": "setPercentComplete:", "contents": "setPercentComplete:(${1:double percentComplete})" },  
    { "trigger": "setPercentSymbol:", "contents": "setPercentSymbol:(${1:NSString* string})" },  
    { "trigger": "setPersistent:", "contents": "setPersistent:(${1:BOOL persistent})" },  
    { "trigger": "setPersistentDomain:forName:", "contents": "setPersistentDomain:forName:(${1:NSDictionary* domain}, forName:${2:NSString* domainName})" },  
    { "trigger": "setPersistentStoreCoordinator:", "contents": "setPersistentStoreCoordinator:(${1:NSPersistentStoreCoordinator* coordinator})" },  
    { "trigger": "setPersistentStoreOptions:", "contents": "setPersistentStoreOptions:(${1:NSDictionary* persistentStoreOptions})" },  
    { "trigger": "setPersonViewDelegate:", "contents": "setPersonViewDelegate:(${1:id personViewDelegate})" },  
    { "trigger": "setPinColor:", "contents": "setPinColor:(${1:MKPinAnnotationColor pinColor})" },  
    { "trigger": "setPlaceholder:", "contents": "setPlaceholder:(${1:NSString* placeholder})" },  
    { "trigger": "setPlaceholder:", "contents": "setPlaceholder:(${1:NSString* placeholder})" },  
    { "trigger": "setPlayer:", "contents": "setPlayer:(${1:AVPlayer* player})" },  
    { "trigger": "setPlayerAttributes:", "contents": "setPlayerAttributes:(${1:uint32_t playerAttributes})" },  
    { "trigger": "setPlayerGroup:", "contents": "setPlayerGroup:(${1:NSUInteger playerGroup})" },  
    { "trigger": "setPlayerItem:", "contents": "setPlayerItem:(${1:AVPlayerItem* playerItem})" },  
    { "trigger": "setPlayerScope:", "contents": "setPlayerScope:(${1:GKLeaderboardPlayerScope playerScope})" },  
    { "trigger": "setPlayerStateUpdateHandler:", "contents": "setPlayerStateUpdateHandler:(${1:void (^)(NSString *, GKVoiceChatPlayerState) playerStateUpdateHandler})" },  
    { "trigger": "setPlayersToInvite:", "contents": "setPlayersToInvite:(${1:NSArray* playersToInvite})" },  
    { "trigger": "setPlusSign:", "contents": "setPlusSign:(${1:NSString* string})" },  
    { "trigger": "setPopoverBackgroundViewClass:", "contents": "setPopoverBackgroundViewClass:(${1:Class popoverBackgroundViewClass})" },  
    { "trigger": "setPopoverContentSize:", "contents": "setPopoverContentSize:(${1:CGSize popoverContentSize})" },  
    { "trigger": "setPopoverContentSize:animated:", "contents": "setPopoverContentSize:animated:(${1:CGSize size}, animated:${2:BOOL animated})" },  
    { "trigger": "setPopoverLayoutMargins:", "contents": "setPopoverLayoutMargins:(${1:UIEdgeInsets popoverLayoutMargins})" },  
    { "trigger": "setPosition:", "contents": "setPosition:(${1:CGPoint position})" },  
    { "trigger": "setPosition:", "contents": "setPosition:(${1:GLKVector4 position})" },  
    { "trigger": "setPositionAdjustment:forSearchBarIcon:", "contents": "setPositionAdjustment:forSearchBarIcon:(${1:UIOffset adjustment}, forSearchBarIcon:${2:UISearchBarIcon icon})" },  
    { "trigger": "setPositions" },  
    { "trigger": "setPositiveFormat:", "contents": "setPositiveFormat:(${1:NSString* format})" },  
    { "trigger": "setPositiveInfinitySymbol:", "contents": "setPositiveInfinitySymbol:(${1:NSString* string})" },  
    { "trigger": "setPositivePrefix:", "contents": "setPositivePrefix:(${1:NSString* string})" },  
    { "trigger": "setPositiveSuffix:", "contents": "setPositiveSuffix:(${1:NSString* string})" },  
    { "trigger": "setPossibleTitles:", "contents": "setPossibleTitles:(${1:NSSet* possibleTitles})" },  
    { "trigger": "setPredicate:", "contents": "setPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "setPredicate:", "contents": "setPredicate:(${1:NSPredicate* predicate})" },  
    { "trigger": "setPreferredFilename:", "contents": "setPreferredFilename:(${1:NSString* fileName})" },  
    { "trigger": "setPreferredFramesPerSecond:", "contents": "setPreferredFramesPerSecond:(${1:NSInteger preferredFramesPerSecond})" },  
    { "trigger": "setPreferredHardwareSampleRate:error:", "contents": "setPreferredHardwareSampleRate:error:(${1:double sampleRate}, error:${2:NSError** outError})" },  
    { "trigger": "setPreferredIOBufferDuration:error:", "contents": "setPreferredIOBufferDuration:error:(${1:NSTimeInterval duration}, error:${2:NSError** outError})" },  
    { "trigger": "setPreferredTransform:", "contents": "setPreferredTransform:(${1:CGAffineTransform preferredTransform})" },  
    { "trigger": "setPreferredVolume:", "contents": "setPreferredVolume:(${1:float preferredVolume})" },  
    { "trigger": "setPresentsWithGesture:", "contents": "setPresentsWithGesture:(${1:BOOL presentsWithGesture})" },  
    { "trigger": "setPreservesDepth:", "contents": "setPreservesDepth:(${1:BOOL preservesDepth})" },  
    { "trigger": "setPreservesDepth:", "contents": "setPreservesDepth:(${1:BOOL preservesDepth})" },  
    { "trigger": "setPrimitiveValue:forKey:", "contents": "setPrimitiveValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setPrintFormatter:", "contents": "setPrintFormatter:(${1:UIPrintFormatter* printFormatter})" },  
    { "trigger": "setPrintFormatters:", "contents": "setPrintFormatters:(${1:NSArray* printFormatters})" },  
    { "trigger": "setPrintInfo:", "contents": "setPrintInfo:(${1:UIPrintInfo* printInfo})" },  
    { "trigger": "setPrintPageRenderer:", "contents": "setPrintPageRenderer:(${1:UIPrintPageRenderer* printPageRenderer})" },  
    { "trigger": "setPrinterID:", "contents": "setPrinterID:(${1:NSString* printerID})" },  
    { "trigger": "setPrintingItem:", "contents": "setPrintingItem:(${1:id printingItem})" },  
    { "trigger": "setPrintingItems:", "contents": "setPrintingItems:(${1:NSArray* printingItems})" },  
    { "trigger": "setProcessName:", "contents": "setProcessName:(${1:NSString* newName})" },  
    { "trigger": "setProductIdentifier:", "contents": "setProductIdentifier:(${1:NSString* productIdentifier})" },  
    { "trigger": "setProgress:", "contents": "setProgress:(${1:float progress})" },  
    { "trigger": "setProgressImage:", "contents": "setProgressImage:(${1:UIImage* progressImage})" },  
    { "trigger": "setProgressTintColor:", "contents": "setProgressTintColor:(${1:UIColor* progressTintColor})" },  
    { "trigger": "setProgressViewStyle:", "contents": "setProgressViewStyle:(${1:UIProgressViewStyle progressViewStyle})" },  
    { "trigger": "setProgress:animated:", "contents": "setProgress:animated:(${1:float progress}, animated:${2:BOOL animated})" },  
    { "trigger": "setProjectionMatrix:", "contents": "setProjectionMatrix:(${1:GLKMatrix4 projectionMatrix})" },  
    { "trigger": "setPrompt:", "contents": "setPrompt:(${1:NSString* prompt})" },  
    { "trigger": "setPrompt:", "contents": "setPrompt:(${1:NSString* prompt})" },  
    { "trigger": "setPrompt:", "contents": "setPrompt:(${1:NSString* prompt})" },  
    { "trigger": "setPropagatesDeletesAtEndOfEvent:", "contents": "setPropagatesDeletesAtEndOfEvent:(${1:BOOL flag})" },  
    { "trigger": "setProperties:", "contents": "setProperties:(${1:NSArray* properties})" },  
    { "trigger": "setPropertiesToFetch:", "contents": "setPropertiesToFetch:(${1:NSArray* values})" },  
    { "trigger": "setPropertiesToGroupBy:", "contents": "setPropertiesToGroupBy:(${1:NSArray* array})" },  
    { "trigger": "setPropertyCache:", "contents": "setPropertyCache:(${1:NSMutableDictionary* propertyCache})" },  
    { "trigger": "setProperty:forKey:", "contents": "setProperty:forKey:(${1:id property}, forKey:${2:NSString* key})" },  
    { "trigger": "setProvidesPresentationContextTransitionStyle:", "contents": "setProvidesPresentationContextTransitionStyle:(${1:BOOL providesPresentationContextTransitionStyle})" },  
    { "trigger": "setProximityMonitoringEnabled:", "contents": "setProximityMonitoringEnabled:(${1:BOOL proximityMonitoringEnabled})" },  
    { "trigger": "setProximitySensingEnabled:", "contents": "setProximitySensingEnabled:(${1:BOOL proximitySensingEnabled})" },  
    { "trigger": "setPurpose:", "contents": "setPurpose:(${1:NSString* purpose})" },  
    { "trigger": "setQuadraticAttenuation:", "contents": "setQuadraticAttenuation:(${1:GLfloat quadraticAttenuation})" },  
    { "trigger": "setQuantity:", "contents": "setQuantity:(${1:NSInteger quantity})" },  
    { "trigger": "setQuarter:", "contents": "setQuarter:(${1:NSInteger v})" },  
    { "trigger": "setQuarterSymbols:", "contents": "setQuarterSymbols:(${1:NSArray* array})" },  
    { "trigger": "setQueuePriority:", "contents": "setQueuePriority:(${1:NSOperationQueuePriority p})" },  
    { "trigger": "setQueueWithItemCollection:", "contents": "setQueueWithItemCollection:(${1:MPMediaItemCollection* itemCollection})" },  
    { "trigger": "setQueueWithQuery:", "contents": "setQueueWithQuery:(${1:MPMediaQuery* query})" },  
    { "trigger": "setRange:", "contents": "setRange:(${1:NSRange range})" },  
    { "trigger": "setRasterizationScale:", "contents": "setRasterizationScale:(${1:CGFloat rasterizationScale})" },  
    { "trigger": "setRate:", "contents": "setRate:(${1:float rate})" },  
    { "trigger": "setRate:", "contents": "setRate:(${1:float rate})" },  
    { "trigger": "setReadOnly:", "contents": "setReadOnly:(${1:BOOL flag})" },  
    { "trigger": "setReadabilityHandler:", "contents": "setReadabilityHandler:(${1:void (^)(NSFileHandle *) readabilityHandler})" },  
    { "trigger": "setRecipients:", "contents": "setRecipients:(${1:NSArray* recipients})" },  
    { "trigger": "setRecurrenceEnd:", "contents": "setRecurrenceEnd:(${1:EKRecurrenceEnd* recurrenceEnd})" },  
    { "trigger": "setRecurrenceRule:", "contents": "setRecurrenceRule:(${1:EKRecurrenceRule* recurrenceRule})" },  
    { "trigger": "setRecurrenceRules:", "contents": "setRecurrenceRules:(${1:NSArray* recurrenceRules})" },  
    { "trigger": "setRedRange:", "contents": "setRedRange:(${1:float redRange})" },  
    { "trigger": "setRedSpeed:", "contents": "setRedSpeed:(${1:float redSpeed})" },  
    { "trigger": "setRegion:", "contents": "setRegion:(${1:MKCoordinateRegion region})" },  
    { "trigger": "setRegion:animated:", "contents": "setRegion:animated:(${1:MKCoordinateRegion region}, animated:${2:BOOL animated})" },  
    { "trigger": "setRelationshipKeyPathsForPrefetching:", "contents": "setRelationshipKeyPathsForPrefetching:(${1:NSArray* keys})" },  
    { "trigger": "setRelationshipMappings:", "contents": "setRelationshipMappings:(${1:NSArray* mappings})" },  
    { "trigger": "setRelativeOffset:", "contents": "setRelativeOffset:(${1:NSTimeInterval relativeOffset})" },  
    { "trigger": "setRemoteParticipantVolume:", "contents": "setRemoteParticipantVolume:(${1:float remoteParticipantVolume})" },  
    { "trigger": "setRemovedOnCompletion:", "contents": "setRemovedOnCompletion:(${1:BOOL removedOnCompletion})" },  
    { "trigger": "setRenamingIdentifier:", "contents": "setRenamingIdentifier:(${1:NSString* value})" },  
    { "trigger": "setRenamingIdentifier:", "contents": "setRenamingIdentifier:(${1:NSString* value})" },  
    { "trigger": "setRenderMode:", "contents": "setRenderMode:(${1:NSString* renderMode})" },  
    { "trigger": "setRenderScale:", "contents": "setRenderScale:(${1:float renderScale})" },  
    { "trigger": "setRenderSize:", "contents": "setRenderSize:(${1:CGSize renderSize})" },  
    { "trigger": "setRepeatCalendar:", "contents": "setRepeatCalendar:(${1:NSCalendar* repeatCalendar})" },  
    { "trigger": "setRepeatCount:", "contents": "setRepeatCount:(${1:float repeatCount})" },  
    { "trigger": "setRepeatCount:", "contents": "setRepeatCount:(${1:float repeatCount})" },  
    { "trigger": "setRepeatDuration:", "contents": "setRepeatDuration:(${1:CFTimeInterval repeatDuration})" },  
    { "trigger": "setRepeatDuration:", "contents": "setRepeatDuration:(${1:CFTimeInterval repeatDuration})" },  
    { "trigger": "setRepeatInterval:", "contents": "setRepeatInterval:(${1:NSCalendarUnit repeatInterval})" },  
    { "trigger": "setRepeatMode:", "contents": "setRepeatMode:(${1:MPMusicRepeatMode repeatMode})" },  
    { "trigger": "setRepeatMode:", "contents": "setRepeatMode:(${1:MPMovieRepeatMode repeatMode})" },  
    { "trigger": "setRequestData:", "contents": "setRequestData:(${1:NSData* requestData})" },  
    { "trigger": "setRequestedTimeToleranceAfter:", "contents": "setRequestedTimeToleranceAfter:(${1:CMTime requestedTimeToleranceAfter})" },  
    { "trigger": "setRequestedTimeToleranceBefore:", "contents": "setRequestedTimeToleranceBefore:(${1:CMTime requestedTimeToleranceBefore})" },  
    { "trigger": "setRequiredContentSizeIdentifiers:", "contents": "setRequiredContentSizeIdentifiers:(${1:NSSet* requiredContentSizeIdentifiers})" },  
    { "trigger": "setResolved:", "contents": "setResolved:(${1:BOOL resolved})" },  
    { "trigger": "setResourceValue:forKey:error:", "contents": "setResourceValue:forKey:error:(${1:id value}, forKey:${2:NSString* key}, error:${3:NSError** error})" },  
    { "trigger": "setResourceValues:error:", "contents": "setResourceValues:error:(${1:NSDictionary* keyedValues}, error:${2:NSError** error})" },  
    { "trigger": "setResultType:", "contents": "setResultType:(${1:NSFetchRequestResultType type})" },  
    { "trigger": "setResumeOnDidBecomeActive:", "contents": "setResumeOnDidBecomeActive:(${1:BOOL resumeOnDidBecomeActive})" },  
    { "trigger": "setRetainsRegisteredObjects:", "contents": "setRetainsRegisteredObjects:(${1:BOOL flag})" },  
    { "trigger": "setReturnKeyType:", "contents": "setReturnKeyType:(${1:UIReturnKeyType returnKeyType})" },  
    { "trigger": "setReturnKeyType:", "contents": "setReturnKeyType:(${1:UIReturnKeyType returnKeyType})" },  
    { "trigger": "setReturnValue:", "contents": "setReturnValue:(${1:void* retLoc})" },  
    { "trigger": "setReturnsDistinctResults:", "contents": "setReturnsDistinctResults:(${1:BOOL flag})" },  
    { "trigger": "setReturnsObjectsAsFaults:", "contents": "setReturnsObjectsAsFaults:(${1:BOOL yesNo})" },  
    { "trigger": "setReversePlaybackEndTime:", "contents": "setReversePlaybackEndTime:(${1:CMTime reversePlaybackEndTime})" },  
    { "trigger": "setReversesTitleShadowWhenHighlighted:", "contents": "setReversesTitleShadowWhenHighlighted:(${1:BOOL reversesTitleShadowWhenHighlighted})" },  
    { "trigger": "setRightBarButtonItem:", "contents": "setRightBarButtonItem:(${1:UIBarButtonItem* rightBarButtonItem})" },  
    { "trigger": "setRightBarButtonItem:animated:", "contents": "setRightBarButtonItem:animated:(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})" },  
    { "trigger": "setRightBarButtonItems:", "contents": "setRightBarButtonItems:(${1:NSArray* rightBarButtonItems})" },  
    { "trigger": "setRightBarButtonItems:animated:", "contents": "setRightBarButtonItems:animated:(${1:NSArray* items}, animated:${2:BOOL animated})" },  
    { "trigger": "setRightCalloutAccessoryView:", "contents": "setRightCalloutAccessoryView:(${1:UIView* rightCalloutAccessoryView})" },  
    { "trigger": "setRightView:", "contents": "setRightView:(${1:UIView* rightView})" },  
    { "trigger": "setRightViewMode:", "contents": "setRightViewMode:(${1:UITextFieldViewMode rightViewMode})" },  
    { "trigger": "setRootViewController:", "contents": "setRootViewController:(${1:UIViewController* rootViewController})" },  
    { "trigger": "setRotation:", "contents": "setRotation:(${1:CGFloat rotation})" },  
    { "trigger": "setRotationMode:", "contents": "setRotationMode:(${1:NSString* rotationMode})" },  
    { "trigger": "setRoundingIncrement:", "contents": "setRoundingIncrement:(${1:NSNumber* number})" },  
    { "trigger": "setRoundingMode:", "contents": "setRoundingMode:(${1:NSNumberFormatterRoundingMode mode})" },  
    { "trigger": "setRowHeight:", "contents": "setRowHeight:(${1:CGFloat rowHeight})" },  
    { "trigger": "setRunLoopModes:", "contents": "setRunLoopModes:(${1:NSArray* runLoopModes})" },  
    { "trigger": "setSampleBufferDelegate:queue:", "contents": "setSampleBufferDelegate:queue:(${1:id sampleBufferDelegate}, queue:${2:dispatch_queue_t sampleBufferCallbackQueue})" },  
    { "trigger": "setSampleBufferDelegate:queue:", "contents": "setSampleBufferDelegate:queue:(${1:id sampleBufferDelegate}, queue:${2:dispatch_queue_t sampleBufferCallbackQueue})" },  
    { "trigger": "setScale:", "contents": "setScale:(${1:float scale})" },  
    { "trigger": "setScale:", "contents": "setScale:(${1:CGFloat scale})" },  
    { "trigger": "setScale:", "contents": "setScale:(${1:CGFloat scale})" },  
    { "trigger": "setScaleRange:", "contents": "setScaleRange:(${1:CGFloat scaleRange})" },  
    { "trigger": "setScaleSpeed:", "contents": "setScaleSpeed:(${1:CGFloat scaleSpeed})" },  
    { "trigger": "setScalesPageToFit:", "contents": "setScalesPageToFit:(${1:BOOL scalesPageToFit})" },  
    { "trigger": "setScalingMode:", "contents": "setScalingMode:(${1:MPMovieScalingMode scalingMode})" },  
    { "trigger": "setScanLocation:", "contents": "setScanLocation:(${1:NSUInteger pos})" },  
    { "trigger": "setScheduledLocalNotifications:", "contents": "setScheduledLocalNotifications:(${1:NSArray* scheduledLocalNotifications})" },  
    { "trigger": "setScopeBarBackgroundImage:", "contents": "setScopeBarBackgroundImage:(${1:UIImage* scopeBarBackgroundImage})" },  
    { "trigger": "setScopeBarButtonBackgroundImage:forState:", "contents": "setScopeBarButtonBackgroundImage:forState:(${1:UIImage* backgroundImage}, forState:${2:UIControlState state})" },  
    { "trigger": "setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:", "contents": "setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:(${1:UIImage* dividerImage}, forLeftSegmentState:${2:UIControlState leftState}, rightSegmentState:${3:UIControlState rightState})" },  
    { "trigger": "setScopeBarButtonTitleTextAttributes:forState:", "contents": "setScopeBarButtonTitleTextAttributes:forState:(${1:NSDictionary* attributes}, forState:${2:UIControlState state})" },  
    { "trigger": "setScopeButtonTitles:", "contents": "setScopeButtonTitles:(${1:NSArray* scopeButtonTitles})" },  
    { "trigger": "setScreen:", "contents": "setScreen:(${1:UIScreen* screen})" },  
    { "trigger": "setScrollEnabled:", "contents": "setScrollEnabled:(${1:BOOL scrollEnabled})" },  
    { "trigger": "setScrollEnabled:", "contents": "setScrollEnabled:(${1:BOOL scrollEnabled})" },  
    { "trigger": "setScrollIndicatorInsets:", "contents": "setScrollIndicatorInsets:(${1:UIEdgeInsets scrollIndicatorInsets})" },  
    { "trigger": "setScrollMode:", "contents": "setScrollMode:(${1:NSString* scrollMode})" },  
    { "trigger": "setScrollsToTop:", "contents": "setScrollsToTop:(${1:BOOL scrollsToTop})" },  
    { "trigger": "setSearchFieldBackgroundImage:forState:", "contents": "setSearchFieldBackgroundImage:forState:(${1:UIImage* backgroundImage}, forState:${2:UIControlState state})" },  
    { "trigger": "setSearchFieldBackgroundPositionAdjustment:", "contents": "setSearchFieldBackgroundPositionAdjustment:(${1:UIOffset searchFieldBackgroundPositionAdjustment})" },  
    { "trigger": "setSearchResultsButtonSelected:", "contents": "setSearchResultsButtonSelected:(${1:BOOL searchResultsButtonSelected})" },  
    { "trigger": "setSearchResultsDataSource:", "contents": "setSearchResultsDataSource:(${1:id searchResultsDataSource})" },  
    { "trigger": "setSearchResultsDelegate:", "contents": "setSearchResultsDelegate:(${1:id searchResultsDelegate})" },  
    { "trigger": "setSearchResultsTitle:", "contents": "setSearchResultsTitle:(${1:NSString* searchResultsTitle})" },  
    { "trigger": "setSearchScopes:", "contents": "setSearchScopes:(${1:NSArray* scopes})" },  
    { "trigger": "setSearchTextPositionAdjustment:", "contents": "setSearchTextPositionAdjustment:(${1:UIOffset searchTextPositionAdjustment})" },  
    { "trigger": "setSecond:", "contents": "setSecond:(${1:NSInteger v})" },  
    { "trigger": "setSecondaryGroupingSize:", "contents": "setSecondaryGroupingSize:(${1:NSUInteger number})" },  
    { "trigger": "setSectionFooterHeight:", "contents": "setSectionFooterHeight:(${1:CGFloat sectionFooterHeight})" },  
    { "trigger": "setSectionHeaderHeight:", "contents": "setSectionHeaderHeight:(${1:CGFloat sectionHeaderHeight})" },  
    { "trigger": "setSectionIndexMinimumDisplayRowCount:", "contents": "setSectionIndexMinimumDisplayRowCount:(${1:NSInteger sectionIndexMinimumDisplayRowCount})" },  
    { "trigger": "setSecureTextEntry:", "contents": "setSecureTextEntry:(${1:BOOL secureTextEntry})" },  
    { "trigger": "setSecureTextEntry:", "contents": "setSecureTextEntry:(${1:BOOL secureTextEntry})" },  
    { "trigger": "setSeed:", "contents": "setSeed:(${1:unsigned int seed})" },  
    { "trigger": "setSegmentedControlStyle:", "contents": "setSegmentedControlStyle:(${1:UISegmentedControlStyle segmentedControlStyle})" },  
    { "trigger": "setSegments:", "contents": "setSegments:(${1:NSArray* segments})" },  
    { "trigger": "setSelected:", "contents": "setSelected:(${1:BOOL selected})" },  
    { "trigger": "setSelected:", "contents": "setSelected:(${1:BOOL selected})" },  
    { "trigger": "setSelected:", "contents": "setSelected:(${1:BOOL selected})" },  
    { "trigger": "setSelectedAnnotations:", "contents": "setSelectedAnnotations:(${1:NSArray* selectedAnnotations})" },  
    { "trigger": "setSelectedBackgroundView:", "contents": "setSelectedBackgroundView:(${1:UIView* selectedBackgroundView})" },  
    { "trigger": "setSelectedCalendars:", "contents": "setSelectedCalendars:(${1:NSSet* selectedCalendars})" },  
    { "trigger": "setSelectedImage:", "contents": "setSelectedImage:(${1:UIImage* selectedImage})" },  
    { "trigger": "setSelectedImageTintColor:", "contents": "setSelectedImageTintColor:(${1:UIColor* selectedImageTintColor})" },  
    { "trigger": "setSelectedIndex:", "contents": "setSelectedIndex:(${1:NSUInteger selectedIndex})" },  
    { "trigger": "setSelectedItem:", "contents": "setSelectedItem:(${1:UITabBarItem* selectedItem})" },  
    { "trigger": "setSelectedRange:", "contents": "setSelectedRange:(${1:NSRange selectedRange})" },  
    { "trigger": "setSelectedScopeButtonIndex:", "contents": "setSelectedScopeButtonIndex:(${1:NSInteger selectedScopeButtonIndex})" },  
    { "trigger": "setSelectedSegmentIndex:", "contents": "setSelectedSegmentIndex:(${1:NSInteger selectedSegmentIndex})" },  
    { "trigger": "setSelectedTextColor:", "contents": "setSelectedTextColor:(${1:UIColor* selectedTextColor})" },  
    { "trigger": "setSelectedTextRange:", "contents": "setSelectedTextRange:(${1:UITextRange* selectedTextRange})" },  
    { "trigger": "setSelectedTextRange:", "contents": "setSelectedTextRange:(${1:UITextRange* selectedTextRange})" },  
    { "trigger": "setSelectedViewController:", "contents": "setSelectedViewController:(${1:UIViewController* selectedViewController})" },  
    { "trigger": "setSelected:animated:", "contents": "setSelected:animated:(${1:BOOL selected}, animated:${2:BOOL animated})" },  
    { "trigger": "setSelected:animated:", "contents": "setSelected:animated:(${1:BOOL selected}, animated:${2:BOOL animated})" },  
    { "trigger": "setSelectionAffinity:", "contents": "setSelectionAffinity:(${1:UITextStorageDirection selectionAffinity})" },  
    { "trigger": "setSelectionAffinity:", "contents": "setSelectionAffinity:(${1:UITextStorageDirection selectionAffinity})" },  
    { "trigger": "setSelectionIndicatorImage:", "contents": "setSelectionIndicatorImage:(${1:UIImage* selectionIndicatorImage})" },  
    { "trigger": "setSelectionStyle:", "contents": "setSelectionStyle:(${1:UITableViewCellSelectionStyle selectionStyle})" },  
    { "trigger": "setSelector:", "contents": "setSelector:(${1:SEL selector})" },  
    { "trigger": "setSeparatorColor:", "contents": "setSeparatorColor:(${1:UIColor* separatorColor})" },  
    { "trigger": "setSeparatorStyle:", "contents": "setSeparatorStyle:(${1:UITableViewCellSeparatorStyle separatorStyle})" },  
    { "trigger": "setSession:", "contents": "setSession:(${1:AVCaptureSession* session})" },  
    { "trigger": "setSessionPreset:", "contents": "setSessionPreset:(${1:NSString* sessionPreset})" },  
    { "trigger": "setSet:", "contents": "setSet:(${1:NSSet* otherSet})" },  
    { "trigger": "setShadowColor:", "contents": "setShadowColor:(${1:UIColor* shadowColor})" },  
    { "trigger": "setShadowColor:", "contents": "setShadowColor:(${1:CGColorRef shadowColor})" },  
    { "trigger": "setShadowOffset:", "contents": "setShadowOffset:(${1:CGSize shadowOffset})" },  
    { "trigger": "setShadowOffset:", "contents": "setShadowOffset:(${1:CGSize shadowOffset})" },  
    { "trigger": "setShadowOpacity:", "contents": "setShadowOpacity:(${1:float shadowOpacity})" },  
    { "trigger": "setShadowPath:", "contents": "setShadowPath:(${1:CGPathRef shadowPath})" },  
    { "trigger": "setShadowRadius:", "contents": "setShadowRadius:(${1:CGFloat shadowRadius})" },  
    { "trigger": "setShininess:", "contents": "setShininess:(${1:GLfloat shininess})" },  
    { "trigger": "setShortMonthSymbols:", "contents": "setShortMonthSymbols:(${1:NSArray* array})" },  
    { "trigger": "setShortQuarterSymbols:", "contents": "setShortQuarterSymbols:(${1:NSArray* array})" },  
    { "trigger": "setShortStandaloneMonthSymbols:", "contents": "setShortStandaloneMonthSymbols:(${1:NSArray* array})" },  
    { "trigger": "setShortStandaloneQuarterSymbols:", "contents": "setShortStandaloneQuarterSymbols:(${1:NSArray* array})" },  
    { "trigger": "setShortStandaloneWeekdaySymbols:", "contents": "setShortStandaloneWeekdaySymbols:(${1:NSArray* array})" },  
    { "trigger": "setShortWeekdaySymbols:", "contents": "setShortWeekdaySymbols:(${1:NSArray* array})" },  
    { "trigger": "setShouldAutoplay:", "contents": "setShouldAutoplay:(${1:BOOL shouldAutoplay})" },  
    { "trigger": "setShouldIndentWhileEditing:", "contents": "setShouldIndentWhileEditing:(${1:BOOL shouldIndentWhileEditing})" },  
    { "trigger": "setShouldOptimizeForNetworkUse:", "contents": "setShouldOptimizeForNetworkUse:(${1:BOOL shouldOptimizeForNetworkUse})" },  
    { "trigger": "setShouldOptimizeForNetworkUse:", "contents": "setShouldOptimizeForNetworkUse:(${1:BOOL shouldOptimizeForNetworkUse})" },  
    { "trigger": "setShouldProcessNamespaces:", "contents": "setShouldProcessNamespaces:(${1:BOOL shouldProcessNamespaces})" },  
    { "trigger": "setShouldRasterize:", "contents": "setShouldRasterize:(${1:BOOL shouldRasterize})" },  
    { "trigger": "setShouldRefreshRefetchedObjects:", "contents": "setShouldRefreshRefetchedObjects:(${1:BOOL flag})" },  
    { "trigger": "setShouldReportNamespacePrefixes:", "contents": "setShouldReportNamespacePrefixes:(${1:BOOL shouldReportNamespacePrefixes})" },  
    { "trigger": "setShouldResolveExternalEntities:", "contents": "setShouldResolveExternalEntities:(${1:BOOL shouldResolveExternalEntities})" },  
    { "trigger": "setShouldSetDefaultLeaderboard:", "contents": "setShouldSetDefaultLeaderboard:(${1:BOOL shouldSetDefaultLeaderboard})" },  
    { "trigger": "setShouldShowLinkedPeople:", "contents": "setShouldShowLinkedPeople:(${1:BOOL shouldShowLinkedPeople})" },  
    { "trigger": "setShowExistingMatches:", "contents": "setShowExistingMatches:(${1:BOOL showExistingMatches})" },  
    { "trigger": "setShowsBookmarkButton:", "contents": "setShowsBookmarkButton:(${1:BOOL showsBookmarkButton})" },  
    { "trigger": "setShowsCameraControls:", "contents": "setShowsCameraControls:(${1:BOOL showsCameraControls})" },  
    { "trigger": "setShowsCancelButton:", "contents": "setShowsCancelButton:(${1:BOOL showsCancelButton})" },  
    { "trigger": "setShowsCancelButton:", "contents": "setShowsCancelButton:(${1:BOOL showsCancelButton})" },  
    { "trigger": "setShowsCancelButton:animated:", "contents": "setShowsCancelButton:animated:(${1:BOOL showsCancelButton}, animated:${2:BOOL animated})" },  
    { "trigger": "setShowsCompletionBanner:", "contents": "setShowsCompletionBanner:(${1:BOOL showsCompletionBanner})" },  
    { "trigger": "setShowsDeviceMovementDisplay:", "contents": "setShowsDeviceMovementDisplay:(${1:BOOL showsDeviceMovementDisplay})" },  
    { "trigger": "setShowsDoneButton:", "contents": "setShowsDoneButton:(${1:BOOL showsDoneButton})" },  
    { "trigger": "setShowsHorizontalScrollIndicator:", "contents": "setShowsHorizontalScrollIndicator:(${1:BOOL showsHorizontalScrollIndicator})" },  
    { "trigger": "setShowsPageRange:", "contents": "setShowsPageRange:(${1:BOOL showsPageRange})" },  
    { "trigger": "setShowsReorderControl:", "contents": "setShowsReorderControl:(${1:BOOL showsReorderControl})" },  
    { "trigger": "setShowsRouteButton:", "contents": "setShowsRouteButton:(${1:BOOL showsRouteButton})" },  
    { "trigger": "setShowsScopeBar:", "contents": "setShowsScopeBar:(${1:BOOL showsScopeBar})" },  
    { "trigger": "setShowsSearchResultsButton:", "contents": "setShowsSearchResultsButton:(${1:BOOL showsSearchResultsButton})" },  
    { "trigger": "setShowsSelectionIndicator:", "contents": "setShowsSelectionIndicator:(${1:BOOL showsSelectionIndicator})" },  
    { "trigger": "setShowsTouchWhenHighlighted:", "contents": "setShowsTouchWhenHighlighted:(${1:BOOL showsTouchWhenHighlighted})" },  
    { "trigger": "setShowsUserLocation:", "contents": "setShowsUserLocation:(${1:BOOL showsUserLocation})" },  
    { "trigger": "setShowsVerticalScrollIndicator:", "contents": "setShowsVerticalScrollIndicator:(${1:BOOL showsVerticalScrollIndicator})" },  
    { "trigger": "setShowsVolumeSlider:", "contents": "setShowsVolumeSlider:(${1:BOOL showsVolumeSlider})" },  
    { "trigger": "setShuffleMode:", "contents": "setShuffleMode:(${1:MPMusicShuffleMode shuffleMode})" },  
    { "trigger": "setSortDescriptors:", "contents": "setSortDescriptors:(${1:NSArray* sortDescriptors})" },  
    { "trigger": "setSortDescriptors:", "contents": "setSortDescriptors:(${1:NSArray* descriptors})" },  
    { "trigger": "setSoundName:", "contents": "setSoundName:(${1:NSString* soundName})" },  
    { "trigger": "setSource:", "contents": "setSource:(${1:EKSource* source})" },  
    { "trigger": "setSourceEntityName:", "contents": "setSourceEntityName:(${1:NSString* name})" },  
    { "trigger": "setSourceEntityVersionHash:", "contents": "setSourceEntityVersionHash:(${1:NSData* vhash})" },  
    { "trigger": "setSourceExpression:", "contents": "setSourceExpression:(${1:NSExpression* source})" },  
    { "trigger": "setSourceType:", "contents": "setSourceType:(${1:UIImagePickerControllerSourceType sourceType})" },  
    { "trigger": "setSpecularColor:", "contents": "setSpecularColor:(${1:GLKVector4 specularColor})" },  
    { "trigger": "setSpecularColor:", "contents": "setSpecularColor:(${1:GLKVector4 specularColor})" },  
    { "trigger": "setSpeed:", "contents": "setSpeed:(${1:float speed})" },  
    { "trigger": "setSpeed:", "contents": "setSpeed:(${1:float speed})" },  
    { "trigger": "setSpellCheckingType:", "contents": "setSpellCheckingType:(${1:UITextSpellCheckingType spellCheckingType})" },  
    { "trigger": "setSpellCheckingType:", "contents": "setSpellCheckingType:(${1:UITextSpellCheckingType spellCheckingType})" },  
    { "trigger": "setSpellCheckingType:", "contents": "setSpellCheckingType:(${1:UITextSpellCheckingType spellCheckingType})" },  
    { "trigger": "setSpin:", "contents": "setSpin:(${1:CGFloat spin})" },  
    { "trigger": "setSpin:", "contents": "setSpin:(${1:float spin})" },  
    { "trigger": "setSpinRange:", "contents": "setSpinRange:(${1:CGFloat spinRange})" },  
    { "trigger": "setSpotCutoff:", "contents": "setSpotCutoff:(${1:GLfloat spotCutoff})" },  
    { "trigger": "setSpotDirection:", "contents": "setSpotDirection:(${1:GLKVector3 spotDirection})" },  
    { "trigger": "setSpotExponent:", "contents": "setSpotExponent:(${1:GLfloat spotExponent})" },  
    { "trigger": "setStackSize:", "contents": "setStackSize:(${1:NSUInteger s})" },  
    { "trigger": "setStalenessInterval:", "contents": "setStalenessInterval:(${1:NSTimeInterval expiration})" },  
    { "trigger": "setStandaloneMonthSymbols:", "contents": "setStandaloneMonthSymbols:(${1:NSArray* array})" },  
    { "trigger": "setStandaloneQuarterSymbols:", "contents": "setStandaloneQuarterSymbols:(${1:NSArray* array})" },  
    { "trigger": "setStandaloneWeekdaySymbols:", "contents": "setStandaloneWeekdaySymbols:(${1:NSArray* array})" },  
    { "trigger": "setStart:", "contents": "setStart:(${1:GLfloat start})" },  
    { "trigger": "setStartDate:", "contents": "setStartDate:(${1:NSDate* startDate})" },  
    { "trigger": "setStartPage:", "contents": "setStartPage:(${1:NSInteger startPage})" },  
    { "trigger": "setStartPoint:", "contents": "setStartPoint:(${1:CGPoint startPoint})" },  
    { "trigger": "setStartProgress:", "contents": "setStartProgress:(${1:float startProgress})" },  
    { "trigger": "setState:", "contents": "setState:(${1:UIGestureRecognizerState state})" },  
    { "trigger": "setStatusBarHidden:", "contents": "setStatusBarHidden:(${1:BOOL statusBarHidden})" },  
    { "trigger": "setStatusBarHidden:animated:", "contents": "setStatusBarHidden:animated:(${1:BOOL hidden}, animated:${2:BOOL animated})" },  
    { "trigger": "setStatusBarHidden:withAnimation:", "contents": "setStatusBarHidden:withAnimation:(${1:BOOL hidden}, withAnimation:${2:UIStatusBarAnimation animation})" },  
    { "trigger": "setStatusBarOrientation:", "contents": "setStatusBarOrientation:(${1:UIInterfaceOrientation statusBarOrientation})" },  
    { "trigger": "setStatusBarOrientation:animated:", "contents": "setStatusBarOrientation:animated:(${1:UIInterfaceOrientation interfaceOrientation}, animated:${2:BOOL animated})" },  
    { "trigger": "setStatusBarStyle:", "contents": "setStatusBarStyle:(${1:UIStatusBarStyle statusBarStyle})" },  
    { "trigger": "setStatusBarStyle:animated:", "contents": "setStatusBarStyle:animated:(${1:UIStatusBarStyle statusBarStyle}, animated:${2:BOOL animated})" },  
    { "trigger": "setStepValue:", "contents": "setStepValue:(${1:double stepValue})" },  
    { "trigger": "setStoredInExternalRecord:", "contents": "setStoredInExternalRecord:(${1:BOOL flag})" },  
    { "trigger": "setString:", "contents": "setString:(${1:NSString* string})" },  
    { "trigger": "setString:", "contents": "setString:(${1:NSString* string})" },  
    { "trigger": "setString:", "contents": "setString:(${1:id string})" },  
    { "trigger": "setString:", "contents": "setString:(${1:NSString* aString})" },  
    { "trigger": "setString:forKey:", "contents": "setString:forKey:(${1:NSString* aString}, forKey:${2:NSString* aKey})" },  
    { "trigger": "setStrings:", "contents": "setStrings:(${1:NSArray* strings})" },  
    { "trigger": "setStroke" },  
    { "trigger": "setStrokeColor:", "contents": "setStrokeColor:(${1:UIColor* strokeColor})" },  
    { "trigger": "setStrokeColor:", "contents": "setStrokeColor:(${1:CGColorRef strokeColor})" },  
    { "trigger": "setStrokeEnd:", "contents": "setStrokeEnd:(${1:CGFloat strokeEnd})" },  
    { "trigger": "setStrokeStart:", "contents": "setStrokeStart:(${1:CGFloat strokeStart})" },  
    { "trigger": "setStyle:", "contents": "setStyle:(${1:NSDictionary* style})" },  
    { "trigger": "setStyle:", "contents": "setStyle:(${1:UIBarButtonItemStyle style})" },  
    { "trigger": "setStyle:", "contents": "setStyle:(${1:NSDictionary* style})" },  
    { "trigger": "setSubentities:", "contents": "setSubentities:(${1:NSArray* array})" },  
    { "trigger": "setSubject:", "contents": "setSubject:(${1:NSString* subject})" },  
    { "trigger": "setSubjectAreaChangeMonitoringEnabled:", "contents": "setSubjectAreaChangeMonitoringEnabled:(${1:BOOL subjectAreaChangeMonitoringEnabled})" },  
    { "trigger": "setSublayerTransform:", "contents": "setSublayerTransform:(${1:CATransform3D sublayerTransform})" },  
    { "trigger": "setSublayers:", "contents": "setSublayers:(${1:NSArray* sublayers})" },  
    { "trigger": "setSubscriberCellularProviderDidUpdateNotifier:", "contents": "setSubscriberCellularProviderDidUpdateNotifier:(${1:void (^)(CTCarrier *) subscriberCellularProviderDidUpdateNotifier})" },  
    { "trigger": "setSubtitle:", "contents": "setSubtitle:(${1:NSString* subtitle})" },  
    { "trigger": "setSubtitle:", "contents": "setSubtitle:(${1:NSString* subtitle})" },  
    { "trigger": "setSubtype:", "contents": "setSubtype:(${1:NSString* subtype})" },  
    { "trigger": "setSuspended:", "contents": "setSuspended:(${1:BOOL b})" },  
    { "trigger": "setTXTRecordData:", "contents": "setTXTRecordData:(${1:NSData* recordData})" },  
    { "trigger": "setTabBarItem:", "contents": "setTabBarItem:(${1:UITabBarItem* tabBarItem})" },  
    { "trigger": "setTableFooterView:", "contents": "setTableFooterView:(${1:UIView* tableFooterView})" },  
    { "trigger": "setTableHeaderView:", "contents": "setTableHeaderView:(${1:UIView* tableHeaderView})" },  
    { "trigger": "setTableView:", "contents": "setTableView:(${1:UITableView* tableView})" },  
    { "trigger": "setTag:", "contents": "setTag:(${1:NSInteger tag})" },  
    { "trigger": "setTag:", "contents": "setTag:(${1:NSInteger tag})" },  
    { "trigger": "setTarget:", "contents": "setTarget:(${1:id target})" },  
    { "trigger": "setTarget:", "contents": "setTarget:(${1:GLKTextureTarget target})" },  
    { "trigger": "setTarget:", "contents": "setTarget:(${1:id target})" },  
    { "trigger": "setTarget:", "contents": "setTarget:(${1:id target})" },  
    { "trigger": "setTargetRect:inView:", "contents": "setTargetRect:inView:(${1:CGRect targetRect}, inView:${2:UIView* targetView})" },  
    { "trigger": "setTensionValues:", "contents": "setTensionValues:(${1:NSArray* tensionValues})" },  
    { "trigger": "setText:", "contents": "setText:(${1:NSString* text})" },  
    { "trigger": "setText:", "contents": "setText:(${1:NSString* text})" },  
    { "trigger": "setText:", "contents": "setText:(${1:NSString* text})" },  
    { "trigger": "setText:", "contents": "setText:(${1:NSString* text})" },  
    { "trigger": "setText:", "contents": "setText:(${1:NSString* text})" },  
    { "trigger": "setText:", "contents": "setText:(${1:NSString* text})" },  
    { "trigger": "setTextAlignment:", "contents": "setTextAlignment:(${1:UITextAlignment textAlignment})" },  
    { "trigger": "setTextAlignment:", "contents": "setTextAlignment:(${1:UITextAlignment textAlignment})" },  
    { "trigger": "setTextAlignment:", "contents": "setTextAlignment:(${1:UITextAlignment textAlignment})" },  
    { "trigger": "setTextAlignment:", "contents": "setTextAlignment:(${1:UITextAlignment textAlignment})" },  
    { "trigger": "setTextAlignment:", "contents": "setTextAlignment:(${1:UITextAlignment textAlignment})" },  
    { "trigger": "setTextAttributesForNegativeInfinity:", "contents": "setTextAttributesForNegativeInfinity:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextAttributesForNegativeValues:", "contents": "setTextAttributesForNegativeValues:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextAttributesForNil:", "contents": "setTextAttributesForNil:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextAttributesForNotANumber:", "contents": "setTextAttributesForNotANumber:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextAttributesForPositiveInfinity:", "contents": "setTextAttributesForPositiveInfinity:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextAttributesForPositiveValues:", "contents": "setTextAttributesForPositiveValues:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextAttributesForZero:", "contents": "setTextAttributesForZero:(${1:NSDictionary* newAttributes})" },  
    { "trigger": "setTextColor:", "contents": "setTextColor:(${1:UIColor* textColor})" },  
    { "trigger": "setTextColor:", "contents": "setTextColor:(${1:UIColor* textColor})" },  
    { "trigger": "setTextColor:", "contents": "setTextColor:(${1:UIColor* textColor})" },  
    { "trigger": "setTextColor:", "contents": "setTextColor:(${1:UIColor* textColor})" },  
    { "trigger": "setTextureOrder:", "contents": "setTextureOrder:(${1:NSArray* textureOrder})" },  
    { "trigger": "setThreadPriority:", "contents": "setThreadPriority:(${1:double p})" },  
    { "trigger": "setThreadPriority:", "contents": "setThreadPriority:(${1:double p})" },  
    { "trigger": "setThumbImage:forState:", "contents": "setThumbImage:forState:(${1:UIImage* image}, forState:${2:UIControlState state})" },  
    { "trigger": "setThumbTintColor:", "contents": "setThumbTintColor:(${1:UIColor* thumbTintColor})" },  
    { "trigger": "setTileSize:", "contents": "setTileSize:(${1:CGSize tileSize})" },  
    { "trigger": "setTime:", "contents": "setTime:(${1:CMTime time})" },  
    { "trigger": "setTimeOffset:", "contents": "setTimeOffset:(${1:CFTimeInterval timeOffset})" },  
    { "trigger": "setTimeOffset:", "contents": "setTimeOffset:(${1:CFTimeInterval timeOffset})" },  
    { "trigger": "setTimeRange:", "contents": "setTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "setTimeRange:", "contents": "setTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "setTimeRange:", "contents": "setTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "setTimeRange:", "contents": "setTimeRange:(${1:CMTimeRange timeRange})" },  
    { "trigger": "setTimeScope:", "contents": "setTimeScope:(${1:GKLeaderboardTimeScope timeScope})" },  
    { "trigger": "setTimeScope:", "contents": "setTimeScope:(${1:GKLeaderboardTimeScope timeScope})" },  
    { "trigger": "setTimeStyle:", "contents": "setTimeStyle:(${1:NSDateFormatterStyle style})" },  
    { "trigger": "setTimeZone:", "contents": "setTimeZone:(${1:NSTimeZone* tz})" },  
    { "trigger": "setTimeZone:", "contents": "setTimeZone:(${1:NSTimeZone* tz})" },  
    { "trigger": "setTimeZone:", "contents": "setTimeZone:(${1:NSTimeZone* timeZone})" },  
    { "trigger": "setTimeZone:", "contents": "setTimeZone:(${1:NSTimeZone* tz})" },  
    { "trigger": "setTimeZone:", "contents": "setTimeZone:(${1:NSTimeZone* timeZone})" },  
    { "trigger": "setTimeZone:", "contents": "setTimeZone:(${1:NSTimeZone* timeZone})" },  
    { "trigger": "setTimeoutInterval:", "contents": "setTimeoutInterval:(${1:NSTimeInterval seconds})" },  
    { "trigger": "setTimingFunction:", "contents": "setTimingFunction:(${1:CAMediaTimingFunction* timingFunction})" },  
    { "trigger": "setTimingFunctions:", "contents": "setTimingFunctions:(${1:NSArray* timingFunctions})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTintColor:", "contents": "setTintColor:(${1:UIColor* tintColor})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitle:", "contents": "setTitle:(${1:NSString* title})" },  
    { "trigger": "setTitleColor:forState:", "contents": "setTitleColor:forState:(${1:UIColor* color}, forState:${2:UIControlState state})" },  
    { "trigger": "setTitleEdgeInsets:", "contents": "setTitleEdgeInsets:(${1:UIEdgeInsets titleEdgeInsets})" },  
    { "trigger": "setTitlePositionAdjustment:", "contents": "setTitlePositionAdjustment:(${1:UIOffset adjustment})" },  
    { "trigger": "setTitlePositionAdjustment:forBarMetrics:", "contents": "setTitlePositionAdjustment:forBarMetrics:(${1:UIOffset adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "setTitleShadowColor:forState:", "contents": "setTitleShadowColor:forState:(${1:UIColor* color}, forState:${2:UIControlState state})" },  
    { "trigger": "setTitleShadowOffset:", "contents": "setTitleShadowOffset:(${1:CGSize titleShadowOffset})" },  
    { "trigger": "setTitleTextAttributes:", "contents": "setTitleTextAttributes:(${1:NSDictionary* titleTextAttributes})" },  
    { "trigger": "setTitleTextAttributes:forState:", "contents": "setTitleTextAttributes:forState:(${1:NSDictionary* attributes}, forState:${2:UIControlState state})" },  
    { "trigger": "setTitleTextAttributes:forState:", "contents": "setTitleTextAttributes:forState:(${1:NSDictionary* attributes}, forState:${2:UIControlState state})" },  
    { "trigger": "setTitleVerticalPositionAdjustment:forBarMetrics:", "contents": "setTitleVerticalPositionAdjustment:forBarMetrics:(${1:CGFloat adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})" },  
    { "trigger": "setTitleView:", "contents": "setTitleView:(${1:UIView* titleView})" },  
    { "trigger": "setTitle:forSegmentAtIndex:", "contents": "setTitle:forSegmentAtIndex:(${1:NSString* title}, forSegmentAtIndex:${2:NSUInteger segment})" },  
    { "trigger": "setTitle:forState:", "contents": "setTitle:forState:(${1:NSString* title}, forState:${2:UIControlState state})" },  
    { "trigger": "setToRecipients:", "contents": "setToRecipients:(${1:NSArray* toRecipients})" },  
    { "trigger": "setToValue:", "contents": "setToValue:(${1:id toValue})" },  
    { "trigger": "setToolbarHidden:", "contents": "setToolbarHidden:(${1:BOOL toolbarHidden})" },  
    { "trigger": "setToolbarHidden:animated:", "contents": "setToolbarHidden:animated:(${1:BOOL hidden}, animated:${2:BOOL animated})" },  
    { "trigger": "setToolbarItems:", "contents": "setToolbarItems:(${1:NSArray* toolbarItems})" },  
    { "trigger": "setToolbarItems:animated:", "contents": "setToolbarItems:animated:(${1:NSArray* toolbarItems}, animated:${2:BOOL animated})" },  
    { "trigger": "setTorchMode:", "contents": "setTorchMode:(${1:AVCaptureTorchMode torchMode})" },  
    { "trigger": "setTotalCostLimit:", "contents": "setTotalCostLimit:(${1:NSUInteger lim})" },  
    { "trigger": "setTrackID:", "contents": "setTrackID:(${1:CMPersistentTrackID trackID})" },  
    { "trigger": "setTrackID:", "contents": "setTrackID:(${1:CMPersistentTrackID trackID})" },  
    { "trigger": "setTrackImage:", "contents": "setTrackImage:(${1:UIImage* trackImage})" },  
    { "trigger": "setTrackTintColor:", "contents": "setTrackTintColor:(${1:UIColor* trackTintColor})" },  
    { "trigger": "setTransform:", "contents": "setTransform:(${1:CGAffineTransform transform})" },  
    { "trigger": "setTransform:", "contents": "setTransform:(${1:GLKEffectPropertyTransform* transform})" },  
    { "trigger": "setTransform:", "contents": "setTransform:(${1:CATransform3D transform})" },  
    { "trigger": "setTransform:", "contents": "setTransform:(${1:CGAffineTransform transform})" },  
    { "trigger": "setTransformRampFromStartTransform:toEndTransform:timeRange:", "contents": "setTransformRampFromStartTransform:toEndTransform:timeRange:(${1:CGAffineTransform startTransform}, toEndTransform:${2:CGAffineTransform endTransform}, timeRange:${3:CMTimeRange timeRange})" },  
    { "trigger": "setTransform:atTime:", "contents": "setTransform:atTime:(${1:CGAffineTransform transform}, atTime:${2:CMTime time})" },  
    { "trigger": "setTransient:", "contents": "setTransient:(${1:BOOL flag})" },  
    { "trigger": "setTranslation:inView:", "contents": "setTranslation:inView:(${1:CGPoint translation}, inView:${2:UIView* view})" },  
    { "trigger": "setTranslucent:", "contents": "setTranslucent:(${1:BOOL translucent})" },  
    { "trigger": "setTranslucent:", "contents": "setTranslucent:(${1:BOOL translucent})" },  
    { "trigger": "setTranslucent:", "contents": "setTranslucent:(${1:BOOL translucent})" },  
    { "trigger": "setTruncationMode:", "contents": "setTruncationMode:(${1:NSString* truncationMode})" },  
    { "trigger": "setTurnBasedMatchmakerDelegate:", "contents": "setTurnBasedMatchmakerDelegate:(${1:id turnBasedMatchmakerDelegate})" },  
    { "trigger": "setTwoDigitStartDate:", "contents": "setTwoDigitStartDate:(${1:NSDate* date})" },  
    { "trigger": "setType:", "contents": "setType:(${1:NSString* type})" },  
    { "trigger": "setType:", "contents": "setType:(${1:NSString* type})" },  
    { "trigger": "setURL:", "contents": "setURL:(${1:NSURL* url})" },  
    { "trigger": "setURL:", "contents": "setURL:(${1:NSURL* URL})" },  
    { "trigger": "setURL:", "contents": "setURL:(${1:NSURL* URL})" },  
    { "trigger": "setURL:", "contents": "setURL:(${1:NSURL* URL})" },  
    { "trigger": "setURL:", "contents": "setURL:(${1:NSURL* URL})" },  
    { "trigger": "setURL:forKey:", "contents": "setURL:forKey:(${1:NSURL* url}, forKey:${2:NSString* defaultName})" },  
    { "trigger": "setURL:forPersistentStore:", "contents": "setURL:forPersistentStore:(${1:NSURL* url}, forPersistentStore:${2:NSPersistentStore* store})" },  
    { "trigger": "setURLs:", "contents": "setURLs:(${1:NSArray* URLs})" },  
    { "trigger": "setUTI:", "contents": "setUTI:(${1:NSString* UTI})" },  
    { "trigger": "setUbiquitous:itemAtURL:destinationURL:error:", "contents": "setUbiquitous:itemAtURL:destinationURL:error:(${1:BOOL flag}, itemAtURL:${2:NSURL* url}, destinationURL:${3:NSURL* destinationURL}, error:${4:NSError** error})" },  
    { "trigger": "setUndoManager:", "contents": "setUndoManager:(${1:NSUndoManager* undoManager})" },  
    { "trigger": "setUndoManager:", "contents": "setUndoManager:(${1:NSUndoManager* undoManager})" },  
    { "trigger": "setUnknownPersonViewDelegate:", "contents": "setUnknownPersonViewDelegate:(${1:id unknownPersonViewDelegate})" },  
    { "trigger": "setUpdateInterval:", "contents": "setUpdateInterval:(${1:NSTimeInterval updateInterval})" },  
    { "trigger": "setUseApplicationAudioSession:", "contents": "setUseApplicationAudioSession:(${1:BOOL useApplicationAudioSession})" },  
    { "trigger": "setUseConstantColor:", "contents": "setUseConstantColor:(${1:GLboolean useConstantColor})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* userInfo})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* dictionary})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* userInfo})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* userInfo})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* dictionary})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* dict})" },  
    { "trigger": "setUserInfo:", "contents": "setUserInfo:(${1:NSDictionary* dict})" },  
    { "trigger": "setUserInteractionEnabled:", "contents": "setUserInteractionEnabled:(${1:BOOL userInteractionEnabled})" },  
    { "trigger": "setUserInteractionEnabled:", "contents": "setUserInteractionEnabled:(${1:BOOL userInteractionEnabled})" },  
    { "trigger": "setUserInteractionEnabled:", "contents": "setUserInteractionEnabled:(${1:BOOL userInteractionEnabled})" },  
    { "trigger": "setUserTrackingMode:", "contents": "setUserTrackingMode:(${1:MKUserTrackingMode userTrackingMode})" },  
    { "trigger": "setUserTrackingMode:animated:", "contents": "setUserTrackingMode:animated:(${1:MKUserTrackingMode mode}, animated:${2:BOOL animated})" },  
    { "trigger": "setUsername:", "contents": "setUsername:(${1:NSString* username})" },  
    { "trigger": "setUsesAirPlayVideoWhileAirPlayScreenIsActive:", "contents": "setUsesAirPlayVideoWhileAirPlayScreenIsActive:(${1:BOOL usesAirPlayVideoWhileAirPlayScreenIsActive})" },  
    { "trigger": "setUsesEvenOddFillRule:", "contents": "setUsesEvenOddFillRule:(${1:BOOL usesEvenOddFillRule})" },  
    { "trigger": "setUsesGroupingSeparator:", "contents": "setUsesGroupingSeparator:(${1:BOOL b})" },  
    { "trigger": "setUsesSignificantDigits:", "contents": "setUsesSignificantDigits:(${1:BOOL b})" },  
    { "trigger": "setUsesStoreSpecificMigrationManager:", "contents": "setUsesStoreSpecificMigrationManager:(${1:BOOL flag})" },  
    { "trigger": "setValidationPredicates:withValidationWarnings:", "contents": "setValidationPredicates:withValidationWarnings:(${1:NSArray* validationPredicates}, withValidationWarnings:${2:NSArray* validationWarnings})" },  
    { "trigger": "setValue:", "contents": "setValue:(${1:int64_t value})" },  
    { "trigger": "setValue:", "contents": "setValue:(${1:float value})" },  
    { "trigger": "setValue:", "contents": "setValue:(${1:id value})" },  
    { "trigger": "setValue:", "contents": "setValue:(${1:double value})" },  
    { "trigger": "setValueExpression:", "contents": "setValueExpression:(${1:NSExpression* expression})" },  
    { "trigger": "setValueFunction:", "contents": "setValueFunction:(${1:CAValueFunction* valueFunction})" },  
    { "trigger": "setValueListAttributes:", "contents": "setValueListAttributes:(${1:NSArray* attrs})" },  
    { "trigger": "setValueTransformerName:", "contents": "setValueTransformerName:(${1:NSString* string})" },  
    { "trigger": "setValue:animated:", "contents": "setValue:animated:(${1:float value}, animated:${2:BOOL animated})" },  
    { "trigger": "setValue:forHTTPHeaderField:", "contents": "setValue:forHTTPHeaderField:(${1:NSString* value}, forHTTPHeaderField:${2:NSString* field})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKey:", "contents": "setValue:forKey:(${1:id value}, forKey:${2:NSString* key})" },  
    { "trigger": "setValue:forKeyPath:", "contents": "setValue:forKeyPath:(${1:id value}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "setValue:forKeyPath:", "contents": "setValue:forKeyPath:(${1:id value}, forKeyPath:${2:NSString* keyPath})" },  
    { "trigger": "setValue:forPasteboardType:", "contents": "setValue:forPasteboardType:(${1:id value}, forPasteboardType:${2:NSString* pasteboardType})" },  
    { "trigger": "setValue:forUndefinedKey:", "contents": "setValue:forUndefinedKey:(${1:id value}, forUndefinedKey:${2:NSString* key})" },  
    { "trigger": "setValue:forUndefinedKey:", "contents": "setValue:forUndefinedKey:(${1:id value}, forUndefinedKey:${2:NSString* key})" },  
    { "trigger": "setValues:", "contents": "setValues:(${1:NSArray* values})" },  
    { "trigger": "setValuesForKeysWithDictionary:", "contents": "setValuesForKeysWithDictionary:(${1:NSDictionary* keyedValues})" },  
    { "trigger": "setValuesForKeysWithDictionary:", "contents": "setValuesForKeysWithDictionary:(${1:NSDictionary* keyedValues})" },  
    { "trigger": "setVelocity:", "contents": "setVelocity:(${1:float velocity})" },  
    { "trigger": "setVelocity:", "contents": "setVelocity:(${1:CGFloat velocity})" },  
    { "trigger": "setVelocityRange:", "contents": "setVelocityRange:(${1:CGFloat velocityRange})" },  
    { "trigger": "setVersionHashModifier:", "contents": "setVersionHashModifier:(${1:NSString* modifierString})" },  
    { "trigger": "setVersionHashModifier:", "contents": "setVersionHashModifier:(${1:NSString* modifierString})" },  
    { "trigger": "setVersionIdentifiers:", "contents": "setVersionIdentifiers:(${1:NSSet* identifiers})" },  
    { "trigger": "setVeryShortMonthSymbols:", "contents": "setVeryShortMonthSymbols:(${1:NSArray* array})" },  
    { "trigger": "setVeryShortStandaloneMonthSymbols:", "contents": "setVeryShortStandaloneMonthSymbols:(${1:NSArray* array})" },  
    { "trigger": "setVeryShortStandaloneWeekdaySymbols:", "contents": "setVeryShortStandaloneWeekdaySymbols:(${1:NSArray* array})" },  
    { "trigger": "setVeryShortWeekdaySymbols:", "contents": "setVeryShortWeekdaySymbols:(${1:NSArray* array})" },  
    { "trigger": "setVideoAtPath:completionBlock:", "contents": "setVideoAtPath:completionBlock:(${1:NSURL* videoPathURL}, completionBlock:${2:ALAssetsLibraryWriteVideoCompletionBlock completionBlock})" },  
    { "trigger": "setVideoComposition:", "contents": "setVideoComposition:(${1:AVVideoComposition* videoComposition})" },  
    { "trigger": "setVideoComposition:", "contents": "setVideoComposition:(${1:AVVideoComposition* videoComposition})" },  
    { "trigger": "setVideoComposition:", "contents": "setVideoComposition:(${1:AVVideoComposition* videoComposition})" },  
    { "trigger": "setVideoComposition:", "contents": "setVideoComposition:(${1:AVVideoComposition* videoComposition})" },  
    { "trigger": "setVideoGravity:", "contents": "setVideoGravity:(${1:NSString* videoGravity})" },  
    { "trigger": "setVideoGravity:", "contents": "setVideoGravity:(${1:NSString* videoGravity})" },  
    { "trigger": "setVideoMaxFrameDuration:", "contents": "setVideoMaxFrameDuration:(${1:CMTime videoMaxFrameDuration})" },  
    { "trigger": "setVideoMaximumDuration:", "contents": "setVideoMaximumDuration:(${1:NSTimeInterval videoMaximumDuration})" },  
    { "trigger": "setVideoMaximumDuration:", "contents": "setVideoMaximumDuration:(${1:NSTimeInterval videoMaximumDuration})" },  
    { "trigger": "setVideoMinFrameDuration:", "contents": "setVideoMinFrameDuration:(${1:CMTime videoMinFrameDuration})" },  
    { "trigger": "setVideoMirrored:", "contents": "setVideoMirrored:(${1:BOOL videoMirrored})" },  
    { "trigger": "setVideoOrientation:", "contents": "setVideoOrientation:(${1:AVCaptureVideoOrientation videoOrientation})" },  
    { "trigger": "setVideoPath:", "contents": "setVideoPath:(${1:NSString* videoPath})" },  
    { "trigger": "setVideoQuality:", "contents": "setVideoQuality:(${1:UIImagePickerControllerQualityType videoQuality})" },  
    { "trigger": "setVideoQuality:", "contents": "setVideoQuality:(${1:UIImagePickerControllerQualityType videoQuality})" },  
    { "trigger": "setVideoScaleAndCropFactor:", "contents": "setVideoScaleAndCropFactor:(${1:CGFloat videoScaleAndCropFactor})" },  
    { "trigger": "setVideoSettings:", "contents": "setVideoSettings:(${1:NSDictionary* videoSettings})" },  
    { "trigger": "setView:", "contents": "setView:(${1:UIView* view})" },  
    { "trigger": "setViewControllers:", "contents": "setViewControllers:(${1:NSArray* viewControllers})" },  
    { "trigger": "setViewControllers:", "contents": "setViewControllers:(${1:NSArray* viewControllers})" },  
    { "trigger": "setViewControllers:", "contents": "setViewControllers:(${1:NSArray* viewControllers})" },  
    { "trigger": "setViewControllers:animated:", "contents": "setViewControllers:animated:(${1:NSArray* viewControllers}, animated:${2:BOOL animated})" },  
    { "trigger": "setViewControllers:animated:", "contents": "setViewControllers:animated:(${1:NSArray* viewControllers}, animated:${2:BOOL animated})" },  
    { "trigger": "setViewControllers:direction:animated:completion:", "contents": "setViewControllers:direction:animated:completion:(${1:NSArray* viewControllers}, direction:${2:UIPageViewControllerNavigationDirection direction}, animated:${3:BOOL animated}, completion:${4:void (^)(BOOL) completion})" },  
    { "trigger": "setVisibleMapRect:", "contents": "setVisibleMapRect:(${1:MKMapRect visibleMapRect})" },  
    { "trigger": "setVisibleMapRect:animated:", "contents": "setVisibleMapRect:animated:(${1:MKMapRect mapRect}, animated:${2:BOOL animate})" },  
    { "trigger": "setVisibleMapRect:edgePadding:animated:", "contents": "setVisibleMapRect:edgePadding:animated:(${1:MKMapRect mapRect}, edgePadding:${2:UIEdgeInsets insets}, animated:${3:BOOL animate})" },  
    { "trigger": "setVolatileDomain:forName:", "contents": "setVolatileDomain:forName:(${1:NSDictionary* domain}, forName:${2:NSString* domainName})" },  
    { "trigger": "setVolume:", "contents": "setVolume:(${1:float volume})" },  
    { "trigger": "setVolume:", "contents": "setVolume:(${1:float volume})" },  
    { "trigger": "setVolume:", "contents": "setVolume:(${1:float volume})" },  
    { "trigger": "setVolumeRampFromStartVolume:toEndVolume:timeRange:", "contents": "setVolumeRampFromStartVolume:toEndVolume:timeRange:(${1:float startVolume}, toEndVolume:${2:float endVolume}, timeRange:${3:CMTimeRange timeRange})" },  
    { "trigger": "setVolume:atTime:", "contents": "setVolume:atTime:(${1:float volume}, atTime:${2:CMTime time})" },  
    { "trigger": "setWantsFullScreenLayout:", "contents": "setWantsFullScreenLayout:(${1:BOOL wantsFullScreenLayout})" },  
    { "trigger": "setWantsSoftwareDimming:", "contents": "setWantsSoftwareDimming:(${1:BOOL wantsSoftwareDimming})" },  
    { "trigger": "setWeek:", "contents": "setWeek:(${1:NSInteger v})" },  
    { "trigger": "setWeekOfMonth:", "contents": "setWeekOfMonth:(${1:NSInteger w})" },  
    { "trigger": "setWeekOfYear:", "contents": "setWeekOfYear:(${1:NSInteger w})" },  
    { "trigger": "setWeekday:", "contents": "setWeekday:(${1:NSInteger v})" },  
    { "trigger": "setWeekdayOrdinal:", "contents": "setWeekdayOrdinal:(${1:NSInteger v})" },  
    { "trigger": "setWeekdaySymbols:", "contents": "setWeekdaySymbols:(${1:NSArray* array})" },  
    { "trigger": "setWhiteBalanceMode:", "contents": "setWhiteBalanceMode:(${1:AVCaptureWhiteBalanceMode whiteBalanceMode})" },  
    { "trigger": "setWidth:", "contents": "setWidth:(${1:CGFloat width})" },  
    { "trigger": "setWidth:forSegmentAtIndex:", "contents": "setWidth:forSegmentAtIndex:(${1:CGFloat width}, forSegmentAtIndex:${2:NSUInteger segment})" },  
    { "trigger": "setWindow:", "contents": "setWindow:(${1:UIWindow* window})" },  
    { "trigger": "setWindow:", "contents": "setWindow:(${1:UIWindow* window})" },  
    { "trigger": "setWindowLevel:", "contents": "setWindowLevel:(${1:UIWindowLevel windowLevel})" },  
    { "trigger": "setWrapped:", "contents": "setWrapped:(${1:BOOL wrapped})" },  
    { "trigger": "setWraps:", "contents": "setWraps:(${1:BOOL wraps})" },  
    { "trigger": "setWriteabilityHandler:", "contents": "setWriteabilityHandler:(${1:void (^)(NSFileHandle *) writeabilityHandler})" },  
    { "trigger": "setXAcceleration:", "contents": "setXAcceleration:(${1:CGFloat xAcceleration})" },  
    { "trigger": "setXSize:", "contents": "setXSize:(${1:GLfloat xSize})" },  
    { "trigger": "setYAcceleration:", "contents": "setYAcceleration:(${1:CGFloat yAcceleration})" },  
    { "trigger": "setYSize:", "contents": "setYSize:(${1:GLfloat ySize})" },  
    { "trigger": "setYear:", "contents": "setYear:(${1:NSInteger v})" },  
    { "trigger": "setYearForWeekOfYear:", "contents": "setYearForWeekOfYear:(${1:NSInteger y})" },  
    { "trigger": "setZAcceleration:", "contents": "setZAcceleration:(${1:CGFloat zAcceleration})" },  
    { "trigger": "setZPosition:", "contents": "setZPosition:(${1:CGFloat zPosition})" },  
    { "trigger": "setZSize:", "contents": "setZSize:(${1:GLfloat zSize})" },  
    { "trigger": "setZeroSymbol:", "contents": "setZeroSymbol:(${1:NSString* string})" },  
    { "trigger": "setZoomEnabled:", "contents": "setZoomEnabled:(${1:BOOL zoomEnabled})" },  
    { "trigger": "setZoomScale:", "contents": "setZoomScale:(${1:float zoomScale})" },  
    { "trigger": "setZoomScale:animated:", "contents": "setZoomScale:animated:(${1:float scale}, animated:${2:BOOL animated})" },  
    { "trigger": "settings" },  
    { "trigger": "settings" },  
    { "trigger": "shadowColor" },  
    { "trigger": "shadowColor" },  
    { "trigger": "shadowOffset" },  
    { "trigger": "shadowOffset" },  
    { "trigger": "shadowOpacity" },  
    { "trigger": "shadowPath" },  
    { "trigger": "shadowRadius" },  
    { "trigger": "sharedFrameworksPath" },  
    { "trigger": "sharedFrameworksURL" },  
    { "trigger": "sharedSupportPath" },  
    { "trigger": "sharedSupportURL" },  
    { "trigger": "sharegroup" },  
    { "trigger": "shiftIndexesStartingAtIndex:by:", "contents": "shiftIndexesStartingAtIndex:by:(${1:NSUInteger index}, by:${2:NSInteger delta})" },  
    { "trigger": "shininess" },  
    { "trigger": "shortMonthSymbols" },  
    { "trigger": "shortQuarterSymbols" },  
    { "trigger": "shortStandaloneMonthSymbols" },  
    { "trigger": "shortStandaloneQuarterSymbols" },  
    { "trigger": "shortStandaloneWeekdaySymbols" },  
    { "trigger": "shortValue" },  
    { "trigger": "shortWeekdaySymbols" },  
    { "trigger": "shouldArchiveValueForKey:", "contents": "shouldArchiveValueForKey:(${1:NSString* key})" },  
    { "trigger": "shouldArchiveValueForKey:", "contents": "shouldArchiveValueForKey:(${1:NSString* key})" },  
    { "trigger": "shouldArchiveValueForKey:", "contents": "shouldArchiveValueForKey:(${1:NSString* key})" },  
    { "trigger": "shouldAutoplay" },  
    { "trigger": "shouldAutorotateToInterfaceOrientation:", "contents": "shouldAutorotateToInterfaceOrientation:(${1:UIInterfaceOrientation toInterfaceOrientation})" },  
    { "trigger": "shouldAutorotateToInterfaceOrientation:", "contents": "shouldAutorotateToInterfaceOrientation:(${1:UIInterfaceOrientation toInterfaceOrientation})" },  
    { "trigger": "shouldIndentWhileEditing" },  
    { "trigger": "shouldOptimizeForNetworkUse" },  
    { "trigger": "shouldOptimizeForNetworkUse" },  
    { "trigger": "shouldProcessNamespaces" },  
    { "trigger": "shouldRasterize" },  
    { "trigger": "shouldRefreshRefetchedObjects" },  
    { "trigger": "shouldReportNamespacePrefixes" },  
    { "trigger": "shouldResolveExternalEntities" },  
    { "trigger": "shouldSetDefaultLeaderboard" },  
    { "trigger": "shouldShowLinkedPeople" },  
    { "trigger": "show" },  
    { "trigger": "show" },  
    { "trigger": "showExistingMatches" },  
    { "trigger": "showFromBarButtonItem:animated:", "contents": "showFromBarButtonItem:animated:(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})" },  
    { "trigger": "showFromRect:inView:animated:", "contents": "showFromRect:inView:animated:(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated})" },  
    { "trigger": "showFromTabBar:", "contents": "showFromTabBar:(${1:UITabBar* view})" },  
    { "trigger": "showFromToolbar:", "contents": "showFromToolbar:(${1:UIToolbar* view})" },  
    { "trigger": "showInView:", "contents": "showInView:(${1:UIView* view})" },  
    { "trigger": "showingDeleteConfirmation" },  
    { "trigger": "showsBookmarkButton" },  
    { "trigger": "showsCameraControls" },  
    { "trigger": "showsCancelButton" },  
    { "trigger": "showsCancelButton" },  
    { "trigger": "showsCompletionBanner" },  
    { "trigger": "showsDeviceMovementDisplay" },  
    { "trigger": "showsDoneButton" },  
    { "trigger": "showsHorizontalScrollIndicator" },  
    { "trigger": "showsPageRange" },  
    { "trigger": "showsReorderControl" },  
    { "trigger": "showsRouteButton" },  
    { "trigger": "showsScopeBar" },  
    { "trigger": "showsSearchResultsButton" },  
    { "trigger": "showsSelectionIndicator" },  
    { "trigger": "showsTouchWhenHighlighted" },  
    { "trigger": "showsUserLocation" },  
    { "trigger": "showsVerticalScrollIndicator" },  
    { "trigger": "showsVolumeSlider" },  
    { "trigger": "shuffleMode" },  
    { "trigger": "signal" },  
    { "trigger": "signedURLRequest" },  
    { "trigger": "size" },  
    { "trigger": "size" },  
    { "trigger": "size" },  
    { "trigger": "sizeForNumberOfPages:", "contents": "sizeForNumberOfPages:(${1:NSInteger pageCount})" },  
    { "trigger": "sizeThatFits:", "contents": "sizeThatFits:(${1:CGSize size})" },  
    { "trigger": "sizeThatFits:", "contents": "sizeThatFits:(${1:CGSize size})" },  
    { "trigger": "sizeToFit" },  
    { "trigger": "sizeWithFont:", "contents": "sizeWithFont:(${1:UIFont* font})" },  
    { "trigger": "sizeWithFont:constrainedToSize:", "contents": "sizeWithFont:constrainedToSize:(${1:UIFont* font}, constrainedToSize:${2:CGSize size})" },  
    { "trigger": "sizeWithFont:constrainedToSize:lineBreakMode:", "contents": "sizeWithFont:constrainedToSize:lineBreakMode:(${1:UIFont* font}, constrainedToSize:${2:CGSize size}, lineBreakMode:${3:UILineBreakMode lineBreakMode})" },  
    { "trigger": "sizeWithFont:forWidth:lineBreakMode:", "contents": "sizeWithFont:forWidth:lineBreakMode:(${1:UIFont* font}, forWidth:${2:CGFloat width}, lineBreakMode:${3:UILineBreakMode lineBreakMode})" },  
    { "trigger": "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:", "contents": "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:(${1:UIFont* font}, minFontSize:${2:CGFloat minFontSize}, actualFontSize:${3:CGFloat* actualFontSize}, forWidth:${4:CGFloat width}, lineBreakMode:${5:UILineBreakMode lineBreakMode})" },  
    { "trigger": "skipDescendants" },  
    { "trigger": "skipDescendents" },  
    { "trigger": "skipToBeginning" },  
    { "trigger": "skipToNextItem" },  
    { "trigger": "skipToPreviousItem" },  
    { "trigger": "smallestEncoding" },  
    { "trigger": "snapshot" },  
    { "trigger": "socket" },  
    { "trigger": "socketType" },  
    { "trigger": "sortDescriptors" },  
    { "trigger": "sortDescriptors" },  
    { "trigger": "sortRange:options:usingComparator:", "contents": "sortRange:options:usingComparator:(${1:NSRange range}, options:${2:NSSortOptions opts}, usingComparator:${3:NSComparator cmptr})" },  
    { "trigger": "sortUsingComparator:", "contents": "sortUsingComparator:(${1:NSComparator cmptr})" },  
    { "trigger": "sortUsingComparator:", "contents": "sortUsingComparator:(${1:NSComparator cmptr})" },  
    { "trigger": "sortUsingDescriptors:", "contents": "sortUsingDescriptors:(${1:NSArray* sortDescriptors})" },  
    { "trigger": "sortUsingFunction:context:", "contents": "sortUsingFunction:context:(${1:NSInteger (*)(id, id, void *) compare}, context:${2:void* context})" },  
    { "trigger": "sortUsingSelector:", "contents": "sortUsingSelector:(${1:SEL comparator})" },  
    { "trigger": "sortWithOptions:usingComparator:", "contents": "sortWithOptions:usingComparator:(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})" },  
    { "trigger": "sortWithOptions:usingComparator:", "contents": "sortWithOptions:usingComparator:(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})" },  
    { "trigger": "sortedArrayFromArray:collationStringSelector:", "contents": "sortedArrayFromArray:collationStringSelector:(${1:NSArray* array}, collationStringSelector:${2:SEL selector})" },  
    { "trigger": "sortedArrayHint" },  
    { "trigger": "sortedArrayUsingComparator:", "contents": "sortedArrayUsingComparator:(${1:NSComparator cmptr})" },  
    { "trigger": "sortedArrayUsingComparator:", "contents": "sortedArrayUsingComparator:(${1:NSComparator cmptr})" },  
    { "trigger": "sortedArrayUsingDescriptors:", "contents": "sortedArrayUsingDescriptors:(${1:NSArray* sortDescriptors})" },  
    { "trigger": "sortedArrayUsingDescriptors:", "contents": "sortedArrayUsingDescriptors:(${1:NSArray* sortDescriptors})" },  
    { "trigger": "sortedArrayUsingFunction:context:", "contents": "sortedArrayUsingFunction:context:(${1:NSInteger (*)(id, id, void *) comparator}, context:${2:void* context})" },  
    { "trigger": "sortedArrayUsingFunction:context:hint:", "contents": "sortedArrayUsingFunction:context:hint:(${1:NSInteger (*)(id, id, void *) comparator}, context:${2:void* context}, hint:${3:NSData* hint})" },  
    { "trigger": "sortedArrayUsingSelector:", "contents": "sortedArrayUsingSelector:(${1:SEL comparator})" },  
    { "trigger": "sortedArrayWithOptions:usingComparator:", "contents": "sortedArrayWithOptions:usingComparator:(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})" },  
    { "trigger": "sortedArrayWithOptions:usingComparator:", "contents": "sortedArrayWithOptions:usingComparator:(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})" },  
    { "trigger": "sortedCookiesUsingDescriptors:", "contents": "sortedCookiesUsingDescriptors:(${1:NSArray* sortOrder})" },  
    { "trigger": "soundName" },  
    { "trigger": "source" },  
    { "trigger": "sourceContext" },  
    { "trigger": "sourceEndpoint" },  
    { "trigger": "sourceEntityForEntityMapping:", "contents": "sourceEntityForEntityMapping:(${1:NSEntityMapping* mEntity})" },  
    { "trigger": "sourceEntityName" },  
    { "trigger": "sourceEntityVersionHash" },  
    { "trigger": "sourceExpression" },  
    { "trigger": "sourceIdentifier" },  
    { "trigger": "sourceInstancesForEntityMappingNamed:destinationInstances:", "contents": "sourceInstancesForEntityMappingNamed:destinationInstances:(${1:NSString* mappingName}, destinationInstances:${2:NSArray* destinationInstances})" },  
    { "trigger": "sourceModel" },  
    { "trigger": "sourceObject" },  
    { "trigger": "sourcePixelBufferAttributes" },  
    { "trigger": "sourceTrackID" },  
    { "trigger": "sourceType" },  
    { "trigger": "sourceType" },  
    { "trigger": "sourceURL" },  
    { "trigger": "sourceViewController" },  
    { "trigger": "sourceWithIdentifier:", "contents": "sourceWithIdentifier:(${1:NSString* identifier})" },  
    { "trigger": "sources" },  
    { "trigger": "specularColor" },  
    { "trigger": "specularColor" },  
    { "trigger": "speed" },  
    { "trigger": "speed" },  
    { "trigger": "speed" },  
    { "trigger": "spellCheckingType" },  
    { "trigger": "spellCheckingType" },  
    { "trigger": "spellCheckingType" },  
    { "trigger": "spin" },  
    { "trigger": "spin" },  
    { "trigger": "spinRange" },  
    { "trigger": "spineLocation" },  
    { "trigger": "splitViewController" },  
    { "trigger": "splitViewController:popoverController:willPresentViewController:", "contents": "splitViewController:popoverController:willPresentViewController:(${1:UISplitViewController* svc}, popoverController:${2:UIPopoverController* pc}, willPresentViewController:${3:UIViewController* aViewController})" },  
    { "trigger": "splitViewController:popoverController:willPresentViewController:", "contents": "splitViewController:popoverController:willPresentViewController:(${1:UISplitViewController* svc}, popoverController:${2:UIPopoverController* pc}, willPresentViewController:${3:UIViewController* aViewController})" },  
    { "trigger": "splitViewController:shouldHideViewController:inOrientation:", "contents": "splitViewController:shouldHideViewController:inOrientation:(${1:UISplitViewController* svc}, shouldHideViewController:${2:UIViewController* vc}, inOrientation:${3:UIInterfaceOrientation orientation})" },  
    { "trigger": "splitViewController:shouldHideViewController:inOrientation:", "contents": "splitViewController:shouldHideViewController:inOrientation:(${1:UISplitViewController* svc}, shouldHideViewController:${2:UIViewController* vc}, inOrientation:${3:UIInterfaceOrientation orientation})" },  
    { "trigger": "splitViewController:willHideViewController:withBarButtonItem:forPopoverController:", "contents": "splitViewController:willHideViewController:withBarButtonItem:forPopoverController:(${1:UISplitViewController* svc}, willHideViewController:${2:UIViewController* aViewController}, withBarButtonItem:${3:UIBarButtonItem* barButtonItem}, forPopoverController:${4:UIPopoverController* pc})" },  
    { "trigger": "splitViewController:willHideViewController:withBarButtonItem:forPopoverController:", "contents": "splitViewController:willHideViewController:withBarButtonItem:forPopoverController:(${1:UISplitViewController* svc}, willHideViewController:${2:UIViewController* aViewController}, withBarButtonItem:${3:UIBarButtonItem* barButtonItem}, forPopoverController:${4:UIPopoverController* pc})" },  
    { "trigger": "splitViewController:willShowViewController:invalidatingBarButtonItem:", "contents": "splitViewController:willShowViewController:invalidatingBarButtonItem:(${1:UISplitViewController* svc}, willShowViewController:${2:UIViewController* aViewController}, invalidatingBarButtonItem:${3:UIBarButtonItem* barButtonItem})" },  
    { "trigger": "splitViewController:willShowViewController:invalidatingBarButtonItem:", "contents": "splitViewController:willShowViewController:invalidatingBarButtonItem:(${1:UISplitViewController* svc}, willShowViewController:${2:UIViewController* aViewController}, invalidatingBarButtonItem:${3:UIBarButtonItem* barButtonItem})" },  
    { "trigger": "spotCutoff" },  
    { "trigger": "spotDirection" },  
    { "trigger": "spotExponent" },  
    { "trigger": "stackSize" },  
    { "trigger": "stalenessInterval" },  
    { "trigger": "standaloneMonthSymbols" },  
    { "trigger": "standaloneQuarterSymbols" },  
    { "trigger": "standaloneWeekdaySymbols" },  
    { "trigger": "standardizedURL" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "start" },  
    { "trigger": "startAccelerometerUpdates" },  
    { "trigger": "startAccelerometerUpdatesToQueue:withHandler:", "contents": "startAccelerometerUpdatesToQueue:withHandler:(${1:NSOperationQueue* queue}, withHandler:${2:CMAccelerometerHandler handler})" },  
    { "trigger": "startAnimating" },  
    { "trigger": "startAnimating" },  
    { "trigger": "startDate" },  
    { "trigger": "startDeviceMotionUpdates" },  
    { "trigger": "startDeviceMotionUpdatesToQueue:withHandler:", "contents": "startDeviceMotionUpdatesToQueue:withHandler:(${1:NSOperationQueue* queue}, withHandler:${2:CMDeviceMotionHandler handler})" },  
    { "trigger": "startDeviceMotionUpdatesUsingReferenceFrame:", "contents": "startDeviceMotionUpdatesUsingReferenceFrame:(${1:CMAttitudeReferenceFrame referenceFrame})" },  
    { "trigger": "startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:", "contents": "startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:(${1:CMAttitudeReferenceFrame referenceFrame}, toQueue:${2:NSOperationQueue* queue}, withHandler:${3:CMDeviceMotionHandler handler})" },  
    { "trigger": "startDownloadingUbiquitousItemAtURL:error:", "contents": "startDownloadingUbiquitousItemAtURL:error:(${1:NSURL* url}, error:${2:NSError** error})" },  
    { "trigger": "startGyroUpdates" },  
    { "trigger": "startGyroUpdatesToQueue:withHandler:", "contents": "startGyroUpdatesToQueue:withHandler:(${1:NSOperationQueue* queue}, withHandler:${2:CMGyroHandler handler})" },  
    { "trigger": "startLoading" },  
    { "trigger": "startMagnetometerUpdates" },  
    { "trigger": "startMagnetometerUpdatesToQueue:withHandler:", "contents": "startMagnetometerUpdatesToQueue:withHandler:(${1:NSOperationQueue* queue}, withHandler:${2:CMMagnetometerHandler handler})" },  
    { "trigger": "startMonitoring" },  
    { "trigger": "startMonitoringForRegion:", "contents": "startMonitoringForRegion:(${1:CLRegion* region})" },  
    { "trigger": "startMonitoringForRegion:desiredAccuracy:", "contents": "startMonitoringForRegion:desiredAccuracy:(${1:CLRegion* region}, desiredAccuracy:${2:CLLocationAccuracy accuracy})" },  
    { "trigger": "startMonitoringSignificantLocationChanges" },  
    { "trigger": "startPage" },  
    { "trigger": "startPoint" },  
    { "trigger": "startProgress" },  
    { "trigger": "startQuery" },  
    { "trigger": "startReading" },  
    { "trigger": "startRecordingToOutputFileURL:recordingDelegate:", "contents": "startRecordingToOutputFileURL:recordingDelegate:(${1:NSURL* outputFileURL}, recordingDelegate:${2:id delegate})" },  
    { "trigger": "startRunning" },  
    { "trigger": "startSessionAtSourceTime:", "contents": "startSessionAtSourceTime:(${1:CMTime startTime})" },  
    { "trigger": "startUpdatingHeading" },  
    { "trigger": "startUpdatingLocation" },  
    { "trigger": "startVideoCapture" },  
    { "trigger": "startVoiceChatWithParticipantID:error:", "contents": "startVoiceChatWithParticipantID:error:(${1:NSString* participantID}, error:${2:NSError** error})" },  
    { "trigger": "startWriting" },  
    { "trigger": "state" },  
    { "trigger": "state" },  
    { "trigger": "state" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "status" },  
    { "trigger": "statusBarFrame" },  
    { "trigger": "statusBarOrientation" },  
    { "trigger": "statusBarOrientationAnimationDuration" },  
    { "trigger": "statusBarStyle" },  
    { "trigger": "statusCode" },  
    { "trigger": "statusOfValueForKey:error:", "contents": "statusOfValueForKey:error:(${1:NSString* key}, error:${2:NSError** outError})" },  
    { "trigger": "statusOfValueForKey:error:", "contents": "statusOfValueForKey:error:(${1:NSString* key}, error:${2:NSError** outError})" },  
    { "trigger": "statusOfValueForKey:error:", "contents": "statusOfValueForKey:error:(${1:NSString* key}, error:${2:NSError** outError})" },  
    { "trigger": "stepByCount:", "contents": "stepByCount:(${1:NSInteger stepCount})" },  
    { "trigger": "stepValue" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stop" },  
    { "trigger": "stopAccelerometerUpdates" },  
    { "trigger": "stopAnimating" },  
    { "trigger": "stopAnimating" },  
    { "trigger": "stopDeviceMotionUpdates" },  
    { "trigger": "stopGyroUpdates" },  
    { "trigger": "stopLoading" },  
    { "trigger": "stopLoading" },  
    { "trigger": "stopMagnetometerUpdates" },  
    { "trigger": "stopMonitoring" },  
    { "trigger": "stopMonitoringForRegion:", "contents": "stopMonitoringForRegion:(${1:CLRegion* region})" },  
    { "trigger": "stopMonitoringSignificantLocationChanges" },  
    { "trigger": "stopQuery" },  
    { "trigger": "stopRecording" },  
    { "trigger": "stopRunning" },  
    { "trigger": "stopScan" },  
    { "trigger": "stopUpdatingHeading" },  
    { "trigger": "stopUpdatingLocation" },  
    { "trigger": "stopVideoCapture" },  
    { "trigger": "stopVoiceChatWithParticipantID:", "contents": "stopVoiceChatWithParticipantID:(${1:NSString* participantID})" },  
    { "trigger": "storagePolicy" },  
    { "trigger": "storeCachedResponse:forRequest:", "contents": "storeCachedResponse:forRequest:(${1:NSCachedURLResponse* cachedResponse}, forRequest:${2:NSURLRequest* request})" },  
    { "trigger": "storyboard" },  
    { "trigger": "streamError" },  
    { "trigger": "streamStatus" },  
    { "trigger": "stream:handleEvent:", "contents": "stream:handleEvent:(${1:NSStream* aStream}, handleEvent:${2:NSStreamEvent eventCode})" },  
    { "trigger": "stream:handleEvent:", "contents": "stream:handleEvent:(${1:NSStream* aStream}, handleEvent:${2:NSStreamEvent eventCode})" },  
    { "trigger": "stretchableImageWithLeftCapWidth:topCapHeight:", "contents": "stretchableImageWithLeftCapWidth:topCapHeight:(${1:NSInteger leftCapWidth}, topCapHeight:${2:NSInteger topCapHeight})" },  
    { "trigger": "string" },  
    { "trigger": "string" },  
    { "trigger": "string" },  
    { "trigger": "string" },  
    { "trigger": "string" },  
    { "trigger": "stringArrayForKey:", "contents": "stringArrayForKey:(${1:NSString* defaultName})" },  
    { "trigger": "stringByAbbreviatingWithTildeInPath" },  
    { "trigger": "stringByAddingPercentEscapesUsingEncoding:", "contents": "stringByAddingPercentEscapesUsingEncoding:(${1:NSStringEncoding enc})" },  
    { "trigger": "stringByAppendingFormat:", "contents": "stringByAppendingFormat:(${1:NSString* format})" },  
    { "trigger": "stringByAppendingPathComponent:", "contents": "stringByAppendingPathComponent:(${1:NSString* str})" },  
    { "trigger": "stringByAppendingPathExtension:", "contents": "stringByAppendingPathExtension:(${1:NSString* str})" },  
    { "trigger": "stringByAppendingString:", "contents": "stringByAppendingString:(${1:NSString* aString})" },  
    { "trigger": "stringByDeletingLastPathComponent" },  
    { "trigger": "stringByDeletingPathExtension" },  
    { "trigger": "stringByEvaluatingJavaScriptFromString:", "contents": "stringByEvaluatingJavaScriptFromString:(${1:NSString* script})" },  
    { "trigger": "stringByExpandingTildeInPath" },  
    { "trigger": "stringByFoldingWithOptions:locale:", "contents": "stringByFoldingWithOptions:locale:(${1:NSStringCompareOptions options}, locale:${2:NSLocale* locale})" },  
    { "trigger": "stringByPaddingToLength:withString:startingAtIndex:", "contents": "stringByPaddingToLength:withString:startingAtIndex:(${1:NSUInteger newLength}, withString:${2:NSString* padString}, startingAtIndex:${3:NSUInteger padIndex})" },  
    { "trigger": "stringByReplacingCharactersInRange:withString:", "contents": "stringByReplacingCharactersInRange:withString:(${1:NSRange range}, withString:${2:NSString* replacement})" },  
    { "trigger": "stringByReplacingMatchesInString:options:range:withTemplate:", "contents": "stringByReplacingMatchesInString:options:range:withTemplate:(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range}, withTemplate:${4:NSString* templ})" },  
    { "trigger": "stringByReplacingOccurrencesOfString:withString:", "contents": "stringByReplacingOccurrencesOfString:withString:(${1:NSString* target}, withString:${2:NSString* replacement})" },  
    { "trigger": "stringByReplacingOccurrencesOfString:withString:options:range:", "contents": "stringByReplacingOccurrencesOfString:withString:options:range:(${1:NSString* target}, withString:${2:NSString* replacement}, options:${3:NSStringCompareOptions options}, range:${4:NSRange searchRange})" },  
    { "trigger": "stringByReplacingPercentEscapesUsingEncoding:", "contents": "stringByReplacingPercentEscapesUsingEncoding:(${1:NSStringEncoding enc})" },  
    { "trigger": "stringByResolvingSymlinksInPath" },  
    { "trigger": "stringByStandardizingPath" },  
    { "trigger": "stringByTrimmingCharactersInSet:", "contents": "stringByTrimmingCharactersInSet:(${1:NSCharacterSet* set})" },  
    { "trigger": "stringEditedInRange:changeInLength:", "contents": "stringEditedInRange:changeInLength:(${1:NSRange newRange}, changeInLength:${2:NSInteger delta})" },  
    { "trigger": "stringForKey:", "contents": "stringForKey:(${1:NSString* aKey})" },  
    { "trigger": "stringForKey:", "contents": "stringForKey:(${1:NSString* defaultName})" },  
    { "trigger": "stringForObjectValue:", "contents": "stringForObjectValue:(${1:id obj})" },  
    { "trigger": "stringFromDate:", "contents": "stringFromDate:(${1:NSDate* date})" },  
    { "trigger": "stringFromNumber:", "contents": "stringFromNumber:(${1:NSNumber* number})" },  
    { "trigger": "stringRepresentation" },  
    { "trigger": "stringRepresentation" },  
    { "trigger": "stringValue" },  
    { "trigger": "stringValue" },  
    { "trigger": "stringWithFileSystemRepresentation:length:", "contents": "stringWithFileSystemRepresentation:length:(${1:char* str}, length:${2:NSUInteger len})" },  
    { "trigger": "strings" },  
    { "trigger": "stringsByAppendingPaths:", "contents": "stringsByAppendingPaths:(${1:NSArray* paths})" },  
    { "trigger": "stroke" },  
    { "trigger": "strokeColor" },  
    { "trigger": "strokeColor" },  
    { "trigger": "strokeEnd" },  
    { "trigger": "strokePath:inContext:", "contents": "strokePath:inContext:(${1:CGPathRef path}, inContext:${2:CGContextRef context})" },  
    { "trigger": "strokeStart" },  
    { "trigger": "strokeWithBlendMode:alpha:", "contents": "strokeWithBlendMode:alpha:(${1:CGBlendMode blendMode}, alpha:${2:CGFloat alpha})" },  
    { "trigger": "style" },  
    { "trigger": "style" },  
    { "trigger": "style" },  
    { "trigger": "style" },  
    { "trigger": "subAdministrativeArea" },  
    { "trigger": "subLocality" },  
    { "trigger": "subThoroughfare" },  
    { "trigger": "subarrayWithRange:", "contents": "subarrayWithRange:(${1:NSRange range})" },  
    { "trigger": "subdataWithRange:", "contents": "subdataWithRange:(${1:NSRange range})" },  
    { "trigger": "subentities" },  
    { "trigger": "subentitiesByName" },  
    { "trigger": "subgroups" },  
    { "trigger": "sublayerTransform" },  
    { "trigger": "sublayers" },  
    { "trigger": "subpathsAtPath:", "contents": "subpathsAtPath:(${1:NSString* path})" },  
    { "trigger": "subpathsOfDirectoryAtPath:error:", "contents": "subpathsOfDirectoryAtPath:error:(${1:NSString* path}, error:${2:NSError** error})" },  
    { "trigger": "subpredicates" },  
    { "trigger": "subscriberCellularProvider" },  
    { "trigger": "subscriberCellularProviderDidUpdateNotifier" },  
    { "trigger": "substringFromIndex:", "contents": "substringFromIndex:(${1:NSUInteger from})" },  
    { "trigger": "substringToIndex:", "contents": "substringToIndex:(${1:NSUInteger to})" },  
    { "trigger": "substringWithRange:", "contents": "substringWithRange:(${1:NSRange range})" },  
    { "trigger": "subtitle" },  
    { "trigger": "subtitle" },  
    { "trigger": "subtitle" },  
    { "trigger": "subtitle" },  
    { "trigger": "subtype" },  
    { "trigger": "subtype" },  
    { "trigger": "subviews" },  
    { "trigger": "suggestedFilename" },  
    { "trigger": "superclass" },  
    { "trigger": "superclass" },  
    { "trigger": "superentity" },  
    { "trigger": "superlayer" },  
    { "trigger": "superview" },  
    { "trigger": "supportedEventAvailabilities" },  
    { "trigger": "supportedFileTypes" },  
    { "trigger": "supportsAVCaptureSessionPreset:", "contents": "supportsAVCaptureSessionPreset:(${1:NSString* preset})" },  
    { "trigger": "symbolicLinkDestinationURL" },  
    { "trigger": "synchronize" },  
    { "trigger": "synchronize" },  
    { "trigger": "synchronizeFile" },  
    { "trigger": "systemID" },  
    { "trigger": "systemName" },  
    { "trigger": "systemUptime" },  
    { "trigger": "systemVersion" },  
    { "trigger": "systemVersion" },  
    { "trigger": "tabBar" },  
    { "trigger": "tabBarController" },  
    { "trigger": "tabBarController:didEndCustomizingViewControllers:changed:", "contents": "tabBarController:didEndCustomizingViewControllers:changed:(${1:UITabBarController* tabBarController}, didEndCustomizingViewControllers:${2:NSArray* viewControllers}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBarController:didEndCustomizingViewControllers:changed:", "contents": "tabBarController:didEndCustomizingViewControllers:changed:(${1:UITabBarController* tabBarController}, didEndCustomizingViewControllers:${2:NSArray* viewControllers}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBarController:didSelectViewController:", "contents": "tabBarController:didSelectViewController:(${1:UITabBarController* tabBarController}, didSelectViewController:${2:UIViewController* viewController})" },  
    { "trigger": "tabBarController:didSelectViewController:", "contents": "tabBarController:didSelectViewController:(${1:UITabBarController* tabBarController}, didSelectViewController:${2:UIViewController* viewController})" },  
    { "trigger": "tabBarController:shouldSelectViewController:", "contents": "tabBarController:shouldSelectViewController:(${1:UITabBarController* tabBarController}, shouldSelectViewController:${2:UIViewController* viewController})" },  
    { "trigger": "tabBarController:shouldSelectViewController:", "contents": "tabBarController:shouldSelectViewController:(${1:UITabBarController* tabBarController}, shouldSelectViewController:${2:UIViewController* viewController})" },  
    { "trigger": "tabBarController:willBeginCustomizingViewControllers:", "contents": "tabBarController:willBeginCustomizingViewControllers:(${1:UITabBarController* tabBarController}, willBeginCustomizingViewControllers:${2:NSArray* viewControllers})" },  
    { "trigger": "tabBarController:willBeginCustomizingViewControllers:", "contents": "tabBarController:willBeginCustomizingViewControllers:(${1:UITabBarController* tabBarController}, willBeginCustomizingViewControllers:${2:NSArray* viewControllers})" },  
    { "trigger": "tabBarController:willEndCustomizingViewControllers:changed:", "contents": "tabBarController:willEndCustomizingViewControllers:changed:(${1:UITabBarController* tabBarController}, willEndCustomizingViewControllers:${2:NSArray* viewControllers}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBarController:willEndCustomizingViewControllers:changed:", "contents": "tabBarController:willEndCustomizingViewControllers:changed:(${1:UITabBarController* tabBarController}, willEndCustomizingViewControllers:${2:NSArray* viewControllers}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBarItem" },  
    { "trigger": "tabBar:didBeginCustomizingItems:", "contents": "tabBar:didBeginCustomizingItems:(${1:UITabBar* tabBar}, didBeginCustomizingItems:${2:NSArray* items})" },  
    { "trigger": "tabBar:didBeginCustomizingItems:", "contents": "tabBar:didBeginCustomizingItems:(${1:UITabBar* tabBar}, didBeginCustomizingItems:${2:NSArray* items})" },  
    { "trigger": "tabBar:didEndCustomizingItems:changed:", "contents": "tabBar:didEndCustomizingItems:changed:(${1:UITabBar* tabBar}, didEndCustomizingItems:${2:NSArray* items}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBar:didEndCustomizingItems:changed:", "contents": "tabBar:didEndCustomizingItems:changed:(${1:UITabBar* tabBar}, didEndCustomizingItems:${2:NSArray* items}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBar:didSelectItem:", "contents": "tabBar:didSelectItem:(${1:UITabBar* tabBar}, didSelectItem:${2:UITabBarItem* item})" },  
    { "trigger": "tabBar:didSelectItem:", "contents": "tabBar:didSelectItem:(${1:UITabBar* tabBar}, didSelectItem:${2:UITabBarItem* item})" },  
    { "trigger": "tabBar:willBeginCustomizingItems:", "contents": "tabBar:willBeginCustomizingItems:(${1:UITabBar* tabBar}, willBeginCustomizingItems:${2:NSArray* items})" },  
    { "trigger": "tabBar:willBeginCustomizingItems:", "contents": "tabBar:willBeginCustomizingItems:(${1:UITabBar* tabBar}, willBeginCustomizingItems:${2:NSArray* items})" },  
    { "trigger": "tabBar:willEndCustomizingItems:changed:", "contents": "tabBar:willEndCustomizingItems:changed:(${1:UITabBar* tabBar}, willEndCustomizingItems:${2:NSArray* items}, changed:${3:BOOL changed})" },  
    { "trigger": "tabBar:willEndCustomizingItems:changed:", "contents": "tabBar:willEndCustomizingItems:changed:(${1:UITabBar* tabBar}, willEndCustomizingItems:${2:NSArray* items}, changed:${3:BOOL changed})" },  
    { "trigger": "tableFooterView" },  
    { "trigger": "tableHeaderView" },  
    { "trigger": "tableView" },  
    { "trigger": "tableView:accessoryButtonTappedForRowWithIndexPath:", "contents": "tableView:accessoryButtonTappedForRowWithIndexPath:(${1:UITableView* tableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:accessoryButtonTappedForRowWithIndexPath:", "contents": "tableView:accessoryButtonTappedForRowWithIndexPath:(${1:UITableView* tableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:accessoryTypeForRowWithIndexPath:", "contents": "tableView:accessoryTypeForRowWithIndexPath:(${1:UITableView* tableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:accessoryTypeForRowWithIndexPath:", "contents": "tableView:accessoryTypeForRowWithIndexPath:(${1:UITableView* tableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:canEditRowAtIndexPath:", "contents": "tableView:canEditRowAtIndexPath:(${1:UITableView* tableView}, canEditRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:canEditRowAtIndexPath:", "contents": "tableView:canEditRowAtIndexPath:(${1:UITableView* tableView}, canEditRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:canMoveRowAtIndexPath:", "contents": "tableView:canMoveRowAtIndexPath:(${1:UITableView* tableView}, canMoveRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:canMoveRowAtIndexPath:", "contents": "tableView:canMoveRowAtIndexPath:(${1:UITableView* tableView}, canMoveRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:canPerformAction:forRowAtIndexPath:withSender:", "contents": "tableView:canPerformAction:forRowAtIndexPath:withSender:(${1:UITableView* tableView}, canPerformAction:${2:SEL action}, forRowAtIndexPath:${3:NSIndexPath* indexPath}, withSender:${4:id sender})" },  
    { "trigger": "tableView:canPerformAction:forRowAtIndexPath:withSender:", "contents": "tableView:canPerformAction:forRowAtIndexPath:withSender:(${1:UITableView* tableView}, canPerformAction:${2:SEL action}, forRowAtIndexPath:${3:NSIndexPath* indexPath}, withSender:${4:id sender})" },  
    { "trigger": "tableView:cellForRowAtIndexPath:", "contents": "tableView:cellForRowAtIndexPath:(${1:UITableView* tableView}, cellForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:cellForRowAtIndexPath:", "contents": "tableView:cellForRowAtIndexPath:(${1:UITableView* tableView}, cellForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:commitEditingStyle:forRowAtIndexPath:", "contents": "tableView:commitEditingStyle:forRowAtIndexPath:(${1:UITableView* tableView}, commitEditingStyle:${2:UITableViewCellEditingStyle editingStyle}, forRowAtIndexPath:${3:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:commitEditingStyle:forRowAtIndexPath:", "contents": "tableView:commitEditingStyle:forRowAtIndexPath:(${1:UITableView* tableView}, commitEditingStyle:${2:UITableViewCellEditingStyle editingStyle}, forRowAtIndexPath:${3:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:didDeselectRowAtIndexPath:", "contents": "tableView:didDeselectRowAtIndexPath:(${1:UITableView* tableView}, didDeselectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:didDeselectRowAtIndexPath:", "contents": "tableView:didDeselectRowAtIndexPath:(${1:UITableView* tableView}, didDeselectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:didEndEditingRowAtIndexPath:", "contents": "tableView:didEndEditingRowAtIndexPath:(${1:UITableView* tableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:didEndEditingRowAtIndexPath:", "contents": "tableView:didEndEditingRowAtIndexPath:(${1:UITableView* tableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:didSelectRowAtIndexPath:", "contents": "tableView:didSelectRowAtIndexPath:(${1:UITableView* tableView}, didSelectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:didSelectRowAtIndexPath:", "contents": "tableView:didSelectRowAtIndexPath:(${1:UITableView* tableView}, didSelectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:editingStyleForRowAtIndexPath:", "contents": "tableView:editingStyleForRowAtIndexPath:(${1:UITableView* tableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:editingStyleForRowAtIndexPath:", "contents": "tableView:editingStyleForRowAtIndexPath:(${1:UITableView* tableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:heightForFooterInSection:", "contents": "tableView:heightForFooterInSection:(${1:UITableView* tableView}, heightForFooterInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:heightForFooterInSection:", "contents": "tableView:heightForFooterInSection:(${1:UITableView* tableView}, heightForFooterInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:heightForHeaderInSection:", "contents": "tableView:heightForHeaderInSection:(${1:UITableView* tableView}, heightForHeaderInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:heightForHeaderInSection:", "contents": "tableView:heightForHeaderInSection:(${1:UITableView* tableView}, heightForHeaderInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:heightForRowAtIndexPath:", "contents": "tableView:heightForRowAtIndexPath:(${1:UITableView* tableView}, heightForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:heightForRowAtIndexPath:", "contents": "tableView:heightForRowAtIndexPath:(${1:UITableView* tableView}, heightForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:indentationLevelForRowAtIndexPath:", "contents": "tableView:indentationLevelForRowAtIndexPath:(${1:UITableView* tableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:indentationLevelForRowAtIndexPath:", "contents": "tableView:indentationLevelForRowAtIndexPath:(${1:UITableView* tableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:moveRowAtIndexPath:toIndexPath:", "contents": "tableView:moveRowAtIndexPath:toIndexPath:(${1:UITableView* tableView}, moveRowAtIndexPath:${2:NSIndexPath* sourceIndexPath}, toIndexPath:${3:NSIndexPath* destinationIndexPath})" },  
    { "trigger": "tableView:moveRowAtIndexPath:toIndexPath:", "contents": "tableView:moveRowAtIndexPath:toIndexPath:(${1:UITableView* tableView}, moveRowAtIndexPath:${2:NSIndexPath* sourceIndexPath}, toIndexPath:${3:NSIndexPath* destinationIndexPath})" },  
    { "trigger": "tableView:numberOfRowsInSection:", "contents": "tableView:numberOfRowsInSection:(${1:UITableView* tableView}, numberOfRowsInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:numberOfRowsInSection:", "contents": "tableView:numberOfRowsInSection:(${1:UITableView* tableView}, numberOfRowsInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:performAction:forRowAtIndexPath:withSender:", "contents": "tableView:performAction:forRowAtIndexPath:withSender:(${1:UITableView* tableView}, performAction:${2:SEL action}, forRowAtIndexPath:${3:NSIndexPath* indexPath}, withSender:${4:id sender})" },  
    { "trigger": "tableView:performAction:forRowAtIndexPath:withSender:", "contents": "tableView:performAction:forRowAtIndexPath:withSender:(${1:UITableView* tableView}, performAction:${2:SEL action}, forRowAtIndexPath:${3:NSIndexPath* indexPath}, withSender:${4:id sender})" },  
    { "trigger": "tableView:sectionForSectionIndexTitle:atIndex:", "contents": "tableView:sectionForSectionIndexTitle:atIndex:(${1:UITableView* tableView}, sectionForSectionIndexTitle:${2:NSString* title}, atIndex:${3:NSInteger index})" },  
    { "trigger": "tableView:sectionForSectionIndexTitle:atIndex:", "contents": "tableView:sectionForSectionIndexTitle:atIndex:(${1:UITableView* tableView}, sectionForSectionIndexTitle:${2:NSString* title}, atIndex:${3:NSInteger index})" },  
    { "trigger": "tableView:shouldIndentWhileEditingRowAtIndexPath:", "contents": "tableView:shouldIndentWhileEditingRowAtIndexPath:(${1:UITableView* tableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:shouldIndentWhileEditingRowAtIndexPath:", "contents": "tableView:shouldIndentWhileEditingRowAtIndexPath:(${1:UITableView* tableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:shouldShowMenuForRowAtIndexPath:", "contents": "tableView:shouldShowMenuForRowAtIndexPath:(${1:UITableView* tableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:shouldShowMenuForRowAtIndexPath:", "contents": "tableView:shouldShowMenuForRowAtIndexPath:(${1:UITableView* tableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:", "contents": "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:(${1:UITableView* tableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath* sourceIndexPath}, toProposedIndexPath:${3:NSIndexPath* proposedDestinationIndexPath})" },  
    { "trigger": "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:", "contents": "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:(${1:UITableView* tableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath* sourceIndexPath}, toProposedIndexPath:${3:NSIndexPath* proposedDestinationIndexPath})" },  
    { "trigger": "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:", "contents": "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:(${1:UITableView* tableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:", "contents": "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:(${1:UITableView* tableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:titleForFooterInSection:", "contents": "tableView:titleForFooterInSection:(${1:UITableView* tableView}, titleForFooterInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:titleForFooterInSection:", "contents": "tableView:titleForFooterInSection:(${1:UITableView* tableView}, titleForFooterInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:titleForHeaderInSection:", "contents": "tableView:titleForHeaderInSection:(${1:UITableView* tableView}, titleForHeaderInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:titleForHeaderInSection:", "contents": "tableView:titleForHeaderInSection:(${1:UITableView* tableView}, titleForHeaderInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:viewForFooterInSection:", "contents": "tableView:viewForFooterInSection:(${1:UITableView* tableView}, viewForFooterInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:viewForFooterInSection:", "contents": "tableView:viewForFooterInSection:(${1:UITableView* tableView}, viewForFooterInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:viewForHeaderInSection:", "contents": "tableView:viewForHeaderInSection:(${1:UITableView* tableView}, viewForHeaderInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:viewForHeaderInSection:", "contents": "tableView:viewForHeaderInSection:(${1:UITableView* tableView}, viewForHeaderInSection:${2:NSInteger section})" },  
    { "trigger": "tableView:willBeginEditingRowAtIndexPath:", "contents": "tableView:willBeginEditingRowAtIndexPath:(${1:UITableView* tableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willBeginEditingRowAtIndexPath:", "contents": "tableView:willBeginEditingRowAtIndexPath:(${1:UITableView* tableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willDeselectRowAtIndexPath:", "contents": "tableView:willDeselectRowAtIndexPath:(${1:UITableView* tableView}, willDeselectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willDeselectRowAtIndexPath:", "contents": "tableView:willDeselectRowAtIndexPath:(${1:UITableView* tableView}, willDeselectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willDisplayCell:forRowAtIndexPath:", "contents": "tableView:willDisplayCell:forRowAtIndexPath:(${1:UITableView* tableView}, willDisplayCell:${2:UITableViewCell* cell}, forRowAtIndexPath:${3:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willDisplayCell:forRowAtIndexPath:", "contents": "tableView:willDisplayCell:forRowAtIndexPath:(${1:UITableView* tableView}, willDisplayCell:${2:UITableViewCell* cell}, forRowAtIndexPath:${3:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willSelectRowAtIndexPath:", "contents": "tableView:willSelectRowAtIndexPath:(${1:UITableView* tableView}, willSelectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tableView:willSelectRowAtIndexPath:", "contents": "tableView:willSelectRowAtIndexPath:(${1:UITableView* tableView}, willSelectRowAtIndexPath:${2:NSIndexPath* indexPath})" },  
    { "trigger": "tag" },  
    { "trigger": "tag" },  
    { "trigger": "tagAtIndex:scheme:tokenRange:sentenceRange:", "contents": "tagAtIndex:scheme:tokenRange:sentenceRange:(${1:NSUInteger charIndex}, scheme:${2:NSString* tagScheme}, tokenRange:${3:NSRangePointer tokenRange}, sentenceRange:${4:NSRangePointer sentenceRange})" },  
    { "trigger": "tagSchemes" },  
    { "trigger": "tagsInRange:scheme:options:tokenRanges:", "contents": "tagsInRange:scheme:options:tokenRanges:(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, tokenRanges:${4:NSArray** tokenRanges})" },  
    { "trigger": "takePicture" },  
    { "trigger": "tapCount" },  
    { "trigger": "target" },  
    { "trigger": "target" },  
    { "trigger": "target" },  
    { "trigger": "target" },  
    { "trigger": "target" },  
    { "trigger": "tensionValues" },  
    { "trigger": "text" },  
    { "trigger": "text" },  
    { "trigger": "text" },  
    { "trigger": "text" },  
    { "trigger": "text" },  
    { "trigger": "text" },  
    { "trigger": "text" },  
    { "trigger": "textAlignment" },  
    { "trigger": "textAlignment" },  
    { "trigger": "textAlignment" },  
    { "trigger": "textAlignment" },  
    { "trigger": "textAlignment" },  
    { "trigger": "textAttributesForNegativeInfinity" },  
    { "trigger": "textAttributesForNegativeValues" },  
    { "trigger": "textAttributesForNil" },  
    { "trigger": "textAttributesForNotANumber" },  
    { "trigger": "textAttributesForPositiveInfinity" },  
    { "trigger": "textAttributesForPositiveValues" },  
    { "trigger": "textAttributesForZero" },  
    { "trigger": "textColor" },  
    { "trigger": "textColor" },  
    { "trigger": "textColor" },  
    { "trigger": "textColor" },  
    { "trigger": "textDidChange:", "contents": "textDidChange:(${1:id textInput})" },  
    { "trigger": "textDidChange:", "contents": "textDidChange:(${1:id textInput})" },  
    { "trigger": "textEncodingName" },  
    { "trigger": "textFieldAtIndex:", "contents": "textFieldAtIndex:(${1:NSInteger textFieldIndex})" },  
    { "trigger": "textFieldDidBeginEditing:", "contents": "textFieldDidBeginEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldDidBeginEditing:", "contents": "textFieldDidBeginEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldDidEndEditing:", "contents": "textFieldDidEndEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldDidEndEditing:", "contents": "textFieldDidEndEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldBeginEditing:", "contents": "textFieldShouldBeginEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldBeginEditing:", "contents": "textFieldShouldBeginEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldClear:", "contents": "textFieldShouldClear:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldClear:", "contents": "textFieldShouldClear:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldEndEditing:", "contents": "textFieldShouldEndEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldEndEditing:", "contents": "textFieldShouldEndEditing:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldReturn:", "contents": "textFieldShouldReturn:(${1:UITextField* textField})" },  
    { "trigger": "textFieldShouldReturn:", "contents": "textFieldShouldReturn:(${1:UITextField* textField})" },  
    { "trigger": "textField:shouldChangeCharactersInRange:replacementString:", "contents": "textField:shouldChangeCharactersInRange:replacementString:(${1:UITextField* textField}, shouldChangeCharactersInRange:${2:NSRange range}, replacementString:${3:NSString* string})" },  
    { "trigger": "textField:shouldChangeCharactersInRange:replacementString:", "contents": "textField:shouldChangeCharactersInRange:replacementString:(${1:UITextField* textField}, shouldChangeCharactersInRange:${2:NSRange range}, replacementString:${3:NSString* string})" },  
    { "trigger": "textInRange:", "contents": "textInRange:(${1:UITextRange* range})" },  
    { "trigger": "textInRange:", "contents": "textInRange:(${1:UITextRange* range})" },  
    { "trigger": "textInputView" },  
    { "trigger": "textInputView" },  
    { "trigger": "textLabel" },  
    { "trigger": "textRangeFromPosition:toPosition:", "contents": "textRangeFromPosition:toPosition:(${1:UITextPosition* fromPosition}, toPosition:${2:UITextPosition* toPosition})" },  
    { "trigger": "textRangeFromPosition:toPosition:", "contents": "textRangeFromPosition:toPosition:(${1:UITextPosition* fromPosition}, toPosition:${2:UITextPosition* toPosition})" },  
    { "trigger": "textRectForBounds:", "contents": "textRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "textRectForBounds:limitedToNumberOfLines:", "contents": "textRectForBounds:limitedToNumberOfLines:(${1:CGRect bounds}, limitedToNumberOfLines:${2:NSInteger numberOfLines})" },  
    { "trigger": "textStylingAtPosition:inDirection:", "contents": "textStylingAtPosition:inDirection:(${1:UITextPosition* position}, inDirection:${2:UITextStorageDirection direction})" },  
    { "trigger": "textStylingAtPosition:inDirection:", "contents": "textStylingAtPosition:inDirection:(${1:UITextPosition* position}, inDirection:${2:UITextStorageDirection direction})" },  
    { "trigger": "textViewDidBeginEditing:", "contents": "textViewDidBeginEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidBeginEditing:", "contents": "textViewDidBeginEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidChange:", "contents": "textViewDidChange:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidChange:", "contents": "textViewDidChange:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidChangeSelection:", "contents": "textViewDidChangeSelection:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidChangeSelection:", "contents": "textViewDidChangeSelection:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidEndEditing:", "contents": "textViewDidEndEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewDidEndEditing:", "contents": "textViewDidEndEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewShouldBeginEditing:", "contents": "textViewShouldBeginEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewShouldBeginEditing:", "contents": "textViewShouldBeginEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewShouldEndEditing:", "contents": "textViewShouldEndEditing:(${1:UITextView* textView})" },  
    { "trigger": "textViewShouldEndEditing:", "contents": "textViewShouldEndEditing:(${1:UITextView* textView})" },  
    { "trigger": "textView:shouldChangeTextInRange:replacementText:", "contents": "textView:shouldChangeTextInRange:replacementText:(${1:UITextView* textView}, shouldChangeTextInRange:${2:NSRange range}, replacementText:${3:NSString* text})" },  
    { "trigger": "textView:shouldChangeTextInRange:replacementText:", "contents": "textView:shouldChangeTextInRange:replacementText:(${1:UITextView* textView}, shouldChangeTextInRange:${2:NSRange range}, replacementText:${3:NSString* text})" },  
    { "trigger": "textWillChange:", "contents": "textWillChange:(${1:id textInput})" },  
    { "trigger": "textWillChange:", "contents": "textWillChange:(${1:id textInput})" },  
    { "trigger": "texture2d0" },  
    { "trigger": "texture2d1" },  
    { "trigger": "textureCubeMap" },  
    { "trigger": "textureCubeMap" },  
    { "trigger": "textureOrder" },  
    { "trigger": "textureOrigin" },  
    { "trigger": "textureWithCGImage:options:queue:completionHandler:", "contents": "textureWithCGImage:options:queue:completionHandler:(${1:CGImageRef cgImage}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "textureWithContentsOfData:options:queue:completionHandler:", "contents": "textureWithContentsOfData:options:queue:completionHandler:(${1:NSData* data}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "textureWithContentsOfFile:options:queue:completionHandler:", "contents": "textureWithContentsOfFile:options:queue:completionHandler:(${1:NSString* path}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "textureWithContentsOfURL:options:queue:completionHandler:", "contents": "textureWithContentsOfURL:options:queue:completionHandler:(${1:NSURL* url}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})" },  
    { "trigger": "thoroughfare" },  
    { "trigger": "threadDictionary" },  
    { "trigger": "threadPriority" },  
    { "trigger": "threadPriority" },  
    { "trigger": "thumbImageForState:", "contents": "thumbImageForState:(${1:UIControlState state})" },  
    { "trigger": "thumbRectForBounds:trackRect:value:", "contents": "thumbRectForBounds:trackRect:value:(${1:CGRect bounds}, trackRect:${2:CGRect rect}, value:${3:float value})" },  
    { "trigger": "thumbTintColor" },  
    { "trigger": "thumbnail" },  
    { "trigger": "thumbnailImageAtTime:timeOption:", "contents": "thumbnailImageAtTime:timeOption:(${1:NSTimeInterval playbackTime}, timeOption:${2:MPMovieTimeOption option})" },  
    { "trigger": "tileSize" },  
    { "trigger": "time" },  
    { "trigger": "time" },  
    { "trigger": "timeInterval" },  
    { "trigger": "timeIntervalSince1970" },  
    { "trigger": "timeIntervalSinceDate:", "contents": "timeIntervalSinceDate:(${1:NSDate* anotherDate})" },  
    { "trigger": "timeIntervalSinceNow" },  
    { "trigger": "timeIntervalSinceReferenceDate" },  
    { "trigger": "timeMapping" },  
    { "trigger": "timeOffset" },  
    { "trigger": "timeOffset" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeRange" },  
    { "trigger": "timeScope" },  
    { "trigger": "timeScope" },  
    { "trigger": "timeSinceFirstResume" },  
    { "trigger": "timeSinceLastDraw" },  
    { "trigger": "timeSinceLastResume" },  
    { "trigger": "timeSinceLastUpdate" },  
    { "trigger": "timeStyle" },  
    { "trigger": "timeZone" },  
    { "trigger": "timeZone" },  
    { "trigger": "timeZone" },  
    { "trigger": "timeZone" },  
    { "trigger": "timeZone" },  
    { "trigger": "timeZone" },  
    { "trigger": "timeZone" },  
    { "trigger": "timedMetadata" },  
    { "trigger": "timedMetadata" },  
    { "trigger": "timeoutInterval" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timestamp" },  
    { "trigger": "timingFunction" },  
    { "trigger": "timingFunctions" },  
    { "trigger": "tintColor" },  
    { "trigger": "tintColor" },  
    { "trigger": "tintColor" },  
    { "trigger": "tintColor" },  
    { "trigger": "tintColor" },  
    { "trigger": "tintColor" },  
    { "trigger": "tintColor" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "title" },  
    { "trigger": "titleColorForState:", "contents": "titleColorForState:(${1:UIControlState state})" },  
    { "trigger": "titleEdgeInsets" },  
    { "trigger": "titleForSegmentAtIndex:", "contents": "titleForSegmentAtIndex:(${1:NSUInteger segment})" },  
    { "trigger": "titleForState:", "contents": "titleForState:(${1:UIControlState state})" },  
    { "trigger": "titleLabel" },  
    { "trigger": "titlePositionAdjustment" },  
    { "trigger": "titlePositionAdjustmentForBarMetrics:", "contents": "titlePositionAdjustmentForBarMetrics:(${1:UIBarMetrics barMetrics})" },  
    { "trigger": "titleRectForContentRect:", "contents": "titleRectForContentRect:(${1:CGRect contentRect})" },  
    { "trigger": "titleShadowColorForState:", "contents": "titleShadowColorForState:(${1:UIControlState state})" },  
    { "trigger": "titleShadowOffset" },  
    { "trigger": "titleTextAttributes" },  
    { "trigger": "titleTextAttributesForState:", "contents": "titleTextAttributesForState:(${1:UIControlState state})" },  
    { "trigger": "titleTextAttributesForState:", "contents": "titleTextAttributesForState:(${1:UIControlState state})" },  
    { "trigger": "titleVerticalPositionAdjustmentForBarMetrics:", "contents": "titleVerticalPositionAdjustmentForBarMetrics:(${1:UIBarMetrics barMetrics})" },  
    { "trigger": "titleView" },  
    { "trigger": "toValue" },  
    { "trigger": "tokenizer" },  
    { "trigger": "tokenizer" },  
    { "trigger": "toolbar" },  
    { "trigger": "toolbarItems" },  
    { "trigger": "topCapHeight" },  
    { "trigger": "topItem" },  
    { "trigger": "topViewController" },  
    { "trigger": "torchLevel" },  
    { "trigger": "torchMode" },  
    { "trigger": "totalCostLimit" },  
    { "trigger": "totalSampleDataLength" },  
    { "trigger": "touchesBegan:withEvent:", "contents": "touchesBegan:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesBegan:withEvent:", "contents": "touchesBegan:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesCancelled:withEvent:", "contents": "touchesCancelled:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesCancelled:withEvent:", "contents": "touchesCancelled:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesEnded:withEvent:", "contents": "touchesEnded:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesEnded:withEvent:", "contents": "touchesEnded:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesForGestureRecognizer:", "contents": "touchesForGestureRecognizer:(${1:UIGestureRecognizer* gesture})" },  
    { "trigger": "touchesForView:", "contents": "touchesForView:(${1:UIView* view})" },  
    { "trigger": "touchesForWindow:", "contents": "touchesForWindow:(${1:UIWindow* window})" },  
    { "trigger": "touchesMoved:withEvent:", "contents": "touchesMoved:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesMoved:withEvent:", "contents": "touchesMoved:withEvent:(${1:NSSet* touches}, withEvent:${2:UIEvent* event})" },  
    { "trigger": "touchesShouldBegin:withEvent:inContentView:", "contents": "touchesShouldBegin:withEvent:inContentView:(${1:NSSet* touches}, withEvent:${2:UIEvent* event}, inContentView:${3:UIView* view})" },  
    { "trigger": "touchesShouldCancelInContentView:", "contents": "touchesShouldCancelInContentView:(${1:UIView* view})" },  
    { "trigger": "track" },  
    { "trigger": "trackID" },  
    { "trigger": "trackID" },  
    { "trigger": "trackID" },  
    { "trigger": "trackID" },  
    { "trigger": "trackID" },  
    { "trigger": "trackImage" },  
    { "trigger": "trackRectForBounds:", "contents": "trackRectForBounds:(${1:CGRect bounds})" },  
    { "trigger": "trackTintColor" },  
    { "trigger": "trackWithTrackID:", "contents": "trackWithTrackID:(${1:CMPersistentTrackID trackID})" },  
    { "trigger": "tracks" },  
    { "trigger": "tracks" },  
    { "trigger": "tracks" },  
    { "trigger": "tracks" },  
    { "trigger": "tracksWithMediaCharacteristic:", "contents": "tracksWithMediaCharacteristic:(${1:NSString* mediaCharacteristic})" },  
    { "trigger": "tracksWithMediaType:", "contents": "tracksWithMediaType:(${1:NSString* mediaType})" },  
    { "trigger": "transactionDate" },  
    { "trigger": "transactionIdentifier" },  
    { "trigger": "transactionReceipt" },  
    { "trigger": "transactionState" },  
    { "trigger": "transactions" },  
    { "trigger": "transform" },  
    { "trigger": "transform" },  
    { "trigger": "transform" },  
    { "trigger": "transform" },  
    { "trigger": "transform" },  
    { "trigger": "transform" },  
    { "trigger": "transformedValue:", "contents": "transformedValue:(${1:id value})" },  
    { "trigger": "transitionFromViewController:toViewController:duration:options:animations:completion:", "contents": "transitionFromViewController:toViewController:duration:options:animations:completion:(${1:UIViewController* fromViewController}, toViewController:${2:UIViewController* toViewController}, duration:${3:NSTimeInterval duration}, options:${4:UIViewAnimationOptions options}, animations:${5:void (^)(void) animations}, completion:${6:void (^)(BOOL) completion})" },  
    { "trigger": "transitionStyle" },  
    { "trigger": "translationInView:", "contents": "translationInView:(${1:UIView* view})" },  
    { "trigger": "trueHeading" },  
    { "trigger": "truncateFileAtOffset:", "contents": "truncateFileAtOffset:(${1:unsigned long long offset})" },  
    { "trigger": "truncationMode" },  
    { "trigger": "tryLock" },  
    { "trigger": "tryLock" },  
    { "trigger": "tryLock" },  
    { "trigger": "tryLock" },  
    { "trigger": "tryLock" },  
    { "trigger": "tryLockWhenCondition:", "contents": "tryLockWhenCondition:(${1:NSInteger condition})" },  
    { "trigger": "turnBasedMatchmakerDelegate" },  
    { "trigger": "turnBasedMatchmakerViewControllerWasCancelled:", "contents": "turnBasedMatchmakerViewControllerWasCancelled:(${1:GKTurnBasedMatchmakerViewController* viewController})" },  
    { "trigger": "turnBasedMatchmakerViewControllerWasCancelled:", "contents": "turnBasedMatchmakerViewControllerWasCancelled:(${1:GKTurnBasedMatchmakerViewController* viewController})" },  
    { "trigger": "turnBasedMatchmakerViewController:didFailWithError:", "contents": "turnBasedMatchmakerViewController:didFailWithError:(${1:GKTurnBasedMatchmakerViewController* viewController}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "turnBasedMatchmakerViewController:didFailWithError:", "contents": "turnBasedMatchmakerViewController:didFailWithError:(${1:GKTurnBasedMatchmakerViewController* viewController}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "turnBasedMatchmakerViewController:didFindMatch:", "contents": "turnBasedMatchmakerViewController:didFindMatch:(${1:GKTurnBasedMatchmakerViewController* viewController}, didFindMatch:${2:GKTurnBasedMatch* match})" },  
    { "trigger": "turnBasedMatchmakerViewController:didFindMatch:", "contents": "turnBasedMatchmakerViewController:didFindMatch:(${1:GKTurnBasedMatchmakerViewController* viewController}, didFindMatch:${2:GKTurnBasedMatch* match})" },  
    { "trigger": "turnBasedMatchmakerViewController:playerQuitForMatch:", "contents": "turnBasedMatchmakerViewController:playerQuitForMatch:(${1:GKTurnBasedMatchmakerViewController* viewController}, playerQuitForMatch:${2:GKTurnBasedMatch* match})" },  
    { "trigger": "turnBasedMatchmakerViewController:playerQuitForMatch:", "contents": "turnBasedMatchmakerViewController:playerQuitForMatch:(${1:GKTurnBasedMatchmakerViewController* viewController}, playerQuitForMatch:${2:GKTurnBasedMatch* match})" },  
    { "trigger": "twoDigitStartDate" },  
    { "trigger": "type" },  
    { "trigger": "type" },  
    { "trigger": "type" },  
    { "trigger": "type" },  
    { "trigger": "type" },  
    { "trigger": "type" },  
    { "trigger": "type" },  
    { "trigger": "unachievedDescription" },  
    { "trigger": "unarchiverDidFinish:", "contents": "unarchiverDidFinish:(${1:NSKeyedUnarchiver* unarchiver})" },  
    { "trigger": "unarchiverDidFinish:", "contents": "unarchiverDidFinish:(${1:NSKeyedUnarchiver* unarchiver})" },  
    { "trigger": "unarchiverWillFinish:", "contents": "unarchiverWillFinish:(${1:NSKeyedUnarchiver* unarchiver})" },  
    { "trigger": "unarchiverWillFinish:", "contents": "unarchiverWillFinish:(${1:NSKeyedUnarchiver* unarchiver})" },  
    { "trigger": "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", "contents": "unarchiver:cannotDecodeObjectOfClassName:originalClasses:(${1:NSKeyedUnarchiver* unarchiver}, cannotDecodeObjectOfClassName:${2:NSString* name}, originalClasses:${3:NSArray* classNames})" },  
    { "trigger": "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", "contents": "unarchiver:cannotDecodeObjectOfClassName:originalClasses:(${1:NSKeyedUnarchiver* unarchiver}, cannotDecodeObjectOfClassName:${2:NSString* name}, originalClasses:${3:NSArray* classNames})" },  
    { "trigger": "unarchiver:didDecodeObject:", "contents": "unarchiver:didDecodeObject:(${1:NSKeyedUnarchiver* unarchiver}, didDecodeObject:${2:id object})" },  
    { "trigger": "unarchiver:didDecodeObject:", "contents": "unarchiver:didDecodeObject:(${1:NSKeyedUnarchiver* unarchiver}, didDecodeObject:${2:id object})" },  
    { "trigger": "unarchiver:willReplaceObject:withObject:", "contents": "unarchiver:willReplaceObject:withObject:(${1:NSKeyedUnarchiver* unarchiver}, willReplaceObject:${2:id object}, withObject:${3:id newObject})" },  
    { "trigger": "unarchiver:willReplaceObject:withObject:", "contents": "unarchiver:willReplaceObject:withObject:(${1:NSKeyedUnarchiver* unarchiver}, willReplaceObject:${2:id object}, withObject:${3:id newObject})" },  
    { "trigger": "undo" },  
    { "trigger": "undo" },  
    { "trigger": "undoActionIsDiscardable" },  
    { "trigger": "undoActionName" },  
    { "trigger": "undoManager" },  
    { "trigger": "undoManager" },  
    { "trigger": "undoManager" },  
    { "trigger": "undoMenuItemTitle" },  
    { "trigger": "undoMenuTitleForUndoActionName:", "contents": "undoMenuTitleForUndoActionName:(${1:NSString* actionName})" },  
    { "trigger": "undoNestedGroup" },  
    { "trigger": "unionOrderedSet:", "contents": "unionOrderedSet:(${1:NSOrderedSet* other})" },  
    { "trigger": "unionSet:", "contents": "unionSet:(${1:NSSet* otherSet})" },  
    { "trigger": "unionSet:", "contents": "unionSet:(${1:NSSet* other})" },  
    { "trigger": "uniqueID" },  
    { "trigger": "uniqueIdentifier" },  
    { "trigger": "unknownPersonViewController:didResolveToPerson:", "contents": "unknownPersonViewController:didResolveToPerson:(${1:ABUnknownPersonViewController* unknownCardViewController}, didResolveToPerson:${2:ABRecordRef person})" },  
    { "trigger": "unknownPersonViewController:didResolveToPerson:", "contents": "unknownPersonViewController:didResolveToPerson:(${1:ABUnknownPersonViewController* unknownCardViewController}, didResolveToPerson:${2:ABRecordRef person})" },  
    { "trigger": "unknownPersonViewController:shouldPerformDefaultActionForPerson:property:identifier:", "contents": "unknownPersonViewController:shouldPerformDefaultActionForPerson:property:identifier:(${1:ABUnknownPersonViewController* personViewController}, shouldPerformDefaultActionForPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})" },  
    { "trigger": "unknownPersonViewController:shouldPerformDefaultActionForPerson:property:identifier:", "contents": "unknownPersonViewController:shouldPerformDefaultActionForPerson:property:identifier:(${1:ABUnknownPersonViewController* personViewController}, shouldPerformDefaultActionForPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})" },  
    { "trigger": "unknownPersonViewDelegate" },  
    { "trigger": "unload" },  
    { "trigger": "unlock" },  
    { "trigger": "unlock" },  
    { "trigger": "unlock" },  
    { "trigger": "unlock" },  
    { "trigger": "unlockForConfiguration" },  
    { "trigger": "unlockWithCondition:", "contents": "unlockWithCondition:(${1:NSInteger condition})" },  
    { "trigger": "unmarkText" },  
    { "trigger": "unmarkText" },  
    { "trigger": "unregisterForLocalNotifications" },  
    { "trigger": "unregisterForRemoteNotifications" },  
    { "trigger": "unscheduleFromRunLoop:forMode:", "contents": "unscheduleFromRunLoop:forMode:(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})" },  
    { "trigger": "unsignedCharValue" },  
    { "trigger": "unsignedIntValue" },  
    { "trigger": "unsignedIntegerValue" },  
    { "trigger": "unsignedLongLongValue" },  
    { "trigger": "unsignedLongValue" },  
    { "trigger": "unsignedShortValue" },  
    { "trigger": "unusedTrackID" },  
    { "trigger": "update" },  
    { "trigger": "updateCacheNode:fromManagedObject:", "contents": "updateCacheNode:fromManagedObject:(${1:NSAtomicStoreCacheNode* node}, fromManagedObject:${2:NSManagedObject* managedObject})" },  
    { "trigger": "updateChangeCount:", "contents": "updateChangeCount:(${1:UIDocumentChangeKind change})" },  
    { "trigger": "updateChangeCountWithToken:forSaveOperation:", "contents": "updateChangeCountWithToken:forSaveOperation:(${1:id changeCountToken}, forSaveOperation:${2:UIDocumentSaveOperation saveOperation})" },  
    { "trigger": "updateCurrentPageDisplay" },  
    { "trigger": "updateInterval" },  
    { "trigger": "updateMeters" },  
    { "trigger": "updateMeters" },  
    { "trigger": "updateWithValues:version:", "contents": "updateWithValues:version:(${1:NSDictionary* values}, version:${2:uint64_t version})" },  
    { "trigger": "updatedObjects" },  
    { "trigger": "updatedObjects" },  
    { "trigger": "uppercaseString" },  
    { "trigger": "url" },  
    { "trigger": "url" },  
    { "trigger": "url" },  
    { "trigger": "useApplicationAudioSession" },  
    { "trigger": "useConstantColor" },  
    { "trigger": "useCredential:forAuthenticationChallenge:", "contents": "useCredential:forAuthenticationChallenge:(${1:NSURLCredential* credential}, forAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "useCredential:forAuthenticationChallenge:", "contents": "useCredential:forAuthenticationChallenge:(${1:NSURLCredential* credential}, forAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})" },  
    { "trigger": "user" },  
    { "trigger": "user" },  
    { "trigger": "userAcceleration" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInfo" },  
    { "trigger": "userInteractionNoLongerPermittedForError:", "contents": "userInteractionNoLongerPermittedForError:(${1:NSError* error})" },  
    { "trigger": "userInterfaceIdiom" },  
    { "trigger": "userInterfaceLayoutDirection" },  
    { "trigger": "userLocation" },  
    { "trigger": "userTrackingMode" },  
    { "trigger": "username" },  
    { "trigger": "usesAirPlayVideoWhileAirPlayScreenIsActive" },  
    { "trigger": "usesEvenOddFillRule" },  
    { "trigger": "usesGroupingSeparator" },  
    { "trigger": "usesSignificantDigits" },  
    { "trigger": "usesStoreSpecificMigrationManager" },  
    { "trigger": "validateForDelete:", "contents": "validateForDelete:(${1:NSError** error})" },  
    { "trigger": "validateForInsert:", "contents": "validateForInsert:(${1:NSError** error})" },  
    { "trigger": "validateForUpdate:", "contents": "validateForUpdate:(${1:NSError** error})" },  
    { "trigger": "validateTrackSegments:error:", "contents": "validateTrackSegments:error:(${1:NSArray* trackSegments}, error:${2:NSError** error})" },  
    { "trigger": "validateValue:forKeyPath:error:", "contents": "validateValue:forKeyPath:error:(${1:id* ioValue}, forKeyPath:${2:NSString* inKeyPath}, error:${3:NSError** outError})" },  
    { "trigger": "validateValue:forKeyPath:error:", "contents": "validateValue:forKeyPath:error:(${1:id* ioValue}, forKeyPath:${2:NSString* inKeyPath}, error:${3:NSError** outError})" },  
    { "trigger": "validateValue:forKey:error:", "contents": "validateValue:forKey:error:(${1:id* value}, forKey:${2:NSString* key}, error:${3:NSError** error})" },  
    { "trigger": "validateValue:forKey:error:", "contents": "validateValue:forKey:error:(${1:id* ioValue}, forKey:${2:NSString* inKey}, error:${3:NSError** outError})" },  
    { "trigger": "validateValue:forKey:error:", "contents": "validateValue:forKey:error:(${1:id* ioValue}, forKey:${2:NSString* inKey}, error:${3:NSError** outError})" },  
    { "trigger": "validationPredicates" },  
    { "trigger": "validationWarnings" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "value" },  
    { "trigger": "valueAtIndex:", "contents": "valueAtIndex:(${1:size_t index})" },  
    { "trigger": "valueExpression" },  
    { "trigger": "valueForAttribute:", "contents": "valueForAttribute:(${1:NSString* key})" },  
    { "trigger": "valueForHTTPHeaderField:", "contents": "valueForHTTPHeaderField:(${1:NSString* field})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKey:", "contents": "valueForKey:(${1:NSString* key})" },  
    { "trigger": "valueForKeyPath:", "contents": "valueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "valueForKeyPath:", "contents": "valueForKeyPath:(${1:NSString* keyPath})" },  
    { "trigger": "valueForPasteboardType:", "contents": "valueForPasteboardType:(${1:NSString* pasteboardType})" },  
    { "trigger": "valueForProperty:", "contents": "valueForProperty:(${1:NSString* property})" },  
    { "trigger": "valueForProperty:", "contents": "valueForProperty:(${1:NSString* property})" },  
    { "trigger": "valueForProperty:", "contents": "valueForProperty:(${1:NSString* property})" },  
    { "trigger": "valueForPropertyDescription:", "contents": "valueForPropertyDescription:(${1:NSPropertyDescription* prop})" },  
    { "trigger": "valueForUndefinedKey:", "contents": "valueForUndefinedKey:(${1:NSString* key})" },  
    { "trigger": "valueForUndefinedKey:", "contents": "valueForUndefinedKey:(${1:NSString* key})" },  
    { "trigger": "valueFunction" },  
    { "trigger": "valueListAttributes" },  
    { "trigger": "valueLists" },  
    { "trigger": "valueOfAttribute:forResultAtIndex:", "contents": "valueOfAttribute:forResultAtIndex:(${1:NSString* attrName}, forResultAtIndex:${2:NSUInteger idx})" },  
    { "trigger": "valueTransformerName" },  
    { "trigger": "values" },  
    { "trigger": "valuesForAttributes:", "contents": "valuesForAttributes:(${1:NSArray* keys})" },  
    { "trigger": "valuesForPasteboardType:inItemSet:", "contents": "valuesForPasteboardType:inItemSet:(${1:NSString* pasteboardType}, inItemSet:${2:NSIndexSet* itemSet})" },  
    { "trigger": "variable" },  
    { "trigger": "velocity" },  
    { "trigger": "velocity" },  
    { "trigger": "velocity" },  
    { "trigger": "velocity" },  
    { "trigger": "velocityInView:", "contents": "velocityInView:(${1:UIView* view})" },  
    { "trigger": "velocityRange" },  
    { "trigger": "version" },  
    { "trigger": "version" },  
    { "trigger": "versionForClassName:", "contents": "versionForClassName:(${1:NSString* className})" },  
    { "trigger": "versionHash" },  
    { "trigger": "versionHash" },  
    { "trigger": "versionHash" },  
    { "trigger": "versionHash" },  
    { "trigger": "versionHashModifier" },  
    { "trigger": "versionHashModifier" },  
    { "trigger": "versionIdentifiers" },  
    { "trigger": "verticalAccuracy" },  
    { "trigger": "veryShortMonthSymbols" },  
    { "trigger": "veryShortStandaloneMonthSymbols" },  
    { "trigger": "veryShortStandaloneWeekdaySymbols" },  
    { "trigger": "veryShortWeekdaySymbols" },  
    { "trigger": "videoAtPathIsCompatibleWithSavedPhotosAlbum:", "contents": "videoAtPathIsCompatibleWithSavedPhotosAlbum:(${1:NSURL* videoPathURL})" },  
    { "trigger": "videoComposition" },  
    { "trigger": "videoComposition" },  
    { "trigger": "videoComposition" },  
    { "trigger": "videoComposition" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:", "contents": "videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingEmptyTimeRange:${2:CMTimeRange timeRange})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:", "contents": "videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingEmptyTimeRange:${2:CMTimeRange timeRange})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:", "contents": "videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:${2:AVVideoCompositionInstruction* videoCompositionInstruction})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:", "contents": "videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:${2:AVVideoCompositionInstruction* videoCompositionInstruction})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:", "contents": "videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:${2:AVVideoCompositionInstruction* videoCompositionInstruction}, layerInstruction:${3:AVVideoCompositionLayerInstruction* layerInstruction}, asset:${4:AVAsset* asset})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:", "contents": "videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:${2:AVVideoCompositionInstruction* videoCompositionInstruction}, layerInstruction:${3:AVVideoCompositionLayerInstruction* layerInstruction}, asset:${4:AVAsset* asset})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:", "contents": "videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidValueForKey:${2:NSString* key})" },  
    { "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:", "contents": "videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidValueForKey:${2:NSString* key})" },  
    { "trigger": "videoEditorControllerDidCancel:", "contents": "videoEditorControllerDidCancel:(${1:UIVideoEditorController* editor})" },  
    { "trigger": "videoEditorControllerDidCancel:", "contents": "videoEditorControllerDidCancel:(${1:UIVideoEditorController* editor})" },  
    { "trigger": "videoEditorController:didFailWithError:", "contents": "videoEditorController:didFailWithError:(${1:UIVideoEditorController* editor}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "videoEditorController:didFailWithError:", "contents": "videoEditorController:didFailWithError:(${1:UIVideoEditorController* editor}, didFailWithError:${2:NSError* error})" },  
    { "trigger": "videoEditorController:didSaveEditedVideoToPath:", "contents": "videoEditorController:didSaveEditedVideoToPath:(${1:UIVideoEditorController* editor}, didSaveEditedVideoToPath:${2:NSString* editedVideoPath})" },  
    { "trigger": "videoEditorController:didSaveEditedVideoToPath:", "contents": "videoEditorController:didSaveEditedVideoToPath:(${1:UIVideoEditorController* editor}, didSaveEditedVideoToPath:${2:NSString* editedVideoPath})" },  
    { "trigger": "videoGravity" },  
    { "trigger": "videoGravity" },  
    { "trigger": "videoMaxFrameDuration" },  
    { "trigger": "videoMaxScaleAndCropFactor" },  
    { "trigger": "videoMaximumDuration" },  
    { "trigger": "videoMaximumDuration" },  
    { "trigger": "videoMinFrameDuration" },  
    { "trigger": "videoOrientation" },  
    { "trigger": "videoPath" },  
    { "trigger": "videoQuality" },  
    { "trigger": "videoQuality" },  
    { "trigger": "videoScaleAndCropFactor" },  
    { "trigger": "videoSettings" },  
    { "trigger": "videoSettings" },  
    { "trigger": "videoTracks" },  
    { "trigger": "view" },  
    { "trigger": "view" },  
    { "trigger": "view" },  
    { "trigger": "view" },  
    { "trigger": "view" },  
    { "trigger": "viewControllers" },  
    { "trigger": "viewControllers" },  
    { "trigger": "viewControllers" },  
    { "trigger": "viewControllers" },  
    { "trigger": "viewDidAppear:", "contents": "viewDidAppear:(${1:BOOL animated})" },  
    { "trigger": "viewDidDisappear:", "contents": "viewDidDisappear:(${1:BOOL animated})" },  
    { "trigger": "viewDidLayoutSubviews" },  
    { "trigger": "viewDidLoad" },  
    { "trigger": "viewDidUnload" },  
    { "trigger": "viewForAnnotation:", "contents": "viewForAnnotation:(${1:id annotation})" },  
    { "trigger": "viewForOverlay:", "contents": "viewForOverlay:(${1:id overlay})" },  
    { "trigger": "viewForRow:forComponent:", "contents": "viewForRow:forComponent:(${1:NSInteger row}, forComponent:${2:NSInteger component})" },  
    { "trigger": "viewForZoomingInScrollView:", "contents": "viewForZoomingInScrollView:(${1:UIScrollView* scrollView})" },  
    { "trigger": "viewForZoomingInScrollView:", "contents": "viewForZoomingInScrollView:(${1:UIScrollView* scrollView})" },  
    { "trigger": "viewPrintFormatter" },  
    { "trigger": "viewWillAppear:", "contents": "viewWillAppear:(${1:BOOL animated})" },  
    { "trigger": "viewWillDisappear:", "contents": "viewWillDisappear:(${1:BOOL animated})" },  
    { "trigger": "viewWillLayoutSubviews" },  
    { "trigger": "viewWillUnload" },  
    { "trigger": "viewWithTag:", "contents": "viewWithTag:(${1:NSInteger tag})" },  
    { "trigger": "visibleCells" },  
    { "trigger": "visibleMapRect" },  
    { "trigger": "visibleRect" },  
    { "trigger": "visibleViewController" },  
    { "trigger": "voiceChatService:didNotStartWithParticipantID:error:", "contents": "voiceChatService:didNotStartWithParticipantID:error:(${1:GKVoiceChatService* voiceChatService}, didNotStartWithParticipantID:${2:NSString* participantID}, error:${3:NSError* error})" },  
    { "trigger": "voiceChatService:didNotStartWithParticipantID:error:", "contents": "voiceChatService:didNotStartWithParticipantID:error:(${1:GKVoiceChatService* voiceChatService}, didNotStartWithParticipantID:${2:NSString* participantID}, error:${3:NSError* error})" },  
    { "trigger": "voiceChatService:didReceiveInvitationFromParticipantID:callID:", "contents": "voiceChatService:didReceiveInvitationFromParticipantID:callID:(${1:GKVoiceChatService* voiceChatService}, didReceiveInvitationFromParticipantID:${2:NSString* participantID}, callID:${3:NSInteger callID})" },  
    { "trigger": "voiceChatService:didReceiveInvitationFromParticipantID:callID:", "contents": "voiceChatService:didReceiveInvitationFromParticipantID:callID:(${1:GKVoiceChatService* voiceChatService}, didReceiveInvitationFromParticipantID:${2:NSString* participantID}, callID:${3:NSInteger callID})" },  
    { "trigger": "voiceChatService:didStartWithParticipantID:", "contents": "voiceChatService:didStartWithParticipantID:(${1:GKVoiceChatService* voiceChatService}, didStartWithParticipantID:${2:NSString* participantID})" },  
    { "trigger": "voiceChatService:didStartWithParticipantID:", "contents": "voiceChatService:didStartWithParticipantID:(${1:GKVoiceChatService* voiceChatService}, didStartWithParticipantID:${2:NSString* participantID})" },  
    { "trigger": "voiceChatService:didStopWithParticipantID:error:", "contents": "voiceChatService:didStopWithParticipantID:error:(${1:GKVoiceChatService* voiceChatService}, didStopWithParticipantID:${2:NSString* participantID}, error:${3:NSError* error})" },  
    { "trigger": "voiceChatService:didStopWithParticipantID:error:", "contents": "voiceChatService:didStopWithParticipantID:error:(${1:GKVoiceChatService* voiceChatService}, didStopWithParticipantID:${2:NSString* participantID}, error:${3:NSError* error})" },  
    { "trigger": "voiceChatService:sendData:toParticipantID:", "contents": "voiceChatService:sendData:toParticipantID:(${1:GKVoiceChatService* voiceChatService}, sendData:${2:NSData* data}, toParticipantID:${3:NSString* participantID})" },  
    { "trigger": "voiceChatService:sendData:toParticipantID:", "contents": "voiceChatService:sendData:toParticipantID:(${1:GKVoiceChatService* voiceChatService}, sendData:${2:NSData* data}, toParticipantID:${3:NSString* participantID})" },  
    { "trigger": "voiceChatService:sendRealTimeData:toParticipantID:", "contents": "voiceChatService:sendRealTimeData:toParticipantID:(${1:GKVoiceChatService* voiceChatService}, sendRealTimeData:${2:NSData* data}, toParticipantID:${3:NSString* participantID})" },  
    { "trigger": "voiceChatService:sendRealTimeData:toParticipantID:", "contents": "voiceChatService:sendRealTimeData:toParticipantID:(${1:GKVoiceChatService* voiceChatService}, sendRealTimeData:${2:NSData* data}, toParticipantID:${3:NSString* participantID})" },  
    { "trigger": "voiceChatWithName:", "contents": "voiceChatWithName:(${1:NSString* name})" },  
    { "trigger": "volatileDomainForName:", "contents": "volatileDomainForName:(${1:NSString* domainName})" },  
    { "trigger": "volatileDomainNames" },  
    { "trigger": "volume" },  
    { "trigger": "volume" },  
    { "trigger": "volume" },  
    { "trigger": "wait" },  
    { "trigger": "waitForDataInBackgroundAndNotify" },  
    { "trigger": "waitForDataInBackgroundAndNotifyForModes:", "contents": "waitForDataInBackgroundAndNotifyForModes:(${1:NSArray* modes})" },  
    { "trigger": "waitUntilAllOperationsAreFinished" },  
    { "trigger": "waitUntilDate:", "contents": "waitUntilDate:(${1:NSDate* limit})" },  
    { "trigger": "waitUntilFinished" },  
    { "trigger": "wantsFullScreenLayout" },  
    { "trigger": "wantsSoftwareDimming" },  
    { "trigger": "webViewDidFinishLoad:", "contents": "webViewDidFinishLoad:(${1:UIWebView* webView})" },  
    { "trigger": "webViewDidFinishLoad:", "contents": "webViewDidFinishLoad:(${1:UIWebView* webView})" },  
    { "trigger": "webViewDidStartLoad:", "contents": "webViewDidStartLoad:(${1:UIWebView* webView})" },  
    { "trigger": "webViewDidStartLoad:", "contents": "webViewDidStartLoad:(${1:UIWebView* webView})" },  
    { "trigger": "webView:didFailLoadWithError:", "contents": "webView:didFailLoadWithError:(${1:UIWebView* webView}, didFailLoadWithError:${2:NSError* error})" },  
    { "trigger": "webView:didFailLoadWithError:", "contents": "webView:didFailLoadWithError:(${1:UIWebView* webView}, didFailLoadWithError:${2:NSError* error})" },  
    { "trigger": "webView:shouldStartLoadWithRequest:navigationType:", "contents": "webView:shouldStartLoadWithRequest:navigationType:(${1:UIWebView* webView}, shouldStartLoadWithRequest:${2:NSURLRequest* request}, navigationType:${3:UIWebViewNavigationType navigationType})" },  
    { "trigger": "webView:shouldStartLoadWithRequest:navigationType:", "contents": "webView:shouldStartLoadWithRequest:navigationType:(${1:UIWebView* webView}, shouldStartLoadWithRequest:${2:NSURLRequest* request}, navigationType:${3:UIWebViewNavigationType navigationType})" },  
    { "trigger": "week" },  
    { "trigger": "weekNumber" },  
    { "trigger": "weekOfMonth" },  
    { "trigger": "weekOfYear" },  
    { "trigger": "weekday" },  
    { "trigger": "weekdayOrdinal" },  
    { "trigger": "weekdaySymbols" },  
    { "trigger": "weeksOfTheYear" },  
    { "trigger": "whiteBalanceMode" },  
    { "trigger": "width" },  
    { "trigger": "width" },  
    { "trigger": "widthForSegmentAtIndex:", "contents": "widthForSegmentAtIndex:(${1:NSUInteger segment})" },  
    { "trigger": "willAccessValueForKey:", "contents": "willAccessValueForKey:(${1:NSString* key})" },  
    { "trigger": "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:", "contents": "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:(${1:UIInterfaceOrientation toInterfaceOrientation}, duration:${2:NSTimeInterval duration})" },  
    { "trigger": "willAnimateRotationToInterfaceOrientation:duration:", "contents": "willAnimateRotationToInterfaceOrientation:duration:(${1:UIInterfaceOrientation toInterfaceOrientation}, duration:${2:NSTimeInterval duration})" },  
    { "trigger": "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:", "contents": "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:(${1:UIInterfaceOrientation fromInterfaceOrientation}, duration:${2:NSTimeInterval duration})" },  
    { "trigger": "willChangeValueForKey:", "contents": "willChangeValueForKey:(${1:NSString* key})" },  
    { "trigger": "willChangeValueForKey:", "contents": "willChangeValueForKey:(${1:NSString* key})" },  
    { "trigger": "willChangeValueForKey:", "contents": "willChangeValueForKey:(${1:NSString* key})" },  
    { "trigger": "willChangeValueForKey:withSetMutation:usingObjects:", "contents": "willChangeValueForKey:withSetMutation:usingObjects:(${1:NSString* inKey}, withSetMutation:${2:NSKeyValueSetMutationKind inMutationKind}, usingObjects:${3:NSSet* inObjects})" },  
    { "trigger": "willChangeValueForKey:withSetMutation:usingObjects:", "contents": "willChangeValueForKey:withSetMutation:usingObjects:(${1:NSString* key}, withSetMutation:${2:NSKeyValueSetMutationKind mutationKind}, usingObjects:${3:NSSet* objects})" },  
    { "trigger": "willChangeValueForKey:withSetMutation:usingObjects:", "contents": "willChangeValueForKey:withSetMutation:usingObjects:(${1:NSString* key}, withSetMutation:${2:NSKeyValueSetMutationKind mutationKind}, usingObjects:${3:NSSet* objects})" },  
    { "trigger": "willChange:valuesAtIndexes:forKey:", "contents": "willChange:valuesAtIndexes:forKey:(${1:NSKeyValueChange changeKind}, valuesAtIndexes:${2:NSIndexSet* indexes}, forKey:${3:NSString* key})" },  
    { "trigger": "willChange:valuesAtIndexes:forKey:", "contents": "willChange:valuesAtIndexes:forKey:(${1:NSKeyValueChange changeKind}, valuesAtIndexes:${2:NSIndexSet* indexes}, forKey:${3:NSString* key})" },  
    { "trigger": "willMoveToParentViewController:", "contents": "willMoveToParentViewController:(${1:UIViewController* parent})" },  
    { "trigger": "willMoveToSuperview:", "contents": "willMoveToSuperview:(${1:UIView* newSuperview})" },  
    { "trigger": "willMoveToWindow:", "contents": "willMoveToWindow:(${1:UIWindow* newWindow})" },  
    { "trigger": "willPresentActionSheet:", "contents": "willPresentActionSheet:(${1:UIActionSheet* actionSheet})" },  
    { "trigger": "willPresentActionSheet:", "contents": "willPresentActionSheet:(${1:UIActionSheet* actionSheet})" },  
    { "trigger": "willPresentAlertView:", "contents": "willPresentAlertView:(${1:UIAlertView* alertView})" },  
    { "trigger": "willPresentAlertView:", "contents": "willPresentAlertView:(${1:UIAlertView* alertView})" },  
    { "trigger": "willRemoveCacheNodes:", "contents": "willRemoveCacheNodes:(${1:NSSet* cacheNodes})" },  
    { "trigger": "willRemoveFromPersistentStoreCoordinator:", "contents": "willRemoveFromPersistentStoreCoordinator:(${1:NSPersistentStoreCoordinator* coordinator})" },  
    { "trigger": "willRemoveSubview:", "contents": "willRemoveSubview:(${1:UIView* subview})" },  
    { "trigger": "willRotateToInterfaceOrientation:duration:", "contents": "willRotateToInterfaceOrientation:duration:(${1:UIInterfaceOrientation toInterfaceOrientation}, duration:${2:NSTimeInterval duration})" },  
    { "trigger": "willSave" },  
    { "trigger": "willTransitionToState:", "contents": "willTransitionToState:(${1:UITableViewCellStateMask state})" },  
    { "trigger": "willTurnIntoFault" },  
    { "trigger": "window" },  
    { "trigger": "window" },  
    { "trigger": "window" },  
    { "trigger": "window" },  
    { "trigger": "windowLevel" },  
    { "trigger": "windows" },  
    { "trigger": "wraps" },  
    { "trigger": "writeAdditionalContent:toURL:originalContentsURL:error:", "contents": "writeAdditionalContent:toURL:originalContentsURL:error:(${1:id content}, toURL:${2:NSURL* absoluteURL}, originalContentsURL:${3:NSURL* absoluteOriginalContentsURL}, error:${4:NSError** error})" },  
    { "trigger": "writeContents:andAttributes:safelyToURL:forSaveOperation:error:", "contents": "writeContents:andAttributes:safelyToURL:forSaveOperation:error:(${1:id contents}, andAttributes:${2:NSDictionary* additionalFileAttributes}, safelyToURL:${3:NSURL* url}, forSaveOperation:${4:UIDocumentSaveOperation saveOperation}, error:${5:NSError** outError})" },  
    { "trigger": "writeContents:toURL:forSaveOperation:originalContentsURL:error:", "contents": "writeContents:toURL:forSaveOperation:originalContentsURL:error:(${1:id contents}, toURL:${2:NSURL* url}, forSaveOperation:${3:UIDocumentSaveOperation saveOperation}, originalContentsURL:${4:NSURL* originalContentsURL}, error:${5:NSError** outError})" },  
    { "trigger": "writeData:", "contents": "writeData:(${1:NSData* data})" },  
    { "trigger": "writeImageDataToSavedPhotosAlbum:metadata:completionBlock:", "contents": "writeImageDataToSavedPhotosAlbum:metadata:completionBlock:(${1:NSData* imageData}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})" },  
    { "trigger": "writeImageToSavedPhotosAlbum:metadata:completionBlock:", "contents": "writeImageToSavedPhotosAlbum:metadata:completionBlock:(${1:CGImageRef imageRef}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})" },  
    { "trigger": "writeImageToSavedPhotosAlbum:orientation:completionBlock:", "contents": "writeImageToSavedPhotosAlbum:orientation:completionBlock:(${1:CGImageRef imageRef}, orientation:${2:ALAssetOrientation orientation}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})" },  
    { "trigger": "writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:", "contents": "writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:(${1:NSData* imageData}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})" },  
    { "trigger": "writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:", "contents": "writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:(${1:NSURL* videoPathURL}, completionBlock:${2:ALAssetsLibraryWriteVideoCompletionBlock completionBlock})" },  
    { "trigger": "writeToFile:atomically:", "contents": "writeToFile:atomically:(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile})" },  
    { "trigger": "writeToFile:atomically:", "contents": "writeToFile:atomically:(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile})" },  
    { "trigger": "writeToFile:atomically:", "contents": "writeToFile:atomically:(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile})" },  
    { "trigger": "writeToFile:atomically:", "contents": "writeToFile:atomically:(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile})" },  
    { "trigger": "writeToFile:atomically:encoding:error:", "contents": "writeToFile:atomically:encoding:error:(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile}, encoding:${3:NSStringEncoding enc}, error:${4:NSError** error})" },  
    { "trigger": "writeToFile:options:error:", "contents": "writeToFile:options:error:(${1:NSString* path}, options:${2:NSDataWritingOptions writeOptionsMask}, error:${3:NSError** errorPtr})" },  
    { "trigger": "writeToURL:atomically:", "contents": "writeToURL:atomically:(${1:NSURL* url}, atomically:${2:BOOL atomically})" },  
    { "trigger": "writeToURL:atomically:", "contents": "writeToURL:atomically:(${1:NSURL* url}, atomically:${2:BOOL atomically})" },  
    { "trigger": "writeToURL:atomically:", "contents": "writeToURL:atomically:(${1:NSURL* url}, atomically:${2:BOOL atomically})" },  
    { "trigger": "writeToURL:atomically:", "contents": "writeToURL:atomically:(${1:NSURL* url}, atomically:${2:BOOL atomically})" },  
    { "trigger": "writeToURL:atomically:encoding:error:", "contents": "writeToURL:atomically:encoding:error:(${1:NSURL* url}, atomically:${2:BOOL useAuxiliaryFile}, encoding:${3:NSStringEncoding enc}, error:${4:NSError** error})" },  
    { "trigger": "writeToURL:options:error:", "contents": "writeToURL:options:error:(${1:NSURL* url}, options:${2:NSDataWritingOptions writeOptionsMask}, error:${3:NSError** errorPtr})" },  
    { "trigger": "writeToURL:options:originalContentsURL:error:", "contents": "writeToURL:options:originalContentsURL:error:(${1:NSURL* url}, options:${2:NSFileWrapperWritingOptions options}, originalContentsURL:${3:NSURL* originalContentsURL}, error:${4:NSError** outError})" },  
    { "trigger": "writeValue:forCharacteristic:type:", "contents": "writeValue:forCharacteristic:type:(${1:NSData* data}, forCharacteristic:${2:CBCharacteristic* characteristic}, type:${3:CBCharacteristicWriteType type})" },  
    { "trigger": "writeValue:forDescriptor:", "contents": "writeValue:forDescriptor:(${1:NSData* data}, forDescriptor:${2:CBDescriptor* descriptor})" },  
    { "trigger": "writeVideoAtPathToSavedPhotosAlbum:completionBlock:", "contents": "writeVideoAtPathToSavedPhotosAlbum:completionBlock:(${1:NSURL* videoPathURL}, completionBlock:${2:ALAssetsLibraryWriteVideoCompletionBlock completionBlock})" },  
    { "trigger": "writeabilityHandler" },  
    { "trigger": "write:maxLength:", "contents": "write:maxLength:(${1:uint8_t* buffer}, maxLength:${2:NSUInteger len})" },  
    { "trigger": "x" },  
    { "trigger": "x" },  
    { "trigger": "xAcceleration" },  
    { "trigger": "xHeight" },  
    { "trigger": "xSize" },  
    { "trigger": "y" },  
    { "trigger": "y" },  
    { "trigger": "yAcceleration" },  
    { "trigger": "ySize" },  
    { "trigger": "yaw" },  
    { "trigger": "year" },  
    { "trigger": "yearForWeekOfYear" },  
    { "trigger": "z" },  
    { "trigger": "z" },  
    { "trigger": "zAcceleration" },  
    { "trigger": "zPosition" },  
    { "trigger": "zSize" },  
    { "trigger": "zeroSymbol" },  
    { "trigger": "zone" },  
    { "trigger": "zone" },  
    { "trigger": "zoomScale" },  
    { "trigger": "zoomToRect:animated:", "contents": "zoomToRect:animated:(${1:CGRect rect}, animated:${2:BOOL animated})" }
 	]

 }

